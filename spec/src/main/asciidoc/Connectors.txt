= Contents

[#50540553_pgfId-999166]## _March 2013_

[#50540553_pgfId-999175]## 

[#50540553_pgfId-999177]##Specification: JSR-000322 Java (TM) EE
Connector Architecture ("Specification")

[#50540553_pgfId-999178]##Version: 1.7

[#50540553_pgfId-999179]##Status: Final Release

[#50540553_pgfId-999180]##Specification Lead: Oracle America, Inc.
("Specification Lead")

[#50540553_pgfId-999181]##Release: On or before, May 31 2013

[#50540553_pgfId-999182]## 

[#50540553_pgfId-999183]##Copyright 2013 Oracle America, Inc.

[#50540553_pgfId-999184]##All rights reserved.

[#50540553_pgfId-999185]## 

======= [#50540605_pgfId-108319]##

image:conn-1.gif[image]

Contents

image:conn-2.gif[image]

======= [#50540605_pgfId-1262022]##link:conn.htm#50540556_pgfId-5529[Introduction 1–1]

{empty}[#50540605_pgfId-1262024]##link:conn.htm#50540556_pgfId-999453[1.1
Overview 1–2]

{empty}[#50540605_pgfId-1262026]##link:conn.htm#50540556_pgfId-999459[1.2
Scope 1–2]

{empty}[#50540605_pgfId-1262028]##link:conn.htm#50540556_pgfId-999471[1.3
Target Audience 1–4]

{empty}[#50540605_pgfId-1262030]##link:conn.htm#50540556_pgfId-999479[1.4
JDBC and Connector Architecture 1–4]

{empty}[#50540605_pgfId-1262032]##link:conn.htm#50540556_pgfId-999485[1.5
Relationship With Other Integration Technologies (JBI and SCA) 1–5]

{empty}[#50540605_pgfId-1262034]##link:conn.htm#50540556_pgfId-1000355[1.6
Organization 1–5]

{empty}[#50540605_pgfId-1262036]##link:conn.htm#50540556_pgfId-999489[1.7
Document Conventions 1–6]

{empty}[#50540605_pgfId-1262038]##link:conn.htm#50540556_pgfId-999496[1.8
Connector Architecture Version 1.7 Contributor Details 1–7]

{empty}[#50540605_pgfId-1262040]##link:conn.htm#50540556_pgfId-1000680[1.8.1
Expert Group Details (JSR-322) 1–7]

{empty}[#50540605_pgfId-1262042]##link:conn.htm#50540556_pgfId-1000762[1.8.2
Acknowledgements 1–7]

{empty}[#50540605_pgfId-1262044]##link:conn.htm#50540556_pgfId-1000655[1.9
Connector Architecture Version 1.6 Contributor Details 1–8]

{empty}[#50540605_pgfId-1262046]##link:conn.htm#50540556_pgfId-1000450[1.9.1
Expert Group Details (JSR-322) 1–8]

{empty}[#50540605_pgfId-1262048]##link:conn.htm#50540556_pgfId-1000040[1.9.2
Acknowledgements 1–8]

{empty}[#50540605_pgfId-1262050]##link:conn.htm#50540556_pgfId-1000466[1.10
Connector Architecture Version 1.5 Contributor Details 1–9]

{empty}[#50540605_pgfId-1262052]##link:conn.htm#50540556_pgfId-1000467[1.10.1
Expert Group Details (JSR-112) 1–9]

{empty}[#50540605_pgfId-1262054]##link:conn.htm#50540556_pgfId-999498[1.10.2
Acknowledgements 1–10]

{empty}[#50540605_pgfId-1262056]##link:conn.htm#50540556_pgfId-1000491[1.11
Connector Architecture Version 1.0 Contributor Details 1–11]

{empty}[#50540605_pgfId-1262058]##link:conn.htm#50540556_pgfId-1000496[1.11.1
Expert Group Details (JSR-16) 1–11]

{empty}[#50540605_pgfId-1262060]##link:conn.htm#50540556_pgfId-999506[1.11.2
Acknowledgements 1–11]

======= [#50540605_pgfId-1262062]##link:conn.htm#50540560_pgfId-5529[Overview 2–1]

{empty}[#50540605_pgfId-1262064]##link:conn.htm#50540560_pgfId-999452[2.1
Definitions 2–1]

{empty}[#50540605_pgfId-1262066]##link:conn.htm#50540560_pgfId-999453[2.1.1
Enterprise Information System (EIS) 2–1]

{empty}[#50540605_pgfId-1262068]##link:conn.htm#50540560_pgfId-999461[2.1.2
Connector Architecture 2–2]

{empty}[#50540605_pgfId-1262070]##link:conn.htm#50540560_pgfId-999464[2.1.3
EIS Resource 2–2]

{empty}[#50540605_pgfId-1262072]##link:conn.htm#50540560_pgfId-999469[2.1.4
Resource Manager (RM) 2–2]

{empty}[#50540605_pgfId-1262074]##link:conn.htm#50540560_pgfId-999473[2.1.5
Managed Environment 2–3]

{empty}[#50540605_pgfId-1262076]##link:conn.htm#50540560_pgfId-999478[2.1.6
Non-Managed Environment 2–3]

{empty}[#50540605_pgfId-1262078]##link:conn.htm#50540560_pgfId-999480[2.1.7
Connection 2–3]

{empty}[#50540605_pgfId-1262080]##link:conn.htm#50540560_pgfId-999482[2.1.8
Application Component 2–3]

{empty}[#50540605_pgfId-1262082]##link:conn.htm#50540560_pgfId-999484[2.1.9
Container 2–3]

{empty}[#50540605_pgfId-1262084]##link:conn.htm#50540560_pgfId-999489[2.2
Rationale 2–4]

{empty}[#50540605_pgfId-1262086]##link:conn.htm#50540560_pgfId-999491[2.2.1
System Contracts 2–4]

{empty}[#50540605_pgfId-1262088]##link:conn.htm#50540560_pgfId-999553[2.2.2
Common Client Interface 2–5]

{empty}[#50540605_pgfId-1262090]##link:conn.htm#50540560_pgfId-999560[2.3
Goals 2–6]

======= [#50540605_pgfId-1262092]##link:conn.htm#50540547_pgfId-5529[The Connector Architecture 3–1]

{empty}[#50540605_pgfId-1262094]##link:conn.htm#50540547_pgfId-999476[3.1
System Contracts 3–2]

{empty}[#50540605_pgfId-1262096]##link:conn.htm#50540547_pgfId-999508[3.2
Client API 3–5]

{empty}[#50540605_pgfId-1262098]##link:conn.htm#50540547_pgfId-999516[3.3
Requirements 3–5]

{empty}[#50540605_pgfId-1262100]##link:conn.htm#50540547_pgfId-999520[3.4
Non-Managed Environment 3–5]

{empty}[#50540605_pgfId-1262102]##link:conn.htm#50540547_pgfId-998874[3.5
Standalone Container Environment 3–6]

======= [#50540605_pgfId-1262104]##link:conn.htm#50540565_pgfId-5529[Roles and Scenarios 4–1]

{empty}[#50540605_pgfId-1262106]##link:conn.htm#50540565_pgfId-999452[4.1
Roles 4–1]

{empty}[#50540605_pgfId-1262108]##link:conn.htm#50540565_pgfId-999454[4.1.1
Resource Adapter Provider 4–1]

{empty}[#50540605_pgfId-1262110]##link:conn.htm#50540565_pgfId-999457[4.1.2
Application Server Vendor 4–2]

{empty}[#50540605_pgfId-1262112]##link:conn.htm#50540565_pgfId-999463[4.1.3
Container Provider 4–2]

{empty}[#50540605_pgfId-1262114]##link:conn.htm#50540565_pgfId-999475[4.1.4
Application Component Provider 4–3]

{empty}[#50540605_pgfId-1262116]##link:conn.htm#50540565_pgfId-999482[4.1.5
Enterprise Tools Vendors 4–3]

{empty}[#50540605_pgfId-1262118]##link:conn.htm#50540565_pgfId-999492[4.1.6
Application Assembler 4–4]

{empty}[#50540605_pgfId-1262120]##link:conn.htm#50540565_pgfId-999495[4.1.7
Deployer 4–4]

{empty}[#50540605_pgfId-1262122]##link:conn.htm#50540565_pgfId-999499[4.1.8
System Administrator 4–5]

{empty}[#50540605_pgfId-1262124]##link:conn.htm#50540565_pgfId-999503[4.2
Scenario: Integrated Purchase Order System 4–5]

{empty}[#50540605_pgfId-1262126]##link:conn.htm#50540565_pgfId-999551[4.3
Scenario: Business Integration 4–8]

======= [#50540605_pgfId-1262128]##link:conn.htm#50540558_pgfId-5529[Lifecycle Management 5–1]

{empty}[#50540605_pgfId-1262130]##link:conn.htm#50540558_pgfId-999452[5.1
Overview 5–1]

{empty}[#50540605_pgfId-1262132]##link:conn.htm#50540558_pgfId-999455[5.2
Goals 5–2]

{empty}[#50540605_pgfId-1262134]##link:conn.htm#50540558_pgfId-1000127[5.3
Lifecycle Management Model 5–3]

{empty}[#50540605_pgfId-1262136]##link:conn.htm#50540558_pgfId-999527[5.3.1
ResourceAdapter JavaBean and Bootstrapping a Resource Adapter Instance
5–4]

{empty}[#50540605_pgfId-1262138]##link:conn.htm#50540558_pgfId-999622[5.3.2
ManagedConnectionFactory JavaBean and Outbound Communication 5–8]

{empty}[#50540605_pgfId-1262140]##link:conn.htm#50540558_pgfId-999646[5.3.3
ActivationSpec JavaBean and Inbound Communication 5–9]

{empty}[#50540605_pgfId-1262142]##link:conn.htm#50540558_pgfId-999669[5.3.4
Resource Adapter Shutdown Procedure 5–10]

{empty}[#50540605_pgfId-1262144]##link:conn.htm#50540558_pgfId-999674[5.3.4.1
Phase One 5–10]

{empty}[#50540605_pgfId-1262146]##link:conn.htm#50540558_pgfId-999677[5.3.4.2
Phase Two 5–11]

{empty}[#50540605_pgfId-1262148]##link:conn.htm#50540558_pgfId-999683[5.3.5
Requirements 5–11]

{empty}[#50540605_pgfId-1262150]##link:conn.htm#50540558_pgfId-1000160[5.3.6
Resource Adapter Implementation Guidelines 5–13]

{empty}[#50540605_pgfId-1262152]##link:conn.htm#50540558_pgfId-999693[5.3.7
JavaBean Configuration and Deployment 5–13]

{empty}[#50540605_pgfId-1262154]##link:conn.htm#50540558_pgfId-999701[5.3.7.1
ResourceAdapter JavaBean Instance Configuration 5–14]

{empty}[#50540605_pgfId-1262156]##link:conn.htm#50540558_pgfId-999705[5.3.7.2
Resource Adapter Deployment 5–14]

{empty}[#50540605_pgfId-1262158]##link:conn.htm#50540558_pgfId-999707[5.3.7.3
ManagedConnectionFactory JavaBean Instance Configuration 5–14]

{empty}[#50540605_pgfId-1262160]##link:conn.htm#50540558_pgfId-999713[5.3.7.4
ActivationSpec JavaBean Instance Configuration 5–15]

{empty}[#50540605_pgfId-1262162]##link:conn.htm#50540558_pgfId-999719[5.3.7.5
JavaBean Validation 5–15]

{empty}[#50540605_pgfId-1262164]##link:conn.htm#50540558_pgfId-1000688[5.3.7.6
Configuration Property Attributes 5–16]

{empty}[#50540605_pgfId-1262166]##link:conn.htm#50540558_pgfId-1000950[5.3.7.7
Resource Adapter Implementation Guidelines 5–17]

{empty}[#50540605_pgfId-1262168]##link:conn.htm#50540558_pgfId-999794[5.3.8
Lifecycle Management in a Non-Managed Environment 5–18]

{empty}[#50540605_pgfId-1262170]##link:conn.htm#50540558_pgfId-999796[5.3.9
A Sample Resource Adapter Implementation 5–19]

======= [#50540605_pgfId-1262172]##link:conn.htm#50540552_pgfId-5529[Connection Management 6–1]

{empty}[#50540605_pgfId-1262174]##link:conn.htm#50540552_pgfId-999459[6.1
Overview 6–1]

{empty}[#50540605_pgfId-1262176]##link:conn.htm#50540552_pgfId-999462[6.2
Goals 6–1]

{empty}[#50540605_pgfId-1262178]##link:conn.htm#50540552_pgfId-999469[6.3
Architecture: Connection Management 6–2]

{empty}[#50540605_pgfId-1262180]##link:conn.htm#50540552_pgfId-999474[6.3.1
Overview: Managed Application Scenario 6–2]

{empty}[#50540605_pgfId-1262182]##link:conn.htm#50540552_pgfId-1003269[6.4
Application Programming Model 6–5]

{empty}[#50540605_pgfId-1262184]##link:conn.htm#50540552_pgfId-999570[6.4.1
Managed Application Scenario 6–5]

{empty}[#50540605_pgfId-1262186]##link:conn.htm#50540552_pgfId-999608[6.4.2
Non-Managed Application Scenario 6–6]

{empty}[#50540605_pgfId-1262188]##link:conn.htm#50540552_pgfId-1002314[6.4.3
Guidelines 6–7]

{empty}[#50540605_pgfId-1262190]##link:conn.htm#50540552_pgfId-999610[6.5
Interface/Class Specification 6–7]

{empty}[#50540605_pgfId-1262192]##link:conn.htm#50540552_pgfId-1002726[6.5.1
ConnectionFactory and Connection 6–10]

{empty}[#50540605_pgfId-1262194]##link:conn.htm#50540552_pgfId-999763[6.5.1.1
Requirements 6–11]

{empty}[#50540605_pgfId-1262196]##link:conn.htm#50540552_pgfId-999789[6.5.1.2
ConnectionRequestInfo 6–12]

{empty}[#50540605_pgfId-1262198]##link:conn.htm#50540552_pgfId-999800[6.5.1.3
Additional Requirements 6–13]

{empty}[#50540605_pgfId-1262200]##link:conn.htm#50540552_pgfId-999807[6.5.2
ConnectionManager 6–14]

{empty}[#50540605_pgfId-1262202]##link:conn.htm#50540552_pgfId-999809[6.5.2.1
Interface 6–14]

{empty}[#50540605_pgfId-1262204]##link:conn.htm#50540552_pgfId-999821[6.5.2.2
Requirements 6–15]

{empty}[#50540605_pgfId-1262206]##link:conn.htm#50540552_pgfId-999857[6.5.3
ManagedConnectionFactory 6–16]

{empty}[#50540605_pgfId-1262208]##link:conn.htm#50540552_pgfId-999859[6.5.3.1
Interface 6–17]

{empty}[#50540605_pgfId-1262210]##link:conn.htm#50540552_pgfId-999898[6.5.3.2
Requirements 6–18]

{empty}[#50540605_pgfId-1262212]##link:conn.htm#50540552_pgfId-999905[6.5.3.3
Connection Pool Implementation 6–19]

{empty}[#50540605_pgfId-1262214]##link:conn.htm#50540552_pgfId-999911[6.5.3.4
Detecting Invalid Connections 6–20]

{empty}[#50540605_pgfId-1262216]##link:conn.htm#50540552_pgfId-999919[6.5.3.5
Requirement for XA Recovery 6–20]

{empty}[#50540605_pgfId-1262218]##link:conn.htm#50540552_pgfId-999929[6.5.4
ManagedConnection 6–20]

{empty}[#50540605_pgfId-1262220]##link:conn.htm#50540552_pgfId-999939[6.5.4.1
Interface 6–22]

{empty}[#50540605_pgfId-1262222]##link:conn.htm#50540552_pgfId-999969[6.5.4.2
Connection Sharing and Multiple Connection Handles 6–23]

{empty}[#50540605_pgfId-1262224]##link:conn.htm#50540552_pgfId-1002611[6.5.4.3
Connection Matching Contract 6–24]

{empty}[#50540605_pgfId-1262226]##link:conn.htm#50540552_pgfId-999988[6.5.4.4
Cleanup of ManagedConnection 6–24]

{empty}[#50540605_pgfId-1262228]##link:conn.htm#50540552_pgfId-999996[6.5.4.5
Requirements 6–25]

{empty}[#50540605_pgfId-1262230]##link:conn.htm#50540552_pgfId-999999[6.5.5
ManagedConnectionMetaData 6–25]

{empty}[#50540605_pgfId-1262232]##link:conn.htm#50540552_pgfId-1000001[6.5.5.1
Interface 6–25]

{empty}[#50540605_pgfId-1262234]##link:conn.htm#50540552_pgfId-1000008[6.5.5.2
Requirements 6–26]

{empty}[#50540605_pgfId-1262236]##link:conn.htm#50540552_pgfId-1000010[6.5.6
ConnectionEventListener 6–26]

{empty}[#50540605_pgfId-1262238]##link:conn.htm#50540552_pgfId-1000016[6.5.6.1
Interface 6–26]

{empty}[#50540605_pgfId-1262240]##link:conn.htm#50540552_pgfId-1000035[6.5.7
ConnectionEvent 6–27]

{empty}[#50540605_pgfId-1262242]##link:conn.htm#50540552_pgfId-1000050[6.6
Error Logging and Tracing 6–28]

{empty}[#50540605_pgfId-1262244]##link:conn.htm#50540552_pgfId-1000052[6.6.1
ManagedConnectionFactory 6–28]

{empty}[#50540605_pgfId-1262246]##link:conn.htm#50540552_pgfId-1000067[6.6.2
ManagedConnection 6–29]

{empty}[#50540605_pgfId-1262248]##link:conn.htm#50540552_pgfId-1000078[6.7
Object Diagram 6–30]

{empty}[#50540605_pgfId-1262250]##link:conn.htm#50540552_pgfId-1003043[6.8
Illustrative Scenarios 6–32]

{empty}[#50540605_pgfId-1262252]##link:conn.htm#50540552_pgfId-1000170[6.8.1
Scenario: Connection Pool Management 6–32]

{empty}[#50540605_pgfId-1262254]##link:conn.htm#50540552_pgfId-1000276[6.8.2
Scenario: Connection Matching 6–36]

{empty}[#50540605_pgfId-1262256]##link:conn.htm#50540552_pgfId-1000374[6.8.3
Scenario: Connection Event Notifications and Connection Close 6–39]

{empty}[#50540605_pgfId-1262258]##link:conn.htm#50540552_pgfId-1000392[6.8.3.1
Connection Cleanup 6–40]

{empty}[#50540605_pgfId-1262260]##link:conn.htm#50540552_pgfId-1000394[6.8.3.2
Connection Destroy 6–40]

{empty}[#50540605_pgfId-1262262]##link:conn.htm#50540552_pgfId-1000458[6.9
Architecture: Non-Managed Environment 6–42]

{empty}[#50540605_pgfId-1262264]##link:conn.htm#50540552_pgfId-1000505[6.9.1
Scenario: Programmatic Access to ConnectionFactory 6–43]

{empty}[#50540605_pgfId-1262266]##link:conn.htm#50540552_pgfId-1000541[6.9.2
Scenario: Connection Creation in Non-Managed Application Scenario 6–45]

{empty}[#50540605_pgfId-1262268]##link:conn.htm#50540552_pgfId-1000598[6.10
Requirements 6–47]

{empty}[#50540605_pgfId-1262270]##link:conn.htm#50540552_pgfId-1000600[6.10.1
Resource Adapter 6–47]

{empty}[#50540605_pgfId-1262272]##link:conn.htm#50540552_pgfId-1000618[6.10.2
Application Server 6–48]

======= [#50540605_pgfId-1262274]##link:conn.htm#50540572_pgfId-5529[Transaction Management 7–1]

{empty}[#50540605_pgfId-1262276]##link:conn.htm#50540572_pgfId-999463[7.1
Overview 7–2]

{empty}[#50540605_pgfId-1262278]##link:conn.htm#50540572_pgfId-999501[7.2
Transaction Management Scenarios 7–3]

{empty}[#50540605_pgfId-1262280]##link:conn.htm#50540572_pgfId-999503[7.2.1
Transactions Across Multiple Resource Managers 7–4]

{empty}[#50540605_pgfId-1262282]##link:conn.htm#50540572_pgfId-999547[7.2.2
Local Transaction Management 7–5]

{empty}[#50540605_pgfId-1262284]##link:conn.htm#50540572_pgfId-999588[7.3
Transaction Management Contract 7–6]

{empty}[#50540605_pgfId-1262286]##link:conn.htm#50540572_pgfId-999653[7.3.1
Interface: ManagedConnection 7–9]

{empty}[#50540605_pgfId-1262288]##link:conn.htm#50540572_pgfId-999706[7.3.2
Interface: XAResource 7–11]

{empty}[#50540605_pgfId-1262290]##link:conn.htm#50540572_pgfId-1004170[7.3.2.1
Implementation 7–11]

{empty}[#50540605_pgfId-1262292]##link:conn.htm#50540572_pgfId-999733[7.3.3
Interface: LocalTransaction 7–12]

{empty}[#50540605_pgfId-1262294]##link:conn.htm#50540572_pgfId-999745[7.4
Relationship to JTA and JTS 7–12]

{empty}[#50540605_pgfId-1262296]##link:conn.htm#50540572_pgfId-999751[7.4.1
JTA Interfaces 7–12]

{empty}[#50540605_pgfId-1262298]##link:conn.htm#50540572_pgfId-999755[7.5
Object Diagram 7–13]

{empty}[#50540605_pgfId-1262300]##link:conn.htm#50540572_pgfId-999831[7.6
XAResource-based Transaction Contract 7–15]

{empty}[#50540605_pgfId-1262302]##link:conn.htm#50540572_pgfId-999834[7.6.1
Scenarios Supported 7–16]

{empty}[#50540605_pgfId-1262304]##link:conn.htm#50540572_pgfId-1002793[7.6.2
Resource Adapter Requirements 7–17]

{empty}[#50540605_pgfId-1262306]##link:conn.htm#50540572_pgfId-999887[7.6.2.1
General 7–17]

{empty}[#50540605_pgfId-1262308]##link:conn.htm#50540572_pgfId-999891[7.6.2.2
One-phase Commit 7–17]

{empty}[#50540605_pgfId-1262310]##link:conn.htm#50540572_pgfId-999899[7.6.2.3
Two-phase Commit 7–18]

{empty}[#50540605_pgfId-1262312]##link:conn.htm#50540572_pgfId-999905[7.6.2.4
Transaction Association and Calling Protocol 7–18]

{empty}[#50540605_pgfId-1262314]##link:conn.htm#50540572_pgfId-999911[7.6.2.5
Unilateral Roll-back 7–19]

{empty}[#50540605_pgfId-1262316]##link:conn.htm#50540572_pgfId-999914[7.6.2.6
Read-Only Optimization 7–19]

{empty}[#50540605_pgfId-1262318]##link:conn.htm#50540572_pgfId-999916[7.6.2.7
XID Support 7–19]

{empty}[#50540605_pgfId-1262320]##link:conn.htm#50540572_pgfId-999919[7.6.2.8
Support for Failure Recovery 7–19]

{empty}[#50540605_pgfId-1262322]##link:conn.htm#50540572_pgfId-999925[7.6.3
Transaction Manager Requirements 7–20]

{empty}[#50540605_pgfId-1262324]##link:conn.htm#50540572_pgfId-999930[7.6.3.1
Interfaces 7–20]

{empty}[#50540605_pgfId-1262326]##link:conn.htm#50540572_pgfId-999932[7.6.3.2
XID Requirements 7–20]

{empty}[#50540605_pgfId-1262328]##link:conn.htm#50540572_pgfId-999937[7.6.3.3
One-phase Commit Optimization 7–20]

{empty}[#50540605_pgfId-1262330]##link:conn.htm#50540572_pgfId-1002757[7.6.3.4
Implementation Options 7–20]

{empty}[#50540605_pgfId-1262332]##link:conn.htm#50540572_pgfId-999942[7.6.4
Scenario: Transactional Setup for a ManagedConnection 7–21]

{empty}[#50540605_pgfId-1262334]##link:conn.htm#50540572_pgfId-1000026[7.6.5
Scenario: Connection Close and JTA Transactional Cleanup 7–24]

{empty}[#50540605_pgfId-1262336]##link:conn.htm#50540572_pgfId-1000101[7.6.6
OID: Transaction Completion 7–27]

{empty}[#50540605_pgfId-1262338]##link:conn.htm#50540572_pgfId-1000149[7.7
Local Transaction Management Contract 7–28]

{empty}[#50540605_pgfId-1262340]##link:conn.htm#50540572_pgfId-1000164[7.7.1
Interface: LocalTransaction 7–29]

{empty}[#50540605_pgfId-1262342]##link:conn.htm#50540572_pgfId-1000169[7.7.2
Interface: ConnectionEventListener 7–29]

{empty}[#50540605_pgfId-1262344]##link:conn.htm#50540572_pgfId-1000185[7.7.2.1
Requirements 7–30]

{empty}[#50540605_pgfId-1262346]##link:conn.htm#50540572_pgfId-1000194[7.8
Scenarios: Local Transaction Management 7–30]

{empty}[#50540605_pgfId-1262348]##link:conn.htm#50540572_pgfId-1000197[7.8.1
Local Transaction Cleanup 7–31]

{empty}[#50540605_pgfId-1262350]##link:conn.htm#50540572_pgfId-1000202[7.8.2
Component Termination 7–31]

{empty}[#50540605_pgfId-1262352]##link:conn.htm#50540572_pgfId-1000206[7.8.3
Transaction Interleaving 7–32]

{empty}[#50540605_pgfId-1262354]##link:conn.htm#50540572_pgfId-1000209[7.8.3.1
Scenario 7–32]

{empty}[#50540605_pgfId-1262356]##link:conn.htm#50540572_pgfId-1000214[7.9
Connection Sharing 7–32]

{empty}[#50540605_pgfId-1262358]##link:conn.htm#50540572_pgfId-1000254[7.9.1
Sharing Violation Detection 7–34]

{empty}[#50540605_pgfId-1262360]##link:conn.htm#50540572_pgfId-1000260[7.9.1.1
Scenario 1 7–34]

{empty}[#50540605_pgfId-1262362]##link:conn.htm#50540572_pgfId-1000262[7.9.1.2
Scenario 2 7–34]

{empty}[#50540605_pgfId-1262364]##link:conn.htm#50540572_pgfId-1000267[7.10
Transaction Scenarios 7–35]

{empty}[#50540605_pgfId-1262366]##link:conn.htm#50540572_pgfId-1000269[7.10.1
Requirements 7–35]

{empty}[#50540605_pgfId-1262368]##link:conn.htm#50540572_pgfId-1000290[7.10.2
Illustrative Scenarios 7–37]

{empty}[#50540605_pgfId-1262370]##link:conn.htm#50540572_pgfId-1000301[7.10.3
Scenario: Local Transaction 7–38]

{empty}[#50540605_pgfId-1262372]##link:conn.htm#50540572_pgfId-1000429[7.11
Connection Association 7–42]

{empty}[#50540605_pgfId-1262374]##link:conn.htm#50540572_pgfId-1000431[7.11.1
Scenario 7–42]

{empty}[#50540605_pgfId-1262376]##link:conn.htm#50540572_pgfId-1000484[7.11.2
Connection Association 7–43]

{empty}[#50540605_pgfId-1262378]##link:conn.htm#50540572_pgfId-1000494[7.11.3
Requirements 7–44]

{empty}[#50540605_pgfId-1262380]##link:conn.htm#50540572_pgfId-1000498[7.12
Local Transaction Optimization 7–45]

{empty}[#50540605_pgfId-1262382]##link:conn.htm#50540572_pgfId-1002209[7.12.1
Requirements 7–45]

{empty}[#50540605_pgfId-1262384]##link:conn.htm#50540572_pgfId-1002448[7.13
Runtime Transaction Support Level Specification 7–45]

{empty}[#50540605_pgfId-1262386]##link:conn.htm#50540572_pgfId-1002530[7.14
Interface: TransactionSynchronizationRegistry 7–47]

{empty}[#50540605_pgfId-1262388]##link:conn.htm#50540572_pgfId-1002211[7.15
Requirements 7–47]

{empty}[#50540605_pgfId-1262390]##link:conn.htm#50540572_pgfId-1000511[7.15.1
Resource Adapter 7–47]

{empty}[#50540605_pgfId-1262392]##link:conn.htm#50540572_pgfId-1000524[7.15.1.1
Auto Commit 7–48]

{empty}[#50540605_pgfId-1262394]##link:conn.htm#50540572_pgfId-1000529[7.15.2
Application Server 7–48]

{empty}[#50540605_pgfId-1262396]##link:conn.htm#50540572_pgfId-1000542[7.16
Connection Optimizations 7–49]

{empty}[#50540605_pgfId-1262398]##link:conn.htm#50540572_pgfId-1000546[7.16.1
Lazy Connection Association Optimization 7–49]

{empty}[#50540605_pgfId-1262400]##link:conn.htm#50540572_pgfId-1002781[7.16.1.1
API Additions 7–54]

{empty}[#50540605_pgfId-1262402]##link:conn.htm#50540572_pgfId-1000670[7.16.2
Lazy Transaction Enlistment Optimization 7–55]

{empty}[#50540605_pgfId-1262404]##link:conn.htm#50540572_pgfId-1000676[7.16.2.1
API Additions 7–56]

======= [#50540605_pgfId-1262406]##link:conn.htm#50540567_pgfId-5529[Security Architecture 8–1]

{empty}[#50540605_pgfId-1262408]##link:conn.htm#50540567_pgfId-999459[8.1
Overview 8–1]

{empty}[#50540605_pgfId-1262410]##link:conn.htm#50540567_pgfId-999464[8.2
Goals 8–1]

{empty}[#50540605_pgfId-1262412]##link:conn.htm#50540567_pgfId-999475[8.3
Terminology 8–2]

{empty}[#50540605_pgfId-1262414]##link:conn.htm#50540567_pgfId-999498[8.4
Application Security Model 8–3]

{empty}[#50540605_pgfId-1262416]##link:conn.htm#50540567_pgfId-999505[8.4.1
Scenario: Container-Managed Sign-on 8–4]

{empty}[#50540605_pgfId-1262418]##link:conn.htm#50540567_pgfId-999521[8.4.2
Scenario: Component-Managed Sign-on 8–5]

{empty}[#50540605_pgfId-1262420]##link:conn.htm#50540567_pgfId-999538[8.5
EIS Sign-on 8–5]

{empty}[#50540605_pgfId-1262422]##link:conn.htm#50540567_pgfId-999545[8.5.1
Authentication Mechanism 8–6]

{empty}[#50540605_pgfId-1262424]##link:conn.htm#50540567_pgfId-999555[8.5.2
Resource Principal 8–6]

{empty}[#50540605_pgfId-1262426]##link:conn.htm#50540567_pgfId-999570[8.5.3
Authorization Model 8–7]

{empty}[#50540605_pgfId-1262428]##link:conn.htm#50540567_pgfId-999576[8.5.4
Secure Association 8–8]

{empty}[#50540605_pgfId-1262430]##link:conn.htm#50540567_pgfId-999586[8.6
Roles and Responsibilities 8–9]

{empty}[#50540605_pgfId-1262432]##link:conn.htm#50540567_pgfId-999590[8.6.1
Application Component Provider 8–9]

{empty}[#50540605_pgfId-1262434]##link:conn.htm#50540567_pgfId-999596[8.6.2
Deployer 8–9]

{empty}[#50540605_pgfId-1262436]##link:conn.htm#50540567_pgfId-999606[8.6.3
Application Server 8–10]

{empty}[#50540605_pgfId-1262438]##link:conn.htm#50540567_pgfId-999616[8.6.4
EIS Vendor 8–11]

{empty}[#50540605_pgfId-1262440]##link:conn.htm#50540567_pgfId-999618[8.6.5
Resource Adapter Provider 8–11]

{empty}[#50540605_pgfId-1262442]##link:conn.htm#50540567_pgfId-999628[8.6.6
System Administrator 8–11]

======= [#50540605_pgfId-1262444]##link:conn.htm#50540568_pgfId-5529[Security Contract 9–1]

{empty}[#50540605_pgfId-1262446]##link:conn.htm#50540568_pgfId-999472[9.1
Security Contract 9–1]

{empty}[#50540605_pgfId-1262448]##link:conn.htm#50540568_pgfId-999481[9.1.1
Interfaces and Classes 9–1]

{empty}[#50540605_pgfId-1262450]##link:conn.htm#50540568_pgfId-999483[9.1.2
Subject 9–2]

{empty}[#50540605_pgfId-1262452]##link:conn.htm#50540568_pgfId-999492[9.1.3
Resource Principal 9–2]

{empty}[#50540605_pgfId-1262454]##link:conn.htm#50540568_pgfId-999502[9.1.4
GenericCredential 9–3]

{empty}[#50540605_pgfId-1262456]##link:conn.htm#50540568_pgfId-999517[9.1.4.1
Interface 9–4]

{empty}[#50540605_pgfId-1262458]##link:conn.htm#50540568_pgfId-999536[9.1.4.2
Implementation 9–4]

{empty}[#50540605_pgfId-1262460]##link:conn.htm#50540568_pgfId-999541[9.1.5
GSSCredential 9–5]

{empty}[#50540605_pgfId-1262462]##link:conn.htm#50540568_pgfId-999543[9.1.5.1
Implementation 9–5]

{empty}[#50540605_pgfId-1262464]##link:conn.htm#50540568_pgfId-999548[9.1.6
PasswordCredential 9–5]

{empty}[#50540605_pgfId-1262466]##link:conn.htm#50540568_pgfId-999570[9.1.7
ConnectionManager 9–7]

{empty}[#50540605_pgfId-1262468]##link:conn.htm#50540568_pgfId-999624[9.1.8
ManagedConnectionFactory 9–9]

{empty}[#50540605_pgfId-1262470]##link:conn.htm#50540568_pgfId-999638[9.1.8.1
Contract for the Application Server 9–10]

{empty}[#50540605_pgfId-1262472]##link:conn.htm#50540568_pgfId-999687[9.1.8.2
Contract for Resource Adapter 9–12]

{empty}[#50540605_pgfId-1262474]##link:conn.htm#50540568_pgfId-999704[9.1.9
ManagedConnection 9–14]

{empty}[#50540605_pgfId-1262476]##link:conn.htm#50540568_pgfId-999729[9.2
Requirements 9–15]

{empty}[#50540605_pgfId-1262478]##link:conn.htm#50540568_pgfId-999731[9.2.1
Resource Adapter 9–15]

{empty}[#50540605_pgfId-1262480]##link:conn.htm#50540568_pgfId-999740[9.2.2
Application Server 9–15]

======= [#50540605_pgfId-1262482]##link:conn.htm#50540573_pgfId-5529[Work Management 10–1]

{empty}[#50540605_pgfId-1262484]##link:conn.htm#50540573_pgfId-999459[10.1
Overview 10–1]

{empty}[#50540605_pgfId-1262486]##link:conn.htm#50540573_pgfId-999469[10.2
Goals 10–2]

{empty}[#50540605_pgfId-1262488]##link:conn.htm#50540573_pgfId-999473[10.3
Work Management Model 10–2]

{empty}[#50540605_pgfId-1262490]##link:conn.htm#50540573_pgfId-999478[10.3.1
Requirements 10–4]

{empty}[#50540605_pgfId-1262492]##link:conn.htm#50540573_pgfId-999735[10.3.2
Work Interface 10–8]

{empty}[#50540605_pgfId-1262494]##link:conn.htm#50540573_pgfId-999748[10.3.3
WorkManager Interface 10–9]

{empty}[#50540605_pgfId-1262496]##link:conn.htm#50540573_pgfId-999780[10.3.3.1
Work Submit 10–11]

{empty}[#50540605_pgfId-1262498]##link:conn.htm#50540573_pgfId-999822[10.3.3.2
Work Accepted 10–12]

{empty}[#50540605_pgfId-1262500]##link:conn.htm#50540573_pgfId-999825[10.3.3.3
Work Rejected 10–12]

{empty}[#50540605_pgfId-1262502]##link:conn.htm#50540573_pgfId-999831[10.3.3.4
Work Started 10–12]

{empty}[#50540605_pgfId-1262504]##link:conn.htm#50540573_pgfId-999833[10.3.3.5
Work Completed 10–12]

{empty}[#50540605_pgfId-1262506]##link:conn.htm#50540573_pgfId-999839[10.3.3.6
Requirements 10–13]

{empty}[#50540605_pgfId-1262508]##link:conn.htm#50540573_pgfId-999945[10.3.4
WorkListener Interface and WorkEvent Class 10–16]

{empty}[#50540605_pgfId-1262510]##link:conn.htm#50540573_pgfId-999987[10.3.4.1
Requirements 10–18]

{empty}[#50540605_pgfId-1262512]##link:conn.htm#50540573_pgfId-999992[10.3.5
ExecutionContext Class 10–18]

{empty}[#50540605_pgfId-1262514]##link:conn.htm#50540573_pgfId-1000066[10.3.6
Resource Adapter Thread Usage Recommendations 10–20]

{empty}[#50540605_pgfId-1262516]##link:conn.htm#50540573_pgfId-1000071[10.3.7
Periodic Execution of Work Instances 10–20]

{empty}[#50540605_pgfId-1262518]##link:conn.htm#50540573_pgfId-1000116[10.3.8
Illustration: Using a Work Instance to Listen on Multiple Network
Endpoints 10–22]

{empty}[#50540605_pgfId-1262520]##link:conn.htm#50540573_pgfId-1002668[10.3.9
Work Management in a Non-Managed Environment 10–22]

{empty}[#50540605_pgfId-1262522]##link:conn.htm#50540573_pgfId-1002705[10.3.10
Resource Adapter association 10–22]

{empty}[#50540605_pgfId-1262524]##link:conn.htm#50540573_pgfId-1002699[10.3.11
Distributed Work processing 10–23]

{empty}[#50540605_pgfId-1262526]##link:conn.htm#50540573_pgfId-1002345[10.3.11.1
DistributableWork Interface 10–23]

{empty}[#50540605_pgfId-1262528]##link:conn.htm#50540573_pgfId-1002800[10.3.11.2
DistributableWorkManager Interface 10–24]

{empty}[#50540605_pgfId-1262530]##link:conn.htm#50540573_pgfId-1003597[10.3.11.3
DistributableWork Submission and Processing 10–24]

======= [#50540605_pgfId-1262532]##link:conn.htm#50540613_pgfId-998513[Generic Work Context 11–1]

{empty}[#50540605_pgfId-1262534]##link:conn.htm#50540613_pgfId-998521[11.1
Overview 11–1]

{empty}[#50540605_pgfId-1262536]##link:conn.htm#50540613_pgfId-1004052[11.2
Goals 11–2]

{empty}[#50540605_pgfId-1262538]##link:conn.htm#50540613_pgfId-998555[11.3
Generic Work Context Model 11–2]

{empty}[#50540605_pgfId-1262540]##link:conn.htm#50540613_pgfId-998567[11.3.1
Standard and Custom Work Contexts 11–3]

{empty}[#50540605_pgfId-1262542]##link:conn.htm#50540613_pgfId-998597[11.3.2
Requirements 11–4]

{empty}[#50540605_pgfId-1262544]##link:conn.htm#50540613_pgfId-999275[11.4
WorkContextProvider and WorkContext Interface 11–8]

{empty}[#50540605_pgfId-1262546]##link:conn.htm#50540613_pgfId-999875[11.4.1
Indicating Support for a WorkContext Type 11–11]

{empty}[#50540605_pgfId-1262548]##link:conn.htm#50540613_pgfId-999881[11.4.2
Checking Support for a WorkContext Type 11–11]

{empty}[#50540605_pgfId-1262550]##link:conn.htm#50540613_pgfId-999917[11.4.3
Handling Errors During Context Assignment 11–12]

{empty}[#50540605_pgfId-1262552]##link:conn.htm#50540613_pgfId-999951[11.5
TransactionContext Class 11–14]

{empty}[#50540605_pgfId-1262554]##link:conn.htm#50540613_pgfId-1001981[11.6
HintsContext Interface 11–15]

{empty}[#50540605_pgfId-1262556]##link:conn.htm#50540613_pgfId-1002287[11.6.1
Standard Hints 11–16]

{empty}[#50540605_pgfId-1262558]##link:conn.htm#50540613_pgfId-1002298[11.6.1.1
Work Name Hint 11–16]

{empty}[#50540605_pgfId-1262560]##link:conn.htm#50540613_pgfId-1002301[11.6.1.2
Long-running Work instance Hint 11–16]

{empty}[#50540605_pgfId-1262562]##link:conn.htm#50540613_pgfId-999974[11.7
WorkContextLifecycleListener Interface 11–17]

{empty}[#50540605_pgfId-1262564]##link:conn.htm#50540613_pgfId-1000543[11.8
Illustrative Example 11–19]

======= [#50540605_pgfId-1262566]##link:conn.htm#50540555_pgfId-5529[Inbound Communicaton 12–1]

{empty}[#50540605_pgfId-1262568]##link:conn.htm#50540555_pgfId-999468[12.1
Overview 12–1]

{empty}[#50540605_pgfId-1262570]##link:conn.htm#50540555_pgfId-999513[12.2
An Illustrative Use Case 12–2]

======= [#50540605_pgfId-1262572]##link:conn.htm#50540559_pgfId-5529[Message Inflow 13–1]

{empty}[#50540605_pgfId-1262574]##link:conn.htm#50540559_pgfId-999459[13.1
Overview 13–1]

{empty}[#50540605_pgfId-1262576]##link:conn.htm#50540559_pgfId-999514[13.2
Goals 13–3]

{empty}[#50540605_pgfId-1262578]##link:conn.htm#50540559_pgfId-999517[13.3
Message Inflow Model 13–4]

{empty}[#50540605_pgfId-1262580]##link:conn.htm#50540559_pgfId-999702[13.4
Endpoint Deployment 13–9]

{empty}[#50540605_pgfId-1262582]##link:conn.htm#50540559_pgfId-999751[13.4.1
Message Endpoint 13–10]

{empty}[#50540605_pgfId-1262584]##link:conn.htm#50540559_pgfId-999789[13.4.2
Resource Adapter 13–11]

{empty}[#50540605_pgfId-1262586]##link:conn.htm#50540559_pgfId-999792[13.4.2.1
List of Supported Message Listener Types 13–12]

{empty}[#50540605_pgfId-1262588]##link:conn.htm#50540559_pgfId-999794[13.4.2.2
ActivationSpec JavaBean 13–12]

{empty}[#50540605_pgfId-1262590]##link:conn.htm#50540559_pgfId-999803[13.4.2.3
Administered Objects 13–13]

{empty}[#50540605_pgfId-1262592]##link:conn.htm#50540559_pgfId-999810[13.4.2.4
Configuring Administered Objects 13–14]

{empty}[#50540605_pgfId-1262594]##link:conn.htm#50540559_pgfId-999814[13.4.3
Endpoint Deployer 13–14]

{empty}[#50540605_pgfId-1262596]##link:conn.htm#50540559_pgfId-999819[13.4.4
Application Server 13–15]

{empty}[#50540605_pgfId-1262598]##link:conn.htm#50540559_pgfId-999827[13.4.5
Message Provider 13–16]

{empty}[#50540605_pgfId-1262600]##link:conn.htm#50540559_pgfId-999909[13.4.6
Endpoint Deployment Steps 13–18]

{empty}[#50540605_pgfId-1262602]##link:conn.htm#50540559_pgfId-999919[13.4.7
Requirements 13–19]

{empty}[#50540605_pgfId-1262604]##link:conn.htm#50540559_pgfId-999928[13.4.8
Structure of a Message Listener Interface 13–19]

{empty}[#50540605_pgfId-1262606]##link:conn.htm#50540559_pgfId-999933[13.4.9
Multiple Endpoint Activations With Similar Activation Configuration
13–20]

{empty}[#50540605_pgfId-1262608]##link:conn.htm#50540559_pgfId-999935[13.4.9.1
Requirements 13–20]

{empty}[#50540605_pgfId-1262610]##link:conn.htm#50540559_pgfId-999994[13.5
Message Delivery 13–22]

{empty}[#50540605_pgfId-1262612]##link:conn.htm#50540559_pgfId-1000005[13.5.1
Sample Resource Adapter Code To Illustrate Message Delivery 13–24]

{empty}[#50540605_pgfId-1262614]##link:conn.htm#50540559_pgfId-1000082[13.5.1.1
Requirements 13–26]

{empty}[#50540605_pgfId-1262616]##link:conn.htm#50540559_pgfId-1000087[13.5.2
Message Redelivery Upon Crash Recovery 13–26]

{empty}[#50540605_pgfId-1262618]##link:conn.htm#50540559_pgfId-1000098[13.5.3
Durable Message Delivery Setup 13–27]

{empty}[#50540605_pgfId-1262620]##link:conn.htm#50540559_pgfId-1000103[13.5.4
Concurrent Delivery of Messages 13–28]

{empty}[#50540605_pgfId-1262622]##link:conn.htm#50540559_pgfId-1000108[13.5.4.1
Requirements 13–28]

{empty}[#50540605_pgfId-1262624]##link:conn.htm#50540559_pgfId-1000110[13.5.5
Delivery Semantics and Acknowledgement 13–28]

{empty}[#50540605_pgfId-1262626]##link:conn.htm#50540559_pgfId-1000114[13.5.6
Transacted Delivery (Using Container-Managed Transaction) 13–29]

{empty}[#50540605_pgfId-1262628]##link:conn.htm#50540559_pgfId-1000148[13.5.7
Non-Transacted Delivery 13–32]

{empty}[#50540605_pgfId-1262630]##link:conn.htm#50540559_pgfId-1000154[13.5.8
Transacted Delivery Using an Imported Transaction 13–32]

{empty}[#50540605_pgfId-1262632]##link:conn.htm#50540559_pgfId-1000162[13.5.9
Requirements 13–33]

{empty}[#50540605_pgfId-1262634]##link:conn.htm#50540559_pgfId-1015010[13.6
Endpoint Undeployment 13–34]

{empty}[#50540605_pgfId-1262636]##link:conn.htm#50540559_pgfId-1000449[13.7
Java Message Service (JMS) Use Case 13–38]

{empty}[#50540605_pgfId-1262638]##link:conn.htm#50540559_pgfId-1000771[13.7.1
Message-Driven Bean Asynchronously Receiving Messages 13–46]

{empty}[#50540605_pgfId-1262640]##link:conn.htm#50540559_pgfId-1000772[13.7.1.1
Message-Driven Bean Deployment 13–46]

{empty}[#50540605_pgfId-1262642]##link:conn.htm#50540559_pgfId-1000778[13.7.1.2
Message Delivery 13–46]

{empty}[#50540605_pgfId-1262644]##link:conn.htm#50540559_pgfId-1000783[13.7.1.3
Message-Driven Bean Undeployment 13–47]

{empty}[#50540605_pgfId-1262646]##link:conn.htm#50540559_pgfId-1014629[13.7.2
EJB Using JMS API to Send and Synchronously Receive Messages Via a JMS
Resource Adapter 13–47]

{empty}[#50540605_pgfId-1262648]##link:conn.htm#50540559_pgfId-1000790[13.7.2.1
Using JMS API to Send Messages 13–48]

{empty}[#50540605_pgfId-1262650]##link:conn.htm#50540559_pgfId-1000816[13.7.2.2
Java EE Component Using JMS API to Synchronously Receive Messages 13–48]

{empty}[#50540605_pgfId-1262652]##link:conn.htm#50540559_pgfId-1000841[13.8
A Non-JMS Use Case 13–49]

{empty}[#50540605_pgfId-1262654]##link:conn.htm#50540559_pgfId-1000843[13.8.1
Resource Adapter Deployment Descriptor 13–49]

{empty}[#50540605_pgfId-1262656]##link:conn.htm#50540559_pgfId-1000923[13.8.2
Resource Adapter Deployment 13–51]

{empty}[#50540605_pgfId-1262658]##link:conn.htm#50540559_pgfId-1000925[13.8.3
Message-Driven Bean Asynchronously Receiving Notifications From an EIS
13–52]

{empty}[#50540605_pgfId-1262660]##link:conn.htm#50540559_pgfId-1000926[13.8.3.1
The Message-Driven Bean Deployment Descriptor 13–52]

{empty}[#50540605_pgfId-1262662]##link:conn.htm#50540559_pgfId-1000965[13.8.4
Message-Driven Bean and Resource Adapter Activation 13–53]

{empty}[#50540605_pgfId-1262664]##link:conn.htm#50540559_pgfId-1000967[13.8.5
Message Delivery 13–53]

======= [#50540605_pgfId-1262666]##link:conn.htm#50540603_pgfId-5529[EJB Invocation 14–1]

{empty}[#50540605_pgfId-1262668]##link:conn.htm#50540603_pgfId-999452[14.1
Overview 14–1]

{empty}[#50540605_pgfId-1262670]##link:conn.htm#50540603_pgfId-999459[14.2
EJB Invocation Model 14–2]

{empty}[#50540605_pgfId-1262672]##link:conn.htm#50540603_pgfId-999509[14.3
An Illustrative Use Case 14–3]

{empty}[#50540605_pgfId-1262674]##link:conn.htm#50540603_pgfId-1000104[14.3.0.1
Message-Driven Bean Dispatcher Pattern 14–5]

======= [#50540605_pgfId-1262676]##link:conn.htm#50540571_pgfId-5529[Transaction Inflow 15–1]

{empty}[#50540605_pgfId-1262678]##link:conn.htm#50540571_pgfId-999459[15.1
Overview 15–1]

{empty}[#50540605_pgfId-1262680]##link:conn.htm#50540571_pgfId-999499[15.2
Goals 15–2]

{empty}[#50540605_pgfId-1262682]##link:conn.htm#50540571_pgfId-999503[15.3
Use Case Scenario 15–2]

{empty}[#50540605_pgfId-1262684]##link:conn.htm#50540571_pgfId-999539[15.4
Transaction Inflow Model 15–4]

{empty}[#50540605_pgfId-1262686]##link:conn.htm#50540571_pgfId-999560[15.4.1
Processing of Transactional Calls 15–4]

{empty}[#50540605_pgfId-1262688]##link:conn.htm#50540571_pgfId-999569[15.4.2
Transaction Completion Processing 15–5]

{empty}[#50540605_pgfId-1262690]##link:conn.htm#50540571_pgfId-999677[15.4.3
Crash Recovery Processing 15–8]

{empty}[#50540605_pgfId-1262692]##link:conn.htm#50540571_pgfId-999821[15.4.4
Requirements 15–11]

{empty}[#50540605_pgfId-1262694]##link:conn.htm#50540571_pgfId-999834[15.4.5
Non-Requirements 15–12]

{empty}[#50540605_pgfId-1262696]##link:conn.htm#50540571_pgfId-999837[15.4.6
Recommendations 15–12]

{empty}[#50540605_pgfId-1262698]##link:conn.htm#50540571_pgfId-999839[15.4.7
Transaction Inflow in a Non-Managed Environment 15–12]

======= [#50540605_pgfId-1262700]##link:conn.htm#50540614_pgfId-998451[Security Inflow 16–1]

{empty}[#50540605_pgfId-1262702]##link:conn.htm#50540614_pgfId-998738[16.1
Overview 16–1]

{empty}[#50540605_pgfId-1262704]##link:conn.htm#50540614_pgfId-998796[16.2
Goals 16–2]

{empty}[#50540605_pgfId-1262706]##link:conn.htm#50540614_pgfId-1000006[16.3
Security Inflow Model 16–3]

{empty}[#50540605_pgfId-1262708]##link:conn.htm#50540614_pgfId-998991[16.4
SecurityContext Class 16–7]

{empty}[#50540605_pgfId-1262710]##link:conn.htm#50540614_pgfId-999036[16.4.1
Establishing the Security Context 16–9]

{empty}[#50540605_pgfId-1262712]##link:conn.htm#50540614_pgfId-999087[16.4.2
Callbacks for Information from the Application Server 16–12]

{empty}[#50540605_pgfId-1262714]##link:conn.htm#50540614_pgfId-999099[16.4.3
Case 1: Identity in the Container Security Domain 16–12]

{empty}[#50540605_pgfId-1262716]##link:conn.htm#50540614_pgfId-999107[16.4.4
Case 2: Identity Translated Between Security Domains 16–14]

{empty}[#50540605_pgfId-1262718]##link:conn.htm#50540614_pgfId-999142[16.4.5
Establising a Principal as the Caller Identity 16–17]

{empty}[#50540605_pgfId-1262720]##link:conn.htm#50540614_pgfId-999152[16.4.5.1
Case A: Establishing a Single Principal as the Caller Identity 16–17]

{empty}[#50540605_pgfId-1262722]##link:conn.htm#50540614_pgfId-999157[16.4.5.2
Case B: Establishing an Unauthenticated Security Context 16–17]

{empty}[#50540605_pgfId-1262724]##link:conn.htm#50540614_pgfId-999172[16.4.6
Security Configuration Responsibilities 16–19]

{empty}[#50540605_pgfId-1262726]##link:conn.htm#50540614_pgfId-999184[16.4.7
Requirements 16–19]

{empty}[#50540605_pgfId-1262728]##link:conn.htm#50540614_pgfId-1000542[16.5
Illustrative Example 16–20]

{empty}[#50540605_pgfId-1262730]##link:conn.htm#50540614_pgfId-999198[16.5.1
Case 1: Identity in the Container Security Domain 16–20]

{empty}[#50540605_pgfId-1262732]##link:conn.htm#50540614_pgfId-999227[16.5.2
Case 2: Identity Translated Between Security Domains 16–22]

======= [#50540605_pgfId-1262734]##link:conn.htm#50540549_pgfId-5529[Common Client Interface 17–1]

{empty}[#50540605_pgfId-1262736]##link:conn.htm#50540549_pgfId-999459[17.1
Overview 17–2]

{empty}[#50540605_pgfId-1262738]##link:conn.htm#50540549_pgfId-999484[17.2
Goals 17–2]

{empty}[#50540605_pgfId-1262740]##link:conn.htm#50540549_pgfId-999493[17.3
Scenarios 17–3]

{empty}[#50540605_pgfId-1262742]##link:conn.htm#50540549_pgfId-999495[17.3.1
Enterprise Application Integration Framework 17–3]

{empty}[#50540605_pgfId-1262744]##link:conn.htm#50540549_pgfId-999529[17.3.2
Metadata Repository and API 17–4]

{empty}[#50540605_pgfId-1262746]##link:conn.htm#50540549_pgfId-999538[17.3.3
Enterprise Application Development Tool 17–4]

{empty}[#50540605_pgfId-1262748]##link:conn.htm#50540549_pgfId-999578[17.4
Common Client Interface 17–5]

{empty}[#50540605_pgfId-1262750]##link:conn.htm#50540549_pgfId-999609[17.4.1
Requirements 17–6]

{empty}[#50540605_pgfId-1262752]##link:conn.htm#50540549_pgfId-999725[17.5
Connection Interfaces 17–9]

{empty}[#50540605_pgfId-1262754]##link:conn.htm#50540549_pgfId-999727[17.5.1
ConnectionFactory 17–9]

{empty}[#50540605_pgfId-1262756]##link:conn.htm#50540549_pgfId-999754[17.5.1.1
Requirements 17–10]

{empty}[#50540605_pgfId-1262758]##link:conn.htm#50540549_pgfId-999760[17.5.2
ConnectionSpec 17–10]

{empty}[#50540605_pgfId-1262760]##link:conn.htm#50540549_pgfId-999775[17.5.3
Connection 17–11]

{empty}[#50540605_pgfId-1262762]##link:conn.htm#50540549_pgfId-999798[17.5.3.1
Auto Commit 17–13]

{empty}[#50540605_pgfId-1262764]##link:conn.htm#50540549_pgfId-999806[17.6
Interaction Interfaces 17–13]

{empty}[#50540605_pgfId-1262766]##link:conn.htm#50540549_pgfId-999808[17.6.1
Interaction 17–13]

{empty}[#50540605_pgfId-1262768]##link:conn.htm#50540549_pgfId-999833[17.6.2
InteractionSpec 17–14]

{empty}[#50540605_pgfId-1262770]##link:conn.htm#50540549_pgfId-999846[17.6.2.1
Standard Properties 17–15]

{empty}[#50540605_pgfId-1262772]##link:conn.htm#50540549_pgfId-999858[17.6.2.2
ResultSet Properties 17–16]

{empty}[#50540605_pgfId-1262774]##link:conn.htm#50540549_pgfId-999870[17.6.2.3
Additional Properties 17–16]

{empty}[#50540605_pgfId-1262776]##link:conn.htm#50540549_pgfId-999872[17.6.2.4
Implementation 17–17]

{empty}[#50540605_pgfId-1262778]##link:conn.htm#50540549_pgfId-999877[17.6.2.5
Administered Object 17–17]

{empty}[#50540605_pgfId-1262780]##link:conn.htm#50540549_pgfId-999883[17.6.2.6
Illustrative Scenario 17–17]

{empty}[#50540605_pgfId-1262782]##link:conn.htm#50540549_pgfId-999886[17.6.3
LocalTransaction 17–18]

{empty}[#50540605_pgfId-1262784]##link:conn.htm#50540549_pgfId-999898[17.6.3.1
Requirements 17–18]

{empty}[#50540605_pgfId-1262786]##link:conn.htm#50540549_pgfId-999905[17.7
Basic Metadata Interfaces 17–18]

{empty}[#50540605_pgfId-1262788]##link:conn.htm#50540549_pgfId-999907[17.7.1
ConnectionMetaData 17–19]

{empty}[#50540605_pgfId-1262790]##link:conn.htm#50540549_pgfId-999918[17.7.1.1
Implementation 17–19]

{empty}[#50540605_pgfId-1262792]##link:conn.htm#50540549_pgfId-999921[17.7.2
ResourceAdapterMetaData 17–19]

{empty}[#50540605_pgfId-1262794]##link:conn.htm#50540549_pgfId-999946[17.8
Service Endpoint Message Listener Interface 17–21]

{empty}[#50540605_pgfId-1262796]##link:conn.htm#50540549_pgfId-999954[17.9
Exception Interfaces 17–21]

{empty}[#50540605_pgfId-1262798]##link:conn.htm#50540549_pgfId-999956[17.9.1
ResourceException 17–21]

{empty}[#50540605_pgfId-1262800]##link:conn.htm#50540549_pgfId-999962[17.9.2
ResourceWarning 17–22]

{empty}[#50540605_pgfId-1262802]##link:conn.htm#50540549_pgfId-999966[17.10
Record 17–22]

{empty}[#50540605_pgfId-1262804]##link:conn.htm#50540549_pgfId-1000021[17.10.1
Component-View Contract 17–24]

{empty}[#50540605_pgfId-1262806]##link:conn.htm#50540549_pgfId-1000031[17.10.1.1
Type Mapping 17–24]

{empty}[#50540605_pgfId-1262808]##link:conn.htm#50540549_pgfId-1000036[17.10.1.2
Record Interface 17–26]

{empty}[#50540605_pgfId-1262810]##link:conn.htm#50540549_pgfId-1000125[17.10.1.3
MappedRecord and IndexedRecord Interfaces 17–28]

{empty}[#50540605_pgfId-1262812]##link:conn.htm#50540549_pgfId-1000134[17.10.1.4
RecordFactory 17–28]

{empty}[#50540605_pgfId-1262814]##link:conn.htm#50540549_pgfId-1000148[17.10.2
Interaction and Record 17–29]

{empty}[#50540605_pgfId-1262816]##link:conn.htm#50540549_pgfId-1000158[17.10.3
Resource Adapter-view Contract 17–29]

{empty}[#50540605_pgfId-1262818]##link:conn.htm#50540549_pgfId-1000163[17.10.3.1
Streamable Interface 17–30]

{empty}[#50540605_pgfId-1262820]##link:conn.htm#50540549_pgfId-1000214[17.11
ResultSet 17–31]

{empty}[#50540605_pgfId-1262822]##link:conn.htm#50540549_pgfId-1000251[17.11.1
ResultSet Interface 17–33]

{empty}[#50540605_pgfId-1262824]##link:conn.htm#50540549_pgfId-1000254[17.11.1.1
Type Mapping 17–33]

{empty}[#50540605_pgfId-1262826]##link:conn.htm#50540549_pgfId-1000258[17.11.1.2
ResultSet Types 17–33]

{empty}[#50540605_pgfId-1262828]##link:conn.htm#50540549_pgfId-1000267[17.11.1.3
Scrolling 17–34]

{empty}[#50540605_pgfId-1262830]##link:conn.htm#50540549_pgfId-1000272[17.11.1.4
Concurrency Types 17–34]

{empty}[#50540605_pgfId-1262832]##link:conn.htm#50540549_pgfId-1000279[17.11.1.5
Updatability 17–35]

{empty}[#50540605_pgfId-1262834]##link:conn.htm#50540549_pgfId-1000286[17.11.1.6
Persistence of Java Objects 17–35]

{empty}[#50540605_pgfId-1262836]##link:conn.htm#50540549_pgfId-1000288[17.11.1.7
Support for SQL Types 17–35]

{empty}[#50540605_pgfId-1262838]##link:conn.htm#50540549_pgfId-1000302[17.11.1.8
Support for Customized SQL Type Mapping 17–36]

{empty}[#50540605_pgfId-1262840]##link:conn.htm#50540549_pgfId-1000305[17.11.2
ResultSetMetaData 17–36]

{empty}[#50540605_pgfId-1262842]##link:conn.htm#50540549_pgfId-1000308[17.11.3
ResultSetInfo 17–36]

{empty}[#50540605_pgfId-1262844]##link:conn.htm#50540549_pgfId-1000350[17.12
Code Samples 17–38]

{empty}[#50540605_pgfId-1262846]##link:conn.htm#50540549_pgfId-1000353[17.12.1
Connection 17–38]

{empty}[#50540605_pgfId-1262848]##link:conn.htm#50540549_pgfId-1000363[17.12.2
InteractionSpec 17–39]

{empty}[#50540605_pgfId-1262850]##link:conn.htm#50540549_pgfId-1000370[17.12.3
Mapped Record 17–39]

{empty}[#50540605_pgfId-1262852]##link:conn.htm#50540549_pgfId-1000395[17.12.4
ResultSet 17–40]

{empty}[#50540605_pgfId-1262854]##link:conn.htm#50540549_pgfId-1000417[17.12.5
Custom Record 17–41]

======= [#50540605_pgfId-1262856]##link:conn.htm#50540619_pgfId-999100[Metadata Annotations 18–1]

{empty}[#50540605_pgfId-1262858]##link:conn.htm#50540619_pgfId-999110[18.1
Overview 18–1]

{empty}[#50540605_pgfId-1262860]##link:conn.htm#50540619_pgfId-999341[18.2
Goals 18–2]

{empty}[#50540605_pgfId-1262862]##link:conn.htm#50540619_pgfId-999413[18.3
Deployment Descriptors and Annotations 18–2]

{empty}[#50540605_pgfId-1262864]##link:conn.htm#50540619_pgfId-1000898[18.3.1
metadata-complete Deployment Descriptor Element 18–3]

{empty}[#50540605_pgfId-1262866]##link:conn.htm#50540619_pgfId-1001375[18.3.2
Merging Annotations and Deployment Descriptor 18–3]

{empty}[#50540605_pgfId-1262868]##link:conn.htm#50540619_pgfId-1001430[18.3.3
Annotation Processing Requirements of Superclasses 18–5]

{empty}[#50540605_pgfId-1262870]##link:conn.htm#50540619_pgfId-1000956[18.4
@Connector 18–6]

{empty}[#50540605_pgfId-1262872]##link:conn.htm#50540619_pgfId-1001079[18.4.1
Implementing the ResourceAdapter Interface 18–8]

{empty}[#50540605_pgfId-1262874]##link:conn.htm#50540619_pgfId-999692[18.4.2
Example 18–8]

{empty}[#50540605_pgfId-1262876]##link:conn.htm#50540619_pgfId-999691[18.4.3
@AuthenticationMechanism 18–8]

{empty}[#50540605_pgfId-1262878]##link:conn.htm#50540619_pgfId-999998[18.4.4
@SecurityPermission 18–9]

{empty}[#50540605_pgfId-1262880]##link:conn.htm#50540619_pgfId-1001356[18.5
@ConfigProperty 18–10]

{empty}[#50540605_pgfId-1262882]##link:conn.htm#50540619_pgfId-1002039[18.5.1
Discovery of Configuration Properties 18–12]

{empty}[#50540605_pgfId-1262884]##link:conn.htm#50540619_pgfId-1000270[18.6
@ConnectionDefinition and @ConnectionDefinitions 18–12]

{empty}[#50540605_pgfId-1262886]##link:conn.htm#50540619_pgfId-1000455[18.6.1
Example 18–13]

{empty}[#50540605_pgfId-1262888]##link:conn.htm#50540619_pgfId-1000489[18.7
@Activation 18–14]

{empty}[#50540605_pgfId-1262890]##link:conn.htm#50540619_pgfId-1001746[18.7.1
Example 18–15]

{empty}[#50540605_pgfId-1262892]##link:conn.htm#50540619_pgfId-1000719[18.8
@AdministeredObject 18–15]

{empty}[#50540605_pgfId-1262894]##link:conn.htm#50540619_pgfId-1002365[18.9
Resource Definition Annotations 18–16]

{empty}[#50540605_pgfId-1262896]##link:conn.htm#50540619_pgfId-1003037[18.9.1
@ConnectionFactoryDefinition 18–17]

{empty}[#50540605_pgfId-1262898]##link:conn.htm#50540619_pgfId-1003770[18.9.1.1
Example 18–19]

{empty}[#50540605_pgfId-1262900]##link:conn.htm#50540619_pgfId-1003683[18.9.2
@ConnectionFactoryDefinitions 18–20]

{empty}[#50540605_pgfId-1262902]##link:conn.htm#50540619_pgfId-1004814[18.9.2.1
Example 18–20]

{empty}[#50540605_pgfId-1262904]##link:conn.htm#50540619_pgfId-1004612[18.9.3
@AdministeredObjectDefinition 18–21]

{empty}[#50540605_pgfId-1262906]##link:conn.htm#50540619_pgfId-1003785[18.9.3.1
Example 18–22]

{empty}[#50540605_pgfId-1262908]##link:conn.htm#50540619_pgfId-1004940[18.9.4
@AdministeredObjectDefinitions 18–23]

{empty}[#50540605_pgfId-1262910]##link:conn.htm#50540619_pgfId-1004957[18.9.4.1
Example 18–24]

======= [#50540605_pgfId-1262912]##link:conn.htm#50540546_pgfId-5529[API Requirements 19–1]

{empty}[#50540605_pgfId-1262914]##link:conn.htm#50540546_pgfId-999459[19.1
Requirements of the Application Server 19–1]

{empty}[#50540605_pgfId-1262916]##link:conn.htm#50540546_pgfId-999464[19.2
Requirements of the Resource adapter 19–1]

{empty}[#50540605_pgfId-1262918]##link:conn.htm#50540546_pgfId-999567[19.3
JavaBean Requirements 19–2]

{empty}[#50540605_pgfId-1262920]##link:conn.htm#50540546_pgfId-998874[19.4
Equality Constraints 19–3]

{empty}[#50540605_pgfId-1262922]##link:conn.htm#50540546_pgfId-999666[19.4.1
Equality based on Java Object Identity 19–3]

{empty}[#50540605_pgfId-1262924]##link:conn.htm#50540546_pgfId-999676[19.4.2
Equality Based on Config Properties and Class Information 19–3]

======= [#50540605_pgfId-1262926]##link:conn.htm#50540561_pgfId-5529[Packaging Requirements 20–1]

{empty}[#50540605_pgfId-1262928]##link:conn.htm#50540561_pgfId-999459[20.1
Overview 20–1]

{empty}[#50540605_pgfId-1262930]##link:conn.htm#50540561_pgfId-999683[20.2
Packaging 20–4]

{empty}[#50540605_pgfId-1262932]##link:conn.htm#50540561_pgfId-999691[20.2.0.1
Resource Adapter Archive 20–4]

{empty}[#50540605_pgfId-1262934]##link:conn.htm#50540561_pgfId-999699[20.2.0.2
RAR Contents 20–5]

{empty}[#50540605_pgfId-1262936]##link:conn.htm#50540561_pgfId-999738[20.2.0.3
Sample Directory Structure 20–5]

{empty}[#50540605_pgfId-1262938]##link:conn.htm#50540561_pgfId-999750[20.2.0.4
Requirements 20–5]

{empty}[#50540605_pgfId-1262940]##link:conn.htm#50540561_pgfId-999754[20.3
Class Loading Requirements 20–6]

{empty}[#50540605_pgfId-1262942]##link:conn.htm#50540561_pgfId-1048173[20.4
Deployment 20–7]

{empty}[#50540605_pgfId-1262944]##link:conn.htm#50540561_pgfId-999764[20.4.1
Resource Adapter Provider 20–7]

{empty}[#50540605_pgfId-1262946]##link:conn.htm#50540561_pgfId-999814[20.4.2
Deployer 20–10]

{empty}[#50540605_pgfId-1262948]##link:conn.htm#50540561_pgfId-999816[20.4.2.1
Standalone Resource Adapter Module 20–11]

{empty}[#50540605_pgfId-1262950]##link:conn.htm#50540561_pgfId-999818[20.4.2.2
Resource Adapter Module with Java EE Application 20–11]

{empty}[#50540605_pgfId-1262952]##link:conn.htm#50540561_pgfId-999823[20.4.2.3
Configuration 20–11]

{empty}[#50540605_pgfId-1262954]##link:conn.htm#50540561_pgfId-999831[20.4.2.4
Security Configuration 20–11]

{empty}[#50540605_pgfId-1262956]##link:conn.htm#50540561_pgfId-999837[20.5
Interfaces/Classes 20–12]

{empty}[#50540605_pgfId-1262958]##link:conn.htm#50540561_pgfId-999840[20.5.1
ResourceAdapter 20–12]

{empty}[#50540605_pgfId-1262960]##link:conn.htm#50540561_pgfId-999843[20.5.1.1
Requirements 20–13]

{empty}[#50540605_pgfId-1262962]##link:conn.htm#50540561_pgfId-999846[20.5.2
ManagedConnectionFactory 20–13]

{empty}[#50540605_pgfId-1262964]##link:conn.htm#50540561_pgfId-999850[20.5.2.1
Requirements 20–13]

{empty}[#50540605_pgfId-1262966]##link:conn.htm#50540561_pgfId-999852[20.5.3
Properties Conventions 20–13]

{empty}[#50540605_pgfId-1262968]##link:conn.htm#50540561_pgfId-999856[20.5.4
Standard Properties 20–14]

{empty}[#50540605_pgfId-1262970]##link:conn.htm#50540561_pgfId-1054888[20.6
JNDI Configuration and Lookup 20–15]

{empty}[#50540605_pgfId-1262972]##link:conn.htm#50540561_pgfId-999885[20.6.1
Responsibilities 20–15]

{empty}[#50540605_pgfId-1262974]##link:conn.htm#50540561_pgfId-999892[20.6.1.1
Deployer 20–16]

{empty}[#50540605_pgfId-1262976]##link:conn.htm#50540561_pgfId-999897[20.6.1.2
Resource Adapter 20–16]

{empty}[#50540605_pgfId-1262978]##link:conn.htm#50540561_pgfId-999906[20.6.1.3
Application Server 20–16]

{empty}[#50540605_pgfId-1262980]##link:conn.htm#50540561_pgfId-999913[20.6.2
Scenario: Serializable 20–17]

{empty}[#50540605_pgfId-1262982]##link:conn.htm#50540561_pgfId-999947[20.6.3
Scenario: Referenceable 20–19]

{empty}[#50540605_pgfId-1262984]##link:conn.htm#50540561_pgfId-999969[20.6.3.1
ObjectFactory Implementation 20–19]

{empty}[#50540605_pgfId-1262986]##link:conn.htm#50540561_pgfId-1000008[20.6.3.2
Deployment 20–21]

{empty}[#50540605_pgfId-1262988]##link:conn.htm#50540561_pgfId-1000031[20.6.3.3
Scenario: Connection Factory Lookup 20–21]

{empty}[#50540605_pgfId-1262990]##link:conn.htm#50540561_pgfId-1000104[20.6.4
Requirements 20–24]

{empty}[#50540605_pgfId-1262992]##link:conn.htm#50540561_pgfId-1000106[20.7
Resource Adapter XML Schema Definition 20–24]

======= [#50540605_pgfId-1262994]##link:conn.htm#50540566_pgfId-5529[Runtime Environment 21–1]

{empty}[#50540605_pgfId-1262996]##link:conn.htm#50540566_pgfId-999461[21.1
Programming APIs 21–1]

{empty}[#50540605_pgfId-1262998]##link:conn.htm#50540566_pgfId-999470[21.2
Security Permissions 21–2]

{empty}[#50540605_pgfId-1263000]##link:conn.htm#50540566_pgfId-999568[21.3
Requirements 21–5]

{empty}[#50540605_pgfId-1263002]##link:conn.htm#50540566_pgfId-999572[21.3.1
Example 21–6]

{empty}[#50540605_pgfId-1263004]##link:conn.htm#50540566_pgfId-999615[21.4
Privileged Code 21–7]

{empty}[#50540605_pgfId-1263006]##link:conn.htm#50540566_pgfId-999885[21.4.1
Example 21–7]

{empty}[#50540605_pgfId-1263008]##link:conn.htm#50540566_pgfId-1000058[21.5
Dependency Injection 21–8]

======= [#50540605_pgfId-1263010]##link:conn.htm#50540554_pgfId-5529[Exceptions 22–1]

{empty}[#50540605_pgfId-1263012]##link:conn.htm#50540554_pgfId-999464[22.1
ResourceException 22–1]

{empty}[#50540605_pgfId-1263014]##link:conn.htm#50540554_pgfId-999470[22.2
System Exceptions 22–2]

{empty}[#50540605_pgfId-1263016]##link:conn.htm#50540554_pgfId-999474[22.2.1
Exception Hierarchy 22–2]

{empty}[#50540605_pgfId-1263018]##link:conn.htm#50540554_pgfId-999500[22.3
Work Exceptions 22–4]

{empty}[#50540605_pgfId-1263020]##link:conn.htm#50540554_pgfId-999505[22.4
Additional Exceptions 22–5]

======= [#50540605_pgfId-1263022]##link:conn.htm#50540625_pgfId-999009[Compatibility and Migration 23–1]

{empty}[#50540605_pgfId-1263024]##link:conn.htm#50540625_pgfId-999020[23.1
Compatibility 23–1]

{empty}[#50540605_pgfId-1263026]##link:conn.htm#50540625_pgfId-999032[23.1.1
Changes Since Connector 1.5 Specification 23–1]

{empty}[#50540605_pgfId-1263028]##link:conn.htm#50540625_pgfId-999036[23.1.1.1
Standalone Resource Adapter Visibility to an Application 23–2]

{empty}[#50540605_pgfId-1263030]##link:conn.htm#50540625_pgfId-999043[23.1.1.2
Deprecation of required-config-property 23–2]

{empty}[#50540605_pgfId-1263032]##link:conn.htm#50540625_pgfId-999035[23.2
Migration 23–2]

{empty}[#50540605_pgfId-1263034]##link:conn.htm#50540625_pgfId-999056[23.2.1
Changes Since the Connector 1.5 Specification 23–3]

{empty}[#50540605_pgfId-1263036]##link:conn.htm#50540625_pgfId-999053[23.2.1.1
Annotations 23–3]

======= [#50540605_pgfId-1263038]##link:conn.htm#50540563_pgfId-5529[Projected Items 24–1]

{empty}[#50540605_pgfId-1263040]##link:conn.htm#50540562_pgfId-1000005[Previous
Version Deployment Descriptors A–1]

{empty}[#50540605_pgfId-1263042]##link:conn.htm#50540562_pgfId-1003972[A.1
J2EE Connector Architecture 1.0 Resource Adapter XML DTD A–1]

{empty}[#50540605_pgfId-1263044]##link:conn.htm#50540562_pgfId-1003977[A.2
J2EE Connector Architecture 1.5 Resource Adapter XML XSD A–13]

{empty}[#50540605_pgfId-1263046]##link:conn.htm#50540562_pgfId-1039505[A.3
Java EE Connector Architecture 1.6 Resource Adapter XML XSD A–37]

{empty}[#50540605_pgfId-1263048]##link:conn.htm#50540548_pgfId-1000005[Caching
Manager B–1]

{empty}[#50540605_pgfId-1263050]##link:conn.htm#50540548_pgfId-1000062[B.1
Overview B–1]

{empty}[#50540605_pgfId-1263052]##link:conn.htm#50540548_pgfId-1000095[B.2
Synchronization Contract B–2]

{empty}[#50540605_pgfId-1263054]##link:conn.htm#50540548_pgfId-1000098[B.2.1
Interface B–3]

{empty}[#50540605_pgfId-1263056]##link:conn.htm#50540548_pgfId-1000103[B.2.2
Implementation B–3]

{empty}[#50540605_pgfId-1263058]##link:conn.htm#50540569_pgfId-1000005[Security
Scenarios C–1]

{empty}[#50540605_pgfId-1263060]##link:conn.htm#50540569_pgfId-1000074[C.1
eStore Application C–1]

{empty}[#50540605_pgfId-1263062]##link:conn.htm#50540569_pgfId-1000112[C.1.1
Scenario C–2]

{empty}[#50540605_pgfId-1263064]##link:conn.htm#50540569_pgfId-1000121[C.1.2
Security Environment C–2]

{empty}[#50540605_pgfId-1263066]##link:conn.htm#50540569_pgfId-1000128[C.1.3
Deployment C–3]

{empty}[#50540605_pgfId-1263068]##link:conn.htm#50540569_pgfId-1000160[C.2
Employee Self-Service Application C–4]

{empty}[#50540605_pgfId-1263070]##link:conn.htm#50540569_pgfId-1000163[C.2.1
Architecture C–5]

{empty}[#50540605_pgfId-1263072]##link:conn.htm#50540569_pgfId-1000168[C.2.2
Security Environment C–5]

{empty}[#50540605_pgfId-1263074]##link:conn.htm#50540569_pgfId-1000207[C.2.3
Deployment C–6]

{empty}[#50540605_pgfId-1263076]##link:conn.htm#50540569_pgfId-1000228[C.2.4
Scenario C–7]

{empty}[#50540605_pgfId-1263078]##link:conn.htm#50540569_pgfId-1000233[C.3
Integrated Purchasing Application C–7]

{empty}[#50540605_pgfId-1263080]##link:conn.htm#50540569_pgfId-1000235[C.3.1
Architecture C–7]

{empty}[#50540605_pgfId-1263082]##link:conn.htm#50540569_pgfId-1000287[C.3.2
Security Environment C–8]

{empty}[#50540605_pgfId-1263084]##link:conn.htm#50540569_pgfId-1000293[C.3.3
Deployment C–9]

{empty}[#50540605_pgfId-1263086]##link:conn.htm#50540557_pgfId-1000005[JAAS
Based Security Architecture D–1]

{empty}[#50540605_pgfId-1263088]##link:conn.htm#50540557_pgfId-1000069[D.1
Java Authentication and Authorization Service (JAAS) D–1]

{empty}[#50540605_pgfId-1263090]##link:conn.htm#50540557_pgfId-1000073[D.2
Requirements D–2]

{empty}[#50540605_pgfId-1263092]##link:conn.htm#50540557_pgfId-1000082[D.3
Security Architecture D–3]

{empty}[#50540605_pgfId-1263094]##link:conn.htm#50540557_pgfId-1000142[D.3.1
JAAS Modules D–5]

{empty}[#50540605_pgfId-1263096]##link:conn.htm#50540557_pgfId-1000150[D.3.2
Illustrative Examples: JAAS Module D–5]

{empty}[#50540605_pgfId-1263098]##link:conn.htm#50540557_pgfId-1000152[D.3.2.1
Principal Mapping Module D–5]

{empty}[#50540605_pgfId-1263100]##link:conn.htm#50540557_pgfId-1000158[D.3.2.2
Credential Mapping Module D–6]

{empty}[#50540605_pgfId-1263102]##link:conn.htm#50540557_pgfId-1000161[D.3.2.3
Kerberos Module D–6]

{empty}[#50540605_pgfId-1263104]##link:conn.htm#50540557_pgfId-1000176[D.4
Security Configuration D–7]

{empty}[#50540605_pgfId-1263106]##link:conn.htm#50540557_pgfId-1000182[D.4.1
JAAS Configuration D–7]

{empty}[#50540605_pgfId-1263108]##link:conn.htm#50540557_pgfId-1000188[D.5
Scenarios D–8]

{empty}[#50540605_pgfId-1263110]##link:conn.htm#50540557_pgfId-1000190[D.5.1
Scenario: Resource Adapter Managed Authentication D–8]

{empty}[#50540605_pgfId-1263112]##link:conn.htm#50540557_pgfId-1000237[D.5.2
Scenario: Kerberos and Principal Delegation D–10]

{empty}[#50540605_pgfId-1263114]##link:conn.htm#50540557_pgfId-1000292[D.5.3
Scenario: GSS-API D–12]

{empty}[#50540605_pgfId-1263116]##link:conn.htm#50540557_pgfId-1000330[D.5.4
Scenario: Kerberos Authentication After Principal Mapping D–13]

{empty}[#50540605_pgfId-1263118]##link:conn.htm#50540557_pgfId-1000392[D.5.5
Scenario: EIS-Specific Authentication D–14]

{empty}[#50540605_pgfId-1263120]##link:conn.htm#50540564_pgfId-1000217[Related
Documents E–1]

{empty}[#50540605_pgfId-1263122]##link:conn.htm#50540550_pgfId-1000244[Change
History for Version 1.0 F–1]

{empty}[#50540605_pgfId-1263124]##link:conn.htm#50540550_pgfId-1000060[F.1
Version 0.9 F–1]

{empty}[#50540605_pgfId-1263126]##link:conn.htm#50540550_pgfId-1000075[F.2
Version 1.0 - Public Draft 1 F–2]

{empty}[#50540605_pgfId-1263128]##link:conn.htm#50540550_pgfId-1000086[F.3
Version 1.0 - Public Draft 2 F–2]

{empty}[#50540605_pgfId-1263130]##link:conn.htm#50540550_pgfId-1000109[F.4
Version 1.0 - Proposed Final Draft 2 F–3]

{empty}[#50540605_pgfId-1263132]##link:conn.htm#50540550_pgfId-1000135[F.5
Version 1.0 - Final Release F–4]

{empty}[#50540605_pgfId-1263134]##link:conn.htm#50540551_pgfId-1000005[Change
History for Version 1.5 G–1]

{empty}[#50540605_pgfId-1263136]##link:conn.htm#50540551_pgfId-1000060[G.1
Public Review Draft G–1]

{empty}[#50540605_pgfId-1263138]##link:conn.htm#50540551_pgfId-1000076[G.2
Proposed Final Draft G–1]

{empty}[#50540605_pgfId-1263140]##link:conn.htm#50540551_pgfId-1000094[G.3
Proposed Final Draft 2 G–2]

{empty}[#50540605_pgfId-1263142]##link:conn.htm#50540551_pgfId-1000103[G.4
Final Release G–3]

{empty}[#50540605_pgfId-1263144]##link:conn.htm#50540617_pgfId-998438[Change
History for Version 1.6 H–1]

{empty}[#50540605_pgfId-1263146]##link:conn.htm#50540617_pgfId-998445[H.1
Final Draft H–1]

{empty}[#50540605_pgfId-1263148]##link:conn.htm#50540617_pgfId-998694[H.2
Proposed Final Draft H–2]

{empty}[#50540605_pgfId-1263150]##link:conn.htm#50540617_pgfId-998552[H.3
Public Review H–4]

{empty}[#50540605_pgfId-1263152]##link:conn.htm#50540617_pgfId-998512[H.4
Early Draft H–5]

{empty}[#50540605_pgfId-1263154]##link:conn.htm#50540622_pgfId-998438[Change
History for Version 1.7 I–1]

{empty}[#50540605_pgfId-1263156]##link:conn.htm#50540622_pgfId-998445[I.1
Maintenance Release 1 I–1]

======= [#50540606_pgfId-16015]##

image:conn-3.gif[image]

Tables

image:conn-4.gif[image]

[#50540606_pgfId-21009]## _link:conn.htm#50540556_pgfId-1000702[TABLE
1-1]_ Connector 1.7 Expert Group Members 1–7

[#50540606_pgfId-21011]## _link:conn.htm#50540556_pgfId-1000276[TABLE
1-2]_ Connector 1.6 Expert Group Members 1–8

[#50540606_pgfId-21013]## _link:conn.htm#50540556_pgfId-999527[TABLE
1-3]_ Connector 1.5 Expert Group Members 1–9

[#50540606_pgfId-21015]## _link:conn.htm#50540556_pgfId-999717[TABLE
1-4]_ Connector 1.0 Expert Group Members 1–11

[#50540606_pgfId-21017]## _link:conn.htm#50540559_pgfId-1000170[TABLE
13-1]_ Application Server Behavior for Transacted and Non-transacted
Message Delivery 13–33

[#50540606_pgfId-21019]## _link:conn.htm#50540549_pgfId-1002368[TABLE
17-1]_ Standard Properties for ConnectionSpec 17–11

[#50540606_pgfId-21021]## _link:conn.htm#50540619_pgfId-1001623[TABLE
18-1]_ Annotation Processing Requirements for a Resource Adapter Archive
18–3

[#50540606_pgfId-21023]## _link:conn.htm#50540546_pgfId-999475[TABLE
19-1]_ Resource Adapter API Requirements 19–2

[#50540606_pgfId-21025]## _link:conn.htm#50540561_pgfId-999703[TABLE
20-1]_ Description of RAR File Contents 20–5

[#50540606_pgfId-21027]## _link:conn.htm#50540561_pgfId-1001575[TABLE
20-2]_ Standard Properties of the Connector Architecture 20–14

[#50540606_pgfId-21029]## _link:conn.htm#50540566_pgfId-999938[TABLE
21-1]_ Default Security Permission Set 21–3

[#50540606_pgfId-21031]## _link:conn.htm#50540566_pgfId-999576[TABLE
21-2]_ Methods and Security Permissions Required 21–6

======= [#50540607_pgfId-108319]##

image:conn-5.gif[image]

Figures

image:conn-6.gif[image]

[#50540607_pgfId-1069552]## _link:conn.htm#50540560_pgfId-999551[FIGURE
2-1]_ System Level Pluggability Between Application Servers and EISs 2–5

[#50540607_pgfId-1069554]## _link:conn.htm#50540547_pgfId-999475[FIGURE
3-1]_ Overview of the Connector Architecture 3–2

[#50540607_pgfId-1069556]## _link:conn.htm#50540565_pgfId-999541[FIGURE
4-1]_ Illustration of a Scenario Based on the Connector Architecture 4–6

[#50540607_pgfId-1069558]## _link:conn.htm#50540565_pgfId-999607[FIGURE
4-2]_ Connector Architecture Usage in Business Integration Scenario 4–9

[#50540607_pgfId-1069560]## _link:conn.htm#50540558_pgfId-1000153[FIGURE
5-1]_ Lifecycle Management Contract (Interfaces) 5–3

[#50540607_pgfId-1069562]## _link:conn.htm#50540558_pgfId-999510[FIGURE
5-2]_ Lifecycle Management (Object Diagram) 5–3

[#50540607_pgfId-1069564]## _link:conn.htm#50540558_pgfId-999621[FIGURE
5-3]_ Resource Adapter Instance (Composition) 5–7

[#50540607_pgfId-1069566]## _link:conn.htm#50540558_pgfId-1000235[FIGURE
5-4]_ Resource Adapter Lifecycle (State Diagram) 5–12

[#50540607_pgfId-1069568]## _link:conn.htm#50540558_pgfId-1000254[FIGURE
5-5]_ Lifecycle Management Model (Sequence Diagram) 5–20

[#50540607_pgfId-1069570]## _link:conn.htm#50540552_pgfId-1003264[FIGURE
6-1]_ Architecture Diagram: Managed Application scenario 6–4

[#50540607_pgfId-1069572]## _link:conn.htm#50540552_pgfId-1002721[FIGURE
6-2]_ Class Diagram: Connection Management Architecture 6–9

[#50540607_pgfId-1069574]## _link:conn.htm#50540552_pgfId-999855[FIGURE
6-3]_ ConnectionManager and Application Server Specific Services 6–16

[#50540607_pgfId-1069576]## _link:conn.htm#50540552_pgfId-1003395[FIGURE
6-4]_ Object Diagram: Connection Management Architecture 6–31

[#50540607_pgfId-1069578]## _link:conn.htm#50540552_pgfId-1003560[FIGURE
6-5]_ OID: Connection Pool Management with New Connection Creation 6–35

[#50540607_pgfId-1069580]## _link:conn.htm#50540552_pgfId-1000372[FIGURE
6-6]_ OID: Connection Pool Management with Connection Matching 6–38

[#50540607_pgfId-1069582]## _link:conn.htm#50540552_pgfId-1003715[FIGURE
6-7]_ OID: Connection Event Notification 6–41

[#50540607_pgfId-1069584]## _link:conn.htm#50540552_pgfId-1000504[FIGURE
6-8]_ Architecture Diagram: Non-Managed Application Scenario 6–43

[#50540607_pgfId-1069586]## _link:conn.htm#50540552_pgfId-1000597[FIGURE
6-9]_ OID: Connection Creation in a Non-Managed Application Scenario
6–46

[#50540607_pgfId-1069588]## _link:conn.htm#50540572_pgfId-999492[FIGURE
7-1]_ Transaction Management Contract 7–2

[#50540607_pgfId-1069590]## _link:conn.htm#50540572_pgfId-999542[FIGURE
7-2]_ Scenario: Transactions Across Multiple Resource Managers 7–4

[#50540607_pgfId-1069592]## _link:conn.htm#50540572_pgfId-999587[FIGURE
7-3]_ Scenario: Local Transaction on a Single Resource Manager 7–6

[#50540607_pgfId-1069594]## _link:conn.htm#50540572_pgfId-999652[FIGURE
7-4]_ Architecture Diagram: Transaction Management 7–8

[#50540607_pgfId-1069596]## _link:conn.htm#50540572_pgfId-999703[FIGURE
7-5]_ ManagedConnection Interface for Transaction Management 7–10

[#50540607_pgfId-1069598]## _link:conn.htm#50540572_pgfId-1003941[FIGURE
7-6]_ Object Diagram: Transaction Management 7–14

[#50540607_pgfId-1069600]## _link:conn.htm#50540572_pgfId-1003953[FIGURE
7-7]_ OID: Transactional Setup For Newly Created ManagedConnection
Instances 7–23

[#50540607_pgfId-1069602]## _link:conn.htm#50540572_pgfId-1000100[FIGURE
7-8]_ OID: Connection Close and Transactional Cleanup 7–26

[#50540607_pgfId-1069604]## _link:conn.htm#50540572_pgfId-1000147[FIGURE
7-9]_ OID: Transaction Completion 7–28

[#50540607_pgfId-1069606]## _link:conn.htm#50540572_pgfId-1000334[FIGURE
7-10]_ Scenario to illustrate Local Transaction Management 7–38

[#50540607_pgfId-1069608]## _link:conn.htm#50540572_pgfId-1003668[FIGURE
7-11]_ Connection Sharing Across Component Instances 7–41

[#50540607_pgfId-1069610]## _link:conn.htm#50540572_pgfId-1000460[FIGURE
7-12]_ Connection Sharing Scenario 7–42

[#50540607_pgfId-1069612]## _link:conn.htm#50540572_pgfId-1000483[FIGURE
7-13]_ State Diagram of Application-Level Connection Handle 7–43

[#50540607_pgfId-1069614]## _link:conn.htm#50540572_pgfId-1003683[FIGURE
7-14]_ Connection Acquisition Processing 7–51

[#50540607_pgfId-1069616]## _link:conn.htm#50540572_pgfId-1003719[FIGURE
7-15]_ Connection Re-association Processing 7–52

[#50540607_pgfId-1069618]## _link:conn.htm#50540572_pgfId-1003716[FIGURE
7-16]_ State Diagram of a Dissociatable Application-level Connection
Handle 7–53

[#50540607_pgfId-1069620]## _link:conn.htm#50540568_pgfId-999615[FIGURE
9-1]_ Security Contract 9–8

[#50540607_pgfId-1069622]## _link:conn.htm#50540568_pgfId-999669[FIGURE
9-2]_ Security Contract: Subject Interface and its Containment Hierarchy
9–10

[#50540607_pgfId-1069624]## _link:conn.htm#50540573_pgfId-1003592[FIGURE
10-1]_ Work Management Contract (Object Diagram) 10–4

[#50540607_pgfId-1069626]## _link:conn.htm#50540573_pgfId-999616[FIGURE
10-2]_ Work Management Contract (Interfaces) 10–5

[#50540607_pgfId-1069628]## _link:conn.htm#50540573_pgfId-999821[FIGURE
10-3]_ Work Processing Stages and their Outcomes 10–11

[#50540607_pgfId-1069630]## _link:conn.htm#50540573_pgfId-999878[FIGURE
10-4]_ Blocking Durations of Various Work Submissions 10–14

[#50540607_pgfId-1069632]## _link:conn.htm#50540573_pgfId-1003083[FIGURE
10-5]_ Work Submission - Blocking Behavior (Sequence Diagram) 10–15

[#50540607_pgfId-1069634]## _link:conn.htm#50540573_pgfId-1000065[FIGURE
10-6]_ Work Submission - Callback Mechanism (Sequence Diagram) 10–19

[#50540607_pgfId-1069636]## _link:conn.htm#50540573_pgfId-1003349[FIGURE
10-7]_ Distributed Work submission and processing (Sequence Diagram)
10–25

[#50540607_pgfId-1069638]## _link:conn.htm#50540613_pgfId-1001853[FIGURE
11-1]_ Generic Work Context (Object Diagram) 11–5

[#50540607_pgfId-1069640]## _link:conn.htm#50540613_pgfId-999134[FIGURE
11-2]_ Generic Work Context (Interfaces) 11–6

[#50540607_pgfId-1069642]## _link:conn.htm#50540613_pgfId-999701[FIGURE
11-3]_ WorkContext establishment during Work submission(Sequence
Diagram) 11–10

[#50540607_pgfId-1069644]## _link:conn.htm#50540613_pgfId-1001608[FIGURE
11-4]_ Generic Work Context Lifecycle listener callback (Sequence
Diagram) 11–18

[#50540607_pgfId-1069646]## _link:conn.htm#50540555_pgfId-999504[FIGURE
12-1]_ Inbound Communication Model 12–1

[#50540607_pgfId-1069648]## _link:conn.htm#50540555_pgfId-999621[FIGURE
12-2]_ Inbound Communication Model (an Illustrative Use Case) 12–3

[#50540607_pgfId-1069650]## _link:conn.htm#50540559_pgfId-999512[FIGURE
13-1]_ Message Inflow Contract 13–2

[#50540607_pgfId-1069652]## _link:conn.htm#50540559_pgfId-999564[FIGURE
13-2]_ Message Inflow Contract (Object Diagram) 13–4

[#50540607_pgfId-1069654]## _link:conn.htm#50540559_pgfId-999627[FIGURE
13-3]_ Message Inflow Contract (Interfaces) 13–5

[#50540607_pgfId-1069656]## _link:conn.htm#50540559_pgfId-999743[FIGURE
13-4]_ Endpoint (Message-Driven Bean) Deployment (Actors) 13–9

[#50540607_pgfId-1069658]## _link:conn.htm#50540559_pgfId-1014914[FIGURE
13-5]_ Endpoint (Message-Driven Bean) Deployment Steps 13–17

[#50540607_pgfId-1069660]## _link:conn.htm#50540559_pgfId-1013923[FIGURE
13-6]_ Endpoint Deployment (Sequence Diagram) 13–21

[#50540607_pgfId-1069662]## _link:conn.htm#50540559_pgfId-1015023[FIGURE
13-7]_ Transacted Message Delivery: Option A(Sequence Diagram) 13–35

[#50540607_pgfId-1069664]## _link:conn.htm#50540559_pgfId-1000365[FIGURE
13-8]_ Transacted Message Delivery: Option B (Sequence Diagram) 13–36

[#50540607_pgfId-1069666]## _link:conn.htm#50540559_pgfId-1000409[FIGURE
13-9]_ Non-transacted Message Delivery (Sequence Diagram) 13–37

[#50540607_pgfId-1069668]## _link:conn.htm#50540559_pgfId-1000448[FIGURE
13-10]_ Endpoint Undeployment (Sequence Diagram) 13–38

[#50540607_pgfId-1069670]## _link:conn.htm#50540603_pgfId-999497[FIGURE
14-1]_ EJB Invocation Model 14–2

[#50540607_pgfId-1069672]## _link:conn.htm#50540571_pgfId-999498[FIGURE
15-1]_ Transaction Inflow Contract 15–2

[#50540607_pgfId-1069674]## _link:conn.htm#50540571_pgfId-999538[FIGURE
15-2]_ Transaction Inflow Contract (Object Diagram) 15–3

[#50540607_pgfId-1069676]## _link:conn.htm#50540571_pgfId-1000859[FIGURE
15-3]_ Transactional Calls and Transaction Completion Flow (Sequence
Diagram) 15–7

[#50540607_pgfId-1069678]## _link:conn.htm#50540571_pgfId-1000371[FIGURE
15-4]_ Crash Recovery Flows When Application Server Crashes (Sequence
Diagram) 15–9

[#50540607_pgfId-1069680]## _link:conn.htm#50540571_pgfId-1000443[FIGURE
15-5]_ Crash Recovery Flows When EIS Crashes (Sequence Diagram) 15–10

[#50540607_pgfId-1069682]## _link:conn.htm#50540614_pgfId-998792[FIGURE
16-1]_ Security Inflow Contract 16–2

[#50540607_pgfId-1069684]## _link:conn.htm#50540614_pgfId-1000534[FIGURE
16-2]_ Security Inflow Conmtext (Object Diagram) 16–5

[#50540607_pgfId-1069686]## _link:conn.htm#50540614_pgfId-999035[FIGURE
16-3]_ Security Context Establishment During Work Submission(Sequence
Diagram) 16–8

[#50540607_pgfId-1069688]## _link:conn.htm#50540614_pgfId-999085[FIGURE
16-4]_ Establish the Security Context (Sequence Diagram) 16–11

[#50540607_pgfId-1069690]## _link:conn.htm#50540614_pgfId-999751[FIGURE
16-5]_ Case 1: Identity in Container’s Security Domain (Sequence
Diagram) 16–13

[#50540607_pgfId-1069692]## _link:conn.htm#50540614_pgfId-999765[FIGURE
16-6]_ Case 2: Identity Translated Between Security Domains (Sequence
Diagram) 16–16

[#50540607_pgfId-1069694]## _link:conn.htm#50540614_pgfId-999166[FIGURE
16-7]_ Case A: Establishing a Single Principal as the Caller Identity
(Seq. Diagram) 16–18

[#50540607_pgfId-1069696]## _link:conn.htm#50540549_pgfId-999483[FIGURE
17-1]_ Common Client Interface 17–2

[#50540607_pgfId-1069698]## _link:conn.htm#50540549_pgfId-999528[FIGURE
17-2]_ Scenario: EAI Framework 17–4

[#50540607_pgfId-1069700]## _link:conn.htm#50540549_pgfId-1003509[FIGURE
17-3]_ Scenario: Enterprise Application Development Tool 17–5

[#50540607_pgfId-1069702]## _link:conn.htm#50540549_pgfId-999723[FIGURE
17-4]_ Class Diagram: Common Client Interface 17–8

[#50540607_pgfId-1069704]## _link:conn.htm#50540549_pgfId-1000015[FIGURE
17-5]_ Record at Development-time and Runtime 17–23

[#50540607_pgfId-1069706]## _link:conn.htm#50540549_pgfId-1000090[FIGURE
17-6]_ Component-view Contract 17–26

[#50540607_pgfId-1069708]## _link:conn.htm#50540549_pgfId-1000203[FIGURE
17-7]_ Streamable Interface 17–30

[#50540607_pgfId-1069710]## _link:conn.htm#50540549_pgfId-1003362[FIGURE
17-8]_ ResultSet Interface 17–32

[#50540607_pgfId-1069712]## _link:conn.htm#50540561_pgfId-999490[FIGURE
20-1]_ Packaging and Deployment Lifecycle of a Resource adapter 20–2

[#50540607_pgfId-1069714]## _link:conn.htm#50540561_pgfId-999680[FIGURE
20-2]_ Deployment of a Resource Adapter Module 20–3

[#50540607_pgfId-1069716]## _link:conn.htm#50540561_pgfId-1051607[FIGURE
20-3]_ OID:Lookup of a ConnectionFactory Instance from JNDI 20–23

[#50540607_pgfId-1069718]## _link:conn.htm#50540548_pgfId-1000093[FIGURE
B-1]_ Synchronization Contract between Caching Manager and Application
Server B–2

[#50540607_pgfId-1069720]## _link:conn.htm#50540569_pgfId-1000111[FIGURE
C-1]_ Illustrative Architecture of an eStore Application C–2

[#50540607_pgfId-1069722]## _link:conn.htm#50540569_pgfId-1000152[FIGURE
C-2]_ Resource Principal for eStore Application Scenario C–4

[#50540607_pgfId-1069724]## _link:conn.htm#50540569_pgfId-1000206[FIGURE
C-3]_ Illustrative Architecture of an Employee Self-service Application
C–6

[#50540607_pgfId-1069726]## _link:conn.htm#50540569_pgfId-1000224[FIGURE
C-4]_ Principal Mapping C–6

[#50540607_pgfId-1069728]## _link:conn.htm#50540569_pgfId-1000286[FIGURE
C-5]_ Illustrative Architecture of an Integrated Purchasing Application
C–8

[#50540607_pgfId-1069730]## _link:conn.htm#50540569_pgfId-1000320[FIGURE
C-6]_ Principal Mapping C–9

[#50540607_pgfId-1069732]## _link:conn.htm#50540557_pgfId-1000141[FIGURE
D-1]_ Security Architecture. D–4

[#50540607_pgfId-1069734]## _link:conn.htm#50540557_pgfId-1000232[FIGURE
D-2]_ Resource Adapter-Managed Authentication D–9

[#50540607_pgfId-1069736]## _link:conn.htm#50540557_pgfId-1000278[FIGURE
D-3]_ Kerberos Authentication with Principal Delegation D–10

[#50540607_pgfId-1069738]## _link:conn.htm#50540557_pgfId-1000328[FIGURE
D-4]_ GSS-API use by Resource Adapter D–12

[#50540607_pgfId-1069740]## _link:conn.htm#50540557_pgfId-1000382[FIGURE
D-5]_ Kerberos Authentication After Principal Mapping D–13

[#50540607_pgfId-1069742]## _link:conn.htm#50540557_pgfId-1000428[FIGURE
D-6]_ Authentication Through EIS-Specific JAAS Module D–14

======= [#50540608_pgfId-259]##

image:conn-7.gif[image]

Code Samples

image:conn-8.gif[image]

[#50540608_pgfId-28701]## _link:conn.htm#50540558_pgfId-1000046[CODE
EXAMPLE 5-1]_ Sample Resource Adapter 5-19

[#50540608_pgfId-28703]## _link:conn.htm#50540573_pgfId-1000280[CODE
EXAMPLE 10-1]_ __ _javax.resource.spi.work 10-6_

[#50540608_pgfId-28705]## _link:conn.htm#50540613_pgfId-999459[CODE
EXAMPLE 11-1]_ __ _javax.resource.spi.work 11-7_

[#50540608_pgfId-28707]## _link:conn.htm#50540559_pgfId-1001584[CODE
EXAMPLE 13-1]_ __ _javax.resource.spi 13-6_

[#50540608_pgfId-28709]## _link:conn.htm#50540559_pgfId-1015201[CODE
EXAMPLE 13-2]_ __ _javax.resource.spi.endpoint 13-7_

[#50540608_pgfId-28711]## _link:conn.htm#50540559_pgfId-1002375[CODE
EXAMPLE 13-3]_ Message-Driven Bean Deployment Descriptor 13-10

[#50540608_pgfId-28713]## _link:conn.htm#50540559_pgfId-1003035[CODE
EXAMPLE 13-4]_ Message Delivery in a Resource Adapter 13-24

[#50540608_pgfId-28715]## _link:conn.htm#50540559_pgfId-1006880[CODE
EXAMPLE 13-5]_ Sample JMS Resource Adapter Deployment Descriptor 13-39

[#50540608_pgfId-28717]## _link:conn.htm#50540559_pgfId-1000643[CODE
EXAMPLE 13-6]_ A Sample JMS ActivationSpec Implementation 13-43

[#50540608_pgfId-28719]## _link:conn.htm#50540559_pgfId-1000675[CODE
EXAMPLE 13-7]_ A Sample EJB 2.0 Message-Driven Bean Deployment
Descriptor 13-44

[#50540608_pgfId-28721]## _link:conn.htm#50540559_pgfId-1008041[CODE
EXAMPLE 13-8]_ A Sample EJB 2.1 Message-Driven Bean Deployment
Descriptor 13-44

[#50540608_pgfId-28723]## _link:conn.htm#50540559_pgfId-1009426[CODE
EXAMPLE 13-9]_ Sample EJB 2.1 Deployment Descriptor 13-45

[#50540608_pgfId-28725]## _link:conn.htm#50540559_pgfId-1010182[CODE
EXAMPLE 13-10]_ Sending Messages Using the JMS API 13-48

[#50540608_pgfId-28727]## _link:conn.htm#50540559_pgfId-1010407[CODE
EXAMPLE 13-11]_ Synchronously Receiving Messages in a Java EE Component
13-48

[#50540608_pgfId-28729]## _link:conn.htm#50540559_pgfId-1010923[CODE
EXAMPLE 13-12]_ Deployment Descriptor for a Resource Adapter 13-50

[#50540608_pgfId-28731]## _link:conn.htm#50540559_pgfId-1012753[CODE
EXAMPLE 13-13]_ Deployment Descriptor for a Message-Driven Bean 13-52

[#50540608_pgfId-28733]## _link:conn.htm#50540603_pgfId-999575[CODE
EXAMPLE 14-1]_ A Message-Driven Bean Implementation 14-3

[#50540608_pgfId-28735]## _link:conn.htm#50540614_pgfId-998967[CODE
EXAMPLE 16-1]_ SecurityContext 16-6

[#50540608_pgfId-28737]## _link:conn.htm#50540619_pgfId-999590[CODE
EXAMPLE 18-1]_ Connector Annotation 18-6

[#50540608_pgfId-28739]## _link:conn.htm#50540619_pgfId-1001021[CODE
EXAMPLE 18-2]_ Connector Annotation Usage Example 18-8

[#50540608_pgfId-28741]## _link:conn.htm#50540619_pgfId-999924[CODE
EXAMPLE 18-3]_ AuthenticationMechanism Annotation 18-9

[#50540608_pgfId-28743]## _link:conn.htm#50540619_pgfId-1000019[CODE
EXAMPLE 18-4]_ SecurityPermission annotation 18-9

[#50540608_pgfId-28745]## _link:conn.htm#50540619_pgfId-1000357[CODE
EXAMPLE 18-5]_ ConfigProperty Annotation 18-10

[#50540608_pgfId-28747]## _link:conn.htm#50540619_pgfId-1000266[CODE
EXAMPLE 18-6]_ ConnectionDefinitions Annotation 18-13

[#50540608_pgfId-28749]## _link:conn.htm#50540619_pgfId-1000139[CODE
EXAMPLE 18-7]_ ConnectionDefinition Annotation 18-13

[#50540608_pgfId-28751]## _link:conn.htm#50540619_pgfId-1000457[CODE
EXAMPLE 18-8]_ ConnectionDefinition Annotation Usage Example 18-13

[#50540608_pgfId-28753]## _link:conn.htm#50540619_pgfId-1000523[CODE
EXAMPLE 18-9]_ Activation Annotation 18-14

[#50540608_pgfId-28755]## _link:conn.htm#50540619_pgfId-1001752[CODE
EXAMPLE 18-10]_ Activation Annotation Usage Example 18-15

[#50540608_pgfId-28757]## _link:conn.htm#50540619_pgfId-1000779[CODE
EXAMPLE 18-11]_ AdministeredObject Annotation 18-15

[#50540608_pgfId-28759]## _link:conn.htm#50540619_pgfId-1004077[CODE
EXAMPLE 18-12]_ ConnectionFactoryDefinition Annotation 18-17

[#50540608_pgfId-28761]## _link:conn.htm#50540619_pgfId-1003595[CODE
EXAMPLE 18-13]_ ConnectionFactoryDefinition Annotation Definition
Example 18-19

[#50540608_pgfId-28763]## _link:conn.htm#50540619_pgfId-1003895[CODE
EXAMPLE 18-14]_ ConnectionFactoryDefinition Annotation Usage Example
18-19

[#50540608_pgfId-28765]## _link:conn.htm#50540619_pgfId-1004657[CODE
EXAMPLE 18-15]_ ConnectionFactoryDefinitions Annotation 18-20

[#50540608_pgfId-28767]## _link:conn.htm#50540619_pgfId-1004816[CODE
EXAMPLE 18-16]_ ConnectionFactoryDefinitions Annotation Definition
Example 18-20

[#50540608_pgfId-28769]## _link:conn.htm#50540619_pgfId-1004845[CODE
EXAMPLE 18-17]_ ConnectionFactoryDefinitions Annotation Usage Example
18-21

[#50540608_pgfId-28771]## _link:conn.htm#50540619_pgfId-1003163[CODE
EXAMPLE 18-18]_ AdministeredObjectDefinition Annotation 18-21

[#50540608_pgfId-28773]## _link:conn.htm#50540619_pgfId-1003788[CODE
EXAMPLE 18-19]_ AdministeredObjectDefinition Annotation Definition
Example 18-22

[#50540608_pgfId-28775]## _link:conn.htm#50540619_pgfId-1005260[CODE
EXAMPLE 18-20]_ AdministeredObjectDefinition Annotation Usage Example
18-23

[#50540608_pgfId-28777]## _link:conn.htm#50540619_pgfId-1004942[CODE
EXAMPLE 18-21]_ AdministeredObjectDefinitions Annotation 18-23

[#50540608_pgfId-28779]## _link:conn.htm#50540619_pgfId-1005129[CODE
EXAMPLE 18-22]_ AdministeredObjectDefinitions Annotation Definition
Example 18-24

[#50540608_pgfId-28781]## _link:conn.htm#50540619_pgfId-1004977[CODE
EXAMPLE 18-23]_ AdministeredObjectDefinitions Annotation Usage Example
18-24

[#50540608_pgfId-28783]## _link:conn.htm#50540561_pgfId-1051803[CODE
EXAMPLE 20-1]_ Schema Definition for the Deployment Descriptor for a
Resource Adapter 20-24

[#50540608_pgfId-28785]## _link:conn.htm#50540562_pgfId-1002988[CODE
EXAMPLE A-1]_ Connector Architecture 1.0 Resource Adapter DTD A-1

[#50540608_pgfId-28787]## _link:conn.htm#50540562_pgfId-1039513[CODE
EXAMPLE A-2]_ Connector Architecture 1.5 Resource Adapter XSD A-13

[#50540608_pgfId-28789]## _link:conn.htm#50540562_pgfId-1041835[CODE
EXAMPLE A-3]_ Connector Architecture 1.6 Resource Adapter XSD A-37

====== [#50540556_pgfId-874]## 

======= [#50540556_pgfId-5529]##

image:conn-9.gif[image]

Introduction

image:conn-10.gif[image]

[#50540556_pgfId-999449]##The Java™ Platform, Enterprise Edition (JavaTM
EE platform) provides containers for client applications, web components
based on JavaTM Servlets and JavaServer Pages™ (JSP™) and Enterprise
JavaBeans™ (EJB™) components. These containers provide deployment and
runtime support for application components. They provide a federated
view of the services provided by the underlying application server for
the application components.

[#50540556_pgfId-999450]##Containers can run on existing systems; for
example, web servers for the web containers; application servers, TP
monitors, and database systems for EJB containers. This enables
enterprises to leverage both the advantages of their existing systems
and those of Java EE. Enterprises can write, or rewrite, new
applications using Java EE capabilities and can also encapsulate parts
of existing applications in Enterprise JavaBeans, JavaServer Pages or
servlets.

[#50540556_pgfId-999451]##Enterprise applications access functions and
data associated with applications running on Enterprise Information
Systems (EIS). Application servers extend their containers and support
connectivity to heterogeneous EISs. Enterprise tools and Enterprise
Application Integration (EAI) vendors add value by providing tools and
frameworks to simplify the EIS integration task.

[#50540556_pgfId-999452]##For enterprise application integration,
bi-directional connectivity between enterprise applications and EIS is
essential. The Java EE Connector architecture defines standard contracts
that allow bi-directional connectivity between enterprise applications
and EISs. It also formalizes the relationships, interactions, and the
packaging of the integration layer, thus enabling enterprise application
integration.

======= [#50540556_pgfId-999453]##

image:conn-11.gif[image]

Overview

[#50540556_pgfId-999454]##The Java EE Connector architecture defines a
standard architecture for connecting the Java EE platform to
heterogeneous EISs. Examples of EISs include Enterprise Resource
Planning (ERP), mainframe transaction processing (TP), and database
systems.

[#50540556_pgfId-999455]##The connector architecture defines a set of
scalable, secure, and transactional mechanisms that enable the
integration of EISs with application serverslink:#pgfId-999522[1] and
enterprise applications.

[#50540556_pgfId-999456]##The connector architecture also defines a
Common Client Interface (CCI) for EIS access. The CCI defines a client
API for interacting with heterogeneous EISs.

[#50540556_pgfId-999457]##The connector architecture enables an EIS
vendor to provide a standard resource adapter for its EIS. A resource
adapter is a system-level software driver that is used by a Java
application to connect to an EIS. The resource adapter plugs into an
application server and provides connectivity between the EIS, the
application server, and the enterprise application. The resource adapter
serves as a protocol adapter that allows any arbitrary EIS communication
protocol to be used for connectivity.

[#50540556_pgfId-999458]##An application server vendor extends its
system once to support the connector architecture and is then assured of
seamless connectivity to multiple EISs. Likewise, an EIS vendor provides
one standard resource adapter which has the capability to plug in to any
application server that supports the connector architecture.

======= [#50540556_pgfId-999459]##

image:conn-11.gif[image]

Scope

[#50540556_pgfId-999460]##Version 1.0 of the connector architecture
defines:

[#50540556_pgfId-999461]##A standard set of system-level contracts
between an application server and EIS. These contracts focus on the
important system-level aspects of integration: connection management,
transaction management, and security.

[#50540556_pgfId-999462]##A Common Client Interface (CCI) that defines a
client API for interacting with multiple EISs.

[#50540556_pgfId-999463]##A standard deployment and packaging protocol
for resource adapters.

[#50540556_pgfId-999464]##Refer to section 2.2.2 for the rationale
behind the Common Client Interface.

[#50540556_pgfId-999465]##Version 1.5 of the connector architecture
defines:

[#50540556_pgfId-999466]##Lifecycle management contract. A contract
between an application server and a resource adapter that allows an
application server to manage the lifecycle of a resource adapter. This
contract provides a mechanism for the application server to bootstrap a
resource adapter instance during its deployment or application server
startup, and to notify the resource adapter instance during its
undeployment or during an orderly shutdown of the application server.

[#50540556_pgfId-999467]##Work management contract. A contract between
an application server and a resource adapter that allows a resource
adapter to do work (monitor network endpoints, call application
components, etc.) by submitting _Work_ instances to an application
server for execution. The application server dispatches threads to
execute submitted _Work_ instances. This allows a resource adapter to
avoid creating or managing threads directly, and allows an application
server to efficiently pool threads and have more control over its
runtime environment. The resource adapter can control the security
context and transaction context with which _Work_ instances are
executed.

[#50540556_pgfId-999468]##Transaction inflow contract. A contract
between an application server and a resource adapter that allows a
resource adapter to propagate an imported transaction to an application
server. This contract also allows a resource adapter to transmit
transaction completion and crash recovery calls initiated by an EIS, and
ensures that the ACID (Atomicity, Consistency, Isolation and Durability)
properties of the imported transaction are preserved.

[#50540556_pgfId-999469]##Message inflow contract. A standard, generic
contract between an application server and a resource adapter that
allows a resource adapter to asynchronously deliver messages to message
endpoints residing in the application server independent of the specific
messaging style, messaging semantics, and messaging infrastructure used
to deliver messages. This contract also serves as the standard message
provider pluggability contract that allows a wide range of message
providers (Java Message Service (JMS), Java API for XML Messaging
(JAXM), etc.) to be plugged into any Java EE compatible application
server by way of a resource adapter.

[#50540556_pgfId-999470]##Packaging Model. Describes the packaging model
for different types of resource adapters (outbound only, inbound only,
or both).

[#50540556_pgfId-1000022]##Version 1.6 of the Connector Architecture
defines:

[#50540556_pgfId-1000025]##Generic work context contract. A generic
contract that enables a resource adapter to control the execution
context of a _Work_ instance that it has submitted to the application
server for execution. The Generic work contract provides the mechanism
for a resource adapter to augment the runtime context of a _Work_
instance with additional contextual information flown-in from the EIS.
This contract enables a resource adapter to control, in a more flexible
manner, the contexts in which the _Work_ instances submitted by it are
executed by the application server’s _WorkManager_ .

[#50540556_pgfId-1000027]##Security work context. A standard contract
that enables a resource adapter to establish security information while
submiting a _Work_ instance for execution to a _WorkManager_ and while
delivering messages to message endpoints residing in the application
server. This contract provides a mechanism to support the execution of a
_Work_ instance in the context of an established identity. It also
supports the propagation of user information/Principal information from
an EIS to a MessageEndpoint during Message Inflow.

======= [#50540556_pgfId-999471]##

image:conn-11.gif[image]

Target Audience

[#50540556_pgfId-999472]##The target audience for this specification
includes:

[#50540556_pgfId-999473]##EIS vendors and resource adapter providers

[#50540556_pgfId-999474]##Messaging system vendors

[#50540556_pgfId-999475]##Application server vendors and container
providers

[#50540556_pgfId-999476]##Enterprise application developers and system
integrators

[#50540556_pgfId-999477]##Enterprise tool and EAI vendors

[#50540556_pgfId-999478]##The system-level contracts between an
application server and an EIS are targeted towards EIS vendors (or
resource adapter providers, if the two roles are different) and
application server vendors. The CCI is targeted primarily towards
enterprise tools and EAI vendors.

======= [#50540556_pgfId-999479]##

image:conn-11.gif[image]

JDBC and Connector Architecture

[#50540556_pgfId-999480]##The JavaTM DataBase Connectivity ("JDBCTM")
API defines a standard Java API for accessing relational databases. The
JDBC technology provides an API for sending SQL statements to a database
and processing the tabular data returned by the database.

[#50540556_pgfId-999481]##The connector architecture is a standard
architecture for integrating Java EE applications with EISs that are not
relational databases. Each of these EISs currently provides a native
function call API for identifying a function to call, specifying its
input data, and processing its output data. The goal of the Common
Client Interface (CCI) is to provide an EIS independent API for coding
these EIS function calls.

[#50540556_pgfId-999482]##The CCI is targeted at EIS development tools
and other sophisticated users of EISs. The CCI provides a way to
minimize the EIS specific code required by such tools. Most Java EE
developers will access EISs using these tools rather than using CCI
directly.

[#50540556_pgfId-999483]##It is expected that many Java EE applications
will combine relational database access using JDBC with EIS access using
EIS access tools based on CCI.

[#50540556_pgfId-999484]##The connector architecture defines a standard
SPI (Service Provider Interface) for integrating the transaction,
security, and connection management facilities of an application server
with those of a transactional resource manager. The JDBC 3.0
specification (see link:conn.htm#50540564_32901[See JDBC API
Specification, version 4.1]) specifies the relationship of JDBC to the
SPI specified in the connector architecture.

======= [#50540556_pgfId-999485]##

image:conn-11.gif[image]

Relationship With Other Integration Technologies (JBI and SCA)

[#50540556_pgfId-1000358]##The Enterprise Application Integration (EAI)
and Business to Business integration (B2B) functional space may be
considered, in an abstract sense, as forms of network service
composition. That is, in a typical EAI/B2B scenario, an enterprise
application may make use of network resources to realize some of its
functionity. In this context, the network resource may be a REST
service, a SOAP service, a database server, a JMS topic/queue, some
legacy application, etc.

[#50540556_pgfId-1000366]##The Java Business Integration (JBI) and
Service Component Architecture (SCA) are integration technologies that
come to mind in the EAI/B2B space. They allow the creation and
consumption of such network services. They enable the building of
applications through composition of services in an enterprise by
adopting a Service Oriented Architecture (SOA). These technologies can
be used to implement integration with various forms of network resources
that are not tied to a specific external architectural style.

[#50540556_pgfId-1000374]##The Connector architecture covers the
category of network resources that expose some form of connection
oriented protocol. Database servers, JMS systems, legacy apps, etc.
typically fall into this category of network resource. The Connector
architecture is the mechanism that the Java EE platform provides to
simplify use of such network resources.

======= [#50540556_pgfId-1000355]##

image:conn-11.gif[image]

Organization

[#50540556_pgfId-999486]##This document begins by describing the
rationale and goals for creating a standard architecture to integrate an
application server with multiple heterogeneous EISs. It then describes
the key concepts relevant to the connector architecture. These sections
provide an overview of the architecture.

[#50540556_pgfId-999487]##This document then describes typical scenarios
for using the connector architecture. This chapter introduces the
various roles and responsibilities involved in the development and
deployment of enterprise applications that integrate with multiple EISs.

[#50540556_pgfId-999488]##After these descriptive sections, this
document focuses on the prescriptive aspects of the connector
architecture.

======= [#50540556_pgfId-999489]##

image:conn-11.gif[image]

Document Conventions

[#50540556_pgfId-999490]##A regular Palatino font is used for describing
the connector architecture.

[#50540556_pgfId-999491]##An _italic_ font is used for paragraphs that
contain descriptive notes providing clarifications.

[#50540556_pgfId-999492]##A regular _Courier_ font is used for Java
source code, class, interface and method names.

[#50540556_pgfId-999493]##The requirements section occurring in various
chapters of this document highlight only the salient requirements, but
do not contain all the requirements. So, this entire document must be
used as a requirements specification.

[#50540556_pgfId-1000439]##Note that the scenarios described in this
document are illustrative in scope. The intent of the scenarios is not
to specify a prescriptive way of implementing a particular contract.

[#50540556_pgfId-999495]##This document uses the EJB component model to
describe some scenarios. The EJB specification (see
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2]) provides the latest details of the EJB
component model.

======= [#50540556_pgfId-999496]##

image:conn-11.gif[image]

Connector Architecture Version 1.7 Contributor Details

======= [#50540556_pgfId-1000680]##Expert Group Details (JSR-322)

[#50540556_pgfId-1000699]##Refer to the URL
_http://www.jcp.org/en/jsr/detail?id=322_ for details on the first
maintenance release of JSR-322. The following table lists the members of
the Connector Expert Group.

======= [#50540556_pgfId-1000702]##Connector 1.7 Expert Group Members

[#50540556_pgfId-1000706]##Company

[#50540556_pgfId-1000708]##Expert Member

[#50540556_pgfId-1000714]##IBM

[#50540556_pgfId-1000716]##Fred Rowe

[#50540556_pgfId-1000718]##Oracle

[#50540556_pgfId-1000720]##Weijun Tian, Sivakumar Thygaarajan
(Specification Lead)

[#50540556_pgfId-1000722]##Red Hat Middleware LLC

[#50540556_pgfId-1000724]##Jesper Pedersen

======= [#50540556_pgfId-1000762]##Acknowledgements

[#50540556_pgfId-1000764]##This maintenance release of the specification
is the result of the collaborative efforts of the Java EE Connector
Architecture 1.7 Expert Group (JSR-322) (individual members listed
above) through discussions in the java.net project at
_http://connector-spec.java.net_ .

[#50540556_pgfId-1000857]##The specification leads of the Java EE 7
Platform, Bill Shannon and Linda DeMichiel, provided overall guidance
and helped review the specification. Nigel Deakin and Marina Vatkina
provided valuable inputs for this specification related to enhancements
in the Message Inflow chapter. Byung-Woo Jun from Ericsson Infotech AB
participated as an expert group member earlier in this maintenance
release and gave valuable inputs for this specification.

[#50540556_pgfId-1000858]##Binod PG reviewed drafts of the specification
and gave valuable feedback. Jagadish Ramu and Dapeng Hu from the Java EE
Reference Implementation team (Project GlassFish) and Paul Hendley from
the Java EE Compatibility Test Suite team provided a lot of useful
comments and inputs to the content of this specification.

[#50540556_pgfId-1000768]##Murthy Narayanan and Prasad Subramanian
provided management support.

[#50540556_pgfId-1000691]## 

======= [#50540556_pgfId-1000655]##

image:conn-11.gif[image]

Connector Architecture Version 1.6 Contributor Details

======= [#50540556_pgfId-1000450]##Expert Group Details (JSR-322)

[#50540556_pgfId-1000047]##Refer to the URL
http://www.jcp.org/en/jsr/detail?id=322 for details on JSR-322. The
following table lists the members of the Connector Expert Group.

======= [#50540556_pgfId-1000276]##Connector 1.6 Expert Group Members

[#50540556_pgfId-1000280]##Company

[#50540556_pgfId-1000282]##Expert Member

[#50540556_pgfId-1000288]##Ericsson Infotech AB

[#50540556_pgfId-1000290]##Eltjo Boersma

[#50540556_pgfId-1000292]##IBM

[#50540556_pgfId-1000294]##Piotr Przybylski

[#50540556_pgfId-1000296]##Oracle

[#50540556_pgfId-1000298]##Jim Gish, Michael Gilbode, Weijun Tian

[#50540556_pgfId-1000300]##Red Hat Middleware LLC

[#50540556_pgfId-1000302]##Adrian Brock, Jesper Pedersen

[#50540556_pgfId-1000304]##SAP AG Walldorf

[#50540556_pgfId-1000306]##Nikolai Tankov

[#50540556_pgfId-1000308]##Sun Microsystems, Inc.

[#50540556_pgfId-1000310]##Binod PG and Sivakumar Thyagarajan
(Specification Leads)

[#50540556_pgfId-1000312]##Tmax Soft, Inc

[#50540556_pgfId-1000314]##Bongjae Chang, Eugene Chung

======= [#50540556_pgfId-1000040]##Acknowledgements

[#50540556_pgfId-1000458]##Many people contributed to the preparation
and review of this specification and we would like to thank them.

[#50540556_pgfId-1000584]##This specification is the result of the
collaborative efforts of the Java EE Connector Architecture 1.6 Expert
Group whose individual members, listed above, contributed countless
hours to ensure the success of this specification.

[#50540556_pgfId-1000585]##The specification leads of the Java EE 6
Platform, Bill Shannon and Roberto Chinnici, provided overall guidance
and helped review the specification. Ron Monzillo provided technical and
design assistance for the Security Inflow Contract of the specification.
Kenneth Saks, Lance Andersen, Rajiv Mordani, George Tharakan, Frank
Kieviet and Jan Luehe provided guidance and reviewed drafts of the
specification.

[#50540556_pgfId-1000570]##Jagadish Ramu and Shalini Muthukrishnan from
the Java EE Reference Implementation team (Project GlassFish) and Paul
Hendley from the Java EE Compatibility Test Suite team provided a lot of
useful comments and feedback on the various drafts of the specification.

[#50540556_pgfId-1000582]##Prabha MS, Paromita Dutta and Chinmayee
Srivathsa helped with the editorial tools and Janice Helb provided
excellent editorial assistance. Clemens Tator, Stephen Connolly and M.
Ganesh Sudhakar provided invaluable comments through the JSR 322
comments alias.

[#50540556_pgfId-1000583]##Tom Kincaid, Murthy Narayanan and Srikanth
Anandal provided management support.

======= [#50540556_pgfId-1000466]##

image:conn-11.gif[image]

Connector Architecture Version 1.5 Contributor Details

======= [#50540556_pgfId-1000467]##Expert Group Details (JSR-112)

[#50540556_pgfId-999497]##Refer to the URL
http://www.jcp.org/en/jsr/detail?id=112 for details on JSR-112. The
following table lists the members of the Connector Expert Group.

======= [#50540556_pgfId-999527]##Connector 1.5 Expert Group Members

[#50540556_pgfId-999531]##Company

[#50540556_pgfId-999533]##Expert Member

[#50540556_pgfId-999624]##BEA

[#50540556_pgfId-999670]##Jim Gish, Mitch Upton, Tom Mitchell

[#50540556_pgfId-999626]##Bull S.A.

[#50540556_pgfId-999672]##Michael Giroux

[#50540556_pgfId-999628]##Ericsson Infotech AB

[#50540556_pgfId-999674]##Peter Kristiansson

[#50540556_pgfId-999630]##Fujitsu Limited

[#50540556_pgfId-999676]##Ivar Alexander

[#50540556_pgfId-999632]##Hewlett-Packard

[#50540556_pgfId-999678]##John Speidel

[#50540556_pgfId-999634]##IBM

[#50540556_pgfId-999680]##Michael Beisiegel, Piotr Przybylski

[#50540556_pgfId-999636]##Bahwan Cybertek Technologies Inc.

[#50540556_pgfId-999682]##Vijay Sundhar

[#50540556_pgfId-999638]##Individual Expert

[#50540556_pgfId-999684]##Charlton Barreto

[#50540556_pgfId-999640]##IONA Technologies PLC

[#50540556_pgfId-999686]##Gary Tully

[#50540556_pgfId-999642]##MicroFocus

[#50540556_pgfId-999688]##Stephen Gennard

[#50540556_pgfId-999644]##NEON Systems, Inc.

[#50540556_pgfId-999690]##Yongtao You

[#50540556_pgfId-999646]##Oracle

[#50540556_pgfId-999692]##Anthony Lai

[#50540556_pgfId-999648]##SAP AG Walldorf

[#50540556_pgfId-999694]##Nikolai Tankov

[#50540556_pgfId-999650]##Siemens AG

[#50540556_pgfId-999696]##Ulf Lange

[#50540556_pgfId-999652]##Silverstream Software

[#50540556_pgfId-999698]##Roman Kishchenko

[#50540556_pgfId-999656]##Sonic Software

[#50540556_pgfId-999702]##Jaime Meritt

[#50540556_pgfId-999658]##Sun Microsystems, Inc.

[#50540556_pgfId-999704]##Ram Jeyaraman (Specification Lead)

[#50540556_pgfId-999660]##Sybase

[#50540556_pgfId-999706]##Mark DeLaFranier

[#50540556_pgfId-999662]##TIBCO Software Inc.

[#50540556_pgfId-999708]##Jon Dart, Anuradha M. Sastri

[#50540556_pgfId-999664]##Unisys

[#50540556_pgfId-999710]##Albert DeNigris

[#50540556_pgfId-999712]##WebMethods Corp

[#50540556_pgfId-999714]##Bruce Tran, Bruno Kurtic

======= [#50540556_pgfId-999498]##Acknowledgements

[#50540556_pgfId-999499]##This specification is the work of many people.
Bill Shannon, Mark Hapner, Kenneth Saks, Rahul Sharma, and Kate Stout
contributed to the overall design. Umit Yalcinalp designed the Connector
1.5 XML Schema Definition.

[#50540556_pgfId-999500]##Venkat Amirisetty, Qingqing Ouyang, Binod P G,
Balaji Raghunathan, Srikanth Padakandla and Aditya Gore from the J2EETM
Implementation team, Gursharan Singh from J2EE Compatibility Test Suite
team, provided useful feedback on the various drafts of the
specification. Ian Evans provided excellent editorial assistance.

[#50540556_pgfId-999501]##Vijay Sarathy and Vivek Khandelwal did a great
job evangelizing, strategizing, and guiding the overall direction of
this specification. Anita Jindal, Jennifer Douglas, David Heisser,
Bonnie Kellett, and Peter Walker provided management support.

[#50540556_pgfId-999502]##Sanjeev Krishnan, Max Mortazavi, Tony Ng,
Linda DeMichiel, George Tharakan, Colleen Evans (Sonic Software),
Hemanth Puttaswamy, Sheetal Vartak and Shivaram Mysore provided useful
comments on the specification.

[#50540556_pgfId-1000490]##And of course, this specification was formed
and molded based on conversations with and review feedback from the
expert group members.

======= [#50540556_pgfId-1000491]##

image:conn-11.gif[image]

Connector Architecture Version 1.0 Contributor Details

======= [#50540556_pgfId-1000496]##Expert Group Details (JSR-16)

[#50540556_pgfId-999505]##Refer to the URL
http://www.jcp.org/en/jsr/detail?id=16 for details on JSR-16. The
following are part of the expert group and have made invaluable
contributions to the Connector architecture specification:

======= [#50540556_pgfId-999717]##Connector 1.0 Expert Group Members

[#50540556_pgfId-999721]##Company

[#50540556_pgfId-999723]##Expert Member

[#50540556_pgfId-999817]##BEA

[#50540556_pgfId-999819]##Pete Homan

[#50540556_pgfId-999821]##Fujitsu

[#50540556_pgfId-999823]##Yoshi Otagiri, Ivar Alexander

[#50540556_pgfId-999825]##IBM

[#50540556_pgfId-999827]##Tom Freund, Michael Beisiegel

[#50540556_pgfId-999829]##Inline

[#50540556_pgfId-999831]##Jack Greenfield

[#50540556_pgfId-999833]##Inprise

[#50540556_pgfId-999835]##Charlton Barreto

[#50540556_pgfId-999837]##IPlanet

[#50540556_pgfId-999839]##Tony Pan, Pavan Bhatnagar

[#50540556_pgfId-999841]##Motorola

[#50540556_pgfId-999843]##Guy Bieber

[#50540556_pgfId-999845]##Oracle

[#50540556_pgfId-999847]##Dan Coyle

[#50540556_pgfId-999849]##SAP

[#50540556_pgfId-999851]##Marek Barwicki

[#50540556_pgfId-999853]##Sun

[#50540556_pgfId-999855]##Rahul Sharma (Specification Lead)

[#50540556_pgfId-999856]##Fred H. Carter

[#50540556_pgfId-999858]##Sybase

[#50540556_pgfId-999860]##Rajini Balay, K. Swaminathan

[#50540556_pgfId-999862]##Tibco

[#50540556_pgfId-999864]##Jon Dart

[#50540556_pgfId-999866]##Unisys

[#50540556_pgfId-999868]##Lester Lee

======= [#50540556_pgfId-999506]##Acknowledgements

[#50540556_pgfId-999507]##Shel Finkelstein, Mark Hapner, Vlada Matena,
Tony Ng, Bill Shannon, and Sekhar Vajjhala (all from Sun Microsystems)
have provided invaluable technical input and guidance to the Connector
architecture specification. Jean Zeng and Pong Ching also provided
useful input to the specification.

[#50540556_pgfId-999508]##Rick Cattell, Shel Finkelstein, Bonnie
Kellett, and Jeff Jackson have provided huge support to the
specification lead in the management of the Connectors expert group.

[#50540556_pgfId-999509]##Tony Ng is leading the effort of providing a
reference implementation for the Connector architecture as part of J2EE
1.3 platform. Liz Blair has worked on providing the Compatibility Test
Suite (CTS) plan for the Connector architecture.

[#50540556_pgfId-999510]##Beth Stearns was a great help in doing an
editorial review of this document.

====== [#50540560_pgfId-874]## 

======= [#50540560_pgfId-5529]##

image:conn-12.gif[image]

Overview

image:conn-13.gif[image]

[#50540560_pgfId-999451]##This chapter introduces key concepts that are
required to understand the connector architecture. It lays down a
reference framework to facilitate a formal specification of the
connector architecture in the subsequent chapters of this document.

======= [#50540560_pgfId-999452]##

image:conn-14.gif[image]

Definitions

======= [#50540560_pgfId-999453]##Enterprise Information System (EIS)

[#50540560_pgfId-999454]##An EIS provides the information infrastructure
for an enterprise. An EIS offers a set of services to its clients. These
services are exposed to clients as local and/or remote interfaces.
Examples of an EIS include:

[#50540560_pgfId-999455]##Enterprise Resource Planning (ERP) system

[#50540560_pgfId-999456]##Mainframe transaction processing (TP) system

[#50540560_pgfId-999457]##Legacy database system

[#50540560_pgfId-999458]##There are two aspects of an EIS:

[#50540560_pgfId-999459]##System level services - for example, SAP RFC,
CICS ECI

[#50540560_pgfId-999460]##An application specific interface - for
example, the table schema and specific stored procedures of a database,
the specific CICS TP program

======= [#50540560_pgfId-999461]##Connector Architecture

[#50540560_pgfId-999462]##An architecture for integrating Java EE
servers with EISs. There are two parts to this architecture: an EIS
vendor-provided resource adapter and an application server that allows
this resource adapter to be plugged in. This architecture defines a set
of contracts (such as transactions, security, connection management)
that a resource adapter has to support to plug in to an application
server.

[#50540560_pgfId-999463]##These contracts support bi-directional
communication (outbound and inbound) between an application server and
an EIS by way of a resource adapter. That is, the application server may
use the resource adapter for outbound communication to the EIS, and it
may also use the resource adapter for inbound communication from the
EIS.

======= [#50540560_pgfId-999464]##EIS Resource

[#50540560_pgfId-999465]##An EIS resource provides EIS-specific
functionality to its clients. Examples are:

[#50540560_pgfId-999466]##A record or set of records in a database
system

[#50540560_pgfId-999467]##A business object in an ERP system

[#50540560_pgfId-999468]##A transaction program in a transaction
processing system

======= [#50540560_pgfId-999469]##Resource Manager (RM)

[#50540560_pgfId-999470]##A resource manager manages a set of shared EIS
resources. A client requests access to a resource manager to use its
managed resources. A transactional resource manager can participate in
transactions that are externally controlled and coordinated by a
transaction manager.

[#50540560_pgfId-999471]##In the context of the connector architecture,
a client of a resource manager can either be a middle-tier application
server or a client-tier application. A resource manager is typically in
a different address space or on a different machine from the client that
accesses it.

[#50540560_pgfId-999472]##This document refers to an EIS as a resource
manager when it is mentioned in the context of transaction management.
Examples of resource managers are a database system, a mainframe TP
system, and an ERP system.

======= [#50540560_pgfId-999473]##Managed Environment

[#50540560_pgfId-999474]##A managed environment defines an operational
environment for a Java EE-based, multi-tier, web-enabled application
that accesses EISs. The application consists of one or more application
components—EJBs, JSPs, servlets—which are deployed on containers. These
containers can be one of the following:

[#50540560_pgfId-999475]##Web containers that host JSPs, servlets, and
static HTML pages

[#50540560_pgfId-999476]##EJB containers that host EJB components

[#50540560_pgfId-999477]##Application client containers that host
standalone application clients

======= [#50540560_pgfId-999478]##Non-Managed Environment

[#50540560_pgfId-999479]##A non-managed environment defines an
operational environment for a two-tier application. An application
client directly uses a resource adapter to access the EIS, which defines
the second tier of a two-tier application.

======= [#50540560_pgfId-999480]##Connection

[#50540560_pgfId-999481]##A connection provides connectivity to a
resource manager. It enables an application client to connect to a
resource manager, perform transactions, and access services provided by
that resource manager. A connection can be either transactional or
non-transactional. Examples include a database connection and an SAP R/3
connection. A connection to a resource manager may be used by a client
for bi-directional communication, depending on the capabilities of the
resource manager.

======= [#50540560_pgfId-999482]##Application Component

[#50540560_pgfId-999483]##An application component can be a server-side
component, such as an EJB, JSP, or servlet, that is deployed, managed,
and executed on an application server. It can also be a component
executed on the web-client tier but made available to the web-client by
an application server. Examples of the latter type of application
component include a Java applet, and a DHTML page.

======= [#50540560_pgfId-999484]##Container

[#50540560_pgfId-999485]##A container is a part of an application server
that provides deployment and runtime support for application components.
It provides a federated view of the services provided by the underlying
application server for the application components. For more details on
different types of standard containers, refer to the EJB (see
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2]), JSP, and servlet specifications.

======= [#50540560_pgfId-999489]##

image:conn-14.gif[image]

Rationale

[#50540560_pgfId-999490]##This section describes the rationale behind
the connector architecture.

======= [#50540560_pgfId-999491]##System Contracts

[#50540560_pgfId-999492]##A standard architecture is needed to integrate
various EISs with an application server. Without a standard, EIS vendors
and application server vendors may have to use vendor-specific
architectures to provide EIS integration.

[#50540560_pgfId-999493]##The connector architecture provides a Java
solution to the problem of bi-directional connectivity between the
multitude of application servers and EISs. By using the connector
architecture, it is no longer necessary for EIS vendors to customize
their product for each application server. An application server vendor
who conforms to the connector architecture also does not need to add
custom code whenever it wants to extend its application server to
support connectivity to a new EIS.

[#50540560_pgfId-999494]##The connector architecture enables an EIS
vendor to provide a standard resource adapter for its EIS. The resource
adapter plugs into an application server and provides the underlying
infrastructure for the integration between an EIS and the application
server.

[#50540560_pgfId-999495]##An application server vendor extends its
system only once to support the connector architecture and is then
assured of connectivity to multiple EISs. Likewise, an EIS vendor
provides one standard resource adapter and it has the capability to plug
in to any application server that supports the connector architecture.

[#50540560_pgfId-999499]##The following figure shows that a standard EIS
resource adapter can plug into multiple application servers. Similarly,
multiple resource adapters for different EISs can plug into an
application server. This system-level pluggability is made possible
through the connector architecture.

[#50540560_pgfId-999500]##If there are m application servers and n EISs,
the connector architecture reduces the scope of the integration problem
from an m x n problem to an m + n problem.

[#50540560_pgfId-999551]##[#50540560_24561]##System Level Pluggability
Between Application Servers and EISs

image:conn-15.gif[image]

======= [#50540560_pgfId-999553]##[#50540560_46551]##Common Client Interface

[#50540560_pgfId-999554]##An enterprise tools vendor provides tools that
lead to a simple application programming model for EIS access, thereby
reducing the effort required in EIS integration. An EAI vendor provides
a framework that supports integration across multiple EISs. Both types
of vendors need to integrate across heterogeneous EISs.

[#50540560_pgfId-999555]##Each EIS typically has a client API that is
specific to the EIS. Examples of EIS client APIs are RFC for SAP R/3 and
ECI for CICS.

[#50540560_pgfId-999556]##An enterprise tools vendor adapts different
client APIs for target EISs to a common client API. The adapted API is
typically specific to a tools vendor and supports an application
programming model common across all EISs. Adapting the API requires
significant effort on the part of a tools vendor. In this case, the m x
n integration problem applies to tools vendors.

[#50540560_pgfId-999557]##The connector architecture provides a solution
for the m x n integration problem for tools and EAI vendors. The
architecture specifies a standard Common Client Interface (CCI) that
supports a common client API across heterogeneous EISs.

[#50540560_pgfId-999558]##All EIS resource adapters that support CCI are
capable of being plugged into enterprise tools and EAI frameworks in a
standard way. A tools vendor need not do any API adoption; the vendor
can focus on providing its added value of simplifying EIS integration.

[#50540560_pgfId-999559]##The CCI drastically reduces the effort and
learning requirements for tools vendor by narrowing the scope of an m x
n problem to an m + n problem if there are m tools and n EISs.

======= [#50540560_pgfId-999560]##

image:conn-14.gif[image]

Goals

[#50540560_pgfId-999561]##The connector architecture has been designed
with the following goals:

[#50540560_pgfId-999562]##Simplify the development of scalable, secure,
and transactional resource adapters for a wide range of EISs—ERP
systems, database systems, mainframe-based transaction processing
systems.

[#50540560_pgfId-999563]##Be sufficiently general to cover a wide range
of heterogeneous EISs. The sufficient generality of the architecture
ensures that there are various implementation choices for different
resource adapters; each choice is based on the characteristics and
mechanisms of an underlying EIS.

[#50540560_pgfId-999564]##Be not tied to a specific application server
implementation, but applicable to all Java EE platform compliant
application servers from multiple vendors.

[#50540560_pgfId-999565]##Provide a standard client API for enterprise
tools and EAI vendors. The standard API will be common across
heterogeneous EISs.

[#50540560_pgfId-999566]##Express itself in a manner that allows an
organization to unambiguously determine whether or not an implementation
is compatible.

[#50540560_pgfId-999567]##Be simple to understand and easy to follow,
regardless of whether one is designing a resource adapter for a
particular EIS or developing/deploying application components that need
to access multiple EISs. This simplicity means the architecture
introduces only a few new concepts, and places minimal implementation
requirements so that it can be leveraged across different integration
scenarios and environments.

[#50540560_pgfId-999568]##Define contracts and responsibilities for
various roles that provide pieces for standard bi-directional
connectivity to an EIS. This enables a standard resource adapter from a
EIS vendor to be pluggable across multiple application servers.

[#50540560_pgfId-999569]##Enable an enterprise application programmer in
a non-managed application environment to directly use the resource
adapter to access the underlying EIS. This is in addition to managed
access to an EIS, with the resource adapter deployed in the middle-tier
application server.

[#50540560_pgfId-998874]## 

====== [#50540547_pgfId-874]## 

======= [#50540547_pgfId-5529]##

image:conn-16.gif[image]

[#50540547_95713]##The Connector Architecture

image:conn-17.gif[image]

[#50540547_pgfId-999451]##This chapter gives an overview of the
connector architecture.

[#50540547_pgfId-999452]##Multiple resource adapters—that is, one
resource adapter per type of EIS—are pluggable into an application
server. This capability enables application components deployed on the
application server to access the underlying EISs.

[#50540547_pgfId-999453]##An application server and an EIS collaborate
to keep all system-level mechanisms—transactions, security, and
connection management—transparent from the application components. As a
result, an application component provider focuses on the development of
business and presentation logic for its application components and need
not get involved in the system-level issues related to EIS integration.
This leads to an easier and faster cycle for the development of
scalable, secure, and transactional enterprise applications that require
connectivity with multiple EISs.

[#50540547_pgfId-999545]## 

[#50540547_pgfId-999475]##[#50540547_95803]##Overview of the Connector
Architecture

image:conn-18.gif[image]

======= [#50540547_pgfId-999476]##

image:conn-19.gif[image]

[#50540547_66542]##System Contracts

[#50540547_pgfId-999477]##To achieve a standard system-level
pluggability between application servers and EISs, the connector
architecture defines a standard set of system-level contracts between an
application server and an EIS. The EIS side of these system-level
contracts are implemented in a resource adapter.

[#50540547_pgfId-999478]##A resource adapter is specific to an
underlying EIS. It is a system-level software driver that is used by an
application server or an application component to connect to an EIS.

[#50540547_pgfId-999479]##A resource adapter plugs into an application
server. The resource adapter and application server collaborate to
provide the underlying mechanisms—transactions, security, connection
pooling, and dispatch to application components.

[#50540547_pgfId-999480]##A resource adapter is used within the address
space of the application server. Examples of resource adapters are:

{empty}[#50540547_pgfId-999483]##A JDBC driver to connect to a
relational database, as specified in the JDBC specification. For more
information on JDBC, see link:conn.htm#50540564_32901[See JDBC API
Specification, version 4.1]

[#50540547_pgfId-999485]##A resource adapter to connect to an ERP system

[#50540547_pgfId-999486]##A resource adapter to connect to a TP system

[#50540547_pgfId-999487]##A resource adapter to plug-in a messaging
system

[#50540547_pgfId-999488]##A resource adapter may provide different types
of connectivity between an application and an EIS.

[#50540547_pgfId-999489]##Outbound communication. The resource adapter
allows an application to connect to an EIS system and perform work. All
communication is initiated by the application. In this case, the
resource adapter serves as a passive library for connecting to an EIS,
and executes in the context of the application threads.

[#50540547_pgfId-999490]##Inbound communication. The resource adapter
allows an EIS to call application components and perform work. All
communication is initiated by the EIS. The resource adapter may request
threads from the application server or create its own threads.

[#50540547_pgfId-999491]##Bi-directional communication. The resource
adapter supports both outbound and inbound communication.

[#50540547_pgfId-999492]##The connector architecture defines the
following set of standard contracts between an application server and
EIS:

[#50540547_pgfId-999493]##A connection management contract that enables
an application server to pool connections to an underlying EIS, and
enables application components to connect to an EIS. This leads to a
scalable application environment that can support a large number of
clients requiring access to EISs.

[#50540547_pgfId-999494]##A transaction management contract between the
transaction manager and an EIS that supports transactional access to EIS
resource managers. This contract enables an application server to use a
transaction manager to manage transactions across multiple resource
managers. This contract also supports transactions that are managed
internal to an EIS resource manager without the necessity of involving
an external transaction manager.

[#50540547_pgfId-999495]##A security contract that enables secure access
to an EIS. This contract provides support for a secure application
environment that reduces security threats to the EIS and protects
valuable information resources managed by the EIS.

[#50540547_pgfId-999496]##A lifecycle management contract that allows an
application server to manage the lifecycle of a resource adapter. This
contract provides a mechanism for the application server to bootstrap a
resource adapter instance during its deployment or application server
startup, and to notify the resource adapter instance during its
undeployment or during an orderly shutdown of the application server.

[#50540547_pgfId-999497]##A work management contract that allows a
resource adapter to do work (monitor network endpoints, call application
components, etc.) by submitting _Work_ instances to an application
server for execution. The application server dispatches threads to
execute submitted _Work_ instances. This allows a resource adapter to
avoid creating or managing threads directly, and allows an application
server to efficiently pool threads and have more control over its
runtime environment. The resource adapter can control the security
context and transaction context with which _Work_ instances are
executed.

[#50540547_pgfId-999561]##A generic work context contract that enables a
resource adapter to control the execution context of a _Work_ instance
that it has submitted to the application server for execution. The
Generic Work Context Contract provides the mechanism for a resource
adapter to augment the runtime context of a _Work_ instance with
additional contextual information flown-in from the EIS. This contract
enables a resource adapter to control, in a more flexible manner, the
contexts in which the _Work_ instances submitted by it are executed by
the application server’s _WorkManager_ .

[#50540547_pgfId-999730]##A transaction inflow contract that allows a
resource adapter to propagate an imported transaction to an application
server. This contract also allows a resource adapter to transmit
transaction completion and crash recovery calls initiated by an EIS, and
ensures that the ACID properties of the imported transaction are
preserved.

[#50540547_pgfId-999566]##A security work context that enables a
resource adapter to establish security information while submiting a
_Work_ instance for execution to a _WorkManager_ and while delivering
messages to message endpoints residing in the application server. This
contract provides a mechanism to support the execution of a _Work_
instance in the context of an established identity. It also supports the
propagation of user information/Principal information from an EIS to a
MessageEndpoint during Message Inflow.

[#50540547_pgfId-999499]##A message inflow contract that allows a
resource adapter to asynchronously deliver messages to message endpoints
residing in the application server independent of the specific messaging
style, messaging semantics, and messaging infrastructure used to deliver
messages. This contract also serves as the standard message provider
pluggability contract that allows a wide range of message providers
(Java Message Service (JMS), Java API for XML Messaging (JAXM), etc.) to
be plugged into any Java EE compatible application server by way of a
resource adapter.

[#50540547_pgfId-999503]##link:conn.htm#50540547_95803[See Overview of
the Connector Architecture] does not illustrate any contracts that are
internal to an application server implementation. The specific
mechanisms and contracts within an application server are outside the
scope of the connector architecture specification. This specification
focuses on the system-level contracts between the application server and
the EIS.

[#50540547_pgfId-999507]##In link:conn.htm#50540547_95803[See Overview
of the Connector Architecture], the application server, application
component and resource adapter are shown as separate entities. This is
done to illustrate that there is a logical separation of the respective
roles and responsibilities defined for the support of the system level
contracts. However, this separation does not imply a physical
separation, as in an application server, application component and a
resource adapter running in separate processes.

======= [#50540547_pgfId-999508]##

image:conn-19.gif[image]

Client API

[#50540547_pgfId-999509]##The client API used by application components
for EIS access may be defined as:

[#50540547_pgfId-999513]##The standard Common Client Interface (CCI) as
specified in link:conn.htm#50540549_18304[See Common Client Interface].

[#50540547_pgfId-999514]##A client API specific to the type of a
resource adapter and its underlying EIS. An example of such an EIS
specific client API is JDBC for relational databases.

[#50540547_pgfId-999515]##The Common Client Interface (CCI) defines a
common client API for accessing EISs. The CCI is targeted towards
Enterprise Application Integration (EAI) and enterprise tools vendors.

======= [#50540547_pgfId-999516]##

image:conn-19.gif[image]

Requirements

[#50540547_pgfId-999517]##The connector architecture requires that the
connector architecture-compliant resource adapter and the application
server support the system contracts. Detailed requirements for each
system contract are specified in later chapters.

[#50540547_pgfId-999518]##The connector architecture recommends, though
it does not mandate, that a resource adapter support CCI as the client
API. The recommendation enables the connector architecture to provide a
solution for the m x n integration problem for application development
tools and EAI vendors.

[#50540547_pgfId-999519]##The connector architecture allows a resource
adapter with an EIS-specific client API to support system contracts and
to be capable of standard connector architecture-based pluggability into
an application server.

======= [#50540547_pgfId-999520]##

image:conn-19.gif[image]

Non-Managed Environment

[#50540547_pgfId-999521]##The connector architecture supports access to
EISs from non-managed application clients; for example, Java
applications and applets.

[#50540547_pgfId-999522]##In a non-managed two-tier application
environment, an application client directly uses a resource adapter
library. A resource adapter, in this case, exposes its low-level
transactions and security APIs to its clients. An application client has
to take responsibility for managing security and transactions (and rely
on connection pooling if done by the resource adapter internally) by
using the low-level APIs exposed by the resource adapter. This model is
similar to the way a two-tier JDBC application client accesses a
database system in a non-managed environment.

======= [#50540547_pgfId-998874]##

image:conn-19.gif[image]

[#50540547_84422]##Standalone Container Environment

[#50540547_pgfId-999746]##Server Providers can provide a Connector
container within a product that implements the Java EE Full Profile or
within a subset profile such as the Java EE Web Profile. The complete
set of application server requirements in this specification is required
for a compliant Java EE Connector Architecture 1.6 container within an
implementation of the Java EE Full Profile. The minimum set, listed
below, must be supported for a compliant Java EE Connector Architecture
1.6 container within an implementation of any subset of the Java EE Full
Profile. Overall profile requirements are described within the
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7].

[#50540547_pgfId-999759]##Non-”Full Profile” implementations may only
support a subset of the component specifications that were mandated to
be present in a full Java EE platform product implementation. An
implementation of the Connector specification bundled in such a managed
environment is described as standalone connector container below.

[#50540547_pgfId-999694]##Based on the availability of other dependent
component specification implementations, the following requirements must
be satisfied by a standalone connector container.

[#50540547_pgfId-1000012]##If a _MessageEndpointFactory_ implementation
(such as support for message-driven beans) is available, the Message
Inflow requirements specified in link:conn.htm#50540559_25704[See
Message Inflow] must be satisfied by it.

[#50540547_pgfId-1000013]##If an implementation of the Bean Validation
specification is provided, the requirements in
link:conn.htm#50540558_66628[See JavaBean Validation] must be supported.

[#50540547_pgfId-999622]##An existing resource adapter archive RAR may
not be fully functional in a standalone implementation, though. For
example a bi-directional resource adapter archive deployed on a
standalone implementation that does not support Message Inflow would not
have the corresponding Message Inflow support ( _endpointActivation_ )
provided to the resource adapter.

[#50540547_pgfId-1000005]##A standalone connector container
implementation that does not support one of the dependent component
specification implementations listed above must not fail the deployment
of a resource adapter that uses the capabilities in the unsupported
specifications. For instance, if a bi-directional resource adapter is
deployed to a standalone connector container that does not support
Message Inflow, the container will not be able to make calls to the
_endpointActivation_ method in the _ResourceAdapter_ JavaBean because
the implementation does not support Message Inflow (and therefore
_MessageEndpoint_ deployment). However, the container must support the
deployment of a bi-directional resource adapter and support other
capabilities of the resource adapter that do not rely on support for
Message Inflow (outbound communication, use of the WorkManager etc.).

[#50540547_pgfId-1000070]##The standalone connector container must
support the baseline compatibility requirements as defined by the Java
Authentication Service Provider Interface for Containers (JASPIC)
specification and support the Security Inflow requirements specified in
link:conn.htm#50540614_88146[See Security Inflow]. See
link:conn.htm#50540564_88238[See Java Authentication Service Provider
Interface for Containers Specification, version 1.4] for more
information on the JASPIC specification.

[#50540547_pgfId-1000162]##This specification does not define new
application components or require any particular existing application
component to be supported in the standalone connector container
environment.

====== [#50540565_pgfId-874]## 

======= [#50540565_pgfId-5529]##

image:conn-20.gif[image]

Roles and Scenarios

image:conn-21.gif[image]

[#50540565_pgfId-999451]##This chapter describes a set of roles specific
to the connector architecture. The goal of this chapter is to specify
contracts that ensure that the output of each role is compatible with
the input of the other role. Later chapters specify a detailed set of
responsibilities for each role, relative to the system-level contracts.

======= [#50540565_pgfId-999452]##

image:conn-22.gif[image]

Roles

[#50540565_pgfId-999453]##This section describes the roles and
responsibilities specific to the connector architecture.

======= [#50540565_pgfId-999454]##Resource Adapter Provider

[#50540565_pgfId-999455]##The resource adapter provider is an expert in
the technology related to an EIS and is responsible for providing a
resource adapter for an EIS. Since this role is highly EIS specific, an
EIS vendor typically provides the resource adapter for its system.

[#50540565_pgfId-999456]##A third-party vendor (who is not an EIS
vendor) may also provide an EIS resource adapter and its associated set
of application development tools. Such a provider typically specializes
in writing resource adapters and related tools for a large number of
EISs.

======= [#50540565_pgfId-999457]##Application Server Vendor

[#50540565_pgfId-999458]##The application server vendor provides an
implementation of a Java EE-compliant application server that provides
support for component based enterprise applications. A typical
application server vendor is an OS vendor, middleware vendor, or
database vendor. The role of an application server vendor is typically
the same as that of a container provider.

[#50540565_pgfId-999462]##The Java EE platform specification (see
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7]) specifies requirements for a Java EE
platform provider.

======= [#50540565_pgfId-999463]##Container Provider

[#50540565_pgfId-999464]##The container provider is responsible for
providing a container implementation for a specific type of application
component. For example, the container provider may provide a container
for EJB components. Each type of application component—EJB, servlet,
JSP, applet—has its own set of responsibilities for its container
provider. The respective specifications outline these responsibilities.

[#50540565_pgfId-999465]##A container implementation typically provides
the following functionality:

[#50540565_pgfId-999466]##It provides deployed application components
with transaction and security management, distribution of clients,
scalable management of resources, and other services that are generally
required as part of a managed server platform.

[#50540565_pgfId-999467]##It provides application components with
connectivity to an EIS by transparently managing security, resources,
and transactions using the system-level contracts with the EIS-specific
resource adapter.

[#50540565_pgfId-999468]##It insulates application components from the
specifics of the underlying system-level mechanisms by supporting a
simple, standard contract with the application component. Refer to the
Enterprise JavaBeans specification (see link:conn.htm#50540564_26771[See
Enterprise JavaBeans (EJB) Specification, version 3.2]) for more details
on the EJB component contract.

[#50540565_pgfId-999472]##The expertise of the container provider is
system-level programming, with its focus on the development of a
scalable, secure, and transaction-enabled container.

[#50540565_pgfId-999473]##The container provider is also responsible for
providing deployment tools necessary for the deployment of application
components and resource adapters. It is also required to provide runtime
support for the deployed application components.

[#50540565_pgfId-999474]##The container provider typically provides
tools that allow the system administrator to monitor and manage a
container and application components during runtime.

======= [#50540565_pgfId-999475]##Application Component Provider

[#50540565_pgfId-999476]##In the context of the connector architecture,
the application component provider produces an application component
that accesses one or more EISs to provide its application functionality.

[#50540565_pgfId-999477]##The application component provider is an
application domain expert. In the case of application components
targeted towards integration with multiple EISs, various business tasks
and entities are implemented based on access to EIS data and functions.

[#50540565_pgfId-999478]##The application component provider typically
programs against easy-to-use Java abstractions produced by application
development tools. These Java abstractions are based on the Common
Client interface (CCI).

[#50540565_pgfId-999479]##The application component provider is not
required to be an expert at system level programming. The application
component provider does not program transactions, security, concurrency,
or distribution, but relies on a container to provide these services
transparently.

[#50540565_pgfId-999480]##The application component provider is
responsible for specifying structural information for an application
component and its external dependencies. This information includes, for
example, the name and type of the connection factories, and security
information.

[#50540565_pgfId-999481]##The output of an application component
provider is a JavaTM Archive (JAR) file that contains the application
components and any additional Java classes required to connect to EISs.

======= [#50540565_pgfId-999482]##Enterprise Tools Vendors

[#50540565_pgfId-999483]##The application component provider relies on
tools to simplify application development and EIS integration. Since
programming client access to EIS data and functions is a complex
application development task, an application development tool reduces
the effort and complexity involved in this task.

[#50540565_pgfId-999484]##Enterprise tools serve different roles in the
application development process, as follows:

[#50540565_pgfId-999485]##Data and function mining tool - enables
application component providers to look at the scope and structure of
data and functions existing in an EIS

[#50540565_pgfId-999486]##Analysis and design tool - enables application
component providers to design an application in terms of EIS data and
functions

[#50540565_pgfId-999487]##Code generation tool- generates Java classes
for accessing EIS data and functions. A mapping tool that bridges across
two different programming models (object to relational or vice-versa)
falls into this category of tools.

[#50540565_pgfId-999488]##Application composition tool - enables
application component providers to compose application components from
Java classes generated by a code generation tool. This type of tool
typically uses the JavaBeansTM component model to enhance the ease of
programming and composition.

[#50540565_pgfId-999489]##Deployment tool - used by application
component providers and deployers to set transaction, security, and
other deployment time requirements.

[#50540565_pgfId-999490]##A number of these tools may be integrated
together to form an end-to-end application development environment.

[#50540565_pgfId-999491]##In addition, various tools and middleware
vendors offer EAI frameworks that simplify integration across
heterogeneous EISs.

======= [#50540565_pgfId-999492]##Application Assembler

[#50540565_pgfId-999493]##The application assembler combines various
application components into a larger set of deployable units. The input
of the application assembler is one or more JAR files produced by an
application component provider and the output is one or more JAR files
with a deployment descriptor. A deployment descriptor may not be
provided by the application assembler if metadata annotations (see
link:conn.htm#50540619_87413[See Metadata Annotations]) are used to
describe deployment information.

[#50540565_pgfId-999494]##The application assembler is typically a
domain expert who assembles application components to produce an
enterprise application. To achieve this goal, the application assembler
takes application components, possibly from multiple application
component providers, and assembles these components.

======= [#50540565_pgfId-999495]##Deployer

[#50540565_pgfId-999496]##The deployer takes one or more deployable
units of application components, produced by the application assembler
or component provider, and deploys the application components in a
target operational environment. An operational environment is comprised
of an application server and multiple connected EISs.

[#50540565_pgfId-999497]##The deployer is responsible for resolving all
external dependencies declared by the application component provider.
For example, the deployer ensures that all connection factories used by
the application components are present in an operational environment. To
perform its role, the deployer typically uses the application
server-provided deployment tools.

[#50540565_pgfId-999498]##The deployer is also responsible for the
deployment of resource adapters. Since an operational environment may
include multiple EISs, the role of the deployer is more intensive and
complex than that in a non-EIS scenario. The deployer has to understand
security, transaction, and connection management-related aspects of
multiple EISs that are configured in an operational environment.

======= [#50540565_pgfId-999499]##System Administrator

[#50540565_pgfId-999500]##The system administrator is responsible for
the configuration and administration of a complete enterprise
infrastructure that includes multiple containers and EISs.

[#50540565_pgfId-999501]##In an operational environment that has
multiple EISs, the deployer should manage the operational environment by
working closely with the system administrators of respective EISs. This
enables the deployer to resolve deployment issues while deploying
application components and resource adapters in a target operational
environment.

[#50540565_pgfId-999502]##This chapter introduced the roles involved in
the connector architecture. The later chapters specify responsibilities
for each role in more detail.

======= [#50540565_pgfId-999503]##

image:conn-22.gif[image]

Scenario: Integrated Purchase Order System

[#50540565_pgfId-999504]##This section describes a scenario that
illustrates the use of the connector architecture. The following
description is kept at a high level. Specific scenarios related to
transaction management, security, connection management, and inbound
communications are described in subsequent chapters.

[#50540565_pgfId-999505]##The following diagram shows the different
pieces that comprise this scenario:

======= [#50540565_pgfId-999541]##Illustration of a Scenario Based on the Connector Architecture

image:conn-23.gif[image]

[#50540565_pgfId-999542]##ERP Software Inc. is an enterprise system
vendor that provides an enterprise resource planning (ERP) system. ERP
Software wants to integrate its ERP system with various application
servers. It achieves this goal by providing a standard resource adapter
for its ERP system. The resource adapter for ERP systems supports the
standard inbound communication, transaction, connection management and
security contracts. The resource adapter also supports the Common Client
Interface (CCI) as its client API.

[#50540565_pgfId-999543]##TPSoft Inc. is another enterprise system
vendor that provides a transaction processing (TP) system. TPSoft has
also developed a standard resource adapter for its TP system. The
resource adapter library supports CCI as part of its implementation.

[#50540565_pgfId-999544]##AppServer Inc. is a system vendor that has an
application server product which supports the development and deployment
of component-based enterprise applications. This application server
product has an EJB container that provides deployment and runtime
support for EJB components. The application server supports the
system-level contracts that enable a resource adapter, which also
supports these contracts, to plug into the application server and
provide bi-directional connectivity to the underlying EIS. The EJB
container insulates EJB components from the communication, transaction,
security, and connection management mechanisms required for connecting
to the EIS.

[#50540565_pgfId-999545]##Manufacturer Corp. is a big manufacturing firm
that uses a purchase order processing system based on the ERP system for
its business processes. Recently, Manufacturer has acquired a firm that
uses TPSoft’s TP system for its purchase order processing. Manufacturer
aims to integrate these two systems together into a single integrated
purchase order system. It requires a scalable, multi-user, secure,
transaction-enabled integrated purchase order system that is not tied to
a specific computing platform. Manufacturer plans to deploy the
middle-tier of this system on the application server from AppServer Inc.

[#50540565_pgfId-999546]##The MIS department of Manufacturer develops a
PurchaseOrder EJB that provides an integrated view of the two underlying
purchase order systems. While developing PurchaseOrder EJB, the bean
provider does not program the transactions, security, connection
management or inbound communication mechanisms required for connectivity
to the ERP and TP systems; it relies on the EJB container and
application server to provide these services.

[#50540565_pgfId-999547]##The bean provider uses an application
programming model based on the CCI to access the business objects and
function modules for purchase order processing in the ERP system. The
bean provider uses a similar application programming model based on the
CCI to access the purchase order processing programs in the TP system.

[#50540565_pgfId-999548]##The MIS department of Manufacturer assembles
an integrated web-based purchase order application using PurchaseOrder
EJB with other types of application components, such as JSPs and
servlets.

[#50540565_pgfId-999549]##The MIS department installs and configures the
application server, ERP, and TP system as part of its operational
environment. It then deploys the integrated purchase order application
on this operational environment. As part of the deployment, the MIS
department configures the operational environment based on the
deployment requirements for the various application components that have
been assembled into the integrated enterprise application.

[#50540565_pgfId-999550]##After deploying and successfully testing the
integrated purchase order system, the MIS department makes the system
available for other departments to use.

======= [#50540565_pgfId-999551]##

image:conn-22.gif[image]

Scenario: Business Integration

[#50540565_pgfId-999552]##This scenario illustrates the use of the
connector architecture in a business integration scenario.

[#50540565_pgfId-999553]##Wombat Systems is a manufacturing firm that
aims to adopt an e-business strategy. Wombat has huge existing
investments in its EIS systems. The EISs include ERP systems, mainframe
transaction processing systems, and message providers.

[#50540565_pgfId-999554]##Wombat requires to interact with its various
partners. In order to do this, it requires support for different
interaction mechanisms. It also requires a mechanism to involve all its
EIS systems in the interaction. Further, it requires an application
sever to host its business applications which participate in the various
interactions.

[#50540565_pgfId-999555]##Wombat buys a Java EE based application server
from EComm, Inc. to host its business applications which interact with
its EISs and its various partners. The application server supports the
connector architecture contracts which make it possible to use
appropriate resource adapters to drive interactions with its partners
and its EISs.

[#50540565_pgfId-999556]##The connector architecture enables Wombat to
integrate its existing infrastructure with the application server.
Wombat buys off-the-shelf resource adapters for its existing set of EISs
and to support interactions with its partners and uses them to integrate
its business applications (deployed on the application server).

[#50540565_pgfId-999628]## 

======= [#50540565_pgfId-999607]##Connector Architecture Usage in Business Integration Scenario

image:conn-24.gif[image]

[#50540565_pgfId-998874]## 

====== [#50540558_pgfId-874]## 

======= [#50540558_pgfId-5529]##

image:conn-25.gif[image]

[#50540558_48357]##Lifecycle Management

image:conn-26.gif[image]

[#50540558_pgfId-999451]##This chapter specifies a contract between an
application server and a resource adapter that allows an application
server to manage the lifecycle of a resource adapter. This contract
provides a mechanism for the application server to bootstrap a resource
adapter instance during its deployment or application server startup,
and to notify the resource adapter instance during its undeployment or
during an orderly shutdown of the application server.

======= [#50540558_pgfId-999452]##

image:conn-27.gif[image]

[#50540558_54611]##Overview

[#50540558_pgfId-999453]##A resource adapter is a system component which
is deployed in an application server. When a resource adapter is
deployed, or during application server startup, an application server
requires to bootstrap an instance of the resource adapter in its address
space. When a resource adapter is undeployed, or during application
server shutdown, the application server requires a mechanism to notify
the resource adapter instance to stop functioning so that it can be
safely unloaded.

[#50540558_pgfId-999454]##The lifecycle management contract provides
such a mechanism for an application server to manage the lifecycle of a
resource adapter instance. This allows an application server to
bootstrap a resource adapter instance during resource adapter deployment
or application server startup and also to expose some of its useful
facilities to the resource adapter instance. It also provides a
mechanism to notify the resource adapter instance while it is undeployed
or during an orderly shutdown of the application server.

======= [#50540558_pgfId-999455]##

image:conn-27.gif[image]

Goals

[#50540558_pgfId-1000126]##Provide a mechanism for an application server
to manage the lifecycle of a resource adapter instance.

======= [#50540558_pgfId-1000127]##

image:conn-27.gif[image]

Lifecycle Management Model

[#50540558_pgfId-1000153]##Lifecycle Management Contract (Interfaces)

image:conn-28.gif[image]

[#50540558_pgfId-999510]##Lifecycle Management (Object Diagram)

image:conn-29.gif[image]

[#50540558_pgfId-999970]## 

[width="100%",cols="100%",]
|===
a|
[#50540558_pgfId-999973]##package javax.resource.spi;

[#50540558_pgfId-999975]## 

[#50540558_pgfId-999976]##import javax.resource.spi.work.WorkManager;

[#50540558_pgfId-999977]## 

[#50540558_pgfId-999978]##public interface ResourceAdapter \{

[#50540558_pgfId-999979]## void start(BootstrapContext) // startup
notification

[#50540558_pgfId-999991]## throws ResourceAdapterInternalException;

[#50540558_pgfId-999981]## void stop(); // shutdown notification

[#50540558_pgfId-999982]## ... // other operations

[#50540558_pgfId-999983]##}

[#50540558_pgfId-999984]## 

[#50540558_pgfId-999985]##public interface BootstrapContext \{

[#50540558_pgfId-999986]## WorkManager getWorkManager();

[#50540558_pgfId-999987]## ... // other operations

[#50540558_pgfId-999988]##}

|===

[#50540558_pgfId-999526]##An application server implements the
_BootstrapContext_ and _WorkManager_ interfaces. A resource adapter
implements the _ResourceAdapter_ interface.

======= [#50540558_pgfId-999527]##[#50540558_94107]##ResourceAdapter JavaBean and Bootstrapping a Resource Adapter Instance

[#50540558_pgfId-999528]##The implementation class name of the
ResourceAdapter interface is specified in the resource adapter
deployment descriptor or through the _Connector_ annotation described in
link:conn.htm#50540619_30627[See @Connector]. The ResourceAdapter class
must be a JavaBean. Refer to link:conn.htm#50540546_81739[See JavaBean
Requirements]. During resource adapter deployment, the resource adapter
deployer creates a ResourceAdapter JavaBean and configures it with the
appropriate properties.

[#50540558_pgfId-999532]##When a resource adapter is deployed, or during
application server startup, an application server bootstraps an instance
of the resource adapter in its address space. In order to bootstrap a
resource adapter instance, the application server must use the
configured ResourceAdapter JavaBean and call its start method. The start
method call is a startup notification from the application server, and
this method is called by an application server thread.

[#50540558_pgfId-999533]##During the start method call the
ResourceAdapter JavaBean is responsible for initializing the resource
adapter instance. This may involve creating resource adapter instance
specific objects, creating threads (refer to
link:conn.htm#50540573_95662[See Work Management]), and setting up
network endpoints. A ResourceAdapter JavaBean represents exactly one
functional resource adapter unit or instance. The application server
must instantiate exactly one ResourceAdapter JavaBean per functional
resource adapter instance. The application server must create at least
one functional resource adapter instance per resource adapter
deployment. An application server may create more than one functional
resource adapter instance per resource adapter deployment, in order to
create replicas of a single functional resource adapter instance on
multiple JavaTM Virtual Machineslink:#pgfId-1001075[2]. In general,
however, there should be just one functional resource adapter instance
per deployment.

[#50540558_pgfId-1000534]##The application server is allowed to have
multiple instances of a ResourceAdapter JavaBean active simultaneously,
in the same JVMTM instance, provided the instances are not equal. Their
equality is determined using the equals method, and therefore, the
ResourceAdapter JavaBean is required to implement the equals method.

[#50540558_pgfId-999540]##During the start method call, an application
server must provide a BootstrapContext instance containing references to
some of the application server facilities (for example, _WorkManager_ )
for use by the resource adapter instance. The application server
facilities exposed through the BootstrapContext instance may be used by
the resource adapter instance during its lifetime.

[#50540558_pgfId-999541]##During the start method call, the resource
adapter instance initializes itself, and may use the _WorkManager_ to
submit _Work_ instances for execution (see
link:conn.htm#50540573_95662[See Work Management]). The start method
call should return in a timely manner, and should avoid blocking calls,
such as use of doWork method call on the _WorkManager_ instance. The
application server may throw a WorkRejectedException in response to any
or all doWork method calls on the _WorkManager_ instance, in order to
enforce that a start method call does not block. Resource adapter
implementations are strongly recommended to use startWork and
scheduleWork methods on the _WorkManager_ , instead of the doWork
method.

[#50540558_pgfId-999545]##Any exception thrown during the start method
call indicates an error condition, and the attempt by the application
server to create a resource adapter instance fails. A future version of
the specification may add a two-phase startup procedure.

[#50540558_pgfId-999546]##A resource adapter instance at runtime may
contain several objects that may be created and discarded during its
lifetime. Such objects include ManagedConnectionFactory JavaBean (refer
to link:conn.htm#50540552_18615[See Connection Management]),
ActivationSpec JavaBean (refer to link:conn.htm#50540559_25704[See
Message Inflow]), various connection objects, resource adapter private
objects, and other resource adapter specific objects that are exposed to
applications.

[#50540558_pgfId-999553]##The ResourceAdapter JavaBean represents a
resource adapter instance and contains the configuration information
pertaining to that resource adapter instance. This configuration
information may also be used as global defaults for
ManagedConnectionFactory and ActivationSpec JavaBeans. That is, when
ManagedConnectionFactory or ActivationSpec JavaBeans are created they
may inherit the global defaults (ResourceAdapter JavaBean configuration
information), which make it easier to configure them.

[#50540558_pgfId-999554]##A resource adapter instance may provide
bi-directional connectivity to multiple EIS instances. A
ManagedConnectionFactory JavaBean can be used to provide outbound
connectivity to a single EIS instance. An ActivationSpec JavaBean can be
used to provide inbound connectivity from an EIS instance. A resource
adapter instance may contain several such ManagedConnectionFactory and
ActivationSpec JavaBeans. The following figure describes the association
between a resource adapter instance and its various
ManagedConnectionFactory and ActivationSpec JavaBeans.

[#50540558_pgfId-1000156]## 

[#50540558_pgfId-999621]##[#50540558_95499]##Resource Adapter Instance
(Composition)

image:conn-30.gif[image]

======= [#50540558_pgfId-999622]##[#50540558_23545]##ManagedConnectionFactory JavaBean and Outbound Communication

[#50540558_pgfId-999623]##A _ManagedConnectionFactory_ JavaBean
represents outbound connectivity information to an EIS instance from an
application by way of a specific resource adapter instance. This
contains the configuration information pertaining to outbound
connectivity to an EIS instance. Refer to
link:conn.htm#50540552_18615[See Connection Management] for more details
on the ManagedConnectionFactory JavaBean.

[#50540558_pgfId-999627]##When a _ManagedConnectionFactory_ JavaBean is
created, it may inherit the ResourceAdapter JavaBean (which represents
the resource adapter instance) configuration information, and overrides
specific global defaults, if any, and may add other configuration
information specific to outbound connectivity.

[#50540558_pgfId-999628]##That is, in the case of outbound
communication, the outbound connectivity configuration is a union of
ResourceAdapter JavaBean and ManagedConnectionFactory JavaBean
configuration, with the intersecting configuration properties based on
the ManagedConnectionFactory JavaBean settings.

[#50540558_pgfId-999629]##Outbound communication is initiated by an
application and the communication occurs in the context of an
application thread, even though resource adapter threads may be involved
in the interaction. Note, a resource adapter may use the work management
contract (refer to link:conn.htm#50540573_95662[See Work Management]) to
request threads to do work.

[width="100%",cols="100%",]
|===
a|
[#50540558_pgfId-1000012]##import
javax.resource.spi.ResourceAdapterAssociation;

[#50540558_pgfId-1000014]##import
javax.resource.spi.ManagedConnectionFactory;

[#50540558_pgfId-1000015]## 

[#50540558_pgfId-1000016]##public class ManagedConnectionFactoryImpl

[#50540558_pgfId-1000017]## implements ManagedConnectionFactory,
ResourceAdapterAssociation \{

[#50540558_pgfId-1000018]## 

[#50540558_pgfId-1000019]## ResourceAdapter getResourceAdapter();

[#50540558_pgfId-1000020]## void setResourceAdapter(ResourceAdapter)
throws ResourceException;

[#50540558_pgfId-1000021]## ... // other methods

[#50540558_pgfId-1000022]##}

|===

[#50540558_pgfId-999643]##The _ResourceAdapterAssociation_ interface
specifies the methods to associate a ManagedConnectionFactory JavaBean
with a _ResourceAdapter_ JavaBean.

[#50540558_pgfId-999644]##Prior to using a _ManagedConnectionFactory_
JavaBean, the application server must create an association between the
_ManagedConnectionFactory_ JavaBean and a ResourceAdapter JavaBean, by
calling the setResourceAdapter method on the ManagedConnectionFactory
JavaBean. A successful association is established only when the
setResourceAdapter method on the ManagedConnectionFactory JavaBean
returns without throwing an exception.

[#50540558_pgfId-999645]##The setResourceAdapter method on the
ManagedConnectionFactory JavaBean must be called exactly once; that is,
the association must not change during the lifetime of a
ManagedConnectionFactory JavaBean.

======= [#50540558_pgfId-999646]##[#50540558_43298]##ActivationSpec JavaBean and Inbound Communication

[#50540558_pgfId-999647]##An ActivationSpec JavaBean represents inbound
connectivity information from an EIS instance to an application by way
of a specific resource adapter instance. This contains the configuration
information pertaining to inbound connectivity from an EIS instance.
Refer to link:conn.htm#50540559_25704[See Message Inflow] for more
details on the ActivationSpec JavaBean.

[#50540558_pgfId-999651]##When an ActivationSpec JavaBean is created, it
may inherit the ResourceAdapter JavaBean (which represents the resource
adapter instance) configuration information, and overrides specific
global defaults, if any, and may add other configuration information
specific to inbound connectivity.

[#50540558_pgfId-999652]##That is, in the case of inbound communication,
the inbound connectivity configuration is a union of ResourceAdapter
JavaBean and ActivationSpec JavaBean configuration, with the
intersecting configuration properties based on the ActivationSpec
JavaBean settings.

[#50540558_pgfId-999653]##Inbound communication is initiated by an EIS
instance and the communication occurs in the context of a resource
adapter thread. There are no application threads involved. Note, a
resource adapter may use the work management contract (refer to
link:conn.htm#50540573_95662[See Work Management]) to request threads to
do work.

[width="100%",cols="100%",]
|===
a|
[#50540558_pgfId-1000027]##import javax.resource.spi.ActivationSpec;

[#50540558_pgfId-1000029]## 

[#50540558_pgfId-1000030]##// ActivationSpec interface extends
ResourceAdapterAssociation interface.

[#50540558_pgfId-1000031]## 

[#50540558_pgfId-1000032]##public class ActivationSpecImpl implements
ActivationSpec \{

[#50540558_pgfId-1000033]## ResourceAdapter getResourceAdapter();

[#50540558_pgfId-1000034]## void setResourceAdapter(ResourceAdapter)
throws ResourceException;

[#50540558_pgfId-1000035]## ... // other methods

[#50540558_pgfId-1000036]##}

|===

[#50540558_pgfId-999666]##The ResourceAdapterAssociation interface
specifies the methods to associate an ActivationSpec JavaBean with a
ResourceAdapter JavaBean.

[#50540558_pgfId-999667]##Prior to using an ActivationSpec JavaBean, the
application server must create an association between the ActivationSpec
JavaBean and a ResourceAdapter JavaBean, by calling the
setResourceAdapter method on the ActivationSpec JavaBean. A successful
association is established only when the setResourceAdapter method on
the ActivationSpec JavaBean returns without throwing an exception.

[#50540558_pgfId-999668]##The setResourceAdapter method on the
ActivationSpec JavaBean must be called exactly once; that is, the
association must not change during the lifetime of an ActivationSpec
JavaBean.

======= [#50540558_pgfId-999669]##Resource Adapter Shutdown Procedure

[#50540558_pgfId-999670]##The following are some likely situations
during which an application server would shutdown a resource adapter
instance:

[#50540558_pgfId-999671]##The application server is being shutdown.

[#50540558_pgfId-999672]##The resource adapter is being undeployed.

[#50540558_pgfId-999673]##Irrespective of what causes a resource adapter
instance to be shutdown, the application server must use the following
two phases to shutdown a resource adapter instance.

======= [#50540558_pgfId-999674]##Phase One

[#50540558_pgfId-1000621]##Before calling the stop method on the
ResourceAdapter JavaBean, the application server must ensure that all
dependant applications using the specific resource adapter instance are
stopped. This includes deactivating all message endpoints receiving
messages by way of the specific resource adapter. Note, however, since
dependant applications typically cannot be stopped until they are
undeployed, the application server may have to delay stopping the
resource adapter instance, until all such dependant applications are
undeployed.

[#50540558_pgfId-1000636]##Completion of phase one guarantees that
application threads will not use the resource adapter instance, even
though the resource adapter instance specific objects may still be in
the memory heap. This ensures that all application activities including
transactional activities are completed.

[#50540558_pgfId-999676]##Thus, phase one ensures that even if a
resource adapter instance does not properly shutdown during phase two,
the resource adapter instance is practically unusable.

======= [#50540558_pgfId-999677]##Phase Two

[#50540558_pgfId-1000245]##The application server calls the stop method
on the ResourceAdapter JavaBean to notify the resource adapter instance
to stop functioning so that it can be safely unloaded. This is a
graceful shutdown notification from the application server, and this
method is called by an application server thread.

[#50540558_pgfId-1000604]##The ResourceAdapter JavaBean is responsible
for performing an orderly shutdown of the resource adapter instance
during the stop method call. This may involve closing network endpoints,
relinquishing threads, releasing all active _Work_ instances, allowing
resource adapter internal in-flight transactions to complete if they are
already in the process of doing a commit, and flushing any cached data
to the EIS.

[#50540558_pgfId-1000368]##The resource adapter instance is considered
fully functional until the application server calls the stop method on
the ResourceAdapter JavaBean.

[#50540558_pgfId-999681]##Any unchecked exception thrown by the stop
method call does not alter the processing of the application server
shutdown or resource adapter undeployment that caused the stop method
call. The application server may log the exception information for error
reporting purposes.

[#50540558_pgfId-999682]##Note, it is possible for a resource adapter
instance to become non-functional during its lifetime even before the
stop method is called, due to EIS failure or other reasons. In such
cases, the resource adapter instance should throw exceptions to indicate
the failure condition, when it is accessed by an application (during
outbound communication) or the application server.

[#50540558_pgfId-1000614]##A future version of the specification may add
a forced shutdown method in addition to the current graceful stop
method.

======= [#50540558_pgfId-999683]##Requirements

[#50540558_pgfId-999684]##The application server must use a new
ResourceAdapter JavaBean for managing the lifecycle of each resource
adapter instance and must discard the ResourceAdapter JavaBean after its
stop method has been called. That is, the application server must not
reuse the same ResourceAdapter JavaBean object to manage multiple
instances of a resource adapter, since the ResourceAdapter JavaBean
object may contain resource adapter instance specific state information.

[#50540558_pgfId-999685]##The application server must call the start
method on the ResourceAdapter JavaBean (in order to create a functional
resource adapter instance), before accessing other methods on the
ResourceAdapter JavaBean instance or before using other objects that
belong to the same resource adapter instance.

[#50540558_pgfId-999686]##The application server thread which calls the
start and the stop method on the ResourceAdapter JavaBean executes in an
unspecified context. However, the application server thread must have at
least the same level of security permissions as that of the resource
adapter instance.

[#50540558_pgfId-1000162]## 

[#50540558_pgfId-1000235]##Resource Adapter Lifecycle (State Diagram)

image:conn-31.gif[image]

======= [#50540558_pgfId-1000160]##Resource Adapter Implementation Guidelines

[#50540558_pgfId-999688]##The ResourceAdapter JavaBean should be treated
as a central authority or registry for resource adapter instance
specific information, and it should have access to the overall state of
the resource adapter instance (network endpoints, etc.). This helps in
the manageability of the resource adapter instance, and in performing an
orderly shutdown.

[#50540558_pgfId-999689]##Some conventions to follow:

[#50540558_pgfId-999690]##Any resource adapter specific object (for
example, ManagedConnectionFactory JavaBean, ActivationSpec JavaBean, or
others) which creates network endpoints should register them with the
ResourceAdapter JavaBean.

[#50540558_pgfId-999691]##The resource adapter threads should
periodically scan the ResourceAdapter JavaBean state and behave
accordingly. It is desirable that such threads avoid boundless blocking
on I/O calls, and instead use a bounded blocking duration. This helps in
resource adapter shutdown, and also potentially avoids deadlock
situations during shutdown.

[#50540558_pgfId-999692]##The above conventions enable a ResourceAdapter
JavaBean to effectively manage the resource adapter instance and to
perform an orderly shutdown of the resource adapter instance.

======= [#50540558_pgfId-999693]##JavaBean Configuration and Deployment

[#50540558_pgfId-999694]##There is at most one ResourceAdapter JavaBean
instance per resource adapter instance. But there can be many
ManagedConnectionFactory, ActivationSpec or administered object
instances (link:conn.htm#50540559_47231[See Administered Objects]) per
resource adapter instance.

[#50540558_pgfId-999698]##The ResourceAdapter JavaBean instance is
created and configured during resource adapter deployment. The
ManagedConnectionFactory, ActivationSpec and administered object
instances are created and configured during the lifetime of a resource
adapter instance.

[#50540558_pgfId-999699]##At runtime, the resource adapter internally
uses a union of the configured ResourceAdapter and
ManagedConnectionFactory JavaBean properties, to represent outbound
communication configuration.

[#50540558_pgfId-999700]##Similarly, at runtime, the resource adapter
internally uses a union of the configured ResourceAdapter and
ActivationSpec JavaBean properties, to represent inbound communication
configuration.

======= [#50540558_pgfId-999701]##[#50540558_33600]##ResourceAdapter JavaBean Instance Configuration

[#50540558_pgfId-999702]##Create a ResourceAdapter JavaBean instance.
This will initialize the instance with the defaults specified by way of
the JavaBean mechanism.

[#50540558_pgfId-999703]##Apply the ResourceAdapter class configuration
properties specified in the resource adapter deployment descriptor, on
the ResourceAdapter instance. This may override some of the default
values specified through the JavaBean mechanism. The application server
is required to merge values specified by way of annotations and
deployment descriptors as specified in link:conn.htm#50540619_65903[See
Deployment Descriptors and Annotations], before applying the
ResourceAdapter class configuration properties.

[#50540558_pgfId-999704]##The ResourceAdapter deployer may further
override the values of the ResourceAdapter instance before deployment.

======= [#50540558_pgfId-999705]##Resource Adapter Deployment

[#50540558_pgfId-999706]##The ResourceAdapter instance property values
may be stored separately and reused later while configuring
ManagedConnectionFactory, ActivationSpec, or administered object
instances.

======= [#50540558_pgfId-999707]##[#50540558_24229]##ManagedConnectionFactory JavaBean Instance Configuration

[#50540558_pgfId-999708]##Create a ManagedConnectionFactory JavaBean
instance. This will initialize the instance with the defaults specified
by way of the JavaBean mechanism.

[#50540558_pgfId-999709]##Apply the ResourceAdapter instance property
values, that were stored earlier, on the ManagedConnectionFactory
instance. Note, that the ManagedConnectionFactory JavaBean may have
none, some or all of the properties of the ResourceAdapter JavaBean.

[#50540558_pgfId-999710]##Apply the ManagedConnectionFactory class
configuration properties specified in the resource adapter deployment
descriptor, on the ManagedConnectionFactory instance.

[#50540558_pgfId-1000881]##The application server is required to merge
values specified by way of annotations and deployment descriptors as
specified in link:conn.htm#50540619_65903[See Deployment Descriptors and
Annotations], before applying the ManagedConnectionFactory class
configuration properties.

[#50540558_pgfId-999711]##The ManagedConnectionFactory deployer may
further override the values of the ManagedConnectionFactory instance
before deployment.

[#50540558_pgfId-999712]##At runtime, the resource adapter internally
uses a union of the configured ResourceAdapter and
ManagedConnectionFactory JavaBean properties, to represent outbound
communication configuration. Note, the ManagedConnectionFactory instance
and the ResourceAdapter instance may have intersecting property names.
In such a situation, the values specified in the
ManagedConnectionFactory instance takes precedence.

======= [#50540558_pgfId-999713]##[#50540558_69649]##ActivationSpec JavaBean Instance Configuration

[#50540558_pgfId-999714]##Create an ActivationSpec JavaBean instance.
This will initialize the instance with the defaults specified by way of
the JavaBean mechanism.

[#50540558_pgfId-999715]##Apply the ResourceAdapter instance property
values, that were stored earlier, on the ActivationSpec instance. Note,
that the ActivationSpec JavaBean may have none, some, or all of the
properties of the ResourceAdapter JavaBean.

[#50540558_pgfId-999716]##Apply the ActivationSpec class configuration
properties specified in the application deployment descriptor, on the
ActivationSpec instance.

[#50540558_pgfId-1000888]##The application server is required to merge
values specified by way of annotations and deployment descriptors as
specified in link:conn.htm#50540619_65903[See Deployment Descriptors and
Annotations], before applying the ActivationSpec class configuration
properties.

[#50540558_pgfId-999717]##The ActivationSpec deployer may further
override the values of the ActivationSpec instance before deployment.

[#50540558_pgfId-999718]##At runtime, the resource adapter internally
uses a union of the configured ResourceAdapter and ActivationSpec
JavaBean properties, to represent inbound communication configuration.
Note, the ActivationSpec instance and the ResourceAdapter instance may
have intersecting property names. In such a situation, the values
specified in the ActivationSpec instance takes precedence.

======= [#50540558_pgfId-999719]##[#50540558_66628]##JavaBean Validation

[#50540558_pgfId-1000780]##The Bean Validation specification (see
link:conn.htm#50540564_77345[See Bean Validation Specification, version
1.1]) defines “a metadata model and API for JavaBean validation. The
default metadata source is annotations, with the ability to override and
extend the meta-data through the use of XML validation descriptors.”

[#50540558_pgfId-1000743]##The JavaBeans provided by the resource
adapter implementation, like _ResourceAdapter_ ,
_ManagedConnectionFactory_ etc, may use the annotations or the XML
validation descriptor facilities defined by the Bean Validation
specification to express their validation requirements of its
configuration properties to the application server. A constraint
annotation, can be applied to a JavaBean type, on any of the type’s
fields or on any of the JavaBeans-compliant properties.The use of Bean
Validation constraint annotations by the resource adapter implementation
as a self-validation check behavior is optional.

[#50540558_pgfId-1000723]##The Bean Validation specification defines a
set of standard built-in constraints. The resource adapter
implementation is encouraged to use them instead of redefining custom
annotations for the same use cases. The resource adapter implementation
may (but is not limited to) use the Bean Validation facilities for the
following use cases:

[#50540558_pgfId-1000725]## _Range or limits specification._ To ensure
that the value provided by a deployer for a configuration property falls
within prescribed limits. The resource adapter implementation may use
_@Min_ , _@Max_ , _@Size_ constraints for this purpose.

[#50540558_pgfId-1000728]## _Mandatory attributes._ To require the
deployer to provide a value for a configuration property. The resource
adapter implementation may use the _@NotNull_ constraint for this use
case.

[#50540558_pgfId-1000815]##In the Java EE 6 environment, as specified in
the Java EE platform specification, the Bean Validation facilities are
available. The application server must check the validity of the
configuration settings provided by the deployer for a JavaBean, using
the capabilities provided by the Bean Validation specification. This
validation must be performed before using the JavaBean. This helps to
catch configuration errors earlier on without having to wait until the
JavaBean is put to use. As the application server may check the
validation of the configuration settings at deployment time and runtime,
the constraint validation implementation must not make any assumptions
of the availability of a live resource adapter instance. The application
server must support the decoration of the following JavaBeans with
constraint annotations:

[#50540558_pgfId-1000769]## _ResourceAdapter_

[#50540558_pgfId-1000773]## _ManagedConnectionFactory_

[#50540558_pgfId-1000770]## _ActivationSpec_

[#50540558_pgfId-1000771]##Administered Objects

[#50540558_pgfId-1000864]##The application server must, by default,
target the _javax.validation.groups.Default_ group for validation. The
application server must validate the JavaBean by obtaining a _Validator_
instance from its _ValidatorFactory_ and invoking the _validate_ method
with the targeted groups. If the set of _ConstraintViolation_ objects
returned by the _validate_ method is not empty, the application server
must fail validation by throwing the
_javax.validation.ConstraintValidationException_ containing a reference
to the returned set of _ConstraintViolation_ objects, and must not put
the JavaBean in use. The application server must treat all JavaBean
properties as “reachable” and “cascadable” as defined by the
BeanValidation Specification. For more details on reachability and
cascaded validation, see Section 3.5 of the
link:conn.htm#50540564_77345[See Bean Validation Specification, version
1.1].

[#50540558_pgfId-1001416]##Application server configuration tools and
third-party tools are recommended to leverage the constraint metadata
request API defined in the Bean Validation specification to provide a
richer interaction model during configuration of the JavaBeans.

======= [#50540558_pgfId-1000688]##[#50540558_43441]##Configuration Property Attributes

======= [#50540558_pgfId-1000904]##[#50540558_85545]##Dynamic Reconfigurable Configuration Properties

[#50540558_pgfId-1000943]##Configuration properties whose values could
be configured dynamically during the lifetime of the JavaBean are
referred to as dynamically reconfigurable configuration properties. A
resource adapter may indicate that a configuration property is
dynamically reconfigurable through the
_config-property-supports-dynamic-updates_ attribute in the deployment
descriptor (see link:conn.htm#50540561_30009[See Resource Adapter XML
Schema Definition] ) or the _supportsDynamicUpdates_ annotation element
in the _ConfigProperty_ annotation (see link:conn.htm#50540619_88169[See
@ConfigProperty] ).

[#50540558_pgfId-1000966]##Neither the application server nor the
resource adapter must support the dynamic reconfiguration of
configuration properties. If an application server supports this feature
and the resource adapter employs JavaBean Validation (see
link:conn.htm#50540558_66628[See JavaBean Validation] ), the application
server must performJavaBean Validation after reconfiguring all the
modified values of the JavaBean. When the JavaBean is validated, the
resource adapter can deduce that the reconfiguration has been completed
by the deployer or administrator.

[#50540558_pgfId-1001019]##Invalid reconfiguration of the state of a
JavaBean by an application server may be indicated by the resource
adapter through the following means:

[#50540558_pgfId-1001020]##Throwing an exception when the field is
updated

[#50540558_pgfId-1001021]##For configuration properties that can only be
validated based on the state of other configuration properties, throwing
an exception during the validation phase.

======= [#50540558_pgfId-1000986]##Confidential Properties

[#50540558_pgfId-1000987]##Certain configuration properties of a
JavaBean, such as _Password_ (see link:conn.htm#50540561_90538[See
Standard Properties] for more information on _Password_ ), may be
confidential and must not be presented as clear text in configuration
tools. The resource adapter may indicate such properties as
“Confidential Properties” through the _config-property-confidential_
attribute in the deployment descriptor (see
link:conn.htm#50540561_30009[See Resource Adapter XML Schema Definition]
) or the _confidentialProperty_ annotation element in the
_ConfigProperty_ annotation (see link:conn.htm#50540619_88169[See
@ConfigProperty] ). The application server’s configuration tool may use
this attribute to use special visual aids denoting confidentiality.

======= [#50540558_pgfId-1000950]##Resource Adapter Implementation Guidelines

[#50540558_pgfId-999720]##A resource adapter implementation may choose
to use common properties, that is, a ManagedConnectionFactory or an
ActivationSpec JavaBean, may contain some or all of the properties of
the ResourceAdapter JavaBean. The choice is up to the resource adapter
implementation.

[#50540558_pgfId-999721]##In general, there is no need for common
properties, since these various objects are associated at runtime with
the ResourceAdapter JavaBean. However, there may be situations, for
example, a ManagedConnectionFactory JavaBean may need to override the
ResourceAdapter JavaBean values in order to successfully connect to a
different EIS. In such a scenario, providing common properties between
the ResourceAdapter and ManagedConnectionFactory JavaBeans, allows the
ManagedConnectionFactory deployer to override the ResourceAdapter
property values and configure the ManagedConnectionFactory
appropriately.

======= [#50540558_pgfId-999794]##Lifecycle Management in a Non-Managed Environment

[#50540558_pgfId-999795]##Although the lifecycle management contract is
primarily intended for a managed environment, it may still be used in a
non-managed environment provided that the application that bootstraps a
resource adapter instance is capable of managing its lifecycle.

======= [#50540558_pgfId-999796]##A Sample Resource Adapter Implementation

======= [#50540558_pgfId-1000046]##Sample Resource Adapter

[#50540558_pgfId-1000048]##package com.xyz.adapter;

[#50540558_pgfId-1000058]## 

[#50540558_pgfId-1000059]##import javax.resource.spi.ResourceAdapter;

[#50540558_pgfId-1000060]##import javax.resource.spi.BootstrapContext;

[#50540558_pgfId-1000061]##import javax.resource.spi.work.*;

[#50540558_pgfId-1000062]## 

[#50540558_pgfId-1000063]##public class MyResourceAdapterImpl implements
ResourceAdapter \{

[#50540558_pgfId-1000064]##

[#50540558_pgfId-1000065]## void start(BootstrapContext serverCtx) \{

[#50540558_pgfId-1000066]## // 1. setup network endpoints

[#50540558_pgfId-1000067]## ...

[#50540558_pgfId-1000068]## 

[#50540558_pgfId-1000069]## // 2. get WorkManager reference

[#50540558_pgfId-1000070]## WorkManager wm = serverCtx.getWorkManager();

[#50540558_pgfId-1000472]## 

[#50540558_pgfId-1000473]## // 3. provide Work objects to WorkManager

[#50540558_pgfId-1000474]## for (i = 0; i < 10; i++) \{

[#50540558_pgfId-1000074]## Work work = new MyWork(...);

[#50540558_pgfId-1000075]## try \{

[#50540558_pgfId-1000076]## wm.startWork(work);

[#50540558_pgfId-1000077]## } catch (WorkException we) \{ // handle the
exception }

[#50540558_pgfId-1000078]## }

[#50540558_pgfId-1000079]## }

[#50540558_pgfId-1000080]## 

[#50540558_pgfId-1000081]## void stop() \{ // release Work instances, do
cleanup and return.}

[#50540558_pgfId-1000082]##}

[#50540558_pgfId-1000083]##

[#50540558_pgfId-1000084]##public class MyWork implements Work \{

[#50540558_pgfId-1000085]##

[#50540558_pgfId-1000086]## void release() \{

[#50540558_pgfId-1000087]## // set a flag to hint the Work instance to
complete.

[#50540558_pgfId-1000088]## // Note, the calling thread is different
from

[#50540558_pgfId-1000089]## // the active thread in which this instance
is executing.

[#50540558_pgfId-1000090]## }

[#50540558_pgfId-1000091]##

[#50540558_pgfId-1000092]## void run() \{

[#50540558_pgfId-1000093]## // do work (call application components,
monitor

[#50540558_pgfId-1000094]## // network ports, etc.).

[#50540558_pgfId-1000095]## }

[#50540558_pgfId-1000096]##}

[#50540558_pgfId-1000254]##Lifecycle Management Model (Sequence Diagram)

image:conn-32.gif[image]

====== [#50540552_pgfId-874]## 

======= [#50540552_pgfId-5529]##

image:conn-33.gif[image]

[#50540552_18615]##Connection Management

image:conn-34.gif[image]

[#50540552_pgfId-999458]##This chapter specifies the connection
management contract between an application server and a resource
adapter. It introduces the concepts and mechanisms relevant to this
contract, and delineates the responsibilities of the roles of the
resource adapter provider and application server vendor in terms of
their system-level support for the connection management contract. To
complete the description of the connection management contract, this
chapter also refers to the responsibilities of the application component
provider and deployer. The chapter includes scenarios to illustrate the
connection management contract.

======= [#50540552_pgfId-999459]##

image:conn-35.gif[image]

Overview

[#50540552_pgfId-999460]##An application component uses a connection
factory to access a connection instance, which the component then uses
to connect to the underlying EIS. A resource adapter acts as a factory
of connections. Examples of connections include database connections,
JMS (Java Message Service) connections, and SAP R/3 connections.

[#50540552_pgfId-999461]##Connection pooling manages connections that
are expensive to create and destroy. Connection pooling of expensive
connections leads to better scalability and performance in an
operational environment. The connection management contract provides
support for connection pooling.

======= [#50540552_pgfId-999462]##

image:conn-35.gif[image]

Goals

[#50540552_pgfId-999463]##The connection management contract has been
designed with the following goals:

[#50540552_pgfId-999464]##To provide a consistent application
programming model for connection acquisition for both managed and
non-managed (two-tier) applications.

[#50540552_pgfId-999465]##To enable a resource adapter to provide a
connection factory and connection interfaces based on the CCI specific
to the type of resource adapter and EIS. This enables JDBC drivers to be
aligned with the connector architecture with minimum impact on the
existing JDBC APIs.

[#50540552_pgfId-999466]##To provide a generic mechanism by which an
application server can provide different services—transactions,
security, advanced pooling, error tracing/logging—for its configured set
of resource adapters.

[#50540552_pgfId-999467]##To provide support for connection pooling.

[#50540552_pgfId-999468]##The goal of the connector architecture is to
enable efficient, scalable, and extensible connection pooling
mechanisms, not to specify a mechanism or implementation for connection
pooling. The goal is accomplished by defining a standard contract for
connection management with the providers of connections—that is,
resource adapters. An application server should use the connection
management contract to implement a connection pooling mechanism in its
own implementation-specific way.

======= [#50540552_pgfId-999469]##

image:conn-35.gif[image]

Architecture: Connection Management

[#50540552_pgfId-1003792]##The connection management contract specifies
an architected contract between an application server and a resource
adapter. This connection management contract is shown with bold flow
lines in link:conn.htm#50540552_11969[See Architecture Diagram: Managed
Application scenario]. It includes the set of interfaces shown in the
architecture diagram.

======= [#50540552_pgfId-999474]##Overview: Managed Application Scenario

[#50540552_pgfId-999478]##The application server uses the deployment
information specified by way of the deployment descriptor mechanism
(specified in section link:conn.htm#50540561_80713[See Requirements])
and metadata annotations (specified in link:conn.htm#50540619_65903[See
Deployment Descriptors and Annotations]) to configure the resource
adapter in the operational environment.

[#50540552_pgfId-999479]##The resource adapter provides connection and
connection factory interfaces. A connection factory acts as a factory
for EIS connections. For example, _javax.sql.DataSource_ and
_java.sql.Connection_ interfaces are JDBC-based interfaces for
connecting to a relational database.

[#50540552_pgfId-999486]##The CCI (specified in
link:conn.htm#50540549_18304[See Common Client Interface]) defines
_javax.resource.cci.ConnectionFactory_ and
_javax.resource.cci.Connection_ as interfaces for a connection factory
and a connection, respectively.

[#50540552_pgfId-999487]##The application component does a lookup of a
connection factory in the Java Naming and Directory InterfaceTM (JNDI)
name space. It uses the connection factory to get a connection to the
underlying EIS. The connection factory instance delegates the connection
creation request to the _ConnectionManager_ instance.

[#50540552_pgfId-999488]##The _ConnectionManager_ enables the
application server to provide different quality-of-services in the
managed application scenario. These quality-of-services include
transaction management, security, error logging and tracing, and
connection pool management. The application server provides these
services in its own implementation-specific way. The connector
architecture does not specify how the application server implements
these services.

[#50540552_pgfId-999489]##The _ConnectionManager_ instance _,_ on
receiving a connection creation request from the connection factory _,_
does a lookup in the connection pool provided by the application server.
If there is no connection in the pool that can satisfy the connection
request, the application server uses the _ManagedConnectionFactory_
interface (implemented by the resource adapter) to create a new physical
connection to the underlying EIS. If the application server finds a
matching connection in the pool, it uses the matching
_ManagedConnection_ instance to satisfy the connection request.

[#50540552_pgfId-999490]##If a new _ManagedConnection_ instance is
created, the application server adds the new _ManagedConnection_
instance to the connection pool.

[#50540552_pgfId-999491]##The application server registers a
_ConnectionEventListener_ with the _ManagedConnection_ instance. This
listener enables the application server to get event notifications
related to the state of the _ManagedConnection_ instance. The
application server uses these notifications to manage connection
pooling, manage transactions, cleanup connections, and handle any error
conditions.

[#50540552_pgfId-999492]##The application server uses the
_ManagedConnection_ instance to get a connection instance that acts as
an application-level handle to the underlying physical connection. An
instance of type _javax.resource.cci.Connection_ is an example of such a
connection handle. An application component uses the connection handle
to access EIS resources.

[#50540552_pgfId-1003262]##The resource adapter implements the
_XAResource_ interface to provide support for transaction management.
The resource adapter also implements the _LocalTransaction_ interface so
that the application server can manage transactions internal to a
resource manager. The chapter on transaction management describes this
transaction management contract between the application server (and its
transaction manager) and the resource adapter (and its underlying
resource manager).

[#50540552_pgfId-1003263]## 

[#50540552_pgfId-1003264]##Architecture Diagram: Managed Application
scenario[#50540552_11969]##

image:conn-36.gif[image]

======= [#50540552_pgfId-1003269]##

image:conn-35.gif[image]

[#50540552_99873]##Application Programming Model

[#50540552_pgfId-999568]##The application programming model for getting
an EIS connection is similar across both managed (application server
based) and non-managed scenarios. The following sections explain a
typical application programming model scenario.

======= [#50540552_pgfId-999570]##[#50540552_29036]##Managed Application Scenario

[#50540552_pgfId-999571]##The following steps are involved in a managed
scenario:

[#50540552_pgfId-999572]##The application assembler or component
provider specifies connection factory requirements for an application
component using a deployment descriptor mechanism. For example, a bean
provider specifies the following elements in the deployment descriptor
for a connection factory reference. Note that the connection factory
reference is part of the deployment descriptor for EJB components and
not the resource adapter. Refer EJB specification (see
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2]) for details on the deployment mechanism for
EJB components:

[#50540552_pgfId-999576]## _res-ref-name: eis/MyEIS_

[#50540552_pgfId-999577]## _res-type:
javax.resource.cci.ConnectionFactory_

[#50540552_pgfId-999578]## _res-auth: Application_ or _Container_

[#50540552_pgfId-999579]##During resource adapter deployment, the
deployer sets the configuration information (example: server name, port
number) for the resource adapter. The application server uses a
configured resource adapter to create physical connections to the
underlying EIS. Refer to link:conn.htm#50540546_42817[See API
Requirements] for details on packaging and deployment of a resource
adapter.

[#50540552_pgfId-999583]##The application component looks up a
connection factory instance in the component’s environment using the
JNDI interface.

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1000954]##// obtain the initial JNDI Naming context

[#50540552_pgfId-1000955]##Context initctx = new InitialContext();

[#50540552_pgfId-1000956]## 

[#50540552_pgfId-1000957]##// perform JNDI lookup to obtain the
connection factory

[#50540552_pgfId-1000958]##javax.resource.cci.ConnectionFactory cxf =

[#50540552_pgfId-1000959]## (javax.resource.cci.ConnectionFactory)

[#50540552_pgfId-1000960]## initctx.lookup(“java:comp/env/eis/MyEIS”);

|===

[#50540552_pgfId-999591]##The JNDI name passed in the method
_NamingContext.lookup_ is the same as that specified in the
_res-ref-name_ element of the deployment descriptor. The JNDI lookup
results in a connection factory instance of type
_java.resource.cci.ConnectionFactory_ as specified in the _res-type_
element.

[#50540552_pgfId-999592]##The application component invokes the
_getConnection_ method on the connection factory to get an EIS
connection. The returned connection instance represents an
application-level handle to an underlying physical connection.

[#50540552_pgfId-999593]##An application component obtains multiple
connections by calling the method _getConnection_ on the connection
factory multiple times.

[#50540552_pgfId-999594]##javax.resource.cci.Connection cx =
cxf.getConnection();

[#50540552_pgfId-999595]##The application component uses the returned
connection to access the underlying EIS by way of the resource adapter.
link:conn.htm#50540549_18304[See Common Client Interface] specifies in
detail the application programming model for EIS access.

[#50540552_pgfId-1000995]##

image:conn-37.gif[image]

The JNDI context of an accessing application is available to a resource
adapter through the application thread that uses its connection object.
The resource adapter may use the JNDI context to access other resources.

image:conn-37.gif[image]

[#50540552_pgfId-999599]##After the component finishes with the
connection, it closes the connection using the _close_ method on the
_Connection_ interface.

[#50540552_pgfId-999600]##cx.close();

[#50540552_pgfId-999601]##If an application component fails to close an
allocated connection after its use, that connection is considered an
unused connection. The application server manages the cleanup of unused
connections. When a container terminates a component instance, the
container cleans up all connections used by that component instance.
Refer section link:conn.htm#50540552_47703[See ManagedConnection] and
link:conn.htm#50540552_60711[See Scenario: Connection Event
Notifications and Connection Close] for details on the cleanup of
connections.

======= [#50540552_pgfId-999608]##Non-Managed Application Scenario

[#50540552_pgfId-999609]##In a non-managed application scenario, the
application developer follows a similar programming model to the managed
application scenario. The non-managed case involves looking up of a
connection factory instance, getting an EIS connection, using the
connection for EIS access, and finally closing the connection.

======= [#50540552_pgfId-1002314]##[#50540552_32247]##Guidelines

[#50540552_pgfId-1002273]##Connection handles are application level
handles to underlying physical connections and are light-weight objects,
especially when dissociated from the _ManagedConnection_ . Creation of a
connection handle does not necessarily result in the creation of a new
physical connection to the EIS. The _ManagedConnection_ , which
represents the actual underlying physical connection, should maintain
any session or transaction state data associated with that connection to
the EIS. An application component may not derive much benefit from
caching these handles, although this is allowed in this specification.
Application components are recommended to obtain and cache the
Connection Factory objects instead. For more information, see
link:conn.htm#50540552_65500[See ConnectionFactory and Connection].

[#50540552_pgfId-1002339]##An application component is recommended to
obtain a connection handle from the connection factory, use the
connection handle to interact with the EIS by way of the resource
adapter, and close the connection handle after finishing with it.

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1002529]## //recommended: connection handle creation,
use and close

[#50540552_pgfId-1002575]## Connection con = null;

[#50540552_pgfId-1002576]## try \{

[#50540552_pgfId-1002577]## con = cf.getConnection();

[#50540552_pgfId-1002578]## //use the con handle to interact with the
EIS

[#50540552_pgfId-1002579]## } finally \{

[#50540552_pgfId-1002580]## if (con != null)\{

[#50540552_pgfId-1002581]## con.close();

[#50540552_pgfId-1002582]## }

[#50540552_pgfId-1002583]## }

|===

[#50540552_pgfId-1002300]##The application component is recommended to
explicitly close the connection handle as soon as the handle has been
used and is not required later. This reduces the possibility of
connection leaks and enhances the application server’s ability to pool
physical connections to the EIS (see link:conn.htm#50540552_14189[See
Connection Pool Implementation] ).

======= [#50540552_pgfId-999610]##

image:conn-35.gif[image]

Interface/Class Specification

[#50540552_pgfId-999611]##This section specifies the Java classes and
interfaces defined as part of the connection management contract. For a
complete specification of these classes and interfaces, refer to the API
documentation distributed with this document.

[#50540552_pgfId-999615]##The following figure shows the class hierarchy
for the connection management contract. The diagram also illustrates the
responsibilities for the definition of an interface and its
implementation:

[#50540552_pgfId-1002721]##[#50540552_38214]##Class Diagram: Connection
Management Architecture

image:conn-38.gif[image]

======= [#50540552_pgfId-1002726]##[#50540552_65500]##ConnectionFactory and Connectionlink:#pgfId-1002725[3]

[#50540552_pgfId-1002727]##A connection factory provides an interface to
get a connection to an EIS instance. A connection provides connectivity
to an underlying EIS.

[#50540552_pgfId-999720]##One goal of the connector architecture is to
support a consistent application programming model across both CCI and
EIS specific client APIs. To achieve this goal, the connector
architecture recommends a design pattern (specified as an interface
template) for both the connection factory and connection interfaces.

[#50540552_pgfId-999721]##The CCI connection factory and connection
interfaces (defined in the package _javax.resource.cci_ ) are based on
the above design pattern. Refer to link:conn.htm#50540549_26881[See
Connection Interfaces] for details on the CCI connection factory and
connection interfaces. The following code sample shows the CCI
interfaces:

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001043]##public interface
javax.resource.cci.ConnectionFactory

[#50540552_pgfId-1001044]## extends java.io.Serializable,
javax.resource.Referenceable \{

[#50540552_pgfId-1001045]## 

[#50540552_pgfId-1001046]## public javax.resource.cci.Connection
getConnection()

[#50540552_pgfId-1001047]## throws javax.resource.ResourceException;

[#50540552_pgfId-1001048]## ...

[#50540552_pgfId-1001049]##}

[#50540552_pgfId-1001050]## 

[#50540552_pgfId-1001051]##public interface
javax.resource.cci.Connection \{

[#50540552_pgfId-1001052]## public void close() throws
javax.resource.ResourceException;

[#50540552_pgfId-1001053]## ...

[#50540552_pgfId-1001041]##}

|===

[#50540552_pgfId-999737]##An example of a non-CCI interface is a
resource adapter that uses the package _com.myeis_ for its EIS specific
interfaces, as follows:

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001066]##public interface com.myeis.ConnectionFactory

[#50540552_pgfId-1001067]## extends java.io.Serializable,
javax.resource.Referenceable \{

[#50540552_pgfId-1001068]## 

[#50540552_pgfId-1001069]## public com.myeis.Connection getConnection()

[#50540552_pgfId-1001070]## throws com.myeis.ResourceException;

[#50540552_pgfId-1001071]## ...

[#50540552_pgfId-1001072]##}

[#50540552_pgfId-1001073]## 

[#50540552_pgfId-1001074]##public interface com.myeis.Connection \{

[#50540552_pgfId-1001075]## public void close() throws
com.myeis.ResourceException;

[#50540552_pgfId-1001076]## ...

[#50540552_pgfId-1001064]##}

|===

[#50540552_pgfId-999750]##The JDBC interfaces— _javax.sql.DataSource_ ,
_java.sql.Connection_ —are examples of non-CCI connection factory and
connection interfaces.

[#50540552_pgfId-999751]##Note that the methods defined on a non-CCI
interface are not required to throw a _ResourceException_ . The
exception can be specific to a resource adapter, for example:
_java.sql.SQLException_ for JDBC (see link:conn.htm#50540564_32901[See
JDBC API Specification, version 4.1]) interfaces.

[#50540552_pgfId-999755]##The following are additional guidelines for
the recommended interface template:

[#50540552_pgfId-999756]##A resource adapter is allowed to add
additional _getConnection_ methods to its definition of a connection
factory interface. These additional methods are specific to a resource
adapter and its EIS. For example, CCI defines a variant of the
_getConnection_ method that takes _java.resource.cci.ConnectionSpec_ as
a parameter.

[#50540552_pgfId-999757]##A resource adapter should only introduce
additional _getConnection_ methods if it requires additional flexibility
(beyond that offered by the default _getConnection_ method) in the
connection request invocations.

[#50540552_pgfId-999758]##A connection interface must provide a close
method to close the connection. The behavior of such an
application-level connection closure is described in the OID
link:conn.htm#50540552_81885[See OID: Connection Event Notification].

[#50540552_pgfId-999762]##The above design pattern leads to a consistent
application programming model for connection creation and connection
closing.

======= [#50540552_pgfId-999763]##Requirements

[#50540552_pgfId-999764]##A resource adapter must provide
implementations for both the connection factory and connection
interfaces.

[#50540552_pgfId-1001127]##In the connector architecture, a resource
adapter provides an implementation of the connection factory interface
in both managed and non-managed scenarios. This differs from the JDBC
(see link:conn.htm#50540564_32901[See JDBC API Specification, version
4.1]) architecture.

[#50540552_pgfId-1001131]##In the JDBC architecture, an application
server provides the implementation of _javax.sql.DataSource_ interface.
Using a similar design approach for the connector architecture would
have required an application server to provide implementations of
various connection factory interfaces defined by different resource
adapters. Since the connection factory interface may be defined as
specific to an EIS, the application server may find it difficult to
provide implementations of connection factory interfaces without any
code generation.

[#50540552_pgfId-999770]##The connection factory implementation class
delegates the _getConnection_ method invocation from an application
component to the associated _ConnectionManager_ instance. The
_ConnectionManager_ instance is associated with a connection factory
instance at its instantiation [refer to the OID shown in
link:conn.htm#50540561_52027[See OID:Lookup of a ConnectionFactory
Instance from JNDI]].

[#50540552_pgfId-999774]##Note that the connection factory
implementation class must call the
_ConnectionManager.allocateConnection_ method in the same thread context
in which the application component had called the _getConnection_
method.

[#50540552_pgfId-999775]##The connection factory implementation class is
responsible for taking connection request information and passing it in
a form required by the _ConnectionManager_ . _allocateConnection_
method.

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001147]##public interface
javax.resource.spi.ConnectionManager

[#50540552_pgfId-1001148]## extends java.io.Serializable \{

[#50540552_pgfId-1001149]## 

[#50540552_pgfId-1001150]## public Object allocateConnection(

[#50540552_pgfId-1001151]## ManagedConnectionFactory mcf,

[#50540552_pgfId-1001152]## ConnectionRequestInfo cxRequestInfo)

[#50540552_pgfId-1001153]## throws ResourceException;

[#50540552_pgfId-1001154]##}

[#50540552_pgfId-1001155]## 

[#50540552_pgfId-1001156]##public interface
javax.resource.spi.ConnectionRequestInfo \{

[#50540552_pgfId-1001157]## public boolean equals(Object other);

[#50540552_pgfId-1001158]## public int hashCode();

[#50540552_pgfId-1001145]##}

|===

======= [#50540552_pgfId-999789]##ConnectionRequestInfo

[#50540552_pgfId-999790]##The _ConnectionRequestInfo_ parameter to the
_ConnectionManager.allocateConnection_ method enables a resource adapter
to pass its own request-specific data structure across the connection
request flow.

[#50540552_pgfId-999791]##A resource adapter extends the
_ConnectionRequestInfo_ interface to support its own data structure for
the connection request.

[#50540552_pgfId-999792]##This is typically used to allow a resource
adapter to handle application component-specified per-connection request
properties (for example, _clientID_ and _language_ ). The application
server passes these properties to the _createManagedConnection_ and
_matchManagedConnections_ method calls on the _ManagedConnectionFactory_
. These properties remain opaque to the application server during the
connection request flow.

[#50540552_pgfId-999793]##It is important to note that the properties
passed through the _ConnectionRequestInfo_ instance should be
client-specific (for example, user name, password, language) and not
related to the configuration of a target EIS instance (for example, port
number, server name).

[#50540552_pgfId-999794]##The _ManagedConnectionFactory_ instance is
configured with properties required for the creation of a connection to
a specific EIS instance. Note that a configured
_ManagedConnectionFactory_ instance must have the complete set of
properties that are needed for the creation of the physical connections.
This enables the container to manage connection request without
requiring an application component to pass any explicit connection
parameters. Configured properties on a _ManagedConnectionFactory_ can be
overridden through _ConnectionRequestInfo_ in cases when a component
provides client-specific properties in the _getConnection_ method
invocation. Refer to link:conn.htm#50540561_35502[See ResourceAdapter]
for details on the configuration of a _ManagedConnectionFactory_ .

[#50540552_pgfId-999798]##When the _ConnectionRequestInfo_ reaches the
_createManagedConnection_ or _matchManagedConnections_ methods on the
_ManagedConnectionFactory_ instance, the resource adapter uses this
additional per-request information to create and match connections.

[#50540552_pgfId-999799]##A resource adapter must implement the _equals_
and _hashCode_ methods defined in the _ConnectionRequestInfo_ interface.
The equality must be defined in the complete set of properties for the
_ConnectionRequestInfo_ instance. An application server can use these
methods to structure its connection pool in an implementation-specific
way. Since _ConnectionRequestInfo_ represents a resource adapter
specific data structure, the conditions for equality are defined and
implemented by a resource adapter.

======= [#50540552_pgfId-999800]##Additional Requirements

[#50540552_pgfId-999801]##A resource adapter implementation is not
required to support the mechanism for passing resource adapter-specific
connection request information. It can choose to pass _null_ for
_ConnectionRequestInfo_ in the _allocateConnection_ invocation.

[#50540552_pgfId-999802]##An implementation class for a connection
factory interface must implement _java.io.Serializable_ . This enables a
connection factory instance to be stored in the JNDI naming environment.
A connection factory implementation class must implement the interface
_javax.resource.Referenceable_ . Note that the
_javax.resource.Referenceable_ interface extends the
_javax.naming.Referenceable_ interface. Refer to section
link:conn.htm#50540561_38067[See Scenario: Referenceable] for details on
the JNDI reference mechanism.

[#50540552_pgfId-999806]##A connection implementation class implements
its methods in a resource adapter implementation-specific way. It must
use a _javax.resource.spi.ManagedConnection_ instance as its underlying
physical connection.

======= [#50540552_pgfId-999807]##ConnectionManager

[#50540552_pgfId-999808]##The _javax.resource.spi.ConnectionManager_
interface provides a hook for a resource adapter to pass a connection
request to an application server. An application server provides
different quality-of-service as part of its handling of the connection
request.

======= [#50540552_pgfId-999809]##Interface

[#50540552_pgfId-999810]##The connection management contract defines a
standard interface for the _ConnectionManager_ as follows:

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001194]##public interface
javax.resource.spi.ConnectionManager

[#50540552_pgfId-1001195]## extends java.io.Serializable \{

[#50540552_pgfId-1001196]## 

[#50540552_pgfId-1001197]## public Object allocateConnection(

[#50540552_pgfId-1001198]## ManagedConnectionFactory mcf,

[#50540552_pgfId-1001199]## ConnectionRequestInfo cxRequestInfo)

[#50540552_pgfId-1001200]## throws ResourceException;

[#50540552_pgfId-1001192]##}

|===

[#50540552_pgfId-999819]##The method _allocateConnection_ is called by a
resource adapter’s connection factory instance so that the instance can
delegate a connection request to the _ConnectionManager_ instance.

[#50540552_pgfId-999820]##The _ConnectionRequestInfo_ parameter
represents information specific to a resource adapter to handle the
connection request.

======= [#50540552_pgfId-999821]##Requirements

[#50540552_pgfId-999822]##An application server must provide an
implementation of the _ConnectionManager_ interface. This implementation
is not specific to any particular resource adapter or connection factory
interface.

[#50540552_pgfId-999823]##The _ConnectionManager_ implementation
delegates to the internal mechanisms of an application server to provide
various services: security, connection pool management, transaction
management, and error logging and tracing.

[#50540552_pgfId-999824]##An application server should implement these
services in a generic manner, independent of any resource adapter and
EIS-specific mechanisms. The connector architecture does not specify how
an application server implements these services; the implementation is
specific to each application server.

[#50540552_pgfId-999825]##After an application server _hooks-in_ its
services, the connection request is delegated to a
_ManagedConnectionFactory_ instance either for the creation of a new
physical connection or for the matching of an already existing physical
connection.

[#50540552_pgfId-999826]##An implementation class for the
_ConnectionManager_ interface must implement the _java.io.Serializable_
interface.

[#50540552_pgfId-999827]##A resource adapter must provide a default
implementation of the _javax.resource.spi.ConnectionManager_ interface.
The implementation class comes into play when a resource adapter is used
in a non-managed two-tier application scenario. In an application
server-managed environment, the resource adapter must not use the
default _ConnectionManager_ implementation class. A default
implementation of _ConnectionManager_ enables the resource adapter to
provide services specific to itself. These services can include
connection pooling, error logging and tracing, and security management.
The default _ConnectionManager_ delegates to the
_ManagedConnectionFactory_ the creation of physical connections to the
underlying EIS.

[#50540552_pgfId-999828]##An implementation of the _ConnectionManager_
interface may only be provided by a resource adapter, for the purpose
described in this section, or by an application server that fully meets
the requirements of this specification.

[#50540552_pgfId-999855]##ConnectionManager and Application Server
Specific Services

image:conn-39.gif[image]

======= [#50540552_pgfId-999857]##[#50540552_99126]##ManagedConnectionFactory

[#50540552_pgfId-999858]##A
_javax.resource.spi.ManagedConnectionFactory_ instance is a factory of
both _ManagedConnection_ and connection factory instances. This
interface supports connection pooling by defining methods for matching
and creating connections.

======= [#50540552_pgfId-999859]##Interface

[#50540552_pgfId-999860]##The following code extract shows the interface
specification for the _ManagedConnectionFactory_ .

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001242]##public interface
javax.resource.spi.ManagedConnectionFactory

[#50540552_pgfId-1001243]## extends java.io.Serializable \{

[#50540552_pgfId-1001244]##

[#50540552_pgfId-1001245]## public Object createConnectionFactory(

[#50540552_pgfId-1001246]## ConnectionManager connectionManager)

[#50540552_pgfId-1001247]## throws ResourceException;

[#50540552_pgfId-1001248]## 

[#50540552_pgfId-1001249]## public Object createConnectionFactory()

[#50540552_pgfId-1001250]## throws ResourceException;

[#50540552_pgfId-1001251]## 

[#50540552_pgfId-1001252]## public ManagedConnection
createManagedConnection(

[#50540552_pgfId-1001253]## javax.security.auth.Subject subject,

[#50540552_pgfId-1001254]## ConnectionRequestInfo cxRequestInfo)

[#50540552_pgfId-1001255]## throws ResourceException;

[#50540552_pgfId-1001256]##

[#50540552_pgfId-1001257]## public ManagedConnection
matchManagedConnections(

[#50540552_pgfId-1001258]## java.util.Set connectionSet,

[#50540552_pgfId-1001259]## javax.security.auth.Subject subject,

[#50540552_pgfId-1001260]## ConnectionRequestInfo cxRequestInfo)

[#50540552_pgfId-1001261]## throws ResourceException;

[#50540552_pgfId-1001262]##

[#50540552_pgfId-1001263]## public boolean equals(Object other);

[#50540552_pgfId-1001264]## public int hashCode();

[#50540552_pgfId-1001265]##

[#50540552_pgfId-1001240]##}

|===

[#50540552_pgfId-999886]##The method createConnectionFactory creates a
connection factory instance. For CCI, the connection factory instance is
of the type _javax.resource.cci.ConnectionFactory_ . The connection
factory instance is initialized with the _ConnectionManager_ instance
provided by the application server.

[#50540552_pgfId-999887]##When the _createConnectionFactory_ method
takes no arguments, _ManagedConnectionFactory_ provides a default
_ConnectionManager_ instance. This occurs in a non-managed application
scenario.

[#50540552_pgfId-999888]##The method _c_ reateManagedConnection creates
a new physical connection to the underlying EIS instance. The
_ManagedConnectionFactory_ instance uses the security information
(passed as a _Subject_ instance) and an optional _ConnectionRequestInfo_
instance to create this new physical connection (refer to
link:conn.htm#50540568_99842[See Security Contract] for more details).

[#50540552_pgfId-999892]##A created _ManagedConnection_ instance
typically maintains internal information about the security context
(under which the connection has been created) and any
connection-specific parameters (for example, the socket connection).

[#50540552_pgfId-999893]##The _matchManagedConnections_ method enables
the application server to use resource adapter-specific criteria for
matching a _ManagedConnection_ instance to service a connection request.
The application server finds a candidate set of _ManagedConnection_
instances from its connection pool based on application server-specific
criteria, and passes this candidate set to the _matchManagedConnections_
method. If the application server implements connection pooling, it must
use the _matchManagedConnections_ method to choose a suitable
connection.

[#50540552_pgfId-999894]##The _matchManagedConnections_ method matches a
candidate set of connections using criteria known internally to the
resource adapter. The criteria used for matching connections is specific
to a resource adapter and is not specified by the connector
architecture.

[#50540552_pgfId-999895]##A _ManagedConnection_ instance has specific
internal state information based on its security context and physical
connection. The _ManagedConnectionFactory_ implementation compares this
information for each _ManagedConnection_ instance in the candidate set
against the information passed in through the _matchManagedConnections_
method and the configuration of this _ManagedConnectionFactory_
instance. The _ManagedConnectionFactory_ uses the results of this
comparison to choose the _ManagedConnection_ instance that can best
satisfy the current connection request.

[#50540552_pgfId-999896]##If the resource adapter cannot find an
acceptable _ManagedConnection_ instance, it returns a _null value_ . In
this case, the application server requests the resource adapter to
create a new connection instance.

[#50540552_pgfId-999897]##If the resource adapter does not support
connection matching, it must throw a NotSupportedException when
_matchManagedConnections_ method is invoked. This allows an application
server to avoid pooling connections obtained from that resource adapter.

======= [#50540552_pgfId-999898]##Requirements

[#50540552_pgfId-999899]##A resource adapter must provide an
implementation of the _ManagedConnectionFactory_ interface.

[#50540552_pgfId-999900]##It is required that the
_ManagedConnectionFactory_ implementation class extend the
implementation of the _hashCode_ and _equals_ methods defined in
_java.lang.Object_ . These two methods are used by an application server
to structure its connection pool in an implementation-specific way. The
_equals_ and _hashCode_ method implementation should be based on a
complete set of configuration properties that make a
_ManagedConnectionFactory_ instance unique and specific to an EIS
instance.

[#50540552_pgfId-999901]##An implementation class for
_ManagedConnectionFactory_ interface must be a JavaBean. Refer to
link:conn.htm#50540546_81739[See JavaBean Requirements].

======= [#50540552_pgfId-999905]##[#50540552_14189]##Connection Pool Implementation

[#50540552_pgfId-999906]##The connector architecture does not specify
how an application server implements connection pooling. However, it
recommends that an application server should structure its connection
pool such that it uses the connection creation and matching facility in
an efficient manner and does not cause resource starvation.

[#50540552_pgfId-999907]##The following paragraphs provide
non-prescriptive guidelines for the connection pool implementation by an
application server.

[#50540552_pgfId-999908]##An application server may partition its pool
on a per _ManagedConnectionFactory_ instance (and thereby on a per EIS
instance) basis. An application server may choose to guarantee, in an
implementation specific way, that it will always partition connection
pools with at least per _ManagedConnectionFactory_ instance granularity.

[#50540552_pgfId-999909]##The per- _ManagedConnectionFactory_ instance
pool may be further partitioned based on the transaction or security
context or any client-specific parameters (as associated with the
_ConnectionRequestInfo_ ). When an application server calls the matching
facility, it is recommended that the application server narrow down the
candidate set of _ManagedConnection_ instances to a reasonable limit,
and achieves matching efficiently. For example, an application server
may pass only those _ManagedConnection_ instances to the
_matchManagedConnections_ method that are associated with the target
_ManagedConnectionFactory_ instance (and thereby a specific target EIS
instance).

[#50540552_pgfId-999910]##An application server may use additional
parameters for its search and matching criteria used in its connection
pool management. These parameters may be EIS- or application server-
specific. The _equals_ and _hashCode_ methods defined in both
_ManagedConnectionFactory_ and _ConnectionRequestInfo_ facilitate
connection pool management and structuring by an application server.

======= [#50540552_pgfId-999911]##Detecting Invalid Connections

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001293]##import java.util.Set;

[#50540552_pgfId-1001294]## 

[#50540552_pgfId-1001295]##interface ValidatingManagedConnectionFactory
\{

[#50540552_pgfId-1001296]## Set getInvalidConnections(Set connectionSet)
throws ResourceException;

[#50540552_pgfId-1001291]##}

|===

[#50540552_pgfId-999917]##This interface may be implemented by a
_ManagedConnectionFactory_ instance that supports the ability to
validate _ManagedConnection_ objects. The _getInvalidConnections_ method
returns a set of invalid _ManagedConnection_ objects chosen from a
specified set of _ManagedConnection_ objects.

[#50540552_pgfId-999918]##This optional functionality may be used by the
application server to prune invalid _ManagedConnection_ objects from its
connection pool periodically. The application server may use this
functionality to test for the validity of a _ManagedConnection_ by
passing in a _Set_ of size one (with the _ManagedConnection_ that has to
be tested for validity as the only member of the _Set_ ).

======= [#50540552_pgfId-999919]##Requirement for XA Recovery

[#50540552_pgfId-999920]##The _ManagedConnectionFactory_ implementation
for a transaction authority (XA) protocol capable resource adapter
(refer to link:conn.htm#50540572_68848[See Transaction Management] for
more details on transactions) must support the _createManagedConnection_
method that takes a _Subject_ and a _null_ for the parameter
_ConnectionRequestInfo_ . This enables the application server to get an
_XAResource_ instance using _ManagedConnection.getXAResource_ and then
call the _XAResource.recover_ method. Note that the application server
uses this special case only to get to the _XAResource_ instance for the
underlying resource manager.

[#50540552_pgfId-999924]##The reason for this requirement is that the
application server may not have a valid _ConnectionRequestInfo_ instance
when it is required to get the _ManagedConnection_ instance to initiate
recovery. Refer to link:conn.htm#50540568_68092[See
ManagedConnectionFactory] for additional details on the
_ManagedConnectionFactory.createManagedConnection_ method.

======= [#50540552_pgfId-999929]##[#50540552_47703]##ManagedConnection

[#50540552_pgfId-999930]##A _javax.resource.spi.ManagedConnection_
instance represents a physical connection to an underlying EIS.

[#50540552_pgfId-999931]##

image:conn-37.gif[image]

The connector architecture allows one or more _ManagedConnection_
instances to be multiplexed over a single physical pipe to an EIS.
However, for simplicity, this specification describes a
_ManagedConnection_ instance as being mapped 1-1 to a physical
connection.

image:conn-37.gif[image]

[#50540552_pgfId-999932]##The creation of a _ManagedConnection_ instance
typically results in the allocation of EIS and resource adapter
resources (for example, memory and network sockets) for each physical
connection. Since these resources can be costly and scarce, an
application server pools _ManagedConnection_ instances in a managed
environment.

[#50540552_pgfId-999933]##Connection pooling improves the scalability of
an application environment. An application server uses the
_ManagedConnectionFactory_ and _ManagedConnection_ interfaces to
implement connection pool management.

[#50540552_pgfId-999934]##An application server also uses the
transaction management-related methods ( _getXAResource_ and
_getLocalTransaction_ ) on the _ManagedConnection_ interface to manage
transactions. These methods are discussed in more detail in
link:conn.htm#50540572_68848[See Transaction Management].

[#50540552_pgfId-999938]##The _ManagedConnection_ interface also
provides methods to support error logging and tracing in a managed
environment.

======= [#50540552_pgfId-999939]##Interface

[#50540552_pgfId-999940]##The connection management contract defines the
following interface for a _ManagedConnection_ . The following code
extract shows only the methods that are used for connection pool
management. The remaining methods are introduced in other parts of the
specification.

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001340]##public interface
javax.resource.spi.ManagedConnection \{

[#50540552_pgfId-1001341]## public Object getConnection(

[#50540552_pgfId-1001342]## javax.security.auth.Subject subject,

[#50540552_pgfId-1001343]## ConnectionRequestInfo cxRequestInfo)

[#50540552_pgfId-1001344]## throws ResourceException;

[#50540552_pgfId-1001345]## public void destroy() throws
ResourceException;

[#50540552_pgfId-1001346]## public void cleanup() throws
ResourceException;

[#50540552_pgfId-1001347]## 

[#50540552_pgfId-1001348]## // Methods for Connection and transaction
event notifications

[#50540552_pgfId-1001349]## public void addConnectionEventListener(

[#50540552_pgfId-1001350]## ConnectionEventListener listener);

[#50540552_pgfId-1001351]## public void removeConnectionEventListener(

[#50540552_pgfId-1001352]## ConnectionEventListener listener);

[#50540552_pgfId-1001353]## 

[#50540552_pgfId-1001354]## public ManagedConnectionMetaData
getMetaData()

[#50540552_pgfId-1001355]## throws ResourceException;

[#50540552_pgfId-1001356]## 

[#50540552_pgfId-1001357]## // Additional methods - specified in the
other sections

[#50540552_pgfId-1001358]## ...

[#50540552_pgfId-1001338]##}

|===

[#50540552_pgfId-999961]##The _getConnection_ method creates a new
application-level connection handle. A connection handle is tied to an
underlying physical connection represented by a _ManagedConnection_
instance. For CCI, the connection handle created by a
_ManagedConnection_ instance is of the type
_javax.resource.cci.Connection_ . A connection handle is tied to its
_ManagedConnection_ instance in a resource adapter
implementation-specific way.

[#50540552_pgfId-999962]##A _ManagedConnection_ instance may use the
_getConnection_ method to change the state of the physical connection
based on the _Subject_ and _ConnectionRequestInfo_ arguments. For
example, a resource adapter can re-authenticate a physical connection to
the underlying EIS when the application server calls the _getConnection_
method. link:conn.htm#50540568_48692[See ManagedConnection] specifies
re-authentication requirements in more detail.

[#50540552_pgfId-999966]##The method _addConnectionEventListener_ allows
a connection event listener to register with a _ManagedConnection_
instance. The _ManagedConnection_ instance notifies connection
close/error and local transaction-related events to its registered set
of listeners.

[#50540552_pgfId-999967]##The _removeConnectionEventListener_ method
removes a registered _ConnectionEventListener_ instance from a
_ManagedConnection_ instance. Since an application server may modify the
list of event listeners at a time when the _ManagedConnection_ may be
iterating through its list of event listeners, the resource adapter is
recommended to handle this scenario by synchronizing access to its list
of event listeners.

[#50540552_pgfId-999968]##The method _getMetaData_ returns the metadata
information (represented by the _ManagedConnectionMetaData_ interface)
for a _ManagedConnection_ and the connected EIS instance.

======= [#50540552_pgfId-999969]##[#50540552_28832]##Connection Sharing and Multiple Connection Handles

[#50540552_pgfId-999970]##To support connection sharing, the application
server can call _getConnection_ multiple times on a _ManagedConnection_
instance. In this case, a call to the method
_ManagedConnection.getConnection_ does not invalidate any previously
created connection handles. Multiple connection handles can exist
concurrently for a single _ManagedConnection_ instance. This design
supports the connection sharing mechanism. Refer to
link:conn.htm#50540572_72673[See Connection Sharing] for more details.

[#50540552_pgfId-999974]##Because multiple connection handles to a
single _ManagedConnection_ can exist concurrently, a resource adapter
implementation may:

[#50540552_pgfId-999975]##Provide thread-safe semantics for a
_ManagedConnection_ implementation to support concurrent access to a
_ManagedConnection_ instance from multiple connection handles. It is
strongly recommended that resource adapters provide support for
concurrent access to a _ManagedConnection_ instance from multiple
connection handles. This may be required in a future release of the
specification.

[#50540552_pgfId-1002601]##Ensure that there is at most one connection
handle associated actively with a _ManagedConnection_ instance. The
active connection handle is the only connection using the
_ManagedConnection_ instance until an application-level _close_ is
called on this connection handle. The active connection handle may also
be modified by the container as a result of Connection Association (see
link:conn.htm#50540572_86331[See Connection Association] ) or the
dissociation of a lazily associatable _ManagedConnection_ (see
link:conn.htm#50540572_21093[See Lazy Connection Association
Optimization] ). For example, a _ManagedConnection.getConnection_ method
implementation associates a newly created connection handle as the
active connection handle. Any operations on the _ManagedConnection_ from
any previously created connection handles should result in an
application level exception. An example application level exception
extends the _javax.resource.ResourceException_ interface and is specific
to a resource adapter. A scenario illustrating this implementation is
shown in the link:conn.htm#50540572_53203[See Scenario: Local
Transaction].

======= [#50540552_pgfId-1002611]##Connection Matching Contract

[#50540552_pgfId-999981]##The application server invokes the
_ManagedConnectionFactory.matchManagedConnections_ method (implemented
by a resource adapter) to find a matching _ManagedConnection_ for
servicing a connection request. The application server passes a
candidate set of _ManagedConnection_ instances to the
_matchManagedConnections_ method.

[#50540552_pgfId-999982]##The application server should use the
connection matching contract for _ManagedConnection_ instances that have
no existing connection handles. A candidate set passed to the
_matchManagedConnections_ method should not have any _ManagedConnection_
instances with existing connection handles.

[#50540552_pgfId-999983]##There is no requirement that the
_matchManagedConnections_ implementation be capable of performing a
match across a candidate set that includes _ManagedConnection_ instances
with existing connection handles. Note that a resource adapter can
return a successful match with the requirement that the
_ManagedConnection.getConnection_ method will later change the state of
the matched _ManagedConnection_ . To avoid any unexpected matching
behavior, the application server should not pass a _ManagedConnection_
instance with existing connection handles to the
_matchManagedConnections_ method as part of a candidate set.

[#50540552_pgfId-999984]##A connection request can lead to the creation
of additional connection handles for a _ManagedConnection_ instance that
already has one or more existing connection handles. In this case, the
application server should take the responsibility of checking whether or
not the chosen _ManagedConnection_ instance can service such a request.
Refer to link:conn.htm#50540572_72673[See Connection Sharing] for
details.

======= [#50540552_pgfId-999988]##Cleanup of ManagedConnection

[#50540552_pgfId-999989]##A resource adapter typically allocates system
resources (outside a JVM instance) for a _ManagedConnection_ instance.
Additionally, a _ManagedConnection_ instance can have state specific to
a client, such as security context, data/function access structures, and
result set from a query.

[#50540552_pgfId-999990]##The method _ManagedConnection.cleanup_
initiates a cleanup of any client-specific state maintained by a
_ManagedConnection_ instance. The _cleanup_ must invalidate all
connection handles created using the _ManagedConnection_ instance. Any
attempt by an application component to use the associated connection
handle after cleanup of the underlying _ManagedConnection_ should result
in an exception.

[#50540552_pgfId-999991]##The container always drives the cleanup of a
_ManagedConnection_ instance. The container keeps track of created
connection handles in an implementation specific mechanism. It invokes
_ManagedConnection.cleanup_ when it has to invalidate all connection
handles associated with this _ManagedConnection_ instance and put the
_ManagedConnection_ instance back in to the pool. This may be called
after the end of a connection sharing scope or when the last associated
connection handle is closed for a _ManagedConnection_ instance.

[#50540552_pgfId-999992]##The invocation of the
_ManagedConnection.cleanup_ method on an already cleaned-up connection
should not throw an exception.

[#50540552_pgfId-999993]##The cleanup of a _ManagedConnection_ instance
resets its client-specific state and prepares the connection to be put
back into a connection pool. The _cleanup_ method should not cause the
resource adapter to close the physical pipe and reclaim system resources
associated with the physical connection.

[#50540552_pgfId-999994]##An application server should explicitly call
_ManagedConnection.destroy_ to destroy a physical connection. An
application server should destroy a physical connection to manage the
size of its connection pool and to reclaim system resources.

[#50540552_pgfId-999995]##A resource adapter should destroy all
allocated system resources for this _ManagedConnection_ instance when
the method _destroy_ is called.

======= [#50540552_pgfId-999996]##Requirements

[#50540552_pgfId-999997]##A resource adapter must provide an
implementation of the _ManagedConnection_ interface.

======= [#50540552_pgfId-999999]##[#50540552_56509]##ManagedConnectionMetaData

[#50540552_pgfId-1000000]##The method _ManagedConnection.getMetaData_
returns a _javax.resource.spi.ManagedConnectionMetaData_ instance. The
_ManagedConnectionMetaData_ provides information about a
_ManagedConnection_ and the connected EIS instance. This information is
only available to the caller of this method if a valid physical
connection exists for an EIS instance.

======= [#50540552_pgfId-1000001]##Interface

[#50540552_pgfId-1000002]##The _ManagedConnectionMetaData_ interface
provides the following information about an EIS instance:

[#50540552_pgfId-1000003]##Product name of the EIS instance

[#50540552_pgfId-1000004]##Product version of the EIS instance

[#50540552_pgfId-1000005]##Maximum number of concurrent connections from
different processes that an EIS instance can support

[#50540552_pgfId-1000006]##User name for this connection, as known to
the EIS instance

[#50540552_pgfId-1000007]##The method _getUserName_ returns the user
name known to the underlying EIS instance for an active connection. The
name corresponds to the resource principal under whose security context
the connection to the EIS instance has been established.

======= [#50540552_pgfId-1000008]##Requirements

[#50540552_pgfId-1000009]##A resource adapter must provide an
implementation of the _ManagedConnectionMetaData_ interface. An instance
of this implementation class should be returned from the
_ManagedConnection.getMetaData_ method.

======= [#50540552_pgfId-1000010]##ConnectionEventListener

[#50540552_pgfId-1000011]##The connector architecture provides an event
callback mechanism that enables an application server to receive
notifications from a _ManagedConnection_ instance. An application server
uses these event notifications to manage its connection pool, to clean
up invalid or terminated connections, and to manage local transactions.
link:conn.htm#50540572_68848[See Transaction Management] discusses local
transaction-related event notifications in more detail.

[#50540552_pgfId-1000015]##An application server implements the
_javax.resource.spi.ConnectionEventListener_ interface. It uses the
_ManagedConnection.addConnectionEventListener_ method to register a
connection listener with a _ManagedConnection_ instance.

======= [#50540552_pgfId-1000016]##Interface

[#50540552_pgfId-1000017]##The following code extract specifies the
_ConnectionEventListener_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001464]##public interface
javax.resource.spi.ConnectionEventListener \{

[#50540552_pgfId-1001465]## public void connectionClosed(ConnectionEvent
event);

[#50540552_pgfId-1001466]## public void
connectionErrorOccurred(ConnectionEvent event);

[#50540552_pgfId-1001467]## 

[#50540552_pgfId-1001468]## // Local Transaction Management related
events

[#50540552_pgfId-1001469]## public void
localTransactionStarted(ConnectionEvent event);

[#50540552_pgfId-1001470]## public void
localTransactionCommitted(ConnectionEvent event);

[#50540552_pgfId-1001471]## public void
localTransactionRolledback(ConnectionEvent event);

[#50540552_pgfId-1001451]##}

|===

[#50540552_pgfId-1000027]##A _ManagedConnection_ instance calls the
_ConnectionEventListener.connectionClosed_ method to notify its
registered set of listeners when an application component closes a
connection handle. The application server uses this connection close
event to make a decision on whether or not to put the
_ManagedConnection_ instance back into the connection pool.

[#50540552_pgfId-1000028]##The _ManagedConnection_ instance calls the
_ConnectionEventListener.connectionErrorOccurred_ method to notify its
registered listeners of the occurrence of a physical connection-related
error. The event notification happens just before a resource adapter
throws an exception to the application component using the connection
handle.

[#50540552_pgfId-1000029]##The _connectionErrorOccurred_ method
indicates that the associated _ManagedConnection_ instance is now
invalid and unusable. The application server handles the connection
error event notification by initiating application server-specific
cleanup (for example, removing _ManagedConnection_ instance from the
connection pool) and then calling _ManagedConnection.destroy_ method to
destroy the physical connection.

[#50540552_pgfId-1000030]##A _ManagedConnection_ instance also notifies
its registered listeners for transaction-related events by calling the
following methods—localTransactionStarted, localTransactionCommitted,
and localTransactionRolledback. An application server uses these
notifications to manage local transactions. See
link:conn.htm#50540572_84546[See Local Transaction Management Contract]
for details on the local transaction management.

[#50540552_pgfId-1000034]##The processing of event notifications by the
registered event listeners may be synchronous or asynchronous. That is,
a listener may process an event notification immediately (as part of the
notification method call) or it may defer event processing to a later in
time. The resource adapter must not assume the processing of event
notifications by its listeners to be synchronous or asynchronous.

======= [#50540552_pgfId-1000035]##ConnectionEvent

[#50540552_pgfId-1000036]##A _javax.resource.spi.ConnectionEvent_ class
provides information about the source of a connection-related event. A
_ConnectionEvent_ instance contains the following information:

[#50540552_pgfId-1000037]##Type of the connection event

[#50540552_pgfId-1000038]## _ManagedConnection_ instance that has
generated the connection event. A _ManagedConnection_ instance is
returned from the _ConnectionEvent.getSource_ method.

[#50540552_pgfId-1000039]##Connection handle associated with the
_ManagedConnection_ instance; required for the _CONNECTION_CLOSED_ event
and optional for the other event types.

[#50540552_pgfId-1000042]##Optionally, an exception indicating a
connection related error. Refer to link:conn.htm#50540554_68528[See
System Exceptions] for details on the system exception. Note that the
exception is used for the _CONNECTION_ERROR_OCCURRED_ notification.

[#50540552_pgfId-1000044]##This class defines the following types of
event notifications:

[#50540552_pgfId-1000045]## _CONNECTION_CLOSED_

[#50540552_pgfId-1000046]## _LOCAL_TRANSACTION_STARTED_

[#50540552_pgfId-1000047]## _LOCAL_TRANSACTION_COMMITTED_

[#50540552_pgfId-1000048]## _LOCAL_TRANSACTION_ROLLEDBACK_

[#50540552_pgfId-1000049]## _CONNECTION_ERROR_OCCURRED_

======= [#50540552_pgfId-1000050]##

image:conn-35.gif[image]

Error Logging and Tracing

[#50540552_pgfId-1000051]##The connector architecture provides basic
support for error logging and tracing in both managed and non-managed
environments. This support enables an application server to detect
errors related to a resource adapter and its EIS, and to use error
information for debugging.

======= [#50540552_pgfId-1000052]##ManagedConnectionFactory

[#50540552_pgfId-1000053]##The
_javax.resource.spi.ManagedConnectionFactory_ interface defines the
following methods for error logging and tracing:

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001517]##public interface
javax.resource.spi.ManagedConnectionFactory

[#50540552_pgfId-1001518]## extends java.io.Serializable \{

[#50540552_pgfId-1001519]## 

[#50540552_pgfId-1001520]## public void setLogWriter(java.io.PrintWriter
out)

[#50540552_pgfId-1001521]## throws ResourceException;

[#50540552_pgfId-1001522]## public java.io.PrintWriter getLogWriter()

[#50540552_pgfId-1001523]## throws ResourceException;

[#50540552_pgfId-1001524]## ...

[#50540552_pgfId-1001515]##}

|===

[#50540552_pgfId-1000063]##The log writer is a character output stream
to which all logging and tracing messages for a
_ManagedConnectionFactory_ instance are printed.

[#50540552_pgfId-1000064]##A character output stream can be registered
with a _ManagedConnectionFactory_ instance using the _setLogWriter_
method. A _ManagedConnectionFactory_ implementation uses this character
output stream to output error log and trace information.

[#50540552_pgfId-1000065]##An application server manages the association
of a log writer with a _ManagedConnectionFactory_ . When a
_ManagedConnectionFactory_ instance is created, the log writer is
initially _null_ and logging is disabled. Associating a log writer with
a _ManagedConnectionFactory_ instance enables logging and tracing for
the _ManagedConnectionFactory_ instance.

[#50540552_pgfId-1000066]##An application server administrator primarily
uses the error and trace information printed on a log writer by a
_ManagedConnectionFactory_ instance. This information is typically
system-level in nature (for example, information related to connection
pooling and transactions) rather than of direct interest to application
developers.

======= [#50540552_pgfId-1000067]##ManagedConnection

[#50540552_pgfId-1000068]##The _javax.resource.spi.ManagedConnection_
interface defines the following methods to support error logging and
tracing specific to a physical connection.

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001543]##public interface
javax.resource.spi.ManagedConnection \{

[#50540552_pgfId-1001544]## public void setLogWriter(java.io.PrintWriter
out)

[#50540552_pgfId-1001545]## throws ResourceException;

[#50540552_pgfId-1001546]## public java.io.PrintWriter getLogWriter()

[#50540552_pgfId-1001547]## throws ResourceException;

[#50540552_pgfId-1001548]## ...

[#50540552_pgfId-1001541]##}

|===

[#50540552_pgfId-1000076]##A newly created _ManagedConnection_ instance
gets the default log writer from the _ManagedConnectionFactory_ instance
that creates the _ManagedConnection_ instance. The default log writer
can be overridden by an application server using the
_ManagedConnection.setLogWriter_ method. The setting of the log writer
on a _ManagedConnection_ enables an application server to manage error
logging and tracing specific to the physical connection represented by a
_ManagedConnection_ instance.

[#50540552_pgfId-1000077]##An application server can optionally
disassociate the log writer from a _ManagedConnection_ instance when
this connection instance is put back into the connection pool by using
_setLogWriter_ and passing _null_ .

======= [#50540552_pgfId-1000078]##

image:conn-35.gif[image]

Object Diagram

[#50540552_pgfId-1000082]##The following shows the object diagram for
the connection management architecture. It shows invocations across the
various object instances that correspond to the architected interfaces
in the connection management contract, as opposed to those instances
specific to implementations of the application server and the resource
adapter.

[#50540552_pgfId-1003384]##To keep the diagram simple, it does not show
the transaction management contract-related interfaces ( _XAResource_
and _LocalTransaction_ ) and invocations.

[#50540552_pgfId-1003478]## 

[#50540552_pgfId-1003405]## 

[#50540552_pgfId-1003395]##[#50540552_35282]##Object Diagram: Connection
Management Architecture

image:conn-40.gif[image]

======= [#50540552_pgfId-1003043]##

image:conn-35.gif[image]

Illustrative Scenarios

[#50540552_pgfId-1000163]##This section uses sequence diagrams to
illustrate various interactions between the object instances involved in
the connection management contract.

[#50540552_pgfId-1000164]##Some sequence diagrams include a box labeled
“Application Server”. This box refers to various modules and classes
internal to an application server. These modules and classes communicate
through contracts that are application server implementation specific.

[#50540552_pgfId-1000165]##In this section, the CCI interfaces—
_javax.resource.cci.ConnectionFactory_ and
_javax.resource.cci.Connection_ —represent connection factory and
connection interfaces respectively.

[#50540552_pgfId-1000166]##The description of these sequence diagrams
does not include transaction-related details. These are covered in
link:conn.htm#50540572_68848[See Transaction Management].

======= [#50540552_pgfId-1000170]##Scenario: Connection Pool Management

[#50540552_pgfId-1000174]##The following object interactions are
involved in the scenario shown in link:conn.htm#50540552_81885[See OID:
Connection Event Notification]:

[#50540552_pgfId-1000175]##The application component calls the
_getConnection_ method on the _javax.resource.cci.ConnectionFactory_
instance (returned from the JNDI lookup) to get a connection to the
underlying EIS instance. Refer to link:conn.htm#50540561_98699[See JNDI
Configuration and Lookup] for details on the JNDI configuration and
lookup.

[#50540552_pgfId-1000179]##The _ConnectionFactory_ instance initially
handles the connection request from the application component in a
resource adapter specific way. It then delegates the connection request
to the associated _ConnectionManager_ instance. The _ConnectionManager_
instance has been associated with the _ConnectionFactory_ instance when
the _ConnectionFactory_ was instantiated.

[#50540552_pgfId-1000180]##The _ConnectionFactory_ instance receives all
connection request information passed through the _getConnection_ method
and, in turn, passes it in a form required by the method
_ConnectionManager_ . _allocateConnection_ . The ConnectionRequestInfo
parameter to the _allocateConnection_ method enables a
_ConnectionFactory_ implementation class to pass on client-specific
connection request information. This information is opaque to an
application server and is used subsequently by a resource adapter to do
connection matching and creation.

[#50540552_pgfId-1000181]##The _ConnectionManager_ instance (provided by
the application server) handles the _allocateConnection_ request by
interacting with the application server specific connection pool
manager. The interaction between a _ConnectionManager_ instance and pool
manager is internal and specific to an application server.

[#50540552_pgfId-1000182]##The application server finds a candidate set
of _ManagedConnection_ instances from its connection pool. The candidate
set includes all _ManagedConnection_ instances that the application
server considers suitable for handling the current connection allocation
request. The application server finds the candidate set using its own
implementation-specific structuring and lookup criteria for the
connection pool. Refer to link:conn.htm#50540552_99126[See
ManagedConnectionFactory] for guidelines of connection pool
implementation by an application.

[#50540552_pgfId-1000186]##If the application server finds no matching
_ManagedConnection_ instance that can best handle this connection
allocation request, or if the candidate set is empty, the application
server calls the _ManagedConnectionFactory.createManagedConnection_
method to create a new physical connection to the underlying EIS
instance. The application server passes necessary security information
(as JAAS _Subject_ ) as part of this method invocation. For details on
the security contract, refer to the _Security Management_ chapter. It
can also pass the _ConnectionRequestInfo_ information to the resource
adapter. The connection request information has been associated with the
connection allocation request by the resource adapter and is used during
connection creation.

[#50540552_pgfId-1000187]##The _ManagedConnectionFactory_ instance
creates a new physical connection to the underlying EIS to handle the
_createManagedConnection_ method. This new physical connection is
represented by a _ManagedConnection_ instance. The
_ManagedConnectionFactory_ uses the security information (passed as a
_Subject_ instance), _ConnectionRequestInfo_ , and its default set of
configured properties (port number, server name) to create a new
_ManagedConnection_ instance. Refer to link:conn.htm#50540568_99842[See
Security Contract] for more details on the _createManagedConnection_
method.

[#50540552_pgfId-1000191]##The _ManagedConnectionFactory_ instance
initializes the created _ManagedConnection_ instance and returns it to
the application server.

[#50540552_pgfId-1000192]##The application server registers a
_ConnectionEventListener_ instance with the _ManagedConnection_
instance, enabling it to receive notifications for events on this
connection. The application server uses these event notifications to
manage connection pooling and transactions.

[#50540552_pgfId-1000193]##The _ManagedConnection_ instance obtains its
log writer (for error logging and tracing support) from the
_ManagedConnectionFactory_ instance that created this connection.
However, an application server can set a new log writer with a
_ManagedConnection_ instance to do additional error logging and tracing
at the level of a _ManagedConnection_ .

[#50540552_pgfId-1000194]##The application server does the necessary
transactional setup for the _ManagedConnection_ instance.
link:conn.htm#50540572_68848[See Transaction Management] explains this
step in more detail.

[#50540552_pgfId-1000198]##Next, the application server calls
_ManagedConnection.getConnection_ method to get an application level
connection handle of type _javax.resource.cci.Connection_ . A
_ManagedConnection_ instance uses the _Subject_ and
_ConnectionRequestInfo_ parameters to the _getConnection_ method to
change the state of the _ManagedConnection_ .

[#50540552_pgfId-1000199]##Calling the _getConnection_ method does not
necessarily create a new physical connection to the EIS instance.
Calling _getConnection_ produces a temporary connection handle that is
used by an application component to access the underlying physical
connection. The actual underlying physical connection is represented by
a _ManagedConnection_ instance.

[#50540552_pgfId-1000200]##The application server returns the connection
handle to the resource adapter. The resource adapter then passes the
connection handle to the application component that initiated the
connection request.

[#50540552_pgfId-1003559]## 

[#50540552_pgfId-1003560]##OID: Connection Pool Management with New
Connection Creation

image:conn-41.gif[image]

======= [#50540552_pgfId-1000276]##Scenario: Connection Matching

[#50540552_pgfId-1000280]##link:conn.htm#50540552_38047[See OID:
Connection Pool Management with Connection Matching] shows the object
interactions for a connection matching scenario—that is, a scenario in
which the application server finds a non-empty candidate connection set
and calls the resource adapter to do matching on the candidate set. The
following steps are involved in this scenario:

[#50540552_pgfId-1000281]##The application server handles the connection
allocation request by creating a candidate set of _ManagedConnection_
instances from the connection pool. The candidate set includes the
_ManagedConnection_ instances that the application server considers
suitable for handling the current connection allocation request. The
application server finds this candidate set using its own
implementation-specific structuring and lookup criteria for the
connection pool. Refer to link:conn.htm#50540552_99126[See
ManagedConnectionFactory] for guidelines on connection pool
implementation by an application.

[#50540552_pgfId-1000285]##The application server calls the
_ManagedConnectionFactory.matchManaged-Connections_ method to enable the
resource adapter to do the connection matching. It passes the candidate
connection set, security information (as a _Subject_ instance associated
with the current connection request), and any _ConnectionRequestInfo_ .

[#50540552_pgfId-1000286]##The _ManagedConnectionFactory_ instance
matches the candidate set of connections using the criteria known
internally to the resource adapter. The _matchManagedConnections_ method
returns a _ManagedConnection_ instance that the resource adapter
considers to be an acceptable match for the current connection
allocation request.

[#50540552_pgfId-1000287]##The application server can set a new log
writer with the _ManagedConnection_ instance to do error logging and
tracing at the level of the _ManagedConnection._

[#50540552_pgfId-1000288]##The application server does the necessary
transactional setup for the _ManagedConnection_ instance.
link:conn.htm#50540572_68848[See Transaction Management] explains this
step in more detail.

[#50540552_pgfId-1000292]##The application server calls the
_ManagedConnection.getConnection_ method to get a new application level
connection handle.

[#50540552_pgfId-1000293]##The _ManagedConnection.getConnection_ method
implementation uses the _Subject_ parameter and any
_ConnectionRequestInfo_ to set the state of the _ManagedConnection_
instance based on the current connection allocation request. Refer to
link:conn.htm#50540568_48692[See ManagedConnection] for details if a
resource adapter implements support for re-authentication of a
_ManagedConnection_ instance.

[#50540552_pgfId-1000297]##The application server returns the connection
handle to the resource adapter. The resource adapter then passes the
connection handle to the application component that initiated the
connection request.

[#50540552_pgfId-1000372]##[#50540552_38047]##OID: Connection Pool
Management with Connection Matching

image:conn-42.gif[image]

======= [#50540552_pgfId-1000374]##[#50540552_60711]##Scenario: Connection Event Notifications and Connection Close

[#50540552_pgfId-1000375]##For each _ManagedConnection_ instance in the
pool, the application server registers a _ConnectionEventListener_
instance to receive close and error events on the connection. This
scenario explains how the connection event callback mechanism enables an
application server to manage connection pooling.

[#50540552_pgfId-1000379]##The scenario involves the following steps
(see link:conn.htm#50540552_81885[See OID: Connection Event
Notification]) when an application component initiates a connection
close:

[#50540552_pgfId-1000380]##The application component releases an
allocated connection handle using the _close_ method on the
_javax.resource.cci.Connection_ instance. The _Connection_ instance
delegates the close method to the associated _ManagedConnection_
instance. The delegation happens through an association between
_ManagedConnection_ instance and the corresponding connection handle
_Connection_ instance. The mechanism by which this association is
achieved is specific to the implementation of a resource adapter.

[#50540552_pgfId-1000381]##The connection management contract places a
requirement that a _ManagedConnection_ instance must not alter the state
of a physical connection while handling the connection close.

[#50540552_pgfId-1000382]##The _ManagedConnection_ instance notifies all
its registered listeners of the application’s connection close request
using the _ConnectionEventListener_ . _connectionClosed_ method. It
passes a _ConnectionEvent_ instance with the event type set to
_CONNECTION_CLOSED_ .

[#50540552_pgfId-1000383]##On receiving the connection close event
notification, the application server performs the transaction
management-related cleanup of the _ManagedConnection_ instance. Refer to
link:conn.htm#50540552_81885[See OID: Connection Event Notification] for
details on the cleanup of a _ManagedConnection_ instance participating
in a JTA transaction.

[#50540552_pgfId-1000387]##The application server also uses the
connection close event notification to manage its connection pool. On
receiving the connection close notification, the application server
calls the _ManagedConnection.cleanup_ method (depending on whether the
_ManagedConnection_ is shared and the presence of other active
connection handles) to perform cleanup on the _ManagedConnection_
instance that raised the connection close event. The application
server-initiated cleanup of a _ManagedConnection_ instance prepares this
_ManagedConnection_ instance to be reused for subsequent connection
requests. See link:conn.htm#50540572_72673[See Connection Sharing] for a
discussion of connection sharing and its implications on
_ManagedConnection_ cleanup.

[#50540552_pgfId-1000391]##After initiating the necessary cleanup for
the _ManagedConnection_ instance, the application server puts the
_ManagedConnection_ instance back into the connection pool. The
application server should be able to use this available
_ManagedConnection_ instance to handle future connection allocation
requests from application components.

======= [#50540552_pgfId-1000392]##Connection Cleanup

[#50540552_pgfId-1000393]##The application server can also initiate
cleanup of a _ManagedConnection_ instance when the container terminates
the application component instance that has the corresponding connection
handle. The application server should call _ManagedConnection.cleanup_
to initiate the connection cleanup. After the cleanup, the application
server puts the _ManagedConnection_ instance into the pool to serve
future allocation requests.

======= [#50540552_pgfId-1000394]##Connection Destroy

[#50540552_pgfId-1000395]##To manage the size of the connection pool,
the application server can call _ManagedConnection.destroy_ method to
destroy a _ManagedConnection_ . A _ManagedConnection_ instance handles
this method call by closing the physical connection to the EIS instance
and releasing all system resources held by this instance.

[#50540552_pgfId-1000396]##The application server also calls
_ManagedConnection.destroy_ when it receives a connection error event
notification that signals a fatal error on the physical connection.

[#50540552_pgfId-1003716]## 

[#50540552_pgfId-1003715]##[#50540552_81885]##OID: Connection Event
Notification

image:conn-43.gif[image]

======= [#50540552_pgfId-1000458]##

image:conn-35.gif[image]

Architecture: Non-Managed Environment

[#50540552_pgfId-1000459]##The connection management contract enables a
resource adapter to be used in a two-tier application directly from an
application client.

[#50540552_pgfId-1000460]##In a non-managed application scenario, the
_ConnectionManager_ implementation class may be provided either by a
resource adapter (as a default _ConnectionManager_ implementation) or by
application developers. Note that a default implementation of the
_ConnectionManager_ should be defined for a resource adapter (in terms
of the functionality provided and third-party components added) only at
development time.

[#50540552_pgfId-1000461]##The default _ConnectionManager_ instance
interposes on the connection request and delegates the request to the
_ManagedConnectionFactory_ instance. The _ManagedConnectionFactory_
creates a physical connection (represented by a _ManagedConnection_
instance) to the underlying EIS. The _ConnectionManager_ gets a
connection handle (of type _javax.resource.cci.Connection_ for CCI) from
the _ManagedConnection_ and returns it to the connection factory. The
connection factory returns the connection handle to the application.

[#50540552_pgfId-1000465]##A resource adapter supports interactions
(shown as light shaded lines in the following figure) between its
internal objects in an implementation-specific way. For example, a
resource adapter can use the connection event listening mechanism as
part of its _ManagedConnection_ implementation for connection
management. However, the resource adapter is not required to use the
connection event mechanism to drive its internal interactions.

[#50540552_pgfId-1000504]##[#50540552_77052]##Architecture Diagram:
Non-Managed Application Scenario

image:conn-44.gif[image]

======= [#50540552_pgfId-1000505]##Scenario: Programmatic Access to ConnectionFactory

[#50540552_pgfId-1000506]##To maintain the consistency of the
application programming model across both managed and non-managed
environments, application code should use the JNDI namespace to look-up
a connection factory instance.

[#50540552_pgfId-1000507]##The following code extract shows how an
application client accesses a connection factory instance in a
non-managed environment. The code extract does not show the use of JNDI.
It is used as an example to illustrate the use of
_ManagedConnectionFactory_ and _ConnectionFactory_ interfaces in the
application code. Refer to section link:conn.htm#50540561_98699[See JNDI
Configuration and Lookup] for details on JNDI configuration and lookup.

[width="100%",cols="100%",]
|===
a|
[#50540552_pgfId-1001695]##// Application Client Code

[#50540552_pgfId-1001696]##// Create an instance of the
ManagedConnectionFactory

[#50540552_pgfId-1001731]##// implementation class passing in
initialization parameters

[#50540552_pgfId-1001732]##// (if any) for this instance

[#50540552_pgfId-1001698]##com.myeis.ManagedConnectionFactoryImpl mcf =

[#50540552_pgfId-1001699]## new
com.myeis.ManagedConnectionFactoryImpl(...);

[#50540552_pgfId-1001700]## 

[#50540552_pgfId-1001701]##// Set properties on the
ManagedConnectionFactory instance

[#50540552_pgfId-1001702]##// Note: Properties are defined on the
implementation class

[#50540552_pgfId-1001735]##// and not on the
javax.resource.spi.ManagedConnectionFactory

[#50540552_pgfId-1001738]##// interface

[#50540552_pgfId-1001704]##mcf.setServerName(...);

[#50540552_pgfId-1001705]##mcf.setPortNumber(...);

[#50540552_pgfId-1001706]## 

[#50540552_pgfId-1001707]##// set remaining properties

[#50540552_pgfId-1001708]##...

[#50540552_pgfId-1001709]## 

[#50540552_pgfId-1001710]##// Get access to connection factory. The
ConnectionFactory instance

[#50540552_pgfId-1001711]##// gets initialized with the default
ConnectionManager provided

[#50540552_pgfId-1001712]##// by the resource adapter

[#50540552_pgfId-1001713]##javax.resource.cci.ConnectionFactory cxf =

[#50540552_pgfId-1001714]## (javax.resource.cci.ConnectionFactory)

[#50540552_pgfId-1001715]## mcf.createConnectionFactory();

[#50540552_pgfId-1001716]## 

[#50540552_pgfId-1001717]##// Get a connection using the
ConnectionFactory instance

[#50540552_pgfId-1001718]##javax.resource.cci.Connection cx =
cxf.getConnection(...);

[#50540552_pgfId-1001719]## 

[#50540552_pgfId-1001720]##// use connection to access the underlying
EIS instance

[#50540552_pgfId-1001721]##...

[#50540552_pgfId-1001722]## 

[#50540552_pgfId-1001723]##// Close the connection

[#50540552_pgfId-1001693]##cx.close();

|===

======= [#50540552_pgfId-1000541]##Scenario: Connection Creation in Non-Managed Application Scenario

[#50540552_pgfId-1000545]##The following object interactions are
involved in the scenario shown in link:conn.htm#50540552_28975[See OID:
Connection Creation in a Non-Managed Application Scenario]:

[#50540552_pgfId-1000546]##The application client calls a method on the
_javax.resource.cci.ConnectionFactory_ instance, returned from the JNDI
lookup, to get a connection to the underlying EIS instance.

[#50540552_pgfId-1000547]##The _ConnectionFactory_ instance delegates
the connection request from the application to the default
_ConnectionManager_ instance. The resource adapter provides the default
_ConnectionManager_ implementation.

[#50540552_pgfId-1000548]##The _ConnectionManager_ instance creates a
new physical connection to the underlying EIS instance by calling the
_ManagedConnectionFactory_ . _createManagedConnection_ method.

[#50540552_pgfId-1000549]##The _ManagedConnectionFactory_ instance
handles the _createManagedConnection_ method by creating a new physical
connection to the underlying EIS, represented by a _ManagedConnection_
instance. The _ManagedConnectionFactory_ uses the security information,
passed as a _Subject_ instance, any _ConnectionRequestInfo instance_ ,
and its configured set of properties, such as port number, server name,
to create a new _ManagedConnection_ instance.

[#50540552_pgfId-1000550]##The _ManagedConnectionFactory_ initializes
the state of the created _Managed-Connection_ instance and returns it to
the default _ConnectionManager_ instance.

[#50540552_pgfId-1000551]##The _ConnectionManager_ instance calls the
_ManagedConnection.getConnection_ method to get an application-level
connection handle. Calling the _getConnection_ method does not
necessarily create a new physical connection to the EIS instance.
Calling _getConnection_ produces a temporary handle that is used by an
application to access the underlying physical connection. The actual
underlying physical connection is represented by a _ManagedConnection_
instance.

[#50540552_pgfId-1000552]##The _ConnectionManager_ instance returns the
connection handle to the _ConnectionFactory_ instance, which then
returns the connection to the application that initiated the connection
request.

[#50540552_pgfId-1000597]##[#50540552_28975]##OID: Connection Creation
in a Non-Managed Application Scenario

image:conn-45.gif[image]

======= [#50540552_pgfId-1000598]##

image:conn-35.gif[image]

Requirements

[#50540552_pgfId-1000599]##This section outlines requirements for the
connection management contract.

======= [#50540552_pgfId-1000600]##Resource Adapter

[#50540552_pgfId-1000601]##The requirements for a resource adapter are
as follows:

[#50540552_pgfId-1000602]##A resource adapter must provide
implementations of the following interfaces:

[#50540552_pgfId-1000603]##
_javax.resource.spi.ManagedConnectionFactory_

[#50540552_pgfId-1000604]## _javax.resource.spi.ManagedConnection_

[#50540552_pgfId-1000605]##
_javax.resource.spi.ManagedConnectionMetaData_

[#50540552_pgfId-1000606]##The _ManagedConnection_ implementation
provided by a resource adapter must use the following interface and
classes to provide support to an application server for connection
management and transaction management, as explained later:

[#50540552_pgfId-1000607]## _javax.resource.spi.ConnectionEvent_

[#50540552_pgfId-1000608]## _javax.resource.spi.ConnectionEventListener_

[#50540552_pgfId-1000609]##To support non-managed environments, a
resource adapter is not required to use the above two interfaces to
drive its internal object interactions.

[#50540552_pgfId-1000610]##A resource adapter must provide support for
basic error logging and tracing by implementing the following methods:

[#50540552_pgfId-1000611]## _ManagedConnectionFactory.set/getLogWriter_

[#50540552_pgfId-1000612]## _ManagedConnection.set/getLogWriter_

[#50540552_pgfId-1000613]##A resource adapter must provide a default
implementation of the _javax.resource.spi.ConnectionManager_ interface.
The implementation class comes into play when a resource adapter is used
in a non-managed two-tier application scenario. In an application
server-managed environment, the resource adapter must not use the
default _ConnectionManager_ implementation class.

[#50540552_pgfId-1000614]##A default implementation of
_ConnectionManager_ enables the resource adapter to provide services
specific to itself. These services can include connection pooling, error
logging and tracing, and security management. The default
_ConnectionManager_ delegates to the _ManagedConnectionFactory_ the
creation of physical connections to the underlying EIS.

[#50540552_pgfId-1000615]##In a managed environment, with the exception
of application client containers, a resource adapter must not
asynchronously (that is, using a separate thread other than the
application thread) call application objects other than message-driven
beans. However, this restriction does not apply to a non-managed
scenario, as well as application client containers. A resource adapter
deployer may use the ResourceAdapter JavaBean to configure the resource
adapter during its deployment to set the desired behavior, based on the
requirements of the deployment environment.

[#50540552_pgfId-1000616]##A resource adapter is not allowed to support
its own internal connection pooling in a managed environment. In this
case, the application server is responsible for connection pooling.
However, a resource adapter may multiplex connections (one or more
_ManagedConnection_ instances per physical connection) over a single
physical pipe transparent to the application server and components.

[#50540552_pgfId-1000617]##In a non-managed two tier application
scenario, a resource adapter is allowed to support connection pooling
internal to the resource adapter.

======= [#50540552_pgfId-1000618]##Application Server

[#50540552_pgfId-1000619]##The requirements for an application server
are as follows:

[#50540552_pgfId-1000620]##An application server must use the interfaces
defined in the connection management contract to use services provided
by a resource adapter. These interfaces are as follows:

[#50540552_pgfId-1000621]##
_javax.resource.spi.ManagedConnectionFactory_

[#50540552_pgfId-1000622]## _javax.resource.spi.ManagedConnection_

[#50540552_pgfId-1000623]##
_javax.resource.spi.ManagedConnectionMetaData_

[#50540552_pgfId-1000624]##An application server must provide an
implementation of the _javax.resource.spi.ConnectionManager_ interface.
This implementation should not be specific to any particular type of
resource adapter, EIS, or connection factory interface.

[#50540552_pgfId-1000625]##An application server must implement the
_javax.resource.spi.-ConnectionEventListener_ interface and to register
_ConnectionEventListener_ with a resource adapter to get
connection-related event notifications. An application server uses these
event notifications to do its pool management, transaction management,
and connection cleanup.

[#50540552_pgfId-1000626]##An application server must use the following
interfaces (supported by the resource adapter) to provide basic error
logging and tracing for its configured set of resource adapters:

[#50540552_pgfId-1000627]## _ManagedConnectionFactory.set/getLogWriter_

[#50540552_pgfId-1000628]## _ManagedConnection.set/getLogWriter_

[#50540552_pgfId-1000629]##An application server must use the
_javax.resource.spi.ConnectionManager_ hook-in mechanism to provide its
specific quality-of-services. The connector architecture does not
specify the set of services the application server provides, nor does it
specify how the application server implements these services.

[#50540552_pgfId-998874]## 

====== [#50540572_pgfId-874]## 

======= [#50540572_pgfId-5529]##

image:conn-46.gif[image]

[#50540572_68848]##Transaction Management

image:conn-47.gif[image]

[#50540572_pgfId-999458]##This chapter specifies the transaction
management contract between an application server (and supported
transaction manager) and an EIS resource manager.

[#50540572_pgfId-999459]##This chapter focuses only on the system-level
aspects of transaction management. The Java EE component model
specifications describe the application level transaction model. For
example, the EJB specification (see link:conn.htm#50540564_26771[See
Enterprise JavaBeans (EJB) Specification, version 3.2]) specifies the
transaction model for EJB components.

======= [#50540572_pgfId-999463]##

image:conn-48.gif[image]

Overview

[#50540572_pgfId-999467]##The following figure shows an application
component deployed in a container provided by an application server. The
application component performs transactional access to multiple resource
managers. The application server uses a transaction manager that takes
the responsibility of managing transactions across multiple resource
managers.

[#50540572_pgfId-999492]##[#50540572_25332]##Transaction Management
Contract

image:conn-49.gif[image]

[#50540572_pgfId-999493]##A resource manager can support two types of
transactions:

[#50540572_pgfId-999494]##A transaction that is controlled and
coordinated by a transaction manager external to the resource manager.
This document refers to such a transaction as JTA or XA transaction.

[#50540572_pgfId-999495]##A transaction that is managed internal to a
resource manager. The coordination of such transactions involves no
external transaction managers. This document refers to such transactions
as RM local transactions (or local transactions).

[#50540572_pgfId-999496]##A transaction manager coordinates transactions
across multiple resource managers. It also provides additional low-level
services that enable transactional context to be propagated across
systems. The services provided by a transaction manager are not visible
directly to the application components.

[#50540572_pgfId-999497]##The connector architecture defines a
transaction management contract between an application server and a
resource adapter and its underlying resource manager. The transaction
management contract has two parts, depending on the type of transaction:

[#50540572_pgfId-999498]##a JTA _javax.transaction.xa.XAResource_ based
contract between a transaction manager and a resource manager

[#50540572_pgfId-999499]##a local transaction management contract

[#50540572_pgfId-999500]##These contracts enable an application server
to provide the infrastructure and runtime environment for transaction
management. Application components rely on this transaction
infrastructure to support their component-level transaction model.
Connection Handles obtained in the context of an application component
should not be passed between application component boundaries,
especially if the connection handles are involved in a transaction, and
an application server is not required to support this usage.

======= [#50540572_pgfId-999501]##

image:conn-48.gif[image]

Transaction Management Scenarios

[#50540572_pgfId-999502]##This section uses a set of scenarios to
present an overview of the transaction management architecture.

======= [#50540572_pgfId-999503]##Transactions Across Multiple Resource Managers

[#50540572_pgfId-999507]##In the following figure, an application client
invokes EJB component X. EJB X accesses transaction programs managed by
a TP system and calls EJB Y to access an ERP system.

[#50540572_pgfId-999542]##[#50540572_46728]##Scenario: Transactions
Across Multiple Resource Managers

image:conn-50.gif[image]

[#50540572_pgfId-999543]##The application server uses a transaction
manager to support a transaction management infrastructure that enables
an application component to perform transactional access across multiple
EIS resource managers. The transaction manager manages transactions
across multiple resource managers and supports propagation of the
transaction context across distributed systems.

[#50540572_pgfId-999544]##The transaction manager supports a JTA
_XAResource_ -based transaction management contract with a resource
adapter and its underlying resource manager. The ERP system supports JTA
transactions by implementing an _XAResource_ interface through its
resource adapter. The TP system also implements an _XAResource_
interface. This interface enables the two resource managers to
participate in transactions that are coordinated by an external
transaction manager. The transaction manager uses the _XAResource_
interface to manage transactions across the two underlying resource
managers.

[#50540572_pgfId-999545]##The EJBs X and Y access the ERP and TP system
using the respective client access API for the two systems. Behind the
scenes, the application server enlists the connections to both systems,
obtained from their respective resource adapters, as part of the
transaction. When the transaction commits, the transaction manager
performs a two-phase commit protocol across the two resource managers,
ensuring that all read/write access to resources managed by both the TP
system and ERP system is either entirely committed or entirely rolled
back.

======= [#50540572_pgfId-999547]##[#50540572_65937]##Local Transaction Management

[#50540572_pgfId-999548]##The transactions are demarcated either by the
container (called container-managed demarcation) or by a component
(called component-managed demarcation). In component-managed
demarcation, an application component can use the JTA _UserTransaction_
interface or a transaction demarcation API specific to an EIS (for
example, JDBC transaction demarcation using _java.sql.Connection_ ).

[#50540572_pgfId-999549]##The EJB specification requires an EJB
container to support both container-managed and component-managed
transaction demarcation models. The JSP and servlet specifications
require a web container to support component-managed transaction
demarcation.

[#50540572_pgfId-999550]##If multiple resource managers participate in a
transaction, the EJB container uses a transaction manager to coordinate
the transaction. The contract between the transaction manager and
resource manager is defined using the _XAResource_ interface.

[#50540572_pgfId-999551]##If a single resource manager instance
participates in a transaction (either component-managed or
container-managed), the container has two choices:

[#50540572_pgfId-999552]##Using the transaction manager to manage this
transaction. The transaction manager uses one-phase commit-optimization,
described in link:conn.htm#50540572_63276[See Scenarios Supported], to
coordinate the transaction for this single resource manager instance.

[#50540572_pgfId-999556]##Letting the resource manager coordinate this
transaction internally without involving an external transaction
manager.

[#50540572_pgfId-999557]##If an application accesses a single resource
manager using an XA transaction, it has more performance overhead
compared to using a local transaction. The overhead is due to the
involvement of an external transaction manager in the coordination of
the XA transaction.

[#50540572_pgfId-999558]##To avoid the overhead of using an XA
transaction in a single resource manager scenario, the application
server may optimize this scenario by using a local transaction instead
of an XA transaction. This scenario is shown in the following figure.

[#50540572_pgfId-999587]##[#50540572_75913]##Scenario: Local Transaction
on a Single Resource Manager

image:conn-51.gif[image]

======= [#50540572_pgfId-999588]##

image:conn-48.gif[image]

Transaction Management Contract

[#50540572_pgfId-999589]##This section specifies the transaction
management contract. The transaction management contract builds on the
connection management contract specified in
link:conn.htm#50540552_18615[See Connection Management].

[#50540572_pgfId-999596]##The following figure shows the interfaces and
flows in the transaction management contract. It does not show the
interfaces, classes, and flows that are the same in the connection
management contract.

[#50540572_pgfId-999652]##[#50540572_99144]##Architecture Diagram:
Transaction Management

image:conn-52.gif[image]

======= [#50540572_pgfId-999653]##Interface: ManagedConnection

[#50540572_pgfId-999654]##The _javax.resource.spi.Managed_ Connection
instance represents a physical connection to an EIS and acts as a
factory for connection handles.

[#50540572_pgfId-999655]##The following code extract shows the methods
on _the ManagedConnection_ interface that are defined specifically for
the transaction management contract:

[width="100%",cols="100%",]
|===
a|
[#50540572_pgfId-1001071]##public interface
javax.resource.spi.ManagedConnection \{

[#50540572_pgfId-1001072]## public XAResource getXAResource() throws
ResourceException;

[#50540572_pgfId-1001073]## public LocalTransaction
getLocalTransaction()

[#50540572_pgfId-1001074]## throws ResourceException;

[#50540572_pgfId-1001075]## ...

[#50540572_pgfId-1001069]##}

|===

[#50540572_pgfId-999662]##A _Managed_ Connection instance provides
access to a pair of interfaces: _javax.transaction.xa.XAResource_ and
_javax.resource.spi.LocalTransaction_ .

[#50540572_pgfId-999663]##Depending on the transaction support level of
a resource adapter, these methods should raise appropriate exceptions.
For example, if the transaction support level for a resource adapter is
_NoTransaction_ , an invocation of _getXAResource_ method should throw a
_ResourceException_ . Refer to link:conn.htm#50540554_88682[See
Exceptions] for details on the exception hierarchy.

[#50540572_pgfId-999670]##The following figure illustrates this concept:

[#50540572_pgfId-999703]##[#50540572_11251]##ManagedConnection Interface
for Transaction Management

image:conn-53.gif[image]

[#50540572_pgfId-999704]##The transaction manager uses the _XAResource_
interface to associate and dissociate a transaction with the underlying
EIS resource manager instance and to perform a two-phase commit
protocol. The transaction manager does not directly use the
_ManagedConnection_ interface. The next section describes the
_XAResource_ interface in more detail.

[#50540572_pgfId-999705]##The application server uses the
_LocalTransaction_ interface to manage local transactions.

======= [#50540572_pgfId-999706]##Interface: XAResource

[#50540572_pgfId-999707]##The _javax.transaction.xa.XAResource_
interface is a Java mapping of the industry standard _XA_ interface
based on _X/Open CAE specification_ (see
link:conn.htm#50540564_30375[See X/Open CAE Specification -- Distributed
Transaction Processing: the XA Specification, X/Open document]).

[#50540572_pgfId-1004152]##The following code extract shows the
interface specification for the _XAResource_ interface. For more details
and API documentation, refer to the JTA (see
link:conn.htm#50540564_28808[See Java Transaction API (JTA)
Specification, version 1.2]) and XA (see
link:conn.htm#50540564_30375[See X/Open CAE Specification -- Distributed
Transaction Processing: the XA Specification, X/Open document])
specifications:

[width="100%",cols="100%",]
|===
a|
[#50540572_pgfId-1004161]##public interface
javax.transaction.xa.XAResource \{

[#50540572_pgfId-1004162]## public void commit(Xid xid, boolean
onePhase) throws XAException;

[#50540572_pgfId-1004163]## public void end(Xid xid, int flags) throws
XAException;

[#50540572_pgfId-1004164]## public void forget(Xid xid) throws
XAException;

[#50540572_pgfId-1004165]## public int prepare(Xid xid) throws
XAException;

[#50540572_pgfId-1004166]## public Xid[] recover(int flag) throws
XAException;

[#50540572_pgfId-1004167]## public void rollback(Xid xid) throws
XAException;

[#50540572_pgfId-1004168]## public void start(Xid xid, int flags) throws
XAException;

[#50540572_pgfId-1004169]##}

|===

======= [#50540572_pgfId-1004170]##Implementation

[#50540572_pgfId-999728]##A resource adapter for an EIS resource manager
implements the _XAResource_ interface. This interface enables the
resource manager to participate in transactions that are controlled and
coordinated by an external transaction manager. The transaction manager
uses the _XAResource_ interface to communicate transaction association,
completion, and recovery to the resource manager.

[#50540572_pgfId-999729]##A resource adapter typically implements the
_XAResource_ interface using a low-level library available for the
underlying EIS resource manager. This low-level library either supports
a native implementation of the _XA_ interface or provides a proprietary
vendor-specific interface for transaction management.

[#50540572_pgfId-999730]##A resource adapter is responsible for
maintaining a 1-1 relationship between the _ManagedConnection_ and
_XAResource_ instances. Each time a _ManagedConnection.getXAResource_
method is called, the same _XAResource_ instance has to be returned.

[#50540572_pgfId-999731]##A transaction manager can use any _XAResource_
instance (if it refers to the proper resource manager instance) to
initiate transaction completion. The _XAResource_ instance used during
the transaction completion process need not be the one initially
enlisted with the transaction manager for this transaction.

======= [#50540572_pgfId-999733]##[#50540572_16078]##Interface: LocalTransaction

[#50540572_pgfId-999734]##The following code extract shows the
_javax.resource.spi.LocalTransaction_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540572_pgfId-1001134]##public interface
javax.resource.spi.LocalTransaction \{

[#50540572_pgfId-1001135]## public void begin() throws
ResourceException;

[#50540572_pgfId-1001136]## public void commit() throws
ResourceException;

[#50540572_pgfId-1001137]## public void rollback() throws
ResourceException;

[#50540572_pgfId-1001132]##}

|===

[#50540572_pgfId-999740]##A resource adapter implements the
_LocalTransaction_ interface to provide support for local transactions
that are performed on the underlying resource manager. An application
server uses the _LocalTransaction_ interface to manage local
transactions for a resource manager.

[#50540572_pgfId-999744]##link:conn.htm#50540572_21113[See Interface:
LocalTransaction] has more details on the local transaction management
contract.

======= [#50540572_pgfId-999745]##

image:conn-48.gif[image]

Relationship to JTA and JTS

[#50540572_pgfId-999749]##The JavaTM Transaction API (JTA) (see
link:conn.htm#50540564_28808[See Java Transaction API (JTA)
Specification, version 1.2]) is a specification of interfaces between a
transaction manager and the other parties involved in a distributed
transaction processing system: application programs, resource managers,
and an application server.

[#50540572_pgfId-999750]##The JavaTM Transaction Service (JTS) API is a
Java binding of the Common Object Request Broker Architecture (CORBA)
Object Transaction Service (OTS) 1.1 specification. JTS provides
transaction interoperability using the standard Internet Inter-ORB
Protocol (IIOP) for transaction propagation between servers. The JTS API
is intended for vendors who implement transaction processing
infrastructure for enterprise middleware. For example, an application
server vendor can use a JTS implementation as the underlying transaction
manager.

======= [#50540572_pgfId-999751]##JTA Interfaces

[#50540572_pgfId-999752]##The application server uses the
_javax.transaction.TransactionManager_ and
_javax.transaction.Transaction_ interfaces, specified in the JTA
specification, for its contract with the transaction manager.

[#50540572_pgfId-999753]##The application server uses the
_javax.transaction.TransactionManager_ interface to control the
transaction boundaries on behalf of the application components that are
being managed by the application server. For example, an EJB container
manages the transaction states for transactional EJB components. The EJB
container uses the _TransactionManager_ interface to demarcate
transaction boundaries based on the calling thread’s transaction
context.

[#50540572_pgfId-999754]##The application server also uses the
_javax.transaction.Transaction_ interface to enlist and delist
transactional connections with the transaction manager. This enables the
transaction manager to coordinate transactional work performed by all
enlisted resource managers within a transaction.

======= [#50540572_pgfId-999755]##

image:conn-48.gif[image]

Object Diagram

[#50540572_pgfId-1003871]##The following figure shows the object
instances and their interactions related to transaction management.
Since the transaction management contract builds upon the connection
management contract, the following diagram does not show object
interactions that have already been discussed in
link:conn.htm#50540552_18615[See Connection Management].

[#50540572_pgfId-1003947]## 

[#50540572_pgfId-1003941]##[#50540572_36295]##Object Diagram:
Transaction Management

image:conn-54.gif[image]

[#50540572_pgfId-1003101]## 

======= [#50540572_pgfId-999831]##

image:conn-48.gif[image]

[#50540572_98900]##XAResource-based Transaction Contract

[#50540572_pgfId-999832]##This section specifies detailed requirements
for a resource manager and a transaction manager for the _XAResource_
-based transaction management contract. In this section, the following
abbreviations are used: RM (Resource Manager), TM (Transaction Manager),
1PC (one-phase commit protocol), and 2PC (two-phase commit protocol).

[#50540572_pgfId-1003948]## 

======= [#50540572_pgfId-999834]##[#50540572_63276]##Scenarios Supported

[#50540572_pgfId-999835]##The following table specifies various
transaction management scenarios and mentions whether these scenarios
are within the scope of the connector architecture.

[width="100%",cols="50%,50%",options="header",]
|===
|[#50540572_pgfId-1003839]##Description
|[#50540572_pgfId-1003841]##Supported / NotSupported
a|
[#50540572_pgfId-1003843]##TM does two-phase commit (2PC) on RMs that
support two-phase commit (as defined in RM’s requirements for
_XAResource_ implementation in the subsection below)

[#50540572_pgfId-1003844]##Examples of RM: Oracle and DB2 installations
that support 2PC in their _XAResource_ implementations.

|[#50540572_pgfId-1003846]##Supported based on TM’s requirement to be
JTA/JTS and X/Open compliant, and RM’s support for 2PC in the
_XAResource_ interface.

a|
[#50540572_pgfId-1003848]##TM does one-phase commit (1PC) optimization
on the only RM involved in a transaction. RM supports 2PC in its
_XAResource_ implementation (as defined in RM’s requirements for the
_XAResource_ implementation in the subsection below).

[#50540572_pgfId-1003849]##Example of RM: DB2 installation that supports
2PC in its _XAResource_ implementation.

a|
[#50540572_pgfId-1003851]##Supported based on TM’s requirement to be
JTA/JTS and X/Open compliant, and RM’s support for the XAResource
interface.

[#50540572_pgfId-1003852]##Note: This scenario will also work if TM does
2PC on RM.

[#50540572_pgfId-1003853]## 

a|
[#50540572_pgfId-1003855]##TM does one-phase commit optimization on the
only RM involved in a transaction. RM does not support 2PC but supports
1PC in its _XAResource_ implementation.

[#50540572_pgfId-1003856]##Example of RM: ERP system or mainframe TP
system that does not support 2PC, but implements 1PC in its XAResource
implementation as defined in the RM’s requirements for 1PC.

a|
[#50540572_pgfId-1003858]##Supported by requiring that TM must support
1PC optimization. A successful transaction coordination of 1PC only RM
comes as a result of required 1PC optimization for a TM.

[#50540572_pgfId-1003859]##The rationale behind this requirement is that
this scenario will be an important scenario to support for the connector
architecture.

|[#50540572_pgfId-1003861]##TM does last-resource commit optimization
across multiple RMs involved in a transaction—RMs that support 2PC (for
example: Oracle and DB2) and a single RM that supports only 1PC (for
example: an ERP system). a|
[#50540572_pgfId-1003863]##Out of the scope of the connector
architecture specification

[#50540572_pgfId-1003864]## 

|[#50540572_pgfId-1003866]##More than one RM that support only 1PC
involved in a transaction with none or multiple 2PC enabled RMs a|
[#50540572_pgfId-1003868]##Out of the scope of the connector
architecture specification

[#50540572_pgfId-1003869]## 

|===

======= [#50540572_pgfId-1002793]##[#50540572_64893]##Resource Adapter Requirements

[#50540572_pgfId-999882]##The connector architecture does not require
that all resource adapters must support JTA _XAResource_ based
transaction contract.

[#50540572_pgfId-999883]##If a resource adapter decides to support an
_XAResource_ based contract, then the connector architecture places
certain requirements on a resource adapter and its underlying resource
manager (RM).

[#50540572_pgfId-999884]##The following requirements refer to a resource
adapter and its resource manager together as a resource manager (RM).
The division of responsibility between a resource adapter and its
underlying resource manager for supporting the transaction contract is
implementation-specific and is out of the scope of the connector
architecture.

[#50540572_pgfId-999885]##These requirements assume that a transaction
manager (TM) supports JTA/XA and JTS requirements.

[#50540572_pgfId-999886]##The following set of requirements are based on
the JTA and XA specifications and should be read in conjunction with
these specifications. These detailed requirements are included in this
document to clearly specify the requirements from the connector
architecture perspective.

======= [#50540572_pgfId-999887]##General

[#50540572_pgfId-999888]##If an RM supports an _XAResource_ contract,
then it must support the one-phase commit protocol by implementing
_XAResource.commit_ when the boolean flag _onePhase_ is set to _True_ .
The RM is not required to implement the two-phase commit protocol
support in its _XAResource_ implementation.

[#50540572_pgfId-999889]##However, if an RM supports the two-phase
commit protocol, then the RM must use the _XAResource_ interface for
supporting the two-phase commit protocol.

[#50540572_pgfId-999890]##An RM is allowed to combine the implementation
of 2PC protocol with 1PC optimization by implementing
_XAResource.commit_ ( _onePhase_ = _True_ ) in addition to the
implementation requirements for 2PC.

======= [#50540572_pgfId-999891]##One-phase Commit

[#50540572_pgfId-999892]##An RM should allow _XAResource.commit_ (
_onePhase_ = _True_ ) even if it has not received _XAResource.prepare_
for the transaction branch.

[#50540572_pgfId-999893]##If the RM fails to commit a transaction during
a 1PC commit, then the RM should throw one of the _XA_RB*_ exceptions.
In the exception case, an RM should roll back the transaction branch’s
work and release all held RM resources.

[#50540572_pgfId-999894]##The RM is responsible for deciding the outcome
of a transaction branch on an XA _Resource.commit_ method. The RM can
discard knowledge of the transaction branch once it returns from the
_commit_ call.

[#50540572_pgfId-999895]##The RM is not required to maintain knowledge
of transaction branches to support failure recovery for the TM.

[#50540572_pgfId-999896]##If an _XAResource.prepare_ method is called on
an RM that supports only one-phase commit, then the RM should throw an
_XAException_ with _XAER_PROTO or XA_RB* flag_ .

[#50540572_pgfId-999897]##The RM should return an empty list of XIDs for
_XAResource.recover_ , because the RM is not required to maintain stable
knowledge about transaction branches.

======= [#50540572_pgfId-999899]##[#50540572_81941]##Two-phase Commit

[#50540572_pgfId-999900]##If the RM supports 2PC, then its
implementation of 2PC must be compliant with the 2PC protocol definition
with presumed rollback as specified in the OSI TP (Transaction Protocol
defined by ISO (ISO92)) specification.

[#50540572_pgfId-999901]##The RM must implement the _XAResource.prepare_
method and must be able to report whether it can guarantee its ability
to commit the transaction branch. If the RM reports that it can, the RM
must hold and record in a stable way all the resources necessary to
commit the branch. It must hold all these resources until the TM directs
it to commit or rollback the branch.

[#50540572_pgfId-999902]##An RM that reports a heuristic completion to
the TM must not discard its knowledge of the transaction branch. The RM
should discard its knowledge of the branch only when the TM calls
_XAResource.forget_ . The RM must notify the TM of all heuristic
decisions.

[#50540572_pgfId-999903]##On the TM’s _XAResource.commit_ and
_XAResource.rollback_ calls, the RM is allowed to report through an
_XAException_ that it has heuristically completed the transaction
branch. This feature is optional.

[#50540572_pgfId-999904]##A TM supporting the OSI TP specification uses
the one-phase commit optimization by default to manage an RM that is the
only resource involved in the transaction. The mechanism to identify to
the TM a particular RM that only supports 1PC is beyond the scope of
this specification.

======= [#50540572_pgfId-999905]##Transaction Association and Calling Protocol

[#50540572_pgfId-999906]##The RM _XAResource_ implementation must
support _XAResource.start_ and _XAResource.end_ for association and
disassociation of a transaction, as represented by, unique XID, with
recoverable units of work being done on the RM.

[#50540572_pgfId-999907]##The RM must ensure that the TM invokes
_XAResource_ calls in the legal sequence, and must return _XAER_PROTO_
or another suitable error if the caller TM violates the state tables, as
defined in Chapter 6 of the XA specification (see
link:conn.htm#50540564_28808[See Java Transaction API (JTA)
Specification, version 1.2]).

======= [#50540572_pgfId-999911]##Unilateral Roll-back

[#50540572_pgfId-999912]##The RM need not wait for global transaction
completion to report an error. The RM can return a rollback-only flag as
a result of any _XAResource.start_ or _XAResource.end_ call. This can
happen anytime except after a successful _prepare_ .

[#50540572_pgfId-999913]##The RM is allowed to unilaterally rollback and
forget a transaction branch any time before it prepares it.

======= [#50540572_pgfId-999914]##Read-Only Optimization

[#50540572_pgfId-999915]##Support for read-only optimization is optional
for RM implementation. An RM can respond to the TM’s request to prepare
a transaction by asserting that the RM was not asked to update shared
resources in this transaction branch. This response concludes the RM’s
involvement in the transaction, and the RM can release all resources and
discard its knowledge of the transaction.

======= [#50540572_pgfId-999916]##XID Support

[#50540572_pgfId-999917]##The RM must accept XIDs from TMs. The RM is
responsible for using the XID to maintain an association between a
transaction branch and recoverable units of work done by the application
programs.

[#50540572_pgfId-999918]##The RM must not alter in any way the bits
associated in the data portion of an XID. For example, if an RM remotely
communicates an XID, it must ensure that the data bits of the XID are
not altered by the communication process.

======= [#50540572_pgfId-999919]##Support for Failure Recovery

[#50540572_pgfId-999920]##A full JTA compliant _XAResource_
implementation that supports 2PC must maintain the status of all
transaction branches in which it is involved. After responding
affirmatively to the TM _prepare_ call, an RM should not erase its
knowledge of the branch or of the work done in support of the branch
until it successfully receives a TM’s invocation to commit or rollback
the branch.

[#50540572_pgfId-999921]##If an RM that supports 2PC heuristically
completes a branch, it should not forget a branch until the TM
explicitly tells it to by calling _XAResource.forget_ .

[#50540572_pgfId-999922]##On the TM’s _XAResource.recover_ call, an RM
that supports 2PC must return a list of all transaction branches that it
has prepared or has heuristically completed.

[#50540572_pgfId-999923]##When an RM recovers from its own failure, it
must recover prepared and heuristically completed branches. It should
discard its knowledge of all other branches.

======= [#50540572_pgfId-999925]##[#50540572_46360]##Transaction Manager Requirements

[#50540572_pgfId-999926]##The following section specifies requirements
of a TM. This section assumes that the TM is compliant with JTA/JTS and
X/Open (see link:conn.htm#50540564_30375[See X/Open CAE Specification --
Distributed Transaction Processing: the XA Specification, X/Open
document]) specifications.

======= [#50540572_pgfId-999930]##Interfaces

{empty}[#50540572_pgfId-999931]##The TM must use the _XAResource_
interface supported by an RM for transaction coordination and recovery.
The TM must be written to handle consistently any information or status
that an RM can legally return. The TM must assume that it can support
RMs that have different capabilities as allowed by the RM requirements
specification section, for instance RMs that make heuristic decisions
and RMs that use the read-only optimization. [Requirement derived from
Section 7.3, XA specification]

======= [#50540572_pgfId-999932]##XID Requirements

[#50540572_pgfId-999933]##The TM must generate XIDs conforming to the
structure defined in section 4.2 on page 19 of the XA specification (see
link:conn.htm#50540564_28808[See Java Transaction API (JTA)
Specification, version 1.2]). The generated XIDs must be globally unique
and must adequately describe a transaction branch.

======= [#50540572_pgfId-999937]##One-phase Commit Optimization

[#50540572_pgfId-999938]##The TM must support one-phase commit protocol
optimization. The TM uses the 1PC optimization when the TM knows there
is only one RM registered in a transaction that is making changes to
shared resources. In this optimization, the TM makes its phase 2 commit
request to that RM without having made a phase 1 prepare request.

[#50540572_pgfId-999939]##The TM is not required to record in a stable
manner such transactions, and in some failure cases, the TM may not
record the outcome of the transaction completion.

======= [#50540572_pgfId-1002757]##Implementation Options

[#50540572_pgfId-1002758]##The support of last-resource optimization is
an implementation-specific option for a TM. A detailed specification of
TM and RM requirements for this optimization is outside the scope of the
connector architecture.

======= [#50540572_pgfId-999942]##Scenario: Transactional Setup for a ManagedConnection

[#50540572_pgfId-999946]##The following object interactions are involved
in the scenario shown in link:conn.htm#50540572_47332[See OID:
Transactional Setup For Newly Created ManagedConnection Instances].

[#50540572_pgfId-999947]##The runtime scenario begins with a client
method invocation on an EJB instance. This invocation has a transaction
context, represented by a unique transaction _Xid_ , associated with it
if the invocation came from a client that was already participating in
the transaction. Alternatively, the EJB container starts a transaction
before dispatching the client request to the EJB method.

[#50540572_pgfId-999948]##The EJB instance calls the _getConnection_
method on the _ConnectionFactory_ instance. The resource adapter
delegates the connection request to the application server using the
connection management contract. link:conn.htm#50540552_38047[See OID:
Connection Pool Management with Connection Matching] explains this step.

[#50540572_pgfId-999952]##The application server gains control and
handles the connection allocation request.

[#50540572_pgfId-999953]##To handle the connection allocation request,
the application server gets a _Managed-Connection_ instance either from
the connection pool or creates a new _Managed-Connection_ instance.
link:conn.htm#50540552_38047[See OID: Connection Pool Management with
Connection Matching] describes this step.

[#50540572_pgfId-999957]##The application server registers itself as a
_ConnectionEventListener_ with the _ManagedConnection_ instance. This
enables the application server to receive notifications for various
events on this connection instance. The application server uses these
event notifications to manage connection pooling and transactions.

[#50540572_pgfId-999958]##Based on the current transaction context
associated with the connection-requesting thread and the EJB instance,
the application server decides whether or not the transaction manager
will participate in the coordination of the currently active
transaction.

[#50540572_pgfId-999959]##If the application server decides that the
transaction manager will manage the current transaction, it conducts the
following transactional setup on the _ManagedConnection_ instance:

[#50540572_pgfId-999960]##The application server invokes the
_ManagedConnection.getXAResource_ method to get the _XAResource_
instance associated with the _ManagedConnection_ instance.

[#50540572_pgfId-999961]##The application server enlists the
_XAResource_ instance with the transaction manager for the current
transaction context. The application server uses the _Transaction_ .
_enlistResource_ method (specified in the JTA specification) to enlist
the _XAResource_ instance with the transaction manager. This enlistment
informs the transaction manager about the resource manager instance
participating in the transaction.

[#50540572_pgfId-999962]##The transaction manager invokes
_XAResource.start_ to associate the current transaction with the
underlying resource manager instance. This enables the transaction
manager to inform the participating resource manager that all units of
work performed by the application on the underlying _ManagedConnection_
instance should now be associated with this transaction.

[#50540572_pgfId-999963]##The application server calls the
_ManagedConnection.getConnection_ method to get a new application-level
connection handle. The underlying physical connection is represented by
a _ManagedConnection_ instance.

[#50540572_pgfId-999964]##The application server returns the connection
handle to the resource adapter. The resource adapter then passes the
connection handle to the application component that had initiated the
connection request.

[#50540572_pgfId-1003952]## 

[#50540572_pgfId-1003953]##[#50540572_47332]##OID: Transactional Setup
For Newly Created ManagedConnection Instances

image:conn-55.gif[image]

======= [#50540572_pgfId-1000026]##Scenario: Connection Close and JTA Transactional Cleanup

[#50540572_pgfId-1000027]##For each _ManagedConnection_ instance in the
pool, the application server registers a _ConnectionEventListener_
instance to receive specific events on the connection. The connection
event callback mechanism enables the application server to manage
connection pooling and transactions.

[#50540572_pgfId-1000031]##link:conn.htm#50540552_35282[See Object
Diagram: Connection Management Architecture] describes the following
steps when an application component closes a connection:

[#50540572_pgfId-1000032]##The application component releases a
_Connection_ instance by calling the _close_ method. The _Connection_
instance delegates the connection close request to its associated
_ManagedConnection_ instance. A _ManagedConnection_ must not alter any
state on the physical connection while handling a delegated connection
close request.

[#50540572_pgfId-1000033]##The _ManagedConnection_ instance notifies all
its registered listeners of the application’s connection close request
using the _ConnectionEventListener_ . _connectionClosed_ method. It
passes a _ConnectionEvent_ instance with the event type set to
CONNECTION_CLOSED.

[#50540572_pgfId-1000034]##On receiving the connection close
notification, the application server performs transactional cleanup for
the _ManagedConnection_ instance. If the _ManagedConnection_ instance
was participating in a transaction manager-enlisted JTA transaction, the
application server takes the following steps:

[#50540572_pgfId-1000035]##The application server dissociates the
_XAResource_ instance, corresponding to the _ManagedConnection_
instance, from the transaction manager using the method
_Transaction.delistResource_ .

[#50540572_pgfId-1000036]##The transaction manager calls
_XAResource.end(Xid,flag)_ to inform the resource manager that any
further operations on the _ManagedConnection_ instance are no longer
associated with the transaction, represented by the _Xid_ passed in
_XAResource.end_ call. This method invocation dissociates the
transaction from the resource manager instance.

[#50540572_pgfId-1000037]##After the JTA transaction completes, the
application server initiates a cleanup of the physical connection
instance by calling _ManagedConnection.cleanup_ method. After calling
the method _cleanup_ on the _ManagedConnection_ instance, the
application server returns the _ManagedConnection_ instance to the
connection pool.

[#50540572_pgfId-1000038]##The application server can now use the
_ManagedConnection_ instance to handle future connection allocation
requests from either the same or another component instance.

[#50540572_pgfId-1004080]## 

[#50540572_pgfId-1000100]##[#50540572_90559]##OID: Connection Close and
Transactional Cleanup

image:conn-56.gif[image]

======= [#50540572_pgfId-1000101]##OID: Transaction Completion

[#50540572_pgfId-1000105]##The scenario in the following figure
illustrates the steps taken by the transaction manager to commit a
transaction across multiple resource manager instances. These steps are
executed after the transaction manager calls the _XAResource.end_ method
for each enlisted resource manager instance.

[#50540572_pgfId-1000106]##The following steps happen in this scenario:

[#50540572_pgfId-1000107]##The transaction manager calls
_XAResource.prepare_ to begin the first phase of the transaction
completion protocol. The transaction manager can call any _XAResource_
instance is associated with the proper underlying resource manager
instance, and is not restricted to the _XAResource_ instance initially
involved with the transaction. The application server can assume that
all _XAResource_ instances produced by a _ManagedConnectionFactory_
instance refer to the same underlying resource manager instance.

[#50540572_pgfId-1000108]##Assuming that all resource manager instances
involved in the transaction agree to commit, the transaction manager
calls _XAResource.commit_ to commit the transaction. Otherwise, the
transaction manager calls _XAResource.rollback_ .

[#50540572_pgfId-1002761]## 

[#50540572_pgfId-1000147]##[#50540572_30637]##OID: Transaction
Completion

image:conn-57.gif[image]

======= [#50540572_pgfId-1000149]##

image:conn-48.gif[image]

[#50540572_84546]##Local Transaction Management Contract

[#50540572_pgfId-1000150]##The main motivation for defining a local
transaction contract between an application server and a resource
manager is to enable an application server to manage resource manager
local transactions, hereafter called local transactions.

[#50540572_pgfId-1000151]##The local transaction management contract has
two parts:

[#50540572_pgfId-1000152]##The application server uses the
_javax.resource.spi.LocalTransaction_ interface to manage local
transactions transparently to an application component. The scenarios in
link:conn.htm#50540572_32042[See Transaction Scenarios] illustrate this
part of the local transaction management contract.

[#50540572_pgfId-1000159]##The other part of the contract relates to
notifications for local transaction-related events. If the resource
adapter supports a local transaction demarcation API, for example,
_javax.resource.cci.LocalTransaction_ for the Common Client Interface,
the resource adapter is required to notify the application server of the
events (transaction begin, commit, and rollback) related to the local
transaction. An application server uses this part of the contract, as
explained in link:conn.htm#50540572_23571[See Scenarios: Local
Transaction Management].

======= [#50540572_pgfId-1000164]##[#50540572_21113]##Interface: LocalTransaction

[#50540572_pgfId-1000165]##The _javax.resource.spi.LocalTransaction_
interface defines the contract between an application server and
resource adapter for local transaction management. This interface is
defined in link:conn.htm#50540572_16078[See Interface:
LocalTransaction].

======= [#50540572_pgfId-1000169]##Interface: ConnectionEventListener

[#50540572_pgfId-1000170]##An application server implements the
_javax.resource.spi.ConnectionEventListener_ interface. It registers
this listener instance with the _ManagedConnection_ instance by using
_ManagedConnection.addConnectionEventListener_ method.

[#50540572_pgfId-1000171]##The following code extract specifies the
_ConnectionEventListener_ interface related to the local transaction
management contract:

[width="100%",cols="100%",]
|===
a|
[#50540572_pgfId-1001515]##public interface
javax.resource.spi.ConnectionEventListener \{

[#50540572_pgfId-1001516]## // Local Transaction Management related
events

[#50540572_pgfId-1001517]## public void
localTransactionStarted(ConnectionEvent event);

[#50540572_pgfId-1001518]## public void
localTransactionCommitted(ConnectionEvent event);

[#50540572_pgfId-1001519]## public void
localTransactionRolledback(ConnectionEvent event);

[#50540572_pgfId-1001520]## 

[#50540572_pgfId-1001521]## ...

[#50540572_pgfId-1001513]##}

|===

[#50540572_pgfId-1000180]##The _ManagedConnection_ instance notifies its
registered listeners for transaction related events by calling the
methods localTransactionStarted, localTransactionCommitted, and
localTransactionRolledback.

[#50540572_pgfId-1000181]##The _ConnectionEvent_ class defines the
following types of event notifications related to the local transaction
management contract:

[#50540572_pgfId-1000182]## _LOCAL_TRANSACTION_STARTED_ - a local
transaction was started using the _ManagedConnection_ instance

[#50540572_pgfId-1000183]## _LOCAL_TRANSACTION_COMMITTED_ - a local
transaction was committed using the _ManagedConnection_ instance

[#50540572_pgfId-1000184]## _LOCAL_TRANSACTION_ROLLEDBACK_ - a local
transaction was rolled back using the _ManagedConnection_ instance

======= [#50540572_pgfId-1000185]##Requirements

[#50540572_pgfId-1000186]##The connector specification requires an
application server to implement the _ConnectionEventListener_ interface
and handle local transaction related events. This enables the
application server to achieve local transaction cleanup and transaction
serial interleaving, as illustrated in link:conn.htm#50540572_23571[See
Scenarios: Local Transaction Management]. The connector specification
provides the necessary mechanisms for transaction management. Whether
these mechanisms are used in an application server depends on the
application server’s implementation of the transaction requirements of
the Java EE component specifications.

[#50540572_pgfId-1000190]##The resource adapter must send local
transaction events through the _ConnectionEventListener_ interface when
an application component starts a local transaction using the
application level transaction demarcation interface. An exception to
this requirement is when the transaction demarcation API supports the
concept of an implicit begin of a local transaction. The JDBC API is an
example where there is no explicit local transaction begin method.

[#50540572_pgfId-1000191]##However, resource adapters that allow
implicit begin of a local transaction, for instance, JDBC drivers, are
strongly encouraged to provide support for local transaction events.
This may be required in a future release of the specification.

[#50540572_pgfId-1000192]##The resource adapter must not send local
transaction events for local transactions managed by the container.

======= [#50540572_pgfId-1000194]##

image:conn-48.gif[image]

[#50540572_23571]##Scenarios: Local Transaction Management

[#50540572_pgfId-1000195]##This section illustrates how an application
server uses the event notifications from the resource adapter to manage
local transactions and to restrict illegal transaction demarcations by
an application component.

[#50540572_pgfId-1000196]##In these scenarios, an application component
starts a local transaction using an application-level transaction
demarcation interface, for example,
_javax.resource.cci.LocalTransaction_ as defined in the CCI, supported
by the resource adapter. The resource adapter, in its implementation of
the transaction demarcation interface, sends event notifications related
to the local transaction, namely, local transaction begin, commit, and
rollback. The application server is notified of these local
transaction-related events through the _ConnectionEventListener_
mechanism.

======= [#50540572_pgfId-1000197]##Local Transaction Cleanup

[#50540572_pgfId-1000198]##A stateless session bean with bean-managed
transaction demarcation starts a local transaction in a method
invocation. It returns from the business method without completing the
local transaction.

[#50540572_pgfId-1000199]##The application server implements the
_ConnectionEventListener_ interface. The resource adapter notifies the
application server with a _LOCAL_TRANSACTION_STARTED_ event when the
local transaction is started by the session bean instance.

[#50540572_pgfId-1000200]##When the session bean instance returns from
the method invocation without completing the local transaction, the
application server detects this as an incomplete local transaction
because it has not received any matching _LOCAL_TRANSACTION_COMMITTED_
or _LOCAL_TRANSACTION_ROLLEDBACK_ events from the resource adapter.

[#50540572_pgfId-1000201]##On detecting an incomplete local transaction,
the application server aborts the transaction, terminates the stateless
session bean instance, and throws an exception to the client.

======= [#50540572_pgfId-1000202]##Component Termination

[#50540572_pgfId-1000203]##The application server terminates a component
instance, for example, because of some system exception in a method
invocation.

[#50540572_pgfId-1000204]##On termination of a component instance, the
application server cleans up all _ManagedConnection_ instances being
used by this component instance. The cleanup of a connection involves
resetting all local transaction and client-specific state. This state is
maintained internal to the _ManagedConnection_ instance.

[#50540572_pgfId-1000205]##The application server initiates a cleanup of
a _ManagedConnection_ instance by calling _ManagedConnection.cleanup_ .
After cleanup, the application server returns this connection to the
pool to serve future allocation requests.

======= [#50540572_pgfId-1000206]##Transaction Interleaving

[#50540572_pgfId-1000207]##The application server uses the connection
event listener mechanism, specified through the interfaces
_ConnectionEventListener_ and _ConnectionEvent_ , to flag illegal cases
of transaction demarcation. The application server implements the
_ConnectionEventListener_ interface to support this scenario.

[#50540572_pgfId-1000208]##The following subsection illustrates a
scenario for component-managed transaction demarcation.

======= [#50540572_pgfId-1000209]##Scenario

[#50540572_pgfId-1000210]##An EJB component with bean managed
transaction demarcation starts a local transaction using the
application-level transaction demarcation interface, for example,
_javax.resource.cci.LocalTransaction_ as defined in the CCI, supported
by the resource adapter. It then calls the _UserTransaction.begin_
method to start a JTA transaction before it has completed the local
transaction.

[#50540572_pgfId-1000211]##In this scenario, the EJB component has
started but not completed the local transaction. When the application
component attempts to start a JTA transaction by invoking the
_UserTransaction.begin_ method, the application server detects it as a
transaction demarcation error and throws an exception from the
_UserTransaction.begin_ method.

[#50540572_pgfId-1000212]##When the application component starts the
local transaction, the resource adapter notifies the application server
of the LOCAL_TRANSACTION_STARTED connection event. When the component
invokes the _UserTransaction.begin_ method, the application server
detects an error condition, because it has not received the matching
LOCAL_TRANSACTION_COMMITTED or LOCAL_TRANSACTION_ROLLEDBACK event from
the resource adapter for the currently active local transaction.

======= [#50540572_pgfId-1000214]##

image:conn-48.gif[image]

[#50540572_72673]##Connection Sharing

[#50540572_pgfId-1000215]##Sharing connections typically results in
efficient use of resources and better performance. An application can
indicate the ability to share its various resource references, or
connections, in its deployment descriptor. A connection can be marked
either as _shareable_ or _unshareable._ The default is _shareable._

[#50540572_pgfId-1000216]##When multiple shareable connections x and y
acquired by an application are used within a global transaction scope
(for instance, container-managed or bean-managed), the application
server must provide a single shared connection behavior under the
following conditions:

[#50540572_pgfId-1000217]##x and y are collocated in a single Java
Virtual Machine process address space

[#50540572_pgfId-1000218]##x and y are using a single transactional
resource manager

[#50540572_pgfId-1000219]##x and y have identical properties

[#50540572_pgfId-1000220]##x and y are marked as _shareable_

[#50540572_pgfId-1000221]##x and y are used within a container-managed
or bean-managed transaction scope

[#50540572_pgfId-1000222]##The ability to share is unspecified for
connections marked _shareable_ that are used outside a global
transaction scope. Sharing is not supported for connections obtained
from a non-transactional __ resource adapter, that is, transaction
support level is _NoTransaction_ .

[#50540572_pgfId-1000223]##The intent of the connection sharing
requirement is to avoid resource manager lock contentions and read
isolation problems, and thus ensure portable behavior for transactional
applications. The application server may implement the connection
sharing semantics either using a single shared connection or through
other mechanismslink:#pgfId-1000226[4].

[#50540572_pgfId-1000227]##If a connection is marked as _shareable_ , it
must be transparent to the application whether a single shared
connection is used or not. The application must not make assumptions
about a single shared connection being used, and hence must use the
connection in a shareable manner.

[#50540572_pgfId-1000231]##However, a Java EE application component that
intends to use a connection in an unshareable way must leave a
deployment hint to that effect, which will prevent the connection from
being shared by the container. Examples of unshareable usage of a
connection include changing the security attributes, isolation levels,
character settings, and localization configuration.

[#50540572_pgfId-1000232]##Containers must not attempt to share
connections that are marked _unshareable_ .

[#50540572_pgfId-1000236]##Java EE application components may use the
optional deployment descriptor element _res-sharing-scope_ or the
_shareable_ annotation element of _Resource_ annotation defined in the
Common Annotations specification (see link:conn.htm#50540564_50227[See
Common annotations for the Java Platform Specification, version 1.2]),
to indicate whether a connection to a resource manager is shareable or
unshareable. Containers must assume connections to be shareable if no
deployment hint is provided. Refer to EJB specification (see
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2]) and the servlet specification (see
link:conn.htm#50540564_40935[See Java Servlet Specification, version
3.1]) for a description of the deployment descriptor element.

[#50540572_pgfId-1000246]##Java EE application components may cache
connection objects and reuse them across multiple transactions.
Containers that provide connection sharing should transparently switch
such cached connection objects, at dispatch time, to point to an
appropriate shared connection with the correct transaction scope. Refer
to link:conn.htm#50540572_60271[See Connection Association] for more
details on connection association.

[#50540572_pgfId-1000253]##Refer to link:conn.htm#50540572_32042[See
Transaction Scenarios] for a special case of connection sharing as
applied to resource adapters that support local transactions.

======= [#50540572_pgfId-1000254]##Sharing Violation Detection

[#50540572_pgfId-1000255]##A resource adapter may detect sharing
violations. Any operation on a shareable connection which violates
shareability is a sharing violation, for example, mutable operations
like changing connection attributes, security settings, isolation
levels, etc.

[#50540572_pgfId-1000256]##When such a mutable operation is performed on
a _ManagedConnection_ , it may throw a SharingViolationException when
both the following conditions are true:

[#50540572_pgfId-1000257]##The number of connection handle objects
associated with the _ManagedConnection_ is more than one.

[#50540572_pgfId-1000258]##The _ManagedConnection_ is associated with a
transaction, either local or XA.

[#50540572_pgfId-1000259]##Further, a resource adapter may reject
creation of a connection handle, by throwing a
SharingViolationException, if the connection is already in a unshareable
condition. Any mutable operation performed on a connection makes it
unshareable.

======= [#50540572_pgfId-1000260]##Scenario 1

[#50540572_pgfId-1000261]##Application component A gets a shareable
connection to a resource and invokes component B which also gets a
shareable connection to the same resource. Both A and B are involved in
a common transaction scope, either local or XA. The application server
shares the connections acquired by both A and B. From this point
onwards, any attempt to change a mutable property, such as isolation
level, by either component, results in a SharingViolationException being
thrown by the resource adapter to the offending component.

======= [#50540572_pgfId-1000262]##Scenario 2

[#50540572_pgfId-1000263]##Application component A gets a shareable
connection to a resource. A is involved in a transaction, either local
or XA. A then modifies one of the mutable properties of the resource,
such as isolation level. This makes the connection unshareable. The
resource adapter does not throw an exception since only one connection
handle is present.

[#50540572_pgfId-1000264]##Later, A invokes B under the same transaction
scope. B also attempts to acquire a shareable connection to the same
resource. The application server chooses to share the connection that is
already in use by A. At this point, the resource adapter throws a
SharingViolationException to B since sharing had been attempted on an
unshareable connection. The resource adapter does this by saving that
the connection had been made unshareable earlier.

[#50540572_pgfId-1000265]##The resource adapter might throw a
SharingViolationException to B, even if A had closed its connection
handle before it invoked B, since the connection acquired by A had
become unshareable.

======= [#50540572_pgfId-1000267]##

image:conn-48.gif[image]

[#50540572_32042]##Transaction Scenarios

[#50540572_pgfId-1000268]##This section specifies requirements for
various transaction scenarios.

======= [#50540572_pgfId-1000269]##Requirements

[#50540572_pgfId-1000273]##The Java EE platform specification (see
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7]) identifies the following as transactional
resources:

[#50540572_pgfId-1000274]##JDBC connections

[#50540572_pgfId-1000275]##JMS sessions

[#50540572_pgfId-1000276]##Resource adapter connections at the
_XATransaction_ level

[#50540572_pgfId-1000277]##The Java EE platform specification requires
that Java EE product providers must transparently support transactions
that span multiple components and transactional resources. These
requirements must be met regardless of whether a Java EE product is
implemented as a single process, multiple processes on the same node, or
multiple processes on multiple nodes.

[#50540572_pgfId-1000278]##In addition, Java EE product providers must
support transactional applications that are comprised of servlets or JSP
pages accessing multiple enterprise beans within a single transaction.
Each component may also acquire one or more connections to access
transactional resources. Java EE product providers must support
scenarios where multiple components in an application access
transactional resources as part of a single transaction.

[#50540572_pgfId-1000279]##The Java EE platform specification requires
Java EE platform products to support resource adapters at the
_XATransaction_ level as a transactional resource. It must be possible
to access such resource adapters from multiple application components
within a single transaction.

[#50540572_pgfId-1000280]##The connector architecture has an additional
requirement that is applicable to resource adapters that support local
transactions. Note that both _LocalTransaction_ and _XATransaction_
resource adapters support local transactions. and they are both referred
to as “local transaction capable” resource adapters in the section
below.

[#50540572_pgfId-1000281]##Application server must use a single local
transaction in a scenario where the following conditions hold:

[#50540572_pgfId-1000282]##Multiple components are involved in a global
transaction scope.

[#50540572_pgfId-1000283]##All components use a single resource adapter
that is local transaction capable. There is no other XAResource or local
transaction capable resource adapter involved in the global transaction
scope.

[#50540572_pgfId-1000284]##All components get connections to the same
EIS instance.

[#50540572_pgfId-1000285]##Components have not specified the
_res-sharing-scope_ flag as _unshareable_ . This condition accounts for
potential sharing of connections in terms of security context,
client-specific connection parameters, and EIS specific configuration.

[#50540572_pgfId-1000286]##Note that this requirement does not apply to
a local transaction that is started by a component using an application
level transaction demarcation API that is specific to a resource
adapter.

[#50540572_pgfId-1002421]##Application server determines this scenario
in an implementation-specific manner.

[#50540572_pgfId-1000287]##Application server may use connection sharing
mechanisms to implement this local transaction requirement. Please refer
to link:conn.htm#50540572_53203[See Scenario: Local Transaction] for an
illustration.

[#50540572_pgfId-1000288]##Application servers must support transaction
scenarios where access to a non-transactional resource is combined with
access to one or more transactional resources within a single
transaction. For example, in a container-managed transaction, an EJB
accesses JDBC and JMS resources and also accesses a non-transactional
EIS using its resource adapter. If there is a failure during the above
scenario, transactional resource managers operating under the
transaction should rollback, but the recovery of the non-transactional
resource is unspecified in this specification.

[#50540572_pgfId-1000289]##The application server is not required to
support any additional transaction scenarios beyond the above set of
scenarios. A Java EE application should not depend on an application
server’s support for any optional transaction scenarios. The application
should also not depend on whether or not the container detects that a
specific optional transaction scenario is illegal. Any errors in
optional transaction scenarios are considered application programming
errors.

======= [#50540572_pgfId-1000290]##Illustrative Scenarios

[#50540572_pgfId-1000291]##The following are examples of optional
transaction scenarios. The following section also describes, in a
non-prescriptive manner, issues in support for these scenarios by an
application server:

[#50540572_pgfId-1000292]##Within a transaction, an EJB component
acquires connections to two different resource managers X and Y using
their respective non-XA local transaction capable resource adapters.

[#50540572_pgfId-1000293]##The container cannot manage a local
transaction across two different resource managers. Since resource
adapters and underlying resource managers are not XA capable, the
container cannot use XA in this case. However, a Java EE application
should not depend on the container to detect this illegal scenario.

[#50540572_pgfId-1000294]##Within a transaction, EJB component A
acquires a connection to a resource manager X using a non-XA local
transaction capable resource adapter. Next, EJB component B under the
same transaction context acquires a connection to a different resource
manager Y using a non-XA local transaction capable resource adapter

[#50540572_pgfId-1000295]##The container cannot manage a local
transaction across two different resource managers. Since resource
adapters are not XA capable, the container cannot use XA in this case.
However, a Java EE application should not depend on the container to
detect this illegal scenario.

[#50540572_pgfId-1000296]##Within a transaction, EJB component A
acquires a connection to a resource manager X using a non-XA local
transaction capable resource adapter. Next, the same EJB (or EJB B)
under the same transaction context acquires a connection to a different
resource manager Y using an XA capable resource adapter

[#50540572_pgfId-1000297]##This scenario may be supported if the
transaction manager supports last resource commit optimization. Since
this optimization feature is optional and not specified in the connector
architecture, a Java EE application should not depend on support for
this scenario.

[#50540572_pgfId-1000298]##Within a transaction, EJB A acquires a
connection to a resource manager X using an XA capable resource adapter.
Next, the same EJB component (or another EJB component B) under the same
transaction context acquires a connection to a different resource
manager Y using a non-XA local transaction capable resource adapter

[#50540572_pgfId-1000299]##This scenario may be supported if the
transaction manager supports last resource commit optimization. Since
this optimization feature is optional and not specified in the connector
architecture, a Java EE application should not depend on support for
this scenario.

======= [#50540572_pgfId-1000301]##[#50540572_53203]##Scenario: Local Transaction

[#50540572_pgfId-1000302]##This scenario illustrates the use of the
connection sharing mechanism to implement requirement for a local
transaction to span components.

[#50540572_pgfId-1000303]##In this scenario, two EJB components get
connections to the same EIS resource manager within a single
transaction. Both EJB components use the same local transaction capable
resource adapter.

[#50540572_pgfId-1000304]##A local transaction is associated with a
single physical connection. Both EJB components in this scenario share
the same physical connection under the local transaction scope. The
container has the responsibility of managing connection sharing as
illustrated in this scenario.

[#50540572_pgfId-1000305]##To share a physical connection in the local
transaction scope, the container assumes the connection to be shareable
unless it has been marked _unshareable_ in the _res-sharing-scope_ . The
container uses connection sharing in a manner that is transparent to
application components.

[#50540572_pgfId-1000309]##In the following figure, the stateful session
beans A and B have container-managed transaction demarcation with the
transaction attribute set to _Required_ . Both A and B access a single
EIS resource manager as part of their business logic.

[#50540572_pgfId-1000334]##Scenario to illustrate Local Transaction
Management[#50540572_72444]##

image:conn-58.gif[image]

[#50540572_pgfId-1000335]##The following steps happen in this scenario:

[#50540572_pgfId-1000336]##The client invokes a method on session bean A
with no transaction context. In its method implementation, the EJB A
acquires a connection to the EIS instance.

[#50540572_pgfId-1000337]##When acquiring the connection, the container
starts a local transaction by invoking the _begin_ method of the
_javax.resource.spi.LocalTransaction_ instance. The local transaction is
tied to the _ManagedConnection_ instance that is associated with the
connection handle acquired by the component in the previous step.

[#50540572_pgfId-1000338]##After the local transaction starts, any
recoverable unit of work performed by A on the EIS resource manager
using the acquired connection is automatically included under the local
transaction context.

[#50540572_pgfId-1000339]##Session bean A now invokes a method on the
session bean B instance. In this scenario, A does not close the
connection handle before invoking the method on B.

[#50540572_pgfId-1000340]##

image:conn-59.gif[image]

A container should ensure that the connection sharing mechanism is
equally applicable if A were to close the connection handle before
calling the B instance.

image:conn-59.gif[image]

[#50540572_pgfId-1000341]##In the invoked method, B makes a request to
acquire a connection to the same EIS resource manager.

[#50540572_pgfId-1000342]##The container returns a connection handle
using the same _ManagedConnection_ instance that was used for handling
the connection request from A.

[#50540572_pgfId-1000343]##The container retains the association of the
_ManagedConnection_ instance with the local transaction context across
the method invocation from A to B. This means that any unit of work that
B will perform on the EIS resource manager using its acquired connection
handle will be automatically included as part of the current local
transaction. The connection state, for example, any open cursors, can
also be retained across method invocations when the physical connection
is shared.

[#50540572_pgfId-1000414]##Before the method invocation on B completes,
B calls the close method on the connection handle. The container should
not initiate any cleanup of the physical connection at this time since
there is still an uncompleted local transaction associated with the
shared physical connection. In this scenario, the cleanup of a physical
connection refers to the dissociation of the local transaction context
from the _ManagedConnection_ instance. In the absence of support for
Lazy Connection Association (see link:conn.htm#50540572_21093[See Lazy
Connection Association Optimization] ) from the resource adapter and the
application server, the component B should not cache the connection
handle. See link:conn.htm#50540552_32247[See Guidelines] for a suggested
scheme of obtaining and closing connection handles. A component caching
a connection handle in this scenario is not portably supported.

[#50540572_pgfId-1000415]##When A regains control, A can use the same
connection handle, provided A had not called the close method on the
connection handle, to access EIS resources. All recoverable units of
work on the EIS resource manager will be included in the existing local
transaction context.

[#50540572_pgfId-1000416]##

image:conn-59.gif[image]

If A closes the connection handle before calling B, and then reacquires
the connection handle when regaining control, the container should
ensure that the local transaction context stays associated with the
shared connection.

image:conn-59.gif[image]

[#50540572_pgfId-1000417]##A eventually calls the close method on its
connection handle. The container gets a connection close event
notification based on the scenario described in
link:conn.htm#50540552_60711[See Scenario: Connection Event
Notifications and Connection Close].

[#50540572_pgfId-1000421]##Since there is an incomplete local
transaction associated with the underlying physical connection, the
container does not initiate a cleanup of the _ManagedConnection_ on
receiving the connection close event notification. The container must
still go through the completion process for the local transaction.

[#50540572_pgfId-1000422]##When the business method invocation on A
completes successfully without any application error, the container
starts the completion protocol for the local transaction. The container
calls the _LocalTransaction.commit_ method to commit the transaction.

[#50540572_pgfId-1000423]##After the local transaction completes, the
container initiates a cleanup of the physical connection instance by
calling the _ManagedConnection.cleanup_ method.

[#50540572_pgfId-1000425]##

image:conn-59.gif[image]

[#50540572_80458]##The container should initiate cleanup of the
_ManagedConnection_ instance in the case where A does not call the close
method on the connection handle before returning. The container
identifies the need for cleaning up the _ManagedConnection_ instance
based on the scope of connection sharing.

image:conn-59.gif[image]

[#50540572_pgfId-1000426]##On the _cleanup_ method invocation, the
_ManagedConnection_ instance does a cleanup of its local transaction
related state and resets itself to a default state.

[#50540572_pgfId-1000427]##The container returns the physical connection
to the pool for handling subsequent connection requests.

[#50540572_pgfId-1003668]##Connection Sharing Across Component Instances

image:conn-60.gif[image]

======= [#50540572_pgfId-1000429]##

image:conn-48.gif[image]

[#50540572_60271]##Connection Association

[#50540572_pgfId-1000430]##According to the connection management
contract, a connection handle is created from a _ManagedConnection_
instance using the _ManagedConnection_ . _getConnection_ method. A
connection handle maintains an association with the underlying
_ManagedConnection_ instance.

======= [#50540572_pgfId-1000431]##Scenario

[#50540572_pgfId-1000435]##In the scenario shown in the following
figure, session bean A acts as a client of entity bean C and makes
invocations on methods of entity bean C. Another session bean B also
acts as a client of entity bean C. The C is an entity bean that may be
shared across multiple clients.

[#50540572_pgfId-1000436]##A, B and C get connections to the same EIS.
These EJB components have marked _res-sharing-scope_ for these
connections to be _shareable_ .

[#50540572_pgfId-1000437]##A and C define a connection sharing scope.
Both A and C share the same physical connection across a transaction
that spans methods on A and C. Similarly, B and C define another
connection sharing scope. B and C also share the same physical
connection across a transaction that spans two components.

[#50540572_pgfId-1000460]##[#50540572_83843]##Connection Sharing
Scenario

image:conn-61.gif[image]

[#50540572_pgfId-1000461]##In this scenario, entity bean C obtains an
application-level connection handle using the method _getConnection_ on
the _ConnectionFactory_ during its creation. Entity bean C holds the
connection handle during its lifetime.

[#50540572_pgfId-1000462]##A gets a connection handle and invokes a
method on C. At a different time, B gets a connection handle and invokes
a method on C.

[#50540572_pgfId-1000463]##In both cases, depending on the connection
sharing scope, defined in terms of the shared physical
_ManagedConnection_ instance, in which C is called, the container
supports a mechanism to associate the connection handle held by C as
part of its state with the current _ManagedConnection_ instance.

[#50540572_pgfId-1000483]##State Diagram of Application-Level Connection
Handle

image:conn-62.gif[image]

======= [#50540572_pgfId-1000484]##[#50540572_86331]##Connection Association

[#50540572_pgfId-1000485]##The interface _ManagedConnection_ defines
method _associateConnection_ as follows:

[width="100%",cols="100%",]
|===
a|
[#50540572_pgfId-1001773]##public interface
javax.resource.spi.ManagedConnection \{

[#50540572_pgfId-1001774]## public void associateConnection(Object
connection)

[#50540572_pgfId-1001775]## throws ResourceException;

[#50540572_pgfId-1001776]## ...

[#50540572_pgfId-1001771]##}

|===

[#50540572_pgfId-1000491]##The container typically uses the
_associateConnection_ method to change the association of an
application-level connection handle with a _ManagedConnection_ instance.
The container finds the right _ManagedConnection_ instance, depending on
the connection sharing scope, and calls the _associateConnection_
method. To achieve this, the container is required to keep track of
connection handles acquired by component instances and
_ManagedConnection_ instances using an implementation-specific
mechanism. In order to set a Connection Handle as the active connection
handle (see link:conn.htm#50540552_28832[See Connection Sharing and
Multiple Connection Handles] ), the container may also use the
_associateConnection_ method to set the same _ManagedConnection_
associated with the Connection handle.

[#50540572_pgfId-1000492]##The _associateConnection_ method
implementation for a _ManagedConnection_ should dissociate the
connection handle passed as a parameter from its currently associated
_ManagedConnection_ and associate the new connection handle with itself.

[#50540572_pgfId-1000493]##Note that the switching of connection
associations must happen only for connection handles and
_ManagedConnection_ instances that correspond to the same
_ManagedConnectionFactory_ instance. The container should enforce this
restriction in an implementation-specific manner. If a container cannot
enforce the restriction, the container should not use the connection
association mechanism.

======= [#50540572_pgfId-1000494]##Requirements

[#50540572_pgfId-1000495]##The container must provide a mechanism to
change the association of a connection handle to different
_ManagedConnection_ instances depending on the connection sharing and
transaction scope. This mechanism is used in scenarios where components
hold on to connection handles across different local transaction and
connection sharing scopes.

[#50540572_pgfId-1000496]##The container may use the connection
association mechanism in the _XAResource_ -based transaction management
contract.

[#50540572_pgfId-1000497]##The resource adapter must implement the
_associateConnection_ method to support connection sharing. The
container makes a decision on whether or not to use the
_associateConnection_ method implemented by a resource adapter. The
support for this method is required independent of the transaction
support level of the resource adapter. Note that the container makes the
decision to invoke the _associateConnection_ method.

======= [#50540572_pgfId-1000498]##

image:conn-48.gif[image]

Local Transaction Optimization

[#50540572_pgfId-1000499]##If all the work done as a part of a
transaction uses a single resource manager, the application server can
use a local transaction in place of an externally coordinated JTA
transaction. The use of a local transaction avoids the overhead of
initiating a global transaction, and involving the TM for transaction
coordination, and leads to more optimized performance.

[#50540572_pgfId-1000500]##Since a typical application accesses a single
resource manager, the local transaction optimization is a useful
performance enhancement for transaction management.

[#50540572_pgfId-1000501]##The application server manages local
transaction optimization transparent to the Java EE application.
Whenever a container-managed or bean-managed transaction is started, the
container may attempt local transaction optimization.

[#50540572_pgfId-1000502]##When the transaction begins, a container
cannot determine beforehand whether or not the unit of work done as part
of this transaction will use a single resource manager. The container
uses an implementation-specific mechanism to achieve local transaction
optimization. For example, the container can choose to start a local
transaction when the first resource manager is accessed and lazily start
a JTA transaction only when more than one resource managers are accessed
in an existing transaction. The mechanism through which the application
server and its transaction manager coordinates the initial local
transaction and lazily started JTA transactions is outside the scope of
the connector specification. Refer to the Java EE platform specification
(see link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition
(Java EE) Specification, version 7]) for more details on the local
transaction optimization.

======= [#50540572_pgfId-1002209]##Requirements

[#50540572_pgfId-1002446]##The container is not required to support the
local transaction optimization.

======= [#50540572_pgfId-1002448]##

image:conn-48.gif[image]

[#50540572_34564]##Runtime Transaction Support Level Specification

[#50540572_pgfId-1002224]##A resource adapter may determine and classify
the level of transaction support it can provide at runtime. The resource
adapter can use the configuration details, provided by a deployer, to
determine the transactional capabilities and the requirements of the
underlying EIS and then specify the level of transaction support at
runtime.

[#50540572_pgfId-1002358]## 

[#50540572_pgfId-1002347]## package javax.resource.spi;

[#50540572_pgfId-1002353]## 

[#50540572_pgfId-1002350]## public interface TransactionSupport extends
java.io.Serializable \{

[#50540572_pgfId-1002346]## public enum TransactionSupportLevel

[#50540572_pgfId-1002326]## \{NoTransaction, LocalTransaction,
XATransaction}

[#50540572_pgfId-1002351]## 

[#50540572_pgfId-1002331]## public TransactionSupportLevel
getTransactionSupport();

[#50540572_pgfId-1002336]## }

[#50540572_pgfId-1002228]## 

[#50540572_pgfId-1002359]##To specify the level of transaction support
at runtime, a _ManagedConnectionFactory_ must implement the
_TransactionSupport_ interface. It is optional for the
_ManagedConnectionFactory_ to implement this interface.

[#50540572_pgfId-1003463]##When a _ManagedConnectionFactory_ does not
implement this interface, the container must use the resource adapter’s
level of transaction support classification. The container must use the
transaction support specified in the merged result of the resource
adapter’s deployment descriptor and Connector annotations. Refer to
link:conn.htm#50540561_39795[See Resource Adapter Provider] for more
information on the resource adapter deployment descriptor and
link:conn.htm#50540619_30627[See @Connector] for more information on the
Connector annotation. If the resource adapter deployer has overridden
the transaction support value, the overriden value must be used. Refer
to link:conn.htm#50540558_33600[See ResourceAdapter JavaBean Instance
Configuration] for details on resource adapter configuration.

[#50540572_pgfId-1002276]##For _ManagedConnectionFactory_ JavaBeans that
implement the _TransactionSupport_ interface, the application server
must perform the following prior to using the JavaBean. The application
server must call the _getTransactionSupport_ method to determine its
level of transaction support. The application server must complete the
configuration of the _ManagedConnectionFactory_ instance (see
link:conn.htm#50540558_23545[See ManagedConnectionFactory JavaBean and
Outbound Communication]) before invoking the _getTransactionSupport_
method. The application server must use the value returned by the
_getTransactionSupport_ method and ignore the value specified by the
resource adapter deployment descriptor/Connector annotation or the
deployer configuration. The application server must provide the
transaction levels listed in
_TransactionSupport.TransactionSupportLevel_ enum, the same semantics as
the levels detailed in link:conn.htm#50540572_66517[See Resource
Adapter].

[#50540572_pgfId-1002284]##A resource adapter must always return a level
of transaction support whose ordinal value in the
TransactionSupport.TransactionSupportLevel enum is equal to or lesser
than the resource adapter’s transaction support classification.

======= [#50540572_pgfId-1002530]##

image:conn-48.gif[image]

Interface: TransactionSynchronizationRegistry

[#50540572_pgfId-1002531]##The _TransactionSynchronizationRegistry_
interface is defined in the JTA specification (see
link:conn.htm#50540564_28808[See Java Transaction API (JTA)
Specification, version 1.2]) and could be used by system level
components to interact with the transaction manager. This interface
provides the ability to register synchronization objects, associate
resource objects with the current transaction, get the transaction
context of the current transaction, get current transaction status, and
mark the current transaction for rollback.

[#50540572_pgfId-1002642]##This interface is implemented by the
application server by a stateless service object. A resource adapter may
obtain the _TransactionSynchronizationRegistry_ through the
_getTransactionSynchronizationRegistry_ method (shown below) of
_BootstrapContext_ (see link:conn.htm#50540558_94107[See ResourceAdapter
JavaBean and Bootstrapping a Resource Adapter Instance]). The
application server is required to make a
_TransactionSynchronizationRegistry_ object available through its
_BootstrapContext_ implementation. The same
_TransactionSynchronizationRegistry_ object can be used by any number of
artifacts in the resource adapter module with thread safety.

[width="100%",cols="100%",]
|===
a|
[#50540572_pgfId-1002652]##public interface
javax.resource.spi.BootstrapContext \{

[#50540572_pgfId-1002673]## TransactionSynchronizationRegistry

[#50540572_pgfId-1002653]##getTransactionSynchronizationRegistry();

[#50540572_pgfId-1002655]## ...

[#50540572_pgfId-1002656]##}

|===

======= [#50540572_pgfId-1002211]##

image:conn-48.gif[image]

Requirements

[#50540572_pgfId-1000509]##This section outlines the requirements for
the transaction management contract.

======= [#50540572_pgfId-1000511]##[#50540572_66517]##Resource Adapter

[#50540572_pgfId-1000512]##A resource adapter can be classified based on
the level of transaction support, as follows:

[#50540572_pgfId-1000513]## _NoTransaction_ . The resource adapter
supports neither resource manager local nor JTA transactions. It
implements neither the _XAResource_ nor _LocalTransaction_ interfaces.

[#50540572_pgfId-1000514]## _LocalTransaction_ - The resource adapter
supports resource manager local transactions by implementing the
_LocalTransaction_ interface. The local transaction management contract
is specified in link:conn.htm#50540572_84546[See Local Transaction
Management Contract].

[#50540572_pgfId-1000518]## _XATransaction_ - The resource adapter
supports both resource manager local and JTA transactions by
implementing the _LocalTransaction_ and _XAResource_ interfaces. The
requirements for supporting the _XAResource_ -based contract are
specified in link:conn.htm#50540572_98900[See XAResource-based
Transaction Contract].

[#50540572_pgfId-1000522]##

image:conn-59.gif[image]

Other levels of support (includes any transaction optimizations
supported by an underlying resource manager) are outside the scope of
the connector architecture.

image:conn-59.gif[image]

[#50540572_pgfId-1000523]##The above levels reflect the major steps of
transaction support that a resource adapter is required to make to allow
external transaction coordination. Depending on its transactional
capabilities and the requirements of its underlying EIS, a resource
adapter can choose to support any one of the above transaction support
levels.

======= [#50540572_pgfId-1000524]##Auto Commit

[#50540572_pgfId-1000525]##When a connection is in an auto-commit mode,
an operation on the connection automatically commits after it has been
executed. The auto-commit mode must be off if multiple interactions have
to be grouped in a single transaction, either local or XA, and committed
or rolled back as a unit.

[#50540572_pgfId-1000526]##A resource adapter must manage the
auto-commit mode as follows:

[#50540572_pgfId-1000527]##A transactional resource adapter, either at
_XATransaction_ or _LocalTransaction_ level, must set the auto-commit
mode to false within a transaction, either local or XA, on a connection
participating in the transaction. This requirement holds for both
container-managed and bean-managed transaction demarcation.

[#50540572_pgfId-1000528]##A transactional resource adapter must set the
auto-commit mode to true, on connections that are used outside a
transaction.

======= [#50540572_pgfId-1000529]##Application Server

[#50540572_pgfId-1000530]##An application server must support resource
adapters with all three levels of transaction support— _NoTransaction_ ,
_LocalTransaction_ , and _XATransaction_ .

[#50540572_pgfId-1000531]##The following are the requirements for an
application server for the transaction management contract:

[#50540572_pgfId-1000532]##The application server must support a
transaction manager that manages transactions using the JTA _XAResource_
-based contract. The requirements for a transaction manager to support
an _XAResource_ -based contract are specified in
link:conn.htm#50540572_46360[See Transaction Manager Requirements].

[#50540572_pgfId-1000536]##The application server must use the
_LocalTransaction_ interface-based contract to manage local transactions
for a resource manager.

[#50540572_pgfId-1000537]##The application server must use the
deployment descriptor mechanism and the values in the Connector metadata
annotation to ascertain the transactional capabilities of a resource
adapter. Refer to link:conn.htm#50540561_49014[See Deployment] for
details on the deployment descriptor specification and
link:conn.htm#50540619_30627[See @Connector] for details on the
Connector annotation.

[#50540572_pgfId-1000541]##If a _ManagedConnectionFactory_ chooses to
specify its transactional capability in a dynamic fashion at runtime
(see link:conn.htm#50540572_34564[See Runtime Transaction Support Level
Specification]), the application server must ascertain the transactional
capability provided by the _ManagedConnectionFactory_ instance.

[#50540572_pgfId-1002362]##The application server must implement the
_ConnectionEventListener_ interface to get transaction-related event
notifications.

======= [#50540572_pgfId-1000542]##

image:conn-48.gif[image]

Connection Optimizations

[#50540572_pgfId-1000543]##This section describes two optional
connection optimizations:

[#50540572_pgfId-1000544]##Lazy connection association optimization

[#50540572_pgfId-1000545]##Lazy transaction enlistment optimization

======= [#50540572_pgfId-1000546]##[#50540572_21093]##Lazy Connection Association Optimization

[#50540572_pgfId-1000547]##Application components may acquire
connections through a ConnectionFactory object (resource-ref) obtained
from the JNDI namespace. The connection(s) thus obtained may be closed
by the application before method completion, or may be cached by the
application for later use.

[#50540572_pgfId-1000548]##When a connection is cached by the
application component, the cached connection handle is considered active
and remains associated with a ManagedConnection instance from the
application server’s connection pool. If the cached connection handle is
used infrequently, then the associated ManagedConnection instance
remains in hibernation during periods of non-use. This is because the
application server cannot detect when the hibernating ManagedConnection
instance will be used again by the application.

[#50540572_pgfId-1000549]##Such hibernating ManagedConnection instances
result in suboptimal usage of system resources. Avoiding hibernation of
ManagedConnection instances leads to more optimal resource utilization
and better performance.

[#50540572_pgfId-1000550]##The following describes a mechanism that
allows an application server to avoid hibernating ManagedConnection
instances (by dissociating the ManagedConnection from its connection
handles and using the freed ManagedConnection instance for other
applications). This mechanism also provides a way to notify the
application server when a dissociated connection handle is used by the
application, so that it can be associated with an appropriate
ManagedConnection instance.

[#50540572_pgfId-1000554]##link:conn.htm#50540572_27159[See Connection
Acquisition Processing] describes the processing of a getConnection
method call initiated by an application component (that is, when the
application component first acquires a connection). At a later point in
time, the connection may be dissociated by the application server by
calling the dissociateConnections method on the appropriate
ManagedConnection instance. This dissociates the ManagedConnection
instance from all its connection handle objects.

[#50540572_pgfId-1000555]##When such a dissociated connection is used by
the application (upon method re-entry), it is required to be
re-associated with an appropriate ManagedConnection instance.
link:conn.htm#50540572_94596[See Connection Re-association Processing]
describes connection re-association processing. The connection
re-association processing depends on the connection notifying the
application server upon re-use (lazy re-association trigger). The
connection object invokes the associateConnection method on the
ConnectionManager instance in order to lazily re-associate itself with
an appropriate ManagedConnection instance.

[#50540572_pgfId-1000559]##Thus, a connection handle that can be
dissociated can exist in one of three states: Active, Inactive or
Closed. link:conn.htm#50540572_86094[See State Diagram of a
Dissociatable Application-level Connection Handle] describes the state
transitions of a dissociatable connection handle. Note that the state
Inactive applies only to dissociatable connection handles.

[#50540572_pgfId-1000563]##The application server may dissociate
connections that are shareable. It must not dissociate connections that
are marked unshareable, however, since application-specific state may be
retained by a ManagedConnection instance. The application server may
also call the _dissociateConnections_ method even when an active
transaction is in progress in the _ManagedConnection_ .

[#50540572_pgfId-1002393]##When a disassociated connection handle is
closed, the resource adapter must notify the application server by
calling the _inactiveConnectionClosed_ method on the
_LazyAssociatableConnectionManager_ interface. The application server
can then perform any cleanup operations related to the disassociated
connection handle in its connection pool.

[#50540572_pgfId-1003763]## 

[#50540572_pgfId-1003683]##[#50540572_27159]##Connection Acquisition
Processing

image:conn-63.gif[image]

[#50540572_pgfId-1003775]## 

[#50540572_pgfId-1003719]##[#50540572_94596]##Connection Re-association
Processing

image:conn-64.gif[image]

[#50540572_pgfId-1003716]##[#50540572_86094]##State Diagram of a
Dissociatable Application-level Connection Handle

image:conn-65.gif[image]

======= [#50540572_pgfId-1002781]##API Additions

[width="100%",cols="100%",]
|===
a|
[#50540572_pgfId-1002765]##package javax.resource.spi;

[#50540572_pgfId-1002766]## 

[#50540572_pgfId-1002767]##import javax.resource.ResourceException;

[#50540572_pgfId-1002768]## 

[#50540572_pgfId-1002769]##interface LazyAssociatableConnectionManager
\{ // application server

[#50540572_pgfId-1002770]## void associateConnection(

[#50540572_pgfId-1002771]## Object connection, ManagedConnectionFactory
mcf,

[#50540572_pgfId-1002772]## ConnectionRequestInfo info)

[#50540572_pgfId-1002773]## throws ResourceException;

[#50540572_pgfId-1002774]## 

[#50540572_pgfId-1002775]## void inactiveConnectionClosed(Object
connection, ManagedConnectionFactory mcf);

[#50540572_pgfId-1002776]##}

[#50540572_pgfId-1002777]## 

[#50540572_pgfId-1002778]##interface DissociatableManagedConnection \{
// resource adapter

[#50540572_pgfId-1002779]## void dissociateConnections() throws
ResourceException;

[#50540572_pgfId-1002780]##}

|===

[#50540572_pgfId-1002782]##Neither the application server nor the
resource adapter must support this optimization.

[#50540572_pgfId-1000667]##A resource adapter that does not support this
optimization must provide a ManagedConnection implementation that does
not implement the DissociatableManagedConnection interface. This allows
an application server to detect that the resource adapter does not
support this optimization.

[#50540572_pgfId-1000668]##An application server that does not support
this optimization must provide a ConnectionManager implementation that
does not implement the LazyAssociatableConnectionManager interface. This
allows a resource adapter to detect that the application server does not
support this optimization. In reality, a resource adapter will not call
this method (in order to re-associate a connection) since an application
server that does not support this optimization would never dissociate a
connection.

[#50540572_pgfId-1000669]##There are no changes to the resource adapter
deployment descriptor since the application server can programmatically
detect whether a resource adapter supports this optimization or not.

======= [#50540572_pgfId-1000670]##Lazy Transaction Enlistment Optimization

[#50540572_pgfId-1000671]##Transactions may be started by an application
server before a method call on an application component or it may be
started by an application component during a method call. It is also
possible that an application server may use a transaction imported from
a different server during a method call.

[#50540572_pgfId-1000672]##Irrespective of how a transaction is started,
an application server enlists all connections (cached or newly acquired
by an application component) with the transaction, so that the work done
using those connections will be part of the transaction. This enlistment
happens before the method call in the case of cached connections and
during the method call when connections are newly acquired within the
transaction.

[#50540572_pgfId-1000673]##But not all the connections that are cached
or newly acquired by an application component may be used within a
transaction. Since the application server cannot detect whether these
connections would be used within the transaction, it statically
(eagerly) enlists all such connections with the transaction. Thus,
connections that are not used in a transaction are unnecessarily
enlisted, which leads to sub-optimal performance.

[#50540572_pgfId-1000674]##The following describes a dynamic mechanism
that allows the application server to enlist only those connections that
are used within a transaction. A ManagedConnection that supports this
optimization must invoke the lazyEnlist method on the ConnectionManager
every time it is used outside of a local or XA transaction. The
application server uses this method call to lazily enlist the connection
in the transaction (if there is one). The application server may delist
the ManagedConnection instances from the transaction at a later point.

[#50540572_pgfId-1000675]##This optimization can be used only on
connections that are lazily enlist-able.

======= [#50540572_pgfId-1000676]##API Additions

[width="100%",cols="100%",]
|===
a|
[#50540572_pgfId-1001941]##package javax.resource.spi;

[#50540572_pgfId-1001942]## 

[#50540572_pgfId-1001943]##import javax.resource.ResourceException;

[#50540572_pgfId-1001944]##import javax.transaction.xa.Xid;

[#50540572_pgfId-1001945]## 

[#50540572_pgfId-1001946]##interface LazyEnlistableConnectionManager \{
// application server

[#50540572_pgfId-1001947]## void lazyEnlist(ManagedConnection) throws
ResourceException;

[#50540572_pgfId-1001948]##}

[#50540572_pgfId-1001949]## 

[#50540572_pgfId-1001950]##interface LazyEnlistableManagedConnection \{
// resource adapter

[#50540572_pgfId-1001939]##}

|===

[#50540572_pgfId-1000688]##Neither the application server nor the
resource adapter must support this optimization.

[#50540572_pgfId-1000689]##A resource adapter that does not support this
optimization must provide a ManagedConnection implementation which does
not implement the LazyEnlistableManagedConnection interface. This allows
an application server to detect that the resource adapter does not
support this optimization.

[#50540572_pgfId-1000690]##An application server that does not support
this optimization must provide a ConnectionManager implementation that
does not implement the LazyEnlistableConnectionManager interface. This
allows a resource adapter to detect that the application server does not
support this optimization.

[#50540572_pgfId-1000691]##There are no changes to the resource adapter
deployment descriptor since the application server can programmatically
detect whether a resource adapter supports this optimization or not.

[#50540572_pgfId-998874]## 

====== [#50540567_pgfId-874]## 

======= [#50540567_pgfId-5529]##

image:conn-66.gif[image]

[#50540567_86332]##Security Architecture

image:conn-67.gif[image]

[#50540567_pgfId-999458]##This chapter specifies the security
architecture for the integration of EISs with the Java EE platform. It
adds EIS integration-specific security details to the security
requirements specified in other Java EE specifications.

======= [#50540567_pgfId-999459]##

image:conn-68.gif[image]

[#50540567_84930]##Overview

[#50540567_pgfId-999460]##It is critical that an enterprise be able to
depend on the information in its EIS for its business activities. Any
loss or inaccuracy of information or any unauthorized access to the EIS
can be extremely costly to an enterprise. There are several mechanisms
that can be used to protect an EIS against such security threats,
including:

[#50540567_pgfId-999461]##Identification and authentication of
principals, human users to verify they are who they claim to be.

[#50540567_pgfId-999462]##Authorization and access control to determine
whether a principal is allowed to access an application server and/or an
EIS.

[#50540567_pgfId-999463]##Secure communication between an application
server and an EIS. Communication over insecure links can be protected
using a protocol, for example, Kerberos, that provides authentication,
integrity, and confidentiality services. Communication can also be
protected by using a secure link protocol, for example, SSL.

======= [#50540567_pgfId-999464]##

image:conn-68.gif[image]

Goals

[#50540567_pgfId-999465]##The security architecture is designed to meet
the following goals:

[#50540567_pgfId-999466]##Extend the end-to-end security model for Java
EE applications to include integration with EISs based on the connector
architecture.

[#50540567_pgfId-999467]##Support authentication and authorization of
users who are accessing EISs.

[#50540567_pgfId-999468]##Keep the security architecture technology
neutral and enable the specified security contract to be supported by
various security technologies.

[#50540567_pgfId-999469]##Enable the security architecture to support a
range of EISs with different levels of security support and existing
security environments.

[#50540567_pgfId-999470]##Support security configuration of a resource
adapter in an operational environment.

[#50540567_pgfId-999471]##Keep the security model for connector
architecture-based EIS integration transparent to an application
component provider. This includes providing support for single sign-on
across multiple EISs.

[#50540567_pgfId-999472]##The security model for EIS integration is not
designed to do the following:

[#50540567_pgfId-999473]##Mandate a specific technology and describe how
it can be used to implement the security architecture for connector
architecture-based EIS integration.

[#50540567_pgfId-999474]##Specify and mandate a specific security
policy. The security architecture enables an application server and EIS
to support the implementation and administration of security policies
based on their respective requirements.

======= [#50540567_pgfId-999475]##

image:conn-68.gif[image]

[#50540567_67590]##Terminology

[#50540567_pgfId-999476]##The following terms are used in this chapter:

[#50540567_pgfId-999477]## _Principal_ . A principal is an entity that
can be authenticated by an authentication mechanism deployed in an
enterprise. A principal is identified using a principal name and
authenticated using authentication data. The content and format of the
principal name and the authentication data depend upon the
authentication mechanism.

[#50540567_pgfId-999478]##Security Attributes. A principal has a set of
security attributes associated with it. These security attributes are
related to the authentication and authorization mechanisms. Some
examples are security permissions, and credentials for a principal.

[#50540567_pgfId-999479]##Credential. A credential contains or
references security information that can authenticate a principal to
additional services. A principal acquires a credential upon
authentication or from another principal that allows its credential to
be used. The latter is termed principal delegation.

[#50540567_pgfId-999480]##End user. An end user is an entity, human or
service, that acts as a source of a request to an application. An end
user is represented as a security principal within a _Subject_ as
specified in the JAAS framework (see link:conn.htm#50540564_39014[See
Java Authentication and Authorization Service Specification, version
1.0]).

[#50540567_pgfId-999484]##Initiating Principal. The security principal
representing the end-user that interacts directly with the application.
An end-user can authenticate using either a web client or an application
client.

[#50540567_pgfId-999485]##Caller Principal. A principal that is
associated with an application component instance during a method
invocation. For example, an EJB instance can call the
_getCallerPrincipal_ method to get the principal associated with the
current security context.

[#50540567_pgfId-999486]##Resource Principal. A security principal under
whose security context a connection to an EIS instance is established.

[#50540567_pgfId-999487]##Security domain. A scope within which certain
common security mechanisms and policies are established. This
specification does not specify the scope of a security domain. An
enterprise can contain more than one security domain. Thus an
application server and an EIS may either be in the same or different
security domains. link:conn.htm#50540569_16269[See Security Scenarios]
provides illustrative examples of how security domains can be setup and
managed.

[#50540567_pgfId-999491]##In a managed environment, application
components are deployed in web or EJB containers. When a method gets
invoked on a component, the principal associated with the component
instance is termed a caller principal.

[#50540567_pgfId-999492]##The relationship between an initiating
principal and a caller principal depends on the principal delegation
option for inter-container and inter-component calls. This form of
principal delegation is out of the scope of the connector architecture.

[#50540567_pgfId-999493]##The relationship of a resource principal and
its security attributes, for example, credentials and access privileges,
to an initiating or caller principal depends on how the resource
principal has been setup by the system administrator or deployer.

[#50540567_pgfId-999497]##Refer to link:conn.htm#50540568_11808[See
Interfaces and Classes] for details on interfaces and classes that are
used to represent a resource principal and its credentials.

======= [#50540567_pgfId-999498]##

image:conn-68.gif[image]

Application Security Model

[#50540567_pgfId-999499]##This section is a brief summary of the
security model from the perspective of an application component
provider. Refer to the relevant specifications for more detail.

[#50540567_pgfId-999500]##The application component requests a
connection to be established under the security context of a resource
principal. The security context includes security attributes—access
privileges, authorization level—for a resource principal. Once a
connection is successfully established, all application-level
invocations to the EIS instance using the connection happen under the
security context of the resource principal.

[#50540567_pgfId-999501]##The application component provider has the
following two choices related to EIS sign-on:

[#50540567_pgfId-999502]##Allow the deployer to set up the resource
principal and EIS sign-on information. For example, the deployer sets
the user name and password for establishing a connection to an EIS
instance.

[#50540567_pgfId-999503]##Perform sign-on to an EIS from the component
code by providing explicit security information for a resource
principal.

[#50540567_pgfId-999504]##The application component provider uses a
deployment descriptor element or metadata annotations defined in the
corresponding application component specifications, for example,
_res-auth_ for EJB components, to indicate the requirements for one of
the above two approaches. If the _res-auth_ element is set to
_Application_ , the component code performs a programmatic sign-on to
the EIS. If the _res-auth_ element is _Container_ , the application
server takes on the responsibility of setting up and managing EIS
sign-on.

======= [#50540567_pgfId-999505]##Scenario: Container-Managed Sign-on

[#50540567_pgfId-999506]##The application component provider sets the
_res-auth_ deployment descriptor element, or the equivalent metadata
annotation defined in the relevant application component specification,
to be _Container_ letting the application server take the responsibility
of managing EIS sign-on.

[#50540567_pgfId-999507]##The Deployer sets up the principal mapping
such that the user account for connecting to the EIS instance is always
_eStoreUser_ . The Deployer also configures the authentication data, for
example, the password, needed to authenticate the _eStoreUser_ to the
EIS.

[#50540567_pgfId-999508]##The component code invokes the _getConnection_
method on the _ConnectionFactory_ instance with no security-related
parameters. The component relies on the application server to manage
sign-on to the EIS instance based on the security information configured
by the Deployer.

[width="100%",cols="100%",]
|===
a|
[#50540567_pgfId-999719]##// Method in an application component

[#50540567_pgfId-999720]##Context initctx = new InitialContext();

[#50540567_pgfId-999721]##

[#50540567_pgfId-999722]##// perform JNDI lookup to obtain connection
factory

[#50540567_pgfId-999723]##javax.resource.cci.ConnectionFactory cxf =

[#50540567_pgfId-999724]##
(javax.resource.cci.ConnectionFactory)initctx.lookup(

[#50540567_pgfId-999725]## “java:comp/env/eis/MyEIS”);

[#50540567_pgfId-999726]##

[#50540567_pgfId-999727]##// Invoke factory to obtain a connection. The
security

[#50540567_pgfId-999728]##// information is not passed in the
getConnection method

[#50540567_pgfId-999729]##javax.resource.cci.Connection cx =
cxf.getConnection();

[#50540567_pgfId-999717]##...

|===

======= [#50540567_pgfId-999521]##Scenario: Component-Managed Sign-on

[#50540567_pgfId-999522]##The application component provider sets the
_res-auth_ element to be _Application._

[#50540567_pgfId-999523]##The component code performs a programmatic
sign-on to the EIS. The application component passes explicit security
information, for example, the username and password, to the
_getConnection_ method of the _ConnectionFactory_ instance.

[width="100%",cols="100%",]
|===
a|
[#50540567_pgfId-999761]##// Method in an application component

[#50540567_pgfId-999762]##Context initctx = new InitialContext();

[#50540567_pgfId-999763]##

[#50540567_pgfId-999764]##// perform JNDI lookup to obtain connection
factory

[#50540567_pgfId-999765]##javax.resource.cci.ConnectionFactory cxf =

[#50540567_pgfId-999766]##
(javax.resource.cci.ConnectionFactory)initctx.lookup(

[#50540567_pgfId-999767]## “java:comp/env/eis/MyEIS”);

[#50540567_pgfId-999768]##

[#50540567_pgfId-999769]##// Invoke factory to obtain a connection

[#50540567_pgfId-999770]##com.myeis.ConnectionSpecImpl properties = ..
// get a new ConnectionSpec

[#50540567_pgfId-999771]##properties.setUserName(“...”);

[#50540567_pgfId-999772]##properties.setPassword(“...”);

[#50540567_pgfId-999773]##javax.resource.cci.Connection cx =
cxf.getConnection(properties);

[#50540567_pgfId-999759]##...

|===

======= [#50540567_pgfId-999538]##

image:conn-68.gif[image]

EIS Sign-on

[#50540567_pgfId-999539]##Creating a new physical connection requires a
sign-on to an EIS instance. Changing the security context on an existing
physical connection can also require EIS sign-on. The latter is termed
re-authentication.

[#50540567_pgfId-999540]##An EIS sign-on typically involves one or more
of the following steps:

[#50540567_pgfId-999541]##Determine a resource principal under whose
security context a physical connection to an EIS will be established.

[#50540567_pgfId-999542]##Authenticate a resource principal if it is not
already authenticated.

[#50540567_pgfId-999543]##Establish a secure association between the
application server and the EIS. This enables additional security
mechanisms, for example, data confidentiality and integrity, to be
applied to communication between the two entities.

[#50540567_pgfId-999544]##Set the access control to EIS resources.

======= [#50540567_pgfId-999545]##[#50540567_71111]##Authentication Mechanism

[#50540567_pgfId-999546]##An application server and an EIS collaborate
to ensure resource principals are properly authenticated when the
principal connects to the underlying EIS. The connector architecture
identifies the following as the commonly-supported authentication
mechanisms:

[#50540567_pgfId-999547]## _BasicPassword -_ Basic password based
authentication mechanism specific to an EIS

[#50540567_pgfId-999548]## _Kerbv5 -_ Kerberos version 5-based
authentication mechanism

[#50540567_pgfId-999549]##The _authentication-mechanism-type_ element is
used in the deployment descriptor to specify whether or not a resource
adapter supports a specific authentication mechanism. Refer to
link:conn.htm#50540561_80713[See Requirements] for more details on the
specification of the deployment descriptor for a resource adapter. The
authentication mechanism supported by the resource adapter may also
specified through the AuthenticationMechanism annotation (see
link:conn.htm#50540619_63282[See @AuthenticationMechanism] ) as part of
the Connector metadata annotation (see link:conn.htm#50540619_30627[See
@Connector]).

[#50540567_pgfId-999553]##The connector architecture does not require
that a specific authentication mechanism be supported by an application
server and an EIS. An application server may support any other
authentication mechanisms for EIS sign-on. The connector security
architecture is independent of security mechanisms.

======= [#50540567_pgfId-999555]##[#50540567_11150]##Resource Principal

[#50540567_pgfId-999556]##When an application component requests a
connection from a resource adapter, the connection request is made under
the security context of a resource principal. The Deployer can set a
resource principal based on the following options:

[#50540567_pgfId-999949]##Configured Identity. In this case, a resource
principal has its own configured identity and security attributes
independent of the identity of the initiating or caller principal. The
identity of the resource principal can be configured either at
deployment time or specified dynamically by a component at the
connection creation. The scenario described in
link:conn.htm#50540569_99352[See eStore Application] illustrates an
example where connections to an EIS are always established under the
security context of a valid EIS user account. This happens independent
of the initiating or caller principal. For example, if a caller
principal is A, then the configured resource principals can be B and C
on two different EIS instances, where A, B, and C are independent
identities.

[#50540567_pgfId-999561]##Principal Mapping. A resource principal is
determined by mapping from the identity and/or security attributes of
the initiating or caller principal. In this case, a resource principal
does not inherit identity or security attributes of a principal that it
has been mapped from. The resource principal gets its identity and
security attributes based on the mapping. For example, if the caller
principal has identity A, then the mapped resource principal is
_mapping(A,EIS1)_ and _mapping(A, EIS2)_ on two different EIS instances.

[#50540567_pgfId-999562]##Caller Impersonation. A resource principal
acts on behalf of an initiating or caller principal. Acting on behalf of
a caller principal requires that the caller’s identity and credentials
be delegated to the EIS. The mechanism by which this is accomplished is
specific to a security mechanism and an application server
implementation. An example of the impersonation is described in
link:conn.htm#50540569_44462[See Employee Self-Service Application].

[#50540567_pgfId-999566]##In some scenarios, a caller principal can be a
delegate of an initiating principal. In this case, a resource principal
transitively impersonates an initiating principal.

[#50540567_pgfId-999567]##The support for principal delegation is
typically specific to a security mechanism. For example, Kerberos
supports a mechanism for the delegation of authentication. Refer to the
Kerberos v5 specification for more details. The security technology
specific details are out of the scope of the connector architecture.

[#50540567_pgfId-999568]##Credentials Mapping. This mechanism may be
used when an application server and EIS support different authentication
domains. For example, the initiating principal has been authenticated
and has public key certificate-based credentials. The security
environment for the EIS is configured with the Kerberos authentication
service. The application server is configured to map the public key
certificate-based credentials associated with the initiating principal
to the Kerberos credentials. In this case, the resource principal is the
same as the caller principal with the mapped credentials.

[#50540567_pgfId-999569]##In the case of credential mapping, the mapped
resource principal has the same identity as the initiating or caller
principal. For example, a principal with identity A has initial
credentials _cred(A,mech1)_ and has credentials _cred(A,mech2)_ after
mapping. _mech1_ and _mech2_ represents different mechanism types.

======= [#50540567_pgfId-999570]##Authorization Model

[#50540567_pgfId-999571]##Authorization checking to ensure that a
principal has access to an EIS resource can be applied at one or more of
the following:

[#50540567_pgfId-999572]##At the EIS

[#50540567_pgfId-999573]##At the application server

[#50540567_pgfId-999574]##Authorization checking at the target EIS can
be done in an EIS-specific way and is not specified here. For example,
an EIS can define its access control policy in terms of its specific
security roles and permissions.

[#50540567_pgfId-999575]##Authorization checking can also be done at the
application server level. For example, an application server can allow a
principal to create a connection to an EIS only if the principal is
authorized to do so. Java EE containers such as EJB and servlet
containers support both programmatic and declarative security that can
be used to define authorization policies. Programmatic and declarative
security are defined in the individual specifications. Refer to the EJB
and servlet specifications for more details. An application component
developer developing components for EIS access must follow the
requirements defined in these specifications.

======= [#50540567_pgfId-999576]##[#50540567_87495]##Secure Association

[#50540567_pgfId-999577]##The communication between an application
server and an EIS can be subject to security threats such as data
modification and loss of data. Establishing a secure association
counters such threats. A secure association is shared security
information that allows a component on the application server to
communicate securely with an EIS.

[#50540567_pgfId-999578]##Establishing a secure association includes
several steps:

[#50540567_pgfId-999579]##The resource principal is authenticated to the
EIS. This may require that the target principal in the EIS domain
authenticate itself back to the application server. A target principal
can be set up by the system administrator as a security principal
associated with a running EIS instance or specific EIS resource.

[#50540567_pgfId-999580]##Negotiate quality of protection such as
confidentiality and integrity.

[#50540567_pgfId-999581]##A pair of communicating entities—an
application server and an EIS instance—establish a shared security
context using the credentials of the resource principal. The security
context encapsulates shared state information, required so that
communication between the application server and the EIS can be
protected through integrity and confidentiality mechanisms. Examples of
shared state information are cryptographic keys and message sequence
numbers.

[#50540567_pgfId-999582]##A secure association between an application
server and an EIS is always established by the resource adapter
implementation. Note that a resource adapter library runs within the
address space of the application server.

[#50540567_pgfId-999583]##A resource adapter can use any security
mechanism to establish the secure association. GSS-API (refer to IETF
draft on GSS-API v2[5]) is an example of such a mechanism. Note that the
connector architecture does not require use of the GSS-API by a resource
adapter or application server.

[#50540567_pgfId-999584]##Configuring a mechanism for establishing
secure associations is outside the scope of the connector architecture.
This includes setting up the desired quality of protection during secure
communication.

[#50540567_pgfId-999585]##Once a secure association is successfully
established, the connection is associated with the security context of
the resource principal. Subsequently, all application-level invocations
to the EIS instance using the connection happen under the security
context of the resource principal.

======= [#50540567_pgfId-999586]##

image:conn-68.gif[image]

Roles and Responsibilities

[#50540567_pgfId-999587]##This section describes various roles involved
in the security architecture. It also describes responsibilities of each
role from the security perspective.

[#50540567_pgfId-999588]##The roles and responsibilities of the
Application Component Provider and Deployer are specified in detail in
the respective Java EE component model specifications.

======= [#50540567_pgfId-999590]##[#50540567_41256]##Application Component Provider

[#50540567_pgfId-999591]##The following features are common across
different Java EE component models from the perspective of an
Application Component Provider:

[#50540567_pgfId-999592]##An Application Component Provider invariably
avoids the burden of securing its application and focuses on developing
the business functionality of its application.

[#50540567_pgfId-999593]##A security-aware Application Component
Provider can use a simple programmatic interface to manage security at
an application level. The programmatic interface enables the Application
Component Provider to program access control decisions based on the
security context—the principal and role—associated with the caller of a
method and to manage programmatic sign-on to an EIS.

[#50540567_pgfId-999594]##An Application Component Provider specifies
security requirements for its application declaratively through metadata
annotation and deployment descriptor. The security requirements include
security roles, method permissions, and an authentication approach for
EIS sign-on.

[#50540567_pgfId-999595]##More qualified roles - Application Server
Vendor, Deployer, System Administrator - have the responsibility of
satisfying overall security requirements through the deployment
mechanism for resource adapters and components, and managing the
security environment.

======= [#50540567_pgfId-999596]##Deployer

[#50540567_pgfId-999597]##The Deployer specifies security policies that
ensure secure access to the underlying EISs from application components.
The deployer adapts the intended security view of an application for EIS
access, specified through metadata annotations described in
link:conn.htm#50540619_87413[See Metadata Annotations] or the deployment
descriptor, to the actual security mechanisms and policies used by the
application server and EISs in the target operational environment. The
Deployer uses tools to accomplish the above task.

[#50540567_pgfId-999598]##The output of the Deployer’s work is a
security policy descriptor specific to the operational environment. The
format of the security policy descriptor is specific to an application
server.

[#50540567_pgfId-999599]##The Deployer performs the following deployment
tasks for each connection factory reference declared in the deployment
descriptor of an application component:

[#50540567_pgfId-999600]##Provides a connection factory specific
security configuration that is needed for opening and managing
connections to an EIS instance.

[#50540567_pgfId-999601]##Binds the connection factory reference in the
deployment descriptor of an application component to the JNDI registered
reference for the connection factory. Refer to
link:conn.htm#50540561_98699[See JNDI Configuration and Lookup] for the
JNDI configuration of a connection factory during deployment of a
resource adapter. The deployer can use the JNDI _LinkRef_ mechanism to
create a symbolic link to the actual JNDI name of the connection
factory.

[#50540567_pgfId-999605]##Configures the security information for EIS
sign-on, if the value of the _res-auth_ deployment descriptor element is
_Container_ . For example, the Deployer sets up the principal mapping
for EIS sign-on.

======= [#50540567_pgfId-999606]##Application Server

[#50540567_pgfId-999607]##The application server provides a security
environment with specific security policies and mechanisms that support
the security requirements of the deployed application components and
resource adapters, thereby ensuring a secure access to the connected
EISs.

[#50540567_pgfId-999608]##The typical responsibilities of an application
server are as follows:

[#50540567_pgfId-999609]##Provide tools to set up security information
for a resource principal and EIS sign-on when _res-auth_ element is set
to _Container_ . This includes support for principal delegation and
mapping for configuring a resource principal.

[#50540567_pgfId-999610]##Provide tools to support management and
administration of its security domain. For example, security domain
administration can include setting up and maintaining both underlying
authentication services and trusts between domains, plus managing
principals, including identities, keys, and attributes. Such
administration is typically security technology specific and is outside
the scope of the connector architecture.

[#50540567_pgfId-999611]##Support a single sign-on mechanism that spans
the application server and multiple EISs. The security mechanisms and
policies through which single sign-on is achieved are outside the scope
of the connector architecture.

[#50540567_pgfId-999615]##link:conn.htm#50540557_31016[See JAAS Based
Security Architecture] specifies how JAAS can be used by an application
server to support the requirements of the connector security
architecture.

======= [#50540567_pgfId-999616]##EIS Vendor

[#50540567_pgfId-999617]##EIS provides a security infrastructure and
environment that supports the security requirements of the client
applications. An EIS can have its own security domain with a specific
set of security policies and mechanisms, or it can be set up as part of
an enterprise-wide security domain.

======= [#50540567_pgfId-999618]##Resource Adapter Provider

[#50540567_pgfId-999619]##The resource adapter provider provides a
resource adapter that supports the security requirements of the
underlying EIS.

[#50540567_pgfId-999620]##The resource adapter implements the security
contract specified as part of the connector architecture.
link:conn.htm#50540568_99842[See Security Contract] specifies the
security contract and related requirements for a resource adapter.

[#50540567_pgfId-999624]##The resource adapter specifies its security
capabilities and requirements through metadata annotations or its
deployment descriptor. link:conn.htm#50540561_80713[See Requirements]
specifies a standard deployment descriptor for a resource adapter.
link:conn.htm#50540619_87413[See Metadata Annotations] specifies the
metadata annotations used to express security requirements of a resource
adapter.

======= [#50540567_pgfId-999628]##System Administrator

[#50540567_pgfId-999629]##The system administrator typically works in
close association with administrators of multiple EISs that have been
deployed in an operational environment. The system administration tasks
can also be performed by the Deployer.

[#50540567_pgfId-999630]##The following tasks are illustrative examples
of the responsibilities of the system administrator:

[#50540567_pgfId-999631]##Set up an operational environment based on the
technology and requirements of the authentication service, and if an
enterprise directory is supported.

[#50540567_pgfId-999632]##Configure the user account information for
both the application server and the EIS in the enterprise directory. The
user account information from the enterprise directory can then be used
for authentication of users requesting connectivity to the EIS.

[#50540567_pgfId-999633]##Establish a password synchronization mechanism
between the application server and the EIS. This ensures that the user’s
security information is identical on both the application server and the
EIS. When an EIS requires authentication, the application server passes
the user’s password to the EIS.

[#50540567_pgfId-998874]## 

====== [#50540568_pgfId-874]## 

======= [#50540568_pgfId-5529]##

image:conn-69.gif[image]

[#50540568_99842]##Security Contract

image:conn-70.gif[image]

[#50540568_pgfId-999458]##This chapter specifies the security contract
between the application server and the EIS. It also specifies the
responsibilities of the Resource Adapter Provider and the Application
Server Vendor for supporting the security contract.

[#50540568_pgfId-1000438]##This chapter references the following
chapters and documents:

[#50540568_pgfId-1000441]##The security model specified in the Java EE
platform specification (see link:conn.htm#50540564_22967[See Java
Platform, Enterprise Edition (Java EE) Specification, version 7]).

[#50540568_pgfId-1000446]##Security architecture specified in
link:conn.htm#50540567_86332[See Security Architecture].

[#50540568_pgfId-999470]##Security scenarios based on the connector
architecture (Refer to link:conn.htm#50540569_16269[See Security
Scenarios]).

======= [#50540568_pgfId-999472]##

image:conn-71.gif[image]

Security Contract

[#50540568_pgfId-1000329]##The security contract between the application
server and the resource adapter extends the connection management
contract (described in link:conn.htm#50540552_18615[See Connection
Management]) by adding security-specific details.

[#50540568_pgfId-1000333]##This security contract supports EIS sign-on
by:

[#50540568_pgfId-999478]##Passing the connection request from the
resource adapter to the application server, enabling the application
server to hook-in security services.

[#50540568_pgfId-999479]##Propagation of the security context, that is,
JAAS _Subject_ with principal and credentials, from the application
server to the resource adapter.

======= [#50540568_pgfId-999481]##[#50540568_11808]##Interfaces and Classes

[#50540568_pgfId-999482]##The security contract includes the following
classes and interfaces:

======= [#50540568_pgfId-999483]##Subject

[#50540568_pgfId-999484]##The following text has been taken from the
JAAS specification. For detailed information, refer to the JAAS
specification (see link:conn.htm#50540564_39014[See Java Authentication
and Authorization Service Specification, version 1.0]).

[#50540568_pgfId-999488]##A _Subject_ represents a grouping of related
information for a single entity, such as a person. Such information
includes the Subject’s identities and its security-related attributes,
for example, passwords and cryptographic keys. A _Subject_ can have
multiple identities. Each identity is represented as a _Principal_
within the _Subject_ . A _Principal_ simply binds a name to a _Subject_
.

[#50540568_pgfId-999489]##A _Subject_ can also own security-related
attributes, which are referred to as _Credentials_ . Sensitive
credentials that require special protection, such as private
cryptographic keys, are stored within a private credential set.

[#50540568_pgfId-999490]##The _Credentials_ intended to be shared, such
as public key certificates or Kerberos server tickets, are stored within
a public credential set. Different permissions are required to access
and modify different credential sets.

[#50540568_pgfId-999491]##The _getPrincipals_ method retrieves all the
principals associated with a _Subject_ . The methods
_getPublicCredentials_ and _getPrivateCredentials_ respectively retrieve
all the public or private credentials belonging to a _Subject_ . The
methods defined in the _Set_ class modify the returned set of principals
and credentials.

======= [#50540568_pgfId-999492]##Resource Principal

[#50540568_pgfId-999493]##The interface _java.security.Principal_
represents a resource principal. The following code extract shows the
_Principal_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540568_pgfId-999825]##public interface java.security.Principal \{

[#50540568_pgfId-999826]## public boolean equals(Object another);

[#50540568_pgfId-999827]## public String getName();

[#50540568_pgfId-999828]## public String toString();

[#50540568_pgfId-999829]## public int hashCode();

[#50540568_pgfId-999823]##}

|===

[#50540568_pgfId-999500]##The method _getName_ returns the name of a
resource principal.

[#50540568_pgfId-999501]##An application server should use the
_Principal_ interface, or any derived interface, to pass a resource
principal as part of a _Subject_ to a resource adapter.

======= [#50540568_pgfId-999502]##GenericCredential

[#50540568_pgfId-999503]##

image:conn-72.gif[image]

This interface, introduced in Version 1.0 of this specification, has
been deprecated. The preferred way to represent generic credential
information is by way of the org.ietf.jgss.GSSCredential interface in
J2SE Version 1.4, which provides similar functionality.

image:conn-72.gif[image]

[#50540568_pgfId-999504]##The interface
_javax.resource.spi.security.GenericCredential_ defines a security
mechanism-independent interface for accessing the security credential of
a resource principal.

[#50540568_pgfId-999505]##The _GenericCredential_ interface provides a
Java wrapper around an underlying mechanism-specific representation of a
security credential. For example, the _GenericCredential_ interface can
be used to wrap Kerberos credentials.

[#50540568_pgfId-999506]##The connector architecture does not define any
standard format and requirements for security mechanism specific
credentials. For example, a security credential wrapped by a _Generic_
_Credential_ interface can have a native representation specific to an
operating system.

[#50540568_pgfId-999507]##

image:conn-72.gif[image]

A contract for the representation of mechanism-specific credentials must
be established between an application server and a resource adapter and
is outside the scope of the connector architecture. This includes
requirements for the exchange of mechanism-specific credentials between
a JAAS module and GSS provider. Refer to
link:conn.htm#50540557_31016[See JAAS Based Security Architecture] for
details on JAAS-based security architecture.

image:conn-72.gif[image]

[#50540568_pgfId-999511]##The _GenericCredential_ interface enables a
resource adapter to extract information about a security credential. The
resource adapter can then manage an EIS sign-on for a resource principal
by any of the following:

[#50540568_pgfId-999512]##Using the credentials in an EIS specific
manner if the underlying EIS supports the security mechanism type
represented by the _GenericCredential_ instance

[#50540568_pgfId-999516]##Using GSS-AP I (see
link:conn.htm#50540564_16871[See RFC: Generic Security Service API
(GSS-API) Specification, version 2]) if the resource adapter and
underlying EIS instance support GSS-API.

======= [#50540568_pgfId-999517]##Interface

[#50540568_pgfId-999518]##The following code extract shows the
_GenericCredential_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540568_pgfId-999869]##public interface
javax.resource.spi.security.GenericCredential \{

[#50540568_pgfId-999870]## public String getName();

[#50540568_pgfId-999871]## public String getMechType();

[#50540568_pgfId-999872]## public byte[] getCredentialData()

[#50540568_pgfId-999873]## throws javax.resource.spi.SecurityException;

[#50540568_pgfId-999874]## 

[#50540568_pgfId-999875]## public boolean equals(Object another);

[#50540568_pgfId-999876]## public int hashCode();

[#50540568_pgfId-999877]## 

[#50540568_pgfId-999867]##}

|===

[#50540568_pgfId-999529]##The _GenericCredential_ interface supports a
set of getter methods to obtain information about a security credential.

[#50540568_pgfId-999530]##The method _getName_ returns the name of the
resource principal associated with a _GenericCredential_ instance.

[#50540568_pgfId-999531]##The method _getMechType_ returns the mechanism
type for the _GenericCredential_ instance. The mechanism type definition
for _GenericCredential_ must be consistent with the Object Identifier
(OID) based representation specified in the GSS specification (see
link:conn.htm#50540564_16871[See RFC: Generic Security Service API
(GSS-API) Specification, version 2]). In the _GenericCredential_
interface, the mechanism type is returned as a stringified
representation of the OID specification.

[#50540568_pgfId-999535]##The _GenericCredential_ interface can be used
to get security data for a specific security mechanism. An example is
authentication data required for establishing a secure association with
an EIS instance on behalf of the associated resource principal. The
_getCredentialData_ method returns the credential representation as an
array of bytes. Note that the connector architecture does not define a
standard format for the returned credential data.

======= [#50540568_pgfId-999536]##Implementation

[#50540568_pgfId-999537]##If an application server supports the
deployment of a resource adapter which supports _GenericCredential_ as
part of the security contract, the application server must provide an
implementation of the _GenericCredential_ interface. Refer to the
deployment descriptor specification in link:conn.htm#50540561_80713[See
Requirements] for details on how a resource adapter specifies its
support for _GenericCredential_ . Refer to
link:conn.htm#50540619_63282[See @AuthenticationMechanism] for details
on how a resource adapter may use the AuthenticationMechanism annotation
to specify its support for GenericCredential.

======= [#50540568_pgfId-999541]##GSSCredential

[#50540568_pgfId-999542]##This interface org.ietf.jgss.GSSCredential is
in J2SE Version 1.4. This provides a mechanism to represent generic
credential information. The functionality provided by this interface is
similar to the deprecated _GenericCredential_ interface.

======= [#50540568_pgfId-999543]##Implementation

[#50540568_pgfId-999544]##If an application server supports the
deployment of a resource adapter which supports GSSCredential as part of
the security contract, the application server must provide an
implementation of the GSSCredential interface. Refer to the deployment
descriptor specification in link:conn.htm#50540561_80713[See
Requirements] for details on how a resource adapter specifies its
support for GSSCredential. Refer to Section 18.4.3
“@AuthenticationMechanism”” for details on how a resource adapter may
use the AuthenticationMechanism annotation to specify its support for
GSSCredential.

======= [#50540568_pgfId-999548]##PasswordCredential

[#50540568_pgfId-999549]##The class
_javax.resource.spi.security.PasswordCredential_ acts as a holder of
username and password information. This class enables an application
server to pass the username and password to the resource adapter through
the security contract.

[#50540568_pgfId-999550]##The method _getUserName_ gets the name of the
resource principal. The interface _java.security.Principal_ represents a
resource principal.

[#50540568_pgfId-999551]##The _PasswordCredential_ class must implement
the _equals_ and _hashCode_ methods.

[width="100%",cols="100%",]
|===
a|
[#50540568_pgfId-999921]##public final class
javax.resource.spi.security.PasswordCredential

[#50540568_pgfId-999922]## implements java.io.Serializable \{

[#50540568_pgfId-999923]## public PasswordCredential(String userName,
char[] password) \{ ... }

[#50540568_pgfId-999924]## public String getUserName() \{ ... }

[#50540568_pgfId-999925]## public char[] getPassword() \{ ... }

[#50540568_pgfId-999926]## 

[#50540568_pgfId-999927]## public ManagedConnectionFactory
getManagedConnectionFactory()

[#50540568_pgfId-999928]## \{ ... }

[#50540568_pgfId-999929]## public void setManagedConnectionFactory(

[#50540568_pgfId-999930]## ManagedConnectionFactory mcf) \{ ... }

[#50540568_pgfId-999931]## 

[#50540568_pgfId-999932]## public boolean equals(Object other) \{ ... }

[#50540568_pgfId-999933]## public int hashCode() \{ ... }

[#50540568_pgfId-999919]##}

|===

[#50540568_pgfId-999566]##The _getManagedConnectionFactory_ method
returns the _ManagedConnectionFactory_ instance for which the user name
and password has been set by the application server. Refer to
link:conn.htm#50540568_68092[See ManagedConnectionFactory]to see how a
resource adapter uses this method.

======= [#50540568_pgfId-999570]##ConnectionManager

[#50540568_pgfId-999571]##The method _allocateConnection_ is called by
the resource adapter’s connection factory instance. This method lets the
resource adapter pass a connection request to the application server, so
the application server can hook-in security and other services.

[width="100%",cols="100%",]
|===
a|
[#50540568_pgfId-999952]##public interface
javax.resource.spi.ConnectionManager

[#50540568_pgfId-999953]## extends java.io.Serializable \{

[#50540568_pgfId-999954]## 

[#50540568_pgfId-999955]## public Object allocateConnection(

[#50540568_pgfId-999956]## ManagedConnectionFactory mcf,

[#50540568_pgfId-999957]## ConnectionRequestInfo cxRequestInfo)

[#50540568_pgfId-999958]## throws ResourceException;

[#50540568_pgfId-999950]##}

|===

[#50540568_pgfId-999615]##Security Contract

image:conn-73.gif[image]

[#50540568_pgfId-999616]##Depending on whether the application server or
application component is configured to be responsible for managing EIS
sign-on (refer to link:conn.htm#50540567_41256[See Application Component
Provider]), the resource adapter calls the _ConnectionManager_ .
_allocateConnection_ method in one of the following ways:

[#50540568_pgfId-999620]##Container-managed Sign-on. The application
component passes no security information in the _getConnection_ method
and the application server is configured to manage EIS sign-on.

[#50540568_pgfId-999621]##The application server provides the required
security information for the resource principal through its configured
security policies and mechanisms, for example, principal mapping. The
application server requests the authentication of the resource principal
to the EIS either itself or passes authentication responsibility to the
resource adapter. This aspect is explained later in the specification of
the _ManagedConnectionFactory_ interface.

[#50540568_pgfId-999622]##Component-managed Sign-on. In this case, the
application component provides explicit security information in the
_getConnection_ method. The resource adapter invokes the
_allocateConnection_ method by passing security information in the
_ConnectionRequestInfo_ parameter. Since the security information in the
_ConnectionRequestInfo_ is opaque to the application server, the
application server should rely on the resource adapter to manage EIS
sign-on, as explained in the _ManagedConnectionFactory_ interface
specification under option C.

======= [#50540568_pgfId-999624]##[#50540568_68092]##ManagedConnectionFactory

[#50540568_pgfId-999625]##The following code extract shows the methods
of the _ManagedConnectionFactory_ interface that are relevant to the
security contract:

[width="100%",cols="100%",]
|===
a|
[#50540568_pgfId-999997]##public interface
javax.resource.spi.ManagedConnectionFactory

[#50540568_pgfId-999998]## extends java.io.Serializable \{

[#50540568_pgfId-999999]##

[#50540568_pgfId-1000000]## public ManagedConnection
createManagedConnection(

[#50540568_pgfId-1000001]## javax.security.auth.Subject subject,

[#50540568_pgfId-1000002]## ConnectionRequestInfo cxRequestInfo)

[#50540568_pgfId-1000003]## throws ResourceException;

[#50540568_pgfId-1000004]## ...

[#50540568_pgfId-999995]##}

|===

[#50540568_pgfId-999635]##During the JNDI lookup, the
_ManagedConnectionFactory_ instance is configured by the application
server with a set of configuration properties. These properties include
default security information and EIS instance-specific information, such
as hostname and port number, required for initiating a sign-on to the
underlying EIS during the creation of a new physical connection.

[#50540568_pgfId-999636]##The default security configuration on a
_ManagedConnectionFactory_ can be overridden by security information
provided either by a component, in component managed sign-on, or by the
container, in container-managed sign-on.

[#50540568_pgfId-999637]##The _createManagedConnection_ method is used
by the application server when it requests the resource adapter to
create a new physical connection to the underlying EIS.

======= [#50540568_pgfId-999638]##Contract for the Application Server

[#50540568_pgfId-999639]##The application server may provide specific
security services, such as principal mapping and delegation, and single
sign-on, before using the security contract with the resource adapter.
For example, the application server can map the caller principal to a
resource principal before calling the _createManagedConnection_ method
to create a new connection under the security context of the resource
principal.

[#50540568_pgfId-999640]##In container-managed sign-on, the application
server is responsible for creating a _Subject_ instance using its
implementation-specific security mechanisms and configuration. This
should happen before the application server calls the
_createManagedConnection_ method of the _ManagedConnectionFactory_ . The
resource adapter is driven by the application server and acts as
consumer of security information in the created _Subject_ .

[#50540568_pgfId-999641]##If the application server maintains a cache of
the security credentials, such as Kerberos ticket granting ticket (TGT),
the application server should reuse the credentials as part of the newly
created _Subject_ instance. For example, the application server uses the
_Subject.getPrivateCredentials().add(credential)_ method to add a
credential to the private credential set.

[#50540568_pgfId-999669]##[#50540568_70755]##Security Contract: Subject
Interface and its Containment Hierarchy

image:conn-74.gif[image]

[#50540568_pgfId-999673]##The preceding figure shows the relationship
between the _Subject_ , _Principal_ , _PasswordCredential_ and
_GSSCredential_ interfaces. Note that in the following options A and B
defined for _createManagedConnection_ method invocation, the _Subject_
instance contains a single resource principal, represented as
_java.security.Principal_ , and multiple credentials.

[#50540568_pgfId-999674]##The application server has the following
options for invoking the _createManagedConnection method_ :

[#50540568_pgfId-999675]##Option A. The application server invokes the
_createManagedConnection_ method by passing in a non-null _Subject_
instance that carries a single resource principal and its corresponding
password-based credentials, represented by the class
_PasswordCredential_ that provides the user name and password. The
_PasswordCredential_ should be set in the _Subject_ instance as part of
the private credential set. Note that the passed _Subject_ can contain
multiple _PasswordCredential_ instances.

[#50540568_pgfId-999676]##The resource adapter extracts the username and
password from this _Subject_ instance by looking for the
_PasswordCredential_ instance in the _Subject_ , and uses this security
information to sign-on to the EIS instance during connection creation.

[#50540568_pgfId-999677]##Option B. The application server invokes the
_createManagedConnection_ method by passing in a non-null _Subject_
instance that carries a single resource principal and its security
credentials. In this option, credentials are represented through the
_GSSCredential_ interface. A typical example is a _Subject_ instance
with Kerberos credentials.

[#50540568_pgfId-999678]##For example, an application server may use
this option for _createManagedConnection_ method invocation when the
resource principal is impersonating the caller or initiating principal,
and has valid credentials acquired through impersonation. An application
server may also use this option for principal mapping scenarios with
credentials of a resource principal represented through the
_GSSCredential_ interface.

[#50540568_pgfId-999679]##Note that sensitive credentials requiring
special protection, such as private cryptographic keys, are stored
within a private credential set, while credentials intended to be
shared, such as public key certificates or Kerberos server tickets, are
stored within a public credential set. The two methods
_getPrivateCredentials_ and _getPublicCredentials_ should be used
accordingly.

[#50540568_pgfId-999680]##In the case of Kerberos mechanism type, the
application server must pass the principal’s ticket granting ticket
(TGT) to a resource adapter in a private credential set.

[#50540568_pgfId-999681]##The resource adapter uses the resource
principal and its credentials from the _Subject_ instance to go through
the EIS sign-on process before creating a new connection to the EIS.

[#50540568_pgfId-999682]##Option C. The application server invokes the
_createManagedConnection_ method by passing a _null_ _Subject_ instance.
The application server must use this option for the component-managed
sign-on case. In this option, security information is carried in the
_ConnectionRequestInfo_ instance. The application server does not
provide any security information that can be used by the resource
adapter for managing EIS sign-on.

[#50540568_pgfId-999683]##During the deployment of a resource adapter,
the application server must be configured to use one of the above
specified invocation options. Refer to link:conn.htm#50540561_85904[See
Packaging Requirements] for more details.

======= [#50540568_pgfId-999687]##Contract for Resource Adapter

[#50540568_pgfId-999688]##A resource adapter can do EIS sign-on and
connection creation in an implementation-specific way, or it can use the
GSS-API. The latter option is specified in
link:conn.htm#50540557_31016[See JAAS Based Security Architecture]. A
resource adapter has the following options, corresponding to the options
for an application server, for handling the invocation of the
_createManagedConnection_ method:

[#50540568_pgfId-999692]##Option A. The resource adapter explicitly
checks whether the passed _Subject_ instance carries a
_PasswordCredential_ instance using the _Subject.getPrivateCredentials_
method.

[#50540568_pgfId-999693]##Note that the security contract assumes that a
resource adapter has the necessary security permissions to extract a
private credential set from a _Subject_ instance. The specific mechanism
through which such permission is set up is outside the scope of the
connector architecture.

[#50540568_pgfId-999694]##If the _Subject_ instance contains a
_PasswordCredential_ instance, the resource adapter extracts the
username and password from the _PasswordCredential_ . It uses the
security information to authenticate the resource principal,
corresponding to the username, to the EIS during the creation of a
connection. In this case, the resource adapter uses an authentication
mechanism that is EIS specific.

[#50540568_pgfId-999695]##Since a _Subject_ instance can carry multiple
_PasswordCredential_ instances, a _ManagedConnectionFactory_ should only
use a _PasswordCredential_ instance that has been specifically passed to
it through the security contract. The _getManagedConnectionFactory_
method enables a _ManagedConnectionFactory_ instance to determine
whether or not a _PasswordCredential_ instance is to be used for sign-on
to the target EIS instance. The _ManagedConnectionFactory_
implementation uses the _equals_ method to compare itself with the
passed instance.

[#50540568_pgfId-999696]##Option B. The resource adapter explicitly
checks whether the passed _Subject_ instance carries a _GSSCredential_
instance using the _getPrivateCredentials_ and _getPublicCredentials_
methods defined in the _Subject_ interface.

[#50540568_pgfId-999697]##In the case of Kerberos mechanism type, the
resource adapter must extract Kerberos credentials using the
_getPrivateCredentials_ method in the _Subject_ interface.

[#50540568_pgfId-999698]##The resource adapter uses the resource
principal and its credentials, represented by the _GSSCredential_
interface, in the _Subject_ instance to go through the EIS sign-on
process. For example, this option is used for Kerberos-based credentials
that have been acquired by the resource principal through impersonation.

[#50540568_pgfId-999699]##A resource adapter uses the getter methods
defined in the _GSSCredential_ interface to extract information about
the credential and its principal. If a resource adapter is using the GSS
mechanism, the resource adapter uses a reference to the _GSSCredential_
instance in an opaque manner and is not required to handle any
mechanism-specific credential representation. However, a resource
adapter may need to interpret credential representation if the resource
adapter initiates authentication in an implementation-specific manner.

[#50540568_pgfId-999700]##Option C. If the application server invokes
the _ManagedConnectionFactory.createManagedConnection_ method with a
_null_ _Subject_ instance, a resource adapter has the following options:

[#50540568_pgfId-999701]##The resource adapter should extract security
information passed through the _ConnectionRequestInfo_ instance. The
resource adapter should authenticate the resource principal by combining
the configured security information on the _ManagedConnectionFactory_
instance with the security information passed through the
_ConnectionRequestInfo_ instance _._ The default behavior for the
resource adapter is to allow the security information in the
_ConnectionRequestInfo_ parameter to override the configured security
information in the _ManagedConnectionFactory_ instance.

[#50540568_pgfId-999702]##If the resource adapter does not find any
security configuration in the _ConnectionRequestInfo_ instance, the
resource adapter uses the default security configuration in the
_ManagedConnectionFactory_ instance.

[#50540568_pgfId-1000309]##If the EIS does not require authentication,
the resource adapter does not need any security information from the
_ConnectionRequestInfo_ instance, and hence may ignore such security
information. This may happen due to a disconnect between the application
and the resource adapter.

[#50540568_pgfId-1000295]##In the case of option A and option B, a
resource adapter should throw a _javax.resource.spi.SecurityException_ ,
if the credential information contained in the _Subject_ instance is
insufficient to perform authentication. A non-null _Subject_ instance
with no credentials is not equivalent to a null _Subject_ instance,
since they indicate different sign-on modes, and hence the resource
adapter may handle them differently. A non-null _Subject_ instance with
no credentials may be interpreted by the resource adapter as follows:

[#50540568_pgfId-1000298]##If the EIS requires authentication, the
resource adapter should throw a _javax.resource.spi.SecurityException_ .
That is, an empty or insufficient credential information is an error.

[#50540568_pgfId-1000299]##If the EIS does not require authentication,
the resource adapter does not need any security information from the
non-null _Subject_ instance, and hence may ignore the _Subject_
instance. This may happen due to a disconnect between the application
and the resource adapter.

======= [#50540568_pgfId-999704]##[#50540568_48692]##ManagedConnection

[#50540568_pgfId-999705]##A resource adapter can re-authenticate a
physical connection (that is, one that already exists in the connection
pool under a different security context) to the underlying EIS. A
resource adapter performs re-authentication when an application server
calls the _getConnection_ method with a security context, passed as a
_Subject_ instance, different from the context previously associated
with the physical connection.

[#50540568_pgfId-999706]##If a resource adapter supports
re-authentication, the _matchManagedConnections_ method in
_ManagedConnectionFactory_ may return a matched _ManagedConnection_
instance with the assumption that the _ManagedConnection_ .
_getConnection_ method will later switch the security context through
re-authentication. Note that the _matchManagedConnections_ method should
consider a _ManagedConnection_ instance as immutable. There is no
authentication involved in the _matchManagedConnections_ method.

[#50540568_pgfId-999707]##Support for re-authentication depends on
whether an underlying EIS supports the re-authentication mechanism for
existing physical connections. If a resource adapter does not support
re-authentication, the _getConnection_ method should throw a
_javax.resource.spi.SecurityException_ if the passed _Subject_ in the
_getConnection_ method is different from the security context associated
with the _ManagedConnection_ instance.

[width="100%",cols="100%",]
|===
a|
[#50540568_pgfId-1000084]##public interface
javax.resource.spi.ManagedConnection \{

[#50540568_pgfId-1000085]## public Object getConnection(

[#50540568_pgfId-1000086]## javax.security.auth.Subject subject,

[#50540568_pgfId-1000087]## ConnectionRequestInfo cxRequestInfo)

[#50540568_pgfId-1000088]## throws ResourceException;

[#50540568_pgfId-1000089]## ...

[#50540568_pgfId-1000082]##}

|===

[#50540568_pgfId-999715]##The _getConnection_ method returns a new
connection handle. If re-authentication is successful, the resource
adapter has changed the security context of the underlying
_ManagedConnection_ instance to that associated with the passed
_Subject_ instance.

[#50540568_pgfId-999716]##A resource adapter has the following options
for handling _ManagedConnection.getConnection_ invocation if it supports
re-authentication:

[#50540568_pgfId-999717]##Option A. The resource adapter extracts the
_PasswordCredential_ instance from the _Subject_ and performs an
EIS-specific authentication. This option is similar to option A defined
in the specification of the method _createManagedConnection_ on the
interface _ManagedConnectionFactory_ (refer to
link:conn.htm#50540568_68092[See ManagedConnectionFactory]).

[#50540568_pgfId-999721]##Option B. The resource adapter extracts
_GSSCredential_ instance from the _Subject_ and manages authentication
either through the GSS mechanism or an implementation-specific
mechanism. This option is similar to option B defined in the
specification of the method _createManagedConnection_ on the interface
_ManagedConnectionFactory_ (refer to link:conn.htm#50540568_68092[See
ManagedConnectionFactory]).

[#50540568_pgfId-999725]##Option C. In this case, the _Subject_
parameter is _null_ . The resource adapter extracts security information
from the _ConnectionRequestInfo_ (if there is any) and performs
authentication in an implementation-specific manner. This option is
similar to option C defined in the specification of the method
_createManagedConnection_ on the interface _ManagedConnectionFactory_
(refer to link:conn.htm#50540568_68092[See ManagedConnectionFactory]).

======= [#50540568_pgfId-999729]##

image:conn-71.gif[image]

[#50540568_14574]##Requirements

[#50540568_pgfId-999730]##The following are the requirements defined by
the security contract:

======= [#50540568_pgfId-999731]##Resource Adapter

[#50540568_pgfId-999732]##The following are the requirements defined for
a resource adapter:

[#50540568_pgfId-999733]##The resource adapter must support the security
contract by implementing the method
_ManagedConnectionFactory.createManagedConnection_ .

[#50540568_pgfId-999734]##The resource adapter is not required to
support re-authentication as part of its
_ManagedConnection.getConnection_ method implementation.

[#50540568_pgfId-999735]##If the security information provided by the
component or the container is not adequate to authenticate the caller,
or if the security information is erroneous, the resource adapter must
throw a _SecurityException_ to indicate the error condition.

[#50540568_pgfId-999736]##The resource adapter must specify its support
for the security contract as part of its deployment descriptor or
through metadata annotations. The relevant deployment descriptor
elements are: _authentication-mechanism_ ,
_authentication-mechanism-type_ , _reauthentication-support_ and
_credential-interface_ (refer to link:conn.htm#50540561_80713[See
Requirements] for details). The AuthenticationMechanism annotation
described in link:conn.htm#50540619_63282[See @AuthenticationMechanism]
may also be used for this purpose.

======= [#50540568_pgfId-999740]##Application Server

[#50540568_pgfId-999741]##The following are the requirements defined for
an application server:

[#50540568_pgfId-999742]##The application server must use the method
_ManagedConnectionFactory_ .- _createManagedConnection_ to pass the
security context to the resource adapter during EIS sign-on.

[#50540568_pgfId-999745]##The application server must be capable of
using options A and C as specified in link:conn.htm#50540568_68092[See
ManagedConnectionFactory] for the security contract.

[#50540568_pgfId-999747]##The application server provides an
implementation of the _GSSCredential_ interface if the following
conditions are both true:

[#50540568_pgfId-999748]##The application server supports authentication
mechanisms, specified as _authentication-mechanism-type_ in the
deployment descriptor, other than _BasicPassword_ mechanism. For
example, the application server should implement the _GSSCredential_
interface to support the _kerbv5_ authentication mechanism type.

[#50540568_pgfId-999749]##The application server supports the deployment
of resource adapters that are capable of handling _GSSCredential_ , and
thereby option B as specified in link:conn.htm#50540568_68092[See
ManagedConnectionFactory], as part of the security contract.

[#50540568_pgfId-999753]##The application server must implement the
method _allocateConnection_ in its _ConnectionManager_ implementation.

[#50540568_pgfId-999754]##The application server must configure its use
of the security contract based on the security requirements specified by
the resource adapter in its deployment descriptor. For example, if a
resource adapter specifies that it supports only _BasicPassword_
authentication, the application server should use the security contract
to pass a _PasswordCredential_ instance to the resource adapter.

[#50540568_pgfId-998874]## 

====== [#50540573_pgfId-874]##[#50540573_82805]## 

======= [#50540573_pgfId-5529]##

image:conn-75.gif[image]

[#50540573_95662]##Work Management

image:conn-76.gif[image]

[#50540573_pgfId-999458]##This chapter specifies a contract between an
application server and a resource adapter that allows a resource adapter
to do work, such as monitor network endpoints and call application
components, by submitting _Work_ instances to an application server for
execution. The application server dispatches threads to execute
submitted _Work_ instances. This allows a resource adapter to avoid
creating or managing threads directly, provides a mechanism for a
resource adapter to perform work, allows an application server to
efficiently pool threads, and have more control over its runtime
environment. The resource adapter can control the security context and
transaction context with which _Work_ instances are executed.

======= [#50540573_pgfId-999459]##

image:conn-77.gif[image]

Overview

[#50540573_pgfId-999460]##Some resource adapters merely function as a
passive library that executes in the context of an application thread.
They do not need to create threads explicitly to do their work. But more
sophisticated resource adapters may need threads to function properly.
Such resource adapters may use threads to listen to network endpoints,
process incoming data, communicate with a network peer, do its internal
work, or dispatch calls to application components.

[#50540573_pgfId-999461]##Even though a resource adapter may create Java
threads directly and use them to do its work, an application server may
prevent it from creating threads for efficiency, security, and
manageability reasons. In such situations, a resource adapter requires a
mechanism to obtain threads from an application server to do its work.

[#50540573_pgfId-999462]##The work management contract provides such a
mechanism which allows a resource adapter to submit _Work_ instances to
an application server for execution. The application server dispatches
threads to execute submitted _Work_ instances. This allows a resource
adapter to avoid creating or managing threads directly, provides a
mechanism for the resource adapter to do its work, and allows an
application server more control over its runtime environment.

[#50540573_pgfId-999463]##There are several advantages in allowing an
application server to manage threads instead of a resource adapter:

[#50540573_pgfId-999464]##An application server is optimally designed to
manage system resources such as threads. It may pool threads and reuse
them efficiently across different resource adapters deployed in its
runtime environment.

[#50540573_pgfId-999465]##A resource adapter may create non-daemon
threads that interfere with the orderly shutdown of an application
server. It is desirable for an application server to own all the threads
to exercise more control over its runtime environment.

[#50540573_pgfId-999466]##Since an application server knows the overall
state of its runtime environment, it may make better decisions on
granting threads to a resource adapter, and this leads to better
manageability of its runtime environment.

[#50540573_pgfId-999467]##An application server may need to enforce
control over the runtime behavior of its system components, including
resource adapters. For example, an application server may choose to
intercept operations on a thread object, perform checks, and enforce
correct behavior.

[#50540573_pgfId-999468]##An application server may disallow resource
adapters from creating their own threads based on its security policy
setting, enforced by a security manager.

======= [#50540573_pgfId-999469]##

image:conn-77.gif[image]

Goals

[#50540573_pgfId-999470]##Provide a flexible work execution model to
handle the thread requirements of a resource adapter.

[#50540573_pgfId-999471]##Provide a mechanism for an application server
to pool and reuse threads.

[#50540573_pgfId-999472]##Exercise more control over thread behavior in
a managed environment.

======= [#50540573_pgfId-999473]##

image:conn-77.gif[image]

[#50540573_20119]##Work Management Model

[#50540573_pgfId-999474]##A resource adapter obtains a _WorkManager_
instance from the BootstrapContext instance provided by the application
server during its deployment. The resource adapter may create _Work_
instances to do its work and submit them to the _WorkManager_ along with
an optional execution context for execution.

[#50540573_pgfId-999475]##The application server has a pool of free
threads waiting for a _Work_ instance to be submitted. When a _Work_
instance is submitted, one of the free threads picks up the _Work_
instance, sets up an appropriate execution context and calls the run
method on the _Work_ instance. The application server is free to choose
an appropriate thread to execute the _Work_ instance. There is no
restriction on the number of _Work_ instances submitted by a resource
adapter or when _Work_ instances may be submitted. When the run method
on the _Work_ instance completes, the application server reuses the
thread.

[#50540573_pgfId-999476]##The application server may decide to reclaim
active threads based on load conditions. It calls the release method on
specific _Work_ instances from a separate thread. This serves only as a
hint to the resource adapter to release the active thread executing the
_Work_ instance. The resource adapter should periodically monitor such
hints and do the necessary internal cleanup to avoid any
inconsistencies. It is expected that a resource adapter uses thread
resources carefully and releases them when not in use.

[#50540573_pgfId-999477]##The application server is free to implement
its own thread pooling strategy. However, the application server must
use threads of the same thread priority level to process _Work_
instances submitted by a specific resource adapter. This ensures that
multiple threads processing _Work_ instances from the same resource
adapter have equal claim over CPU resources. This assumption helps the
resource adapter build its own internal priority-based task queue
without having to worry about thread priority levels.

======= [#50540573_pgfId-999478]##Requirements

[#50540573_pgfId-1003534]##The application server must use threads of
the same thread priority level to process _Work_ instances submitted by
a specific resource adapter.

[#50540573_pgfId-1003592]##Work Management Contract (Object Diagram)

image:conn-78.gif[image]

[#50540573_pgfId-999616]##Work Management Contract (Interfaces)

image:conn-79.gif[image]

======= [#50540573_pgfId-1000280]## _javax.resource.spi.work_

[#50540573_pgfId-1000282]##package javax.resource.spi.work;

[#50540573_pgfId-1000284]## 

[#50540573_pgfId-1000567]##import java.lang.Object;

[#50540573_pgfId-1000578]##import java.lang.Runnable;

[#50540573_pgfId-1000586]##import java.lang.Exception;

[#50540573_pgfId-1000423]##import java.lang.Throwable;

[#50540573_pgfId-1000425]##import java.util.EventObject;

[#50540573_pgfId-1000427]##import java.util.EventListener;

[#50540573_pgfId-1000429]## 

[#50540573_pgfId-1000624]##import javax.transaction.xa.Xid;

[#50540573_pgfId-1000433]##import javax.resource.ResourceException;

[#50540573_pgfId-1000435]##import javax.resource.NotSupportedException;

[#50540573_pgfId-1000437]## 

[#50540573_pgfId-1000647]##public interface Work extends Runnable \{

[#50540573_pgfId-1000441]## void release();

[#50540573_pgfId-1000443]##}

[#50540573_pgfId-1000445]##public interface WorkManager \{

[#50540573_pgfId-1000447]## 

[#50540573_pgfId-1000677]## long IMMEDIATE = 0L; // immediate action

[#50540573_pgfId-1000451]## long INDEFINITE = Long.MAX_VALUE; // no time
constraint

[#50540573_pgfId-1000453]## long UNKNOWN = -1; // indicates an unknown
value.

[#50540573_pgfId-1000455]## 

[#50540573_pgfId-1000712]## void doWork(Work work) // startTimeout =
INDEFINITE

[#50540573_pgfId-1000459]## throws WorkException;

[#50540573_pgfId-1000461]## void doWork(Work work, long startTimeout,
ExecutionContext ctx,

[#50540573_pgfId-1000463]## WorkListener lsnr) throws WorkException;

[#50540573_pgfId-1000465]## long startWork(Work work) // startTimeout =
INDEFINITE

[#50540573_pgfId-1000467]## throws WorkException;

[#50540573_pgfId-1000469]## long startWork(Work work, long startTimeout,

[#50540573_pgfId-1000471]## ExecutionContext ctx, WorkListener lsnr)

[#50540573_pgfId-1000473]## throws WorkException;

[#50540573_pgfId-1000475]## void scheduleWork(Work work) // startTimeout
= INDEFINITE

[#50540573_pgfId-1000477]## throws WorkException;

[#50540573_pgfId-1000479]## void scheduleWork(Work work, long
startTimeout,

[#50540573_pgfId-1000481]## ExecutionContext ctx, WorkListener lsnr)

[#50540573_pgfId-1000483]## throws WorkException;

[#50540573_pgfId-1000485]##}

[#50540573_pgfId-1000487]## 

[#50540573_pgfId-1000860]##public interface WorkListener extends
EventListener \{

[#50540573_pgfId-1000491]## void workAccepted(WorkEvent e);

[#50540573_pgfId-1000493]## void workRejected(WorkEvent e);

[#50540573_pgfId-1000495]## void workStarted(WorkEvent e);

[#50540573_pgfId-1000497]## void workCompleted(WorkEvent e);

[#50540573_pgfId-1000499]##}

[#50540573_pgfId-1000501]## 

[#50540573_pgfId-1000922]##public class WorkAdapter implements
WorkListener \{

[#50540573_pgfId-1000505]## public void workAccepted(WorkEvent e) \{}

[#50540573_pgfId-1000507]## public void workRejected(WorkEvent e) \{}

[#50540573_pgfId-1000509]## public void workStarted(WorkEvent e) \{}

[#50540573_pgfId-1000511]## public void workCompleted(WorkEvent e) \{}

[#50540573_pgfId-1000513]##}

[#50540573_pgfId-1000515]## 

[#50540573_pgfId-1000517]##public class WorkEvent extends EventObject \{

[#50540573_pgfId-1000519]## 

[#50540573_pgfId-1000979]## public static final int WORK_ACCEPTED = 1;

[#50540573_pgfId-1000523]## public static final int WORK_REJECTED = 2;

[#50540573_pgfId-1000525]## public static final int WORK_STARTED = 3;

[#50540573_pgfId-1000527]## public static final int WORK_COMPLETED = 4;

[#50540573_pgfId-1000529]## 

[#50540573_pgfId-1001027]## public WorkEvent(Object source, int type,
Work work,

[#50540573_pgfId-1000533]## WorkException exc) \{ ... }

[#50540573_pgfId-1000535]## 

[#50540573_pgfId-1001040]## public WorkEvent(Object source, int type,
Work work,

[#50540573_pgfId-1000539]## WorkException exc, long startDuration) \{
... }

[#50540573_pgfId-1000541]## 

[#50540573_pgfId-1001053]## public int getType() \{ ... }

[#50540573_pgfId-1000545]## public Work getWork() \{ ... }

[#50540573_pgfId-1000547]## public long getStartDuration() \{ ... }

[#50540573_pgfId-1000549]## public WorkException getException() \{ ... }

[#50540573_pgfId-1000551]##}

[#50540573_pgfId-1000553]## 

[#50540573_pgfId-1000555]##public class ExecutionContext \{

[#50540573_pgfId-1000557]## 

[#50540573_pgfId-1001209]## public void setXid(xid) \{ ... }

[#50540573_pgfId-1001102]## public Xid getXid() \{ ... }

[#50540573_pgfId-1001104]## public long getTransactionTimeout() \{ ... }

[#50540573_pgfId-1001106]## public void setTransactionTimeout(long
seconds)

[#50540573_pgfId-1001108]## throws NotSupportedException \{ ... }

[#50540573_pgfId-1001110]##}

[#50540573_pgfId-1001112]## 

[#50540573_pgfId-1001114]##public class WorkException extends
ResourceException \{

[#50540573_pgfId-1001116]## 

[#50540573_pgfId-1001277]## // Indicates an internal error condition.

[#50540573_pgfId-1001120]## public static final String INTERNAL = "-1";

[#50540573_pgfId-1001122]## 

[#50540573_pgfId-1001297]## // Undefined error code.

[#50540573_pgfId-1001126]## public static final String UNDEFINED = "0";

[#50540573_pgfId-1001128]## 

[#50540573_pgfId-1001317]## // Indicates start timeout expiration.

[#50540573_pgfId-1001132]## public static final String START_TIMED_OUT =
"1";

[#50540573_pgfId-1001134]## 

[#50540573_pgfId-1001342]## // Indicates that concurrent work within a
transaction is

[#50540573_pgfId-1001140]## // disallowed.

[#50540573_pgfId-1001142]## public static final String
TX_CONCURRENT_WORK_DISALLOWED = "2";

[#50540573_pgfId-1001365]## // Indicates a failure in recreating the
specified transaction.

[#50540573_pgfId-1001146]## public static final String
TX_RECREATE_FAILED = "3";

[#50540573_pgfId-1001148]## 

[#50540573_pgfId-1001382]## public WorkException() \{ ... }

[#50540573_pgfId-1001152]## public WorkException(String message) \{ ...
}

[#50540573_pgfId-1001154]## public WorkException(Throwable cause) \{ ...
}

[#50540573_pgfId-1001156]## public WorkException(String message,
Throwable cause) \{ ... }

[#50540573_pgfId-1001158]## public String getMessage() \{ ... }

[#50540573_pgfId-1001160]##}

[#50540573_pgfId-1001162]## 

[#50540573_pgfId-1001164]##public class WorkRejectedException extends
WorkException \{

[#50540573_pgfId-1001166]## 

[#50540573_pgfId-1001168]## public WorkRejectedException() \{ ... }

[#50540573_pgfId-1001447]## public WorkRejectedException(String message)
\{ ... }

[#50540573_pgfId-1001172]## public WorkRejectedException(Throwable
cause) \{ ... }

[#50540573_pgfId-1001174]## public WorkRejectedException(String message,
Throwable cause)

[#50540573_pgfId-1001176]## \{ ... }

[#50540573_pgfId-1001178]##}

[#50540573_pgfId-1001180]## 

[#50540573_pgfId-1001485]##public class WorkCompletedException extends
WorkException \{

[#50540573_pgfId-1001184]## 

[#50540573_pgfId-1001186]## public WorkCompletedException() \{ ... }

[#50540573_pgfId-1001188]## public WorkCompletedException(String
message) \{ ... }

[#50540573_pgfId-1001190]## public WorkCompletedException(Throwable
cause) \{ ... }

[#50540573_pgfId-1001192]## public WorkCompletedException(String
message, Throwable cause)

[#50540573_pgfId-1001194]## \{ ... }

[#50540573_pgfId-1001196]##}

[#50540573_pgfId-1001198]## 

[#50540573_pgfId-1001200]##public class RetryableUnavailableException

[#50540573_pgfId-1000561]## extends UnavailableException

[#50540573_pgfId-1000563]## implements
javax.resource.spi.RetryableException \{

[#50540573_pgfId-1000565]##}

[#50540573_pgfId-1000286]## 

[#50540573_pgfId-1000288]## 

[#50540573_pgfId-1000290]## 

======= [#50540573_pgfId-999735]##Work Interface

[#50540573_pgfId-999736]##The _Work_ interface models a _Work_ instance
which is executed by a _WorkManager_ upon submission. This is
implemented by a resource adapter.

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1001561]##public interface Work extends Runnable \{

[#50540573_pgfId-1001562]## void release();

[#50540573_pgfId-1001559]##}

|===

[#50540573_pgfId-999740]##run method: The _WorkManager_ dispatches a
thread that calls the run method to begin execution of a _Work_
instance. The execution completes when the run method returns, with or
without an exception. The _Work_ instance can treat the calling thread
as any Java thread. However, the application server may interpose
java.lang.Thread methods and perform checks. The _WorkManager_ must
catch any exception thrown during Work processing, which includes
execution context setup, and wrap it with a WorkCompletedException set
to an appropriate error code, which indicates the nature of the error
condition.

[#50540573_pgfId-999741]##release method: The _WorkManager_ may call the
release method to request the active _Work_ instance to complete
execution as soon as possible. This would be called on a separate thread
than the one currently executing the _Work_ instance. Since this method
call causes the _Work_ instance to be simultaneously acted upon by
multiple threads, the _Work_ instance implementation must be
thread-safe, and this method must be re-entrant.

[#50540573_pgfId-999742]##The application server thread that calls the
run method in the Work implementation must execute with an unspecified
context if no execution context has been specified, or must execute with
the specified execution context. It must have at least the same level of
security permissions as that of the resource adapter instance. Further,
the application server thread that calls the _run_ and _release_
methods, may or may not have access to a JNDI context.

[#50540573_pgfId-999743]##

image:conn-80.gif[image]

The JNDI context of an accessing application is available to a resource
adapter by way of the thread that uses its connection object. Refer to
the note in link:conn.htm#50540552_29036[See Managed Application
Scenario]. The thread that accesses the connection object could be an
application thread, or, could be a Work object accessing an application
component. In the latter case, the worker thread gains access to the
application’s JNDI context during the method call on the component.

image:conn-80.gif[image]

[#50540573_pgfId-999747]##Both the run and release methods in the Work
implementation may contain synchronization blocks but they must not be
declared as synchronized methods.

======= [#50540573_pgfId-999748]##[#50540573_90493]##WorkManager Interface

[#50540573_pgfId-999749]##The _WorkManager_ interface provides a
mechanism to submit _Work_ instances for execution. This is implemented
by an application server. A _WorkManager_ instance can be obtained by
calling the get _WorkManager_ method of the BootstrapContext instance.
The BootstrapContext instance is provided by the application server when
a resource adapter instance is bootstrapped. The _WorkManager_ instance
is not required to be unique.

[#50540573_pgfId-999750]##This _WorkManager_ facility frees the resource
adapter from having to create Java threads directly to do its work.
Further, this allows efficient pooling of thread resources by the
application server and more control over thread usage.

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1001593]##public interface WorkManager \{

[#50540573_pgfId-1001594]## 

[#50540573_pgfId-1001595]## long IMMEDIATE = 0L; // immediate action (as
soon as possible)

[#50540573_pgfId-1001596]## long INDEFINITE = Long.MAX_VALUE; // no time
constraint

[#50540573_pgfId-1001597]## long UNKNOWN = -1; // unknown start delay
duration

[#50540573_pgfId-1001598]## 

[#50540573_pgfId-1001599]## void doWork(Work work) // startTimeout =
INDEFINITE

[#50540573_pgfId-1001600]## throws WorkException;

[#50540573_pgfId-1001601]## void doWork(Work work, long startTimeout,
ExecutionContext,

[#50540573_pgfId-1001997]## WorkListener) throws WorkException;

[#50540573_pgfId-1001603]## long startWork(Work work) // startTimeout =
INDEFINITE

[#50540573_pgfId-1001604]## throws WorkException;

[#50540573_pgfId-1001605]## long startWork(Work work, long startTimeout,
ExecutionContext,

[#50540573_pgfId-1001606]## WorkListener) throws WorkException;

[#50540573_pgfId-1001607]## void scheduleWork(Work work) // startTimeout
= INDEFINITE

[#50540573_pgfId-1001608]## throws WorkException;

[#50540573_pgfId-1001609]## void scheduleWork(Work work, long
startTimeout,

[#50540573_pgfId-1001941]## ExecutionContext, WorkListener) throws
WorkException;

[#50540573_pgfId-1001591]##}

|===

[#50540573_pgfId-1001635]##doWork method: This call blocks until the
_Work_ instance completes execution. The application server may execute
a _Work_ instance submitted by way of the doWork method using the same
calling thread. This method is useful to do work synchronously. For
nested Work submissions, this provides a first in, first out (FIFO)
execution start ordering and last in, first out (LIFO) execution
completion ordering guarantee.

[#50540573_pgfId-999771]##startWork method: This call blocks until the
_Work_ instance starts execution but not until its completion. This
returns the time elapsed in milliseconds from Work acceptance until the
start of execution. Note, this does not offer real-time guarantees. A
value of -1 ( _WorkManager_ .UNKNOWN) must be returned, if the actual
start delay duration is unknown. This method is equivalent to the
java.lang.Thread.start method. For nested Work submissions, this
provides a FIFO execution start ordering guarantee, but no execution
completion ordering guarantee.

[#50540573_pgfId-999772]##scheduleWork method: This call does not block
and returns immediately once a _Work_ instance has been accepted for
processing. This is useful for doing work asynchronously. This does not
provide any execution start or execution completion ordering guarantee
for nested Work submissions.

[#50540573_pgfId-999773]##The optional startTimeout parameter specifies
a time duration in milliseconds within which the execution of the _Work_
instance must start. Otherwise, the _Work_ instance is rejected with a
_WorkRejectedException_ set to an appropriate error code
(WorkException.START_TIMED_OUT). Note, this does not offer real-time
guarantees. The _WorkManager_ may also indicate that the failure to
accept the _Work_ submission is transient and that the resource adapter
may retry the _Work_ submission by throwing the
_RetryableWorkRejectedException_ .

[#50540573_pgfId-999774]##The optional ExecutionContext parameter
provides an execution context with which the _Work_ instance must be
executed. The execution context is represented by an ExecutionContext
instance containing context information. The resource adapter is
responsible for populating the ExecutionContext instance with an
appropriate execution context. The default implementation provides a
null context, that is, an ExecutionContext instance with null values. A
_Work_ instance with null context executes with an unspecified context.

[#50540573_pgfId-999775]##The optional WorkListener parameter provides a
callback event listener object which is notified when the various Work
processing events (work accepted, work rejected, work started, work
completed) occur. Refer to link:conn.htm#50540573_25622[See WorkListener
Interface and WorkEvent Class].

[#50540573_pgfId-999779]##The various stages in Work processing are:

======= [#50540573_pgfId-999780]##Work Submit

[#50540573_pgfId-999781]##A _Work_ instance is being submitted for
execution. The _Work_ instance may either be accepted or rejected with a
_WorkRejectedException_ set to an error code. A submitted _Work_
instance, irrespective of the mode of submission: doWork method,
startWork method or scheduleWork method, does not automatically inherit
the submitter’s execution context. It executes with an unspecified
execution context if none is specified, or it executes with the
specified context.

[#50540573_pgfId-999821]##Work Processing Stages and their Outcomes

image:conn-81.gif[image]

======= [#50540573_pgfId-999822]##Work Accepted

[#50540573_pgfId-999823]##The submitted _Work_ instance has been
accepted for further processing. The accepted _Work_ instance may either
start execution or may be rejected again with a _WorkRejectedException_
set to an appropriate error code.

[#50540573_pgfId-999824]##There is no guarantee on when the execution
starts unless a start timeout duration is specified. When a start
timeout is specified, the Work execution must be started within the
specified duration, failing which a _WorkRejectedException_ set to an
error code WorkException.TIMED_OUT is thrown. This is not a real-time
guarantee. The start delay duration is measured from the moment a _Work_
instance is accepted for processing.

======= [#50540573_pgfId-999825]##Work Rejected

[#50540573_pgfId-999826]##The _Work_ instance has been rejected. The
_Work_ instance may be rejected during Work submittal or after the
_Work_ instance has been accepted, but before _Work_ instance starts
execution. The rejection may be due to internal factors or start timeout
expiration. A _WorkRejectedException_ with an appropriate error code
which indicates the nature of the error condition, is thrown in both
cases.

[#50540573_pgfId-999827]##Since the scheduleWork method returns after a
_Work_ instance has been accepted and does not block until a _Work_
instance starts, a callback event listener may be used to receive the
_WorkRejectedException_ . See link:conn.htm#50540573_25622[See
WorkListener Interface and WorkEvent Class] for details.

======= [#50540573_pgfId-999831]##[#50540573_27896]##Work Started

[#50540573_pgfId-999832]##The execution of the _Work_ instance has
started. This means a thread has been allocated for Work execution. But
this does not guarantee that the allocated thread has been scheduled to
run on a CPU resource. Once execution is started, the allocated thread
sets up an appropriate execution context and calls the run method on the
_Work_ instance. Note, any exception thrown during execution context
setup or while executing the run method on the _Work_ instance leads to
processing completion.

======= [#50540573_pgfId-999833]##Work Completed

[#50540573_pgfId-999834]##The execution of the _Work_ instance has been
completed. The execution may complete with or without an exception. The
_WorkManager_ must catch any exception thrown during Work processing,
which includes execution context setup, and wrap it with a
WorkCompletedException set to an appropriate error code which indicates
the nature of the error condition.

[#50540573_pgfId-999835]##Since the scheduleWork method and startWork
method do not block until execution completion, a callback event
listener may be used to receive the WorkCompletedException. See
link:conn.htm#50540573_25622[See WorkListener Interface and WorkEvent
Class] for details).

======= [#50540573_pgfId-999839]##Requirements

[#50540573_pgfId-999840]##The application server must implement the
_WorkManager_ interface.

[#50540573_pgfId-999841]##The application server must allow nested Work
submissions.

[#50540573_pgfId-999842]##Both the run and release methods must be
declared as non-synchronized methods.

[#50540573_pgfId-999843]##When the application server is unable to
recreate an execution context if it is specified for the submitted
_Work_ instance, it must throw a WorkCompletedException set to an
appropriate error code.

[#50540573_pgfId-999844]##The _WorkManager_ must catch any exception
thrown during Work processing, which includes execution context setup
and wrap it with a WorkCompletedException set to an appropriate error
code.

[#50540573_pgfId-999845]##The application server must execute a
submitted _Work_ instance with an unspecified context if no execution
context has been specified, or must execute it with the specified
execution context. That is, a submitted _Work_ instance must never
inherit the submitter’s execution context when no execution context is
specified.

[#50540573_pgfId-999846]##If the application server is unable to start
Work execution when a start timeout is specified for the submitted
_Work_ instance, it must reject the _Work_ instance with a
_WorkRejectedException_ set to WorkException.START_TIMED_OUT.

[#50540573_pgfId-999847]##The application server must use a value of -1
( _WorkManager_ .UNKNOWN) to indicate an unknown Work start delay
duration.

[#50540573_pgfId-999878]##Blocking Durations of Various Work Submissions

image:conn-82.gif[image]

[#50540573_pgfId-1003083]##Work Submission - Blocking Behavior (Sequence
Diagram)

image:conn-83.gif[image]

======= [#50540573_pgfId-999945]##[#50540573_25622]##WorkListener Interface and WorkEvent Class

[#50540573_pgfId-999946]##The WorkListener interface is optionally
implemented by the resource adapter. The WorkEvent and WorkAdapter
classes are defined by the Connector 1.5 specification. The WorkListener
instance is supplied to the _WorkManager_ during Work submittal and
provides an event listener callback mechanism in order to be notified
when the various Work processing events, such as work accepted, work
rejected, work started, and work completed, occur. When a WorkListener
is provided by the resource adapter, the application server must send
event notifications to the WorkListener. These notifications may occur
from any thread with an unspecified context.

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1001716]##public interface WorkListener extends
EventListener \{

[#50540573_pgfId-1001717]## void workAccepted(workEvent);

[#50540573_pgfId-1001718]## void workRejected(WorkEvent);

[#50540573_pgfId-1001719]## void workStarted(WorkEvent);

[#50540573_pgfId-1001720]## void workCompleted(WorkEvent);

[#50540573_pgfId-1001714]##}

|===

[#50540573_pgfId-999953]## 

[#50540573_pgfId-1003135]##The WorkEvent class and WorkAdapter abstract
class:

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1001736]##public class WorkEvent extends EventObject \{

[#50540573_pgfId-1001737]## 

[#50540573_pgfId-1001738]## public static final int WORK_ACCEPTED = 1;

[#50540573_pgfId-1001739]## public static final int WORK_REJECTED = 2;

[#50540573_pgfId-1001740]## public static final int WORK_STARTED = 3;

[#50540573_pgfId-1001741]## public static final int WORK_COMPLETED = 4;

[#50540573_pgfId-1001742]## 

[#50540573_pgfId-1001743]## public WorkEvent(Object source, int type,
Work work,

[#50540573_pgfId-1001744]## WorkException exc) \{ ... }

[#50540573_pgfId-1001745]##

[#50540573_pgfId-1001746]## public WorkEvent(Object source, int type,
Work work,

[#50540573_pgfId-1001747]## WorkException exc, long startDuration) \{
... }

[#50540573_pgfId-1001748]## 

[#50540573_pgfId-1001749]## public int getType() \{ ... }

[#50540573_pgfId-1001750]## public Work getWork() \{ ... }

[#50540573_pgfId-1001751]## public long getStartDuration() \{ ... }

[#50540573_pgfId-1001752]## public WorkException getException() \{ ... }

[#50540573_pgfId-1001753]##}

[#50540573_pgfId-1001754]## 

[#50540573_pgfId-1001755]##public abstract class WorkAdapter implements
WorkListener \{

[#50540573_pgfId-1001756]## public void workAccepted(WorkEvent e) \{}

[#50540573_pgfId-1001757]## public void workRejected(WorkEvent e) \{}

[#50540573_pgfId-1001758]## public void workStarted(WorkEvent e) \{}

[#50540573_pgfId-1001759]## public void workCompleted(WorkEvent e) \{}

[#50540573_pgfId-1001734]##}

[#50540573_pgfId-1001765]## 

|===

[#50540573_pgfId-999979]##The WorkEvent instance provides the following
information:

[#50540573_pgfId-999980]##The event type.

[#50540573_pgfId-999981]##The source object, that is, the _Work_
instance, on which the event initially occurred.

[#50540573_pgfId-999982]##A handle to the associated _Work_ instance.

[#50540573_pgfId-999983]##An optional start delay duration in
millisecond.

[#50540573_pgfId-999984]##Any exceptions that were thrown during Work
processing. Possible exceptions are _WorkRejectedException_ , and
WorkCompletedException.

[#50540573_pgfId-999985]##The type of the event determines the specific
contents of a WorkEvent.

[#50540573_pgfId-999986]##The WorkAdapter class is provided as a
convenience for easily creating WorkListener instances by extending this
class and overriding only those methods of interest. This is a standard
event listener pattern used in Java APIs.

======= [#50540573_pgfId-999987]##Requirements

[#50540573_pgfId-999988]##The WorkListener instance must not make any
thread assumptions and must be thread-safe. That is, a notification can
occur from any arbitrary thread with an unspecified context.

[#50540573_pgfId-999989]##The application server must send Work events
to the WorkListener instance, if any, provided by the resource adapter.

[#50540573_pgfId-999990]##The WorkListener implementation must not make
any assumptions on the ordering of notifications.

[#50540573_pgfId-999991]##The application server must use a value of -1
( _WorkManager_ .UNKNOWN) to indicate an unknown Work start delay
duration.

======= [#50540573_pgfId-999992]##[#50540573_43394]##ExecutionContext Class

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1001809]##public class ExecutionContext \{

[#50540573_pgfId-1001810]## 

[#50540573_pgfId-1001811]## public void setXid(xid) \{ ... }

[#50540573_pgfId-1001812]## public Xid getXid() \{ ... }

[#50540573_pgfId-1001813]## public long getTransactionTimeout() \{ ... }

[#50540573_pgfId-1001814]## public void setTransactionTimeout(long
seconds)

[#50540573_pgfId-1001815]## throws NotSupportedException \{ ... }

[#50540573_pgfId-1001807]##}

|===

[#50540573_pgfId-1000001]##The ExecutionContext class allows a resource
adapter to specify an execution context, such as a transaction context,
with which the _Work_ instance must be executed. The resource adapter is
responsible for populating the ExecutionContext instance with an
appropriate execution context. The default implementation provides a
null context.

[#50540573_pgfId-1000002]##It is better for ExecutionContext to be a
class rather than an interface because:

[#50540573_pgfId-1000003]##There is no need for a resource adapter to
implement this class. It is only required to implement the context
information, like transaction context.

[#50540573_pgfId-1000004]##The resource adapter code does not have to
change when the ExecutionContext class evolves. For example, more
context types could be added to the ExecutionContext class in the future
without forcing resource adapter implementations to change.

[#50540573_pgfId-1003143]## 

[#50540573_pgfId-1000065]##Work Submission - Callback Mechanism
(Sequence Diagram)

image:conn-84.gif[image]

======= [#50540573_pgfId-1000066]##Resource Adapter Thread Usage Recommendations

[#50540573_pgfId-1000067]##Resource adapters are strongly recommended to
use the work management contract to do work and interact with the
application server only from within a _Work_ instance, instead of using
Java threads directly. This allows the resource adapter to be maximally
portable across multiple deployment environments with different security
settings.

[#50540573_pgfId-1000068]##Resource adapters are allowed to create Java
threads directly as permitted by the server security settings.

[#50540573_pgfId-1000069]##If a resource adapter chooses to use Java
threads directly, it is recommended they use the threads as daemon
threads, as it does not interfere with an orderly shutdown of the
server.

======= [#50540573_pgfId-1000071]##[#50540573_60565]##Periodic Execution of Work Instances

[#50540573_pgfId-1000072]##A resource adapter may need to periodically
execute _Work_ instances. It may use the java.util.Timer facility
available in the Java platform or may use the BootstrapContext instance
provided by the application server to obtain a Timer instance.

[#50540573_pgfId-1002171]##A resource adapter may not be able to
directly create a Timer instance, if it does not have adequate runtime
permissions to create threads. This is because the Timer instance starts
a background thread. In such a case, the resource adapter can instead
use the BootstrapContext instance to obtain a Timer instance from the
application server.

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1001859]##package javax.resource.spi;

[#50540573_pgfId-1001860]## 

[#50540573_pgfId-1001861]##import java.util.Timer;

[#50540573_pgfId-1001862]##import
javax.resource.spi.UnavailableException;

[#50540573_pgfId-1001863]## 

[#50540573_pgfId-1001864]##public interface BootstrapContext \{

[#50540573_pgfId-1001865]## ... // other methods

[#50540573_pgfId-1001866]## Timer createTimer() // returns a new or an
unshared instance

[#50540573_pgfId-1001867]## throws UnavailableException;

[#50540573_pgfId-1001857]##}

|===

[#50540573_pgfId-1000084]##When the createTimer method of the
BootstrapContext instance is invoked, the application server provides a
new Timer instance or an unshared instance (that is, no one else has a
reference) with an empty task queue. The application server must throw
an UnavailableException if a Timer instance is unavailable; the resource
adapter may retry later. The application server must throw an
java.lang.UnsupportedOperationException, if it does not support the
Timer service.

[#50540573_pgfId-1000085]##Sample code to illustrate periodic Work
executions using a Timer instance:

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1001883]##package com.xyz.adapter;

[#50540573_pgfId-1001884]## 

[#50540573_pgfId-1001885]##import java.util.*;

[#50540573_pgfId-1001886]##import javax.resource.spi.*;

[#50540573_pgfId-1001887]##import javax.resource.spi.work.WorkManager;

[#50540573_pgfId-1001888]## 

[#50540573_pgfId-1001889]##// ResourceAdapter JavaBean

[#50540573_pgfId-1001890]##public class MyResourceAdapterImpl implements
ResourceAdapter \{

[#50540573_pgfId-1001891]## BootstrapContext bootstrapCtx = null;

[#50540573_pgfId-1001892]## public void start(BootstrapContext ctx) \{

[#50540573_pgfId-1001893]## bootstrapCtx = ctx;

[#50540573_pgfId-1001894]## ... // other operations

[#50540573_pgfId-1001895]## }

[#50540573_pgfId-1001896]## ... // other methods

[#50540573_pgfId-1001897]##}

[#50540573_pgfId-1001898]## 

[#50540573_pgfId-1001899]##\{ // sample resource adapter code snippet to
show Timer usage

[#50540573_pgfId-1001900]## MyResourceAdapterImpl myRA = ... // get
ResourceAdapter JavaBean

[#50540573_pgfId-1001901]## Timer timer =
myRA.bootstrapCtx.createTimer(); // get a Timer instance

[#50540573_pgfId-1001902]## WorkManager workManager =
myRA.bootstrapCtx.getWorkManager();

[#50540573_pgfId-1001903]## 

[#50540573_pgfId-1001904]## timer.schedule(

[#50540573_pgfId-1001905]## new TimerTask () \{

[#50540573_pgfId-1001906]## public void run() \{

[#50540573_pgfId-1001907]## try \{

[#50540573_pgfId-1001908]## workManager.scheduleWork(new MyWork());

[#50540573_pgfId-1001909]## } catch (WorkException we) \{
we.printStackTrace(); }

[#50540573_pgfId-1001910]## }

[#50540573_pgfId-1001911]## }, 0, 1000); // one second interval

[#50540573_pgfId-1001881]##}

|===

======= [#50540573_pgfId-1000116]##Illustration: Using a Work Instance to Listen on Multiple Network Endpoints

[#50540573_pgfId-1000117]##J2SE Version 1.4 provides the java.nio
package that includes a multiplexed, non-blocking I/O facility. Using
the java.nio package it is possible for a single thread, such as a
_Work_ instance, to listen on multiple network endpoints or ports. Prior
to the java.nio facility each network endpoint needed a separate thread
to listen to incoming data.

======= [#50540573_pgfId-1002668]##Work Management in a Non-Managed Environment

[#50540573_pgfId-1002248]##Although the work management contract is
primarily intended for a managed environment, it may still be used in a
non-managed environment provided the application that bootstraps a
resource adapter instance is capable of functioning as a _WorkManager_ .

[#50540573_pgfId-1002697]##A resource adapter is free to create Java
threads as permitted by the security policy settings of the non-managed
environment.

======= [#50540573_pgfId-1002705]##[#50540573_69049]##Resource Adapter association

[#50540573_pgfId-1002706]##A _Work_ or _DistributableWork_ instance (see
link:conn.htm#50540573_61525[See Distributed Work processing]) may
implement the _ResourceAdapterAssociation_ interface. The
_ResourceAdapterAssociation_ interface specifies the methods to
associate the _Work_ instance with a _ResourceAdapter_ JavaBean.

[#50540573_pgfId-1002707]##The application server must establish an
association between the resource adapter instance and the _Work_
instance before the exection of the _Work_ instance has been started
(Refer link:conn.htm#50540573_27896[See Work Started]).

[#50540573_pgfId-1002703]##When a _Work_ instance has been distributed
to a new _WorkManager_ instance (for example, as in
link:conn.htm#50540573_61525[See Distributed Work processing]), the
resource adapter instance that is associated with the _Work_ instance
must be available in the _WorkManager_ instance that the _Work_ has been
distributed to. This allows the _Work_ instance to use application
server facilities like _WorkManager, MessageEndpointFactory_ etc that
are specific to the instance that the _Work_ has been distributed to.

======= [#50540573_pgfId-1002699]##[#50540573_61525]##Distributed Work processing

[#50540573_pgfId-1002282]##An application server instance’s
_WorkManager_ may choose to distribute a _Work_ instance submitted by a
resource adapter to another _WorkManager_ residing in a different
application server instance. Distribution of _Work_ processing to
different instances may be done for achieving optimal utilization of
system resources or for providing better response times. These
_WorkManager_ instances may span across multiple Java virtual machines
running on the same host or different hosts.

[#50540573_pgfId-1002658]##Neither the application server nor the
resource adapter must support distributed Work processing.

======= [#50540573_pgfId-1002345]##DistributableWork Interface

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1002744]##package javax.resource.spi.work;

[#50540573_pgfId-1002754]## 

[#50540573_pgfId-1002759]##import java.io.Serializable;

[#50540573_pgfId-1002760]## 

[#50540573_pgfId-1002779]##//Marker interface to indicate to the
WorkManager that the

[#50540573_pgfId-1002782]##//Work may be distributed to a different
WorkManager for execution

[#50540573_pgfId-1002769]##public interface DistributableWork extends
Work, Serializable \{

[#50540573_pgfId-1002783]## 

[#50540573_pgfId-1002770]##}

|===

[#50540573_pgfId-1002786]## _Work_ instances that may be distributed by
a _WorkManager_ must implement the _DistributableWork_ interface. A
_Work_ instance that implements the _DistributableWork_ interface must
not have any reference to local resource-adapter state. This allows the
_WorkManager_ to delegate processing of the _Work_ instance to a
different _WorkManager_ instance that is running in a different Java
virtual machine.

[#50540573_pgfId-1002522]##All artifacts that may be coupled to the
application server instance where the _Work_ is executed in, must be
obtained through the _ResourceAdapterAssociation_ mechanism discussed in
link:conn.htm#50540573_69049[See Resource Adapter association].

======= [#50540573_pgfId-1002800]##DistributableWorkManager Interface

[width="100%",cols="100%",]
|===
a|
[#50540573_pgfId-1002808]##package javax.resource.spi.work;

[#50540573_pgfId-1002843]## 

[#50540573_pgfId-1002853]##//Marker interface to indicate that the
WorkManager supports the

[#50540573_pgfId-1002854]##//distributed processing of Work instances

[#50540573_pgfId-1002844]##public interface DistributableWorkManager
extends WorkManager \{

[#50540573_pgfId-1002845]##}

[#50540573_pgfId-1002816]## 

|===

[#50540573_pgfId-1002802]##A _WorkManager_ implementation that supports
the submission of _DistributableWork_ instances must implement the
_DistributableWorkManager_ marker interface. This allows the resource
adapter to programmatically determine whether the _WorkManager_ supports
the submission of _DistributableWork_ instances.

[#50540573_pgfId-1002451]##When a _DistributableWork_ instance is
submitted to _DistributableWorkManager_ , the _WorkManager_ may finally
execute the _Work_ instance in the context of another _WorkManager_
instance. This _WorkManager_ instance may reside on a different host,
process or JVM instance. This specification does not define the
communication protocol or the mechanics of how a _Work_ instance is
transmitted and handled between _DistributableWorkManager_ instances.

[#50540573_pgfId-1003595]##The application server that supports
_DistributableWorkManager_ along with inputs from the administrator and
deployer _,_ must ensure that the environment made available to the
_DistributableWork_ instance is consistent irrespective of whether the
_DistributableWork_ instance is executed in a local or remote manner.

======= [#50540573_pgfId-1003597]##[#50540573_93243]##DistributableWork Submission and Processing

[#50540573_pgfId-1003981]##A resource adapter submits the
_DistributableWork_ instance to the _DistributableWorkManager_ through
the _WorkManager_ submission methods specified in
link:conn.htm#50540573_90493[See WorkManager Interface]. A
_DistributableWorkManager_ may then distribute the submitted
_DistributableWork_ instance to another _WorkManager_ instance for
processing as shown in the following figure.

[#50540573_pgfId-1003985]##When a _DistributableWork_ instance is
submitted to a _WorkManager_ that does not implement
_DistributableWorkManager_ interface, the _WorkManager_ must execute the
_Work_ locally.

[#50540573_pgfId-1002538]##Although it is recommended for a
_DistributableWorkManager_ to process all _Work_ submissions in a
distributed fashion, the _DistributableWorkManager_ may execute a _Work_
submitted through _doWork()_ locally. When a _WorkListener_ is provided
by the resource adapter during _Work_ submission, the application server
must send event notifications to the _WorkListener_ . (see
link:conn.htm#50540573_25622[See WorkListener Interface and WorkEvent
Class]).

[#50540573_pgfId-1002628]##A _DistributableWork_ instance may also use
the mechanisms described in Generic Work Context and Security Inflow
(see link:conn.htm#50540613_67821[See Generic Work Context] and
link:conn.htm#50540614_88146[See Security Inflow]) chapters to control
the execution context of the _Work_ instance. A
_DistributableWorkManager_ must support the requirements in
link:conn.htm#50540613_67821[See Generic Work Context] and
link:conn.htm#50540614_88146[See Security Inflow].

[#50540573_pgfId-1003495]## 

[#50540573_pgfId-1003349]##[#50540573_51272]##Distributed Work
submission and processing (Sequence Diagram)

[#50540573_pgfId-1003487]## 

image:conn-85.gif[image]

====== [#50540613_pgfId-998511]##[#50540613_11076]## 

===== [#50540613_pgfId-998512]## 

======= [#50540613_pgfId-998513]##

image:conn-86.gif[image]

[#50540613_67821]##Generic Work Context

image:conn-87.gif[image]

[#50540613_pgfId-998517]##This chapter specifies a contract between an
application server and a resource adapter that enables a resource
adapter to control the execution context of a _Work_ instance that it
has submitted to the application server for execution. To propagate an
imported context to the application server, the resource adapter submits
a _Work_ instance that implements the _WorkContextProvider_ interface.
The application server then establishes the provided context as the
execution context of the _Work_ instance during its execution. The
_WorkContext_ model is designed to be generic so that a resource adapter
can flow in different types of contextual information apart from the
standard transaction and security _WorkContexts_ defined in this
chapter. For more information about _Work_ management, see
link:conn.htm#50540573_95662[See Work Management].

======= [#50540613_pgfId-998521]##

image:conn-88.gif[image]

Overview

[#50540613_pgfId-998522]##The Work Management contract between the
application server and a resource adapter enables a resource adapter to
do a task, such as communicating with the Enterprise Information System
(EIS) or delivering messages, by delivering _Work_ instances for
execution. The Transaction Inflow contract builds upon the interfaces
defined in the Work Management contract as described in Chapter 15,
“Transaction Inflow“. The contract enables the resource adapter to
propagate an imported transaction from the EIS to an application server,
so that the application server and subsequent participants can do work
as part of the imported transaction.

[#50540613_pgfId-998525]##The Generic Work Context Contract provides the
mechanism for a resource adapter to augment the runtime context of a
_Work_ instance with additional contextual information flown-in from the
EIS. This contract enables a resource adapter to control, in a more
flexible manner, the contexts in which the _Work_ instances it submits
are executed by the application server’s _WorkManager_ .

[#50540613_pgfId-998530]##A Generic Work context mechanism also enables
an application server to support new message inflow and delivery
schemes. It also provides a richer contextual _Work_ execution
environment to the resource adapter while still maintaining control over
concurrent behavior in a managed environment.

[#50540613_pgfId-1004048]##Note that the application server is required
to support the standard context types listed in
link:conn.htm#50540613_50425[See Standard and Custom Work Contexts].

======= [#50540613_pgfId-1004052]##

image:conn-88.gif[image]

Goals

[#50540613_pgfId-998535]##The goals of the Generic Work Context Contract
are:

[#50540613_pgfId-998537]##To provide a standard mechanism for a resource
adapter to propagate an imported context to an application server.

[#50540613_pgfId-998539]##To make the existing execution context
mechanisms extensible and to provide better metadata to both the
application server and the resource adapter of new work context types.

[#50540613_pgfId-998540]##To design the work context contracts to be
independent of the Connectors Work Management Contract so as to enable
the resource adapter to use such contexts in other asynchronous task
execution approaches. For more information on _Work_ Management, see
Chapter 10, “Work Management“.

[#50540613_pgfId-998541]##To standardize the most commonly used work
contexts, such as Transaction Work Context and Security Work Context.
See link:conn.htm#50540614_88146[See Security Inflow].

[#50540613_pgfId-998542]##To be backward compatible with the existing
_Work_ submission and context assignment model described in
link:conn.htm#50540573_95662[See Work Management].

[#50540613_pgfId-998543]##To enable an application server to support new
message inflow and delivery schemes and provide a richer contextual
_Work_ execution environment to the resource adapter while still
maintaining control over concurrent behavior in a managed environment.

======= [#50540613_pgfId-998555]##

image:conn-88.gif[image]

[#50540613_53525]##Generic Work Context Model

[#50540613_pgfId-998556]##In this chapter all references to
_WorkManager_ should be read as references applicable to the Connector
_WorkManager_ . See link:conn.htm#50540573_90493[See WorkManager
Interface].

[#50540613_pgfId-998559]##When a _Work_ is submitted by a resource
adapter to a _WorkManager_ to be executed asynchronously, one of the
free threads picks up the _Work_ instance, sets up an appropriate
execution context and then calls the run method on the _Work_ instance.
See link:conn.htm#50540573_20119[See Work Management Model] for more
information on how a _Work_ instance is handled by a _WorkManager_ .

[#50540613_pgfId-1000962]##A resource adapter submits a _Work_ instance
that implements _WorkContextProvider_ . The _WorkContextProvider_
interface indicates to the application server’s _WorkManager_ that the
resource adapter requires additional work contexts to be established in
the execution context during _Work_ execution.

[#50540613_pgfId-1000963]##When one of the free threads from the
application server’s thread pool picks up the _Work_ instance, if the
_Work_ instance implements _WorkContextProvider_ interface, it iterates
through the collection of _WorkContext_ s provided by the _Work_
instance and establishes the contextual information provided by the
_WorkContext_ s as the execution context of the _Work_ instance. It then
calls the _run_ method to execute the _Work_ instance.

[#50540613_pgfId-998565]##The application server is free to use the
_WorkContext_ during context assignment in any order. The resource
adapter must not assume an order in the handling of the _WorkContext_ s.

======= [#50540613_pgfId-998567]##[#50540613_50425]##Standard and Custom Work Contexts

[#50540613_pgfId-998568]##Certain EIS integration use cases require the
propagation of other contextual information, apart from Transactions,
from the EIS to the application server. For example, a resource adapter
might require the propagation of security context information from the
EIS to the application server during inbound message delivery. The
resource adapter might also require the execution of _Work_ instances in
the context of the "flown-in" Security information. Other use cases that
require the flowing in of contextual information are:

[#50540613_pgfId-998574]##Scenarios where an EIS requires a
“conversational” programming model with a _MessageEndpoint_ and the
resource adapter is required to propagate "correlation" information to
the _MessageEndpoint_ container to enable the application server to set
up or re-create the necessary state in the _MessageEndpoint_ to maintain
conversational session state.

[#50540613_pgfId-998577]##Propagating Availability or Quality-of-Service
(QoS) related hints or metadata from the EIS so that the application
server _WorkManager_ can execute the _Work_ instance by leveraging those
hints.

[#50540613_pgfId-998587]##Transaction and Security work contexts are
standardized by means of the _TransactionContext_ and _SecurityContext_
interfaces. The propagation of Quality-of-Service hints to a
_WorkManager_ for the execution of a _Work_ instance is standardized
through the _HintsContext_ class. The application server must support
these three work contexts. A portable resource adapter can assume an
application server’s support for these three work contexts defined in
the specification. The specification may define additional context types
in a future version of the specification.

[#50540613_pgfId-998590]##An application server or a resource adapter
may define and use custom _WorkContext_ s. However a resource adapter
using these custom _WorkContext_ s is non-portable and might not
function as expected in other application servers that do not implement
the custom _WorkContext_ . See link:conn.htm#50540613_27946[See Checking
Support for a WorkContext Type] for a discussion about how resource
adapters can check with the _WorkContext_ s supported by the application
server.

======= [#50540613_pgfId-998597]##Requirements

[#50540613_pgfId-998593]##The application server must support the
establishment of _TransactionContext_ , _SecurityContext_ , and
_HintsContext_ contexts.

[#50540613_pgfId-1000616]##The application server must support the
_WorkContext_ interface. If a resource adapter submits a _Work_ instance
implementing the _WorkContextProvider_ interface, the application server
must use the _WorkContext_ s provided by the resource adapter to assign
the execution context for that _Work_ instance.

[#50540613_pgfId-1001856]## 

[#50540613_pgfId-1001853]##Generic Work Context (Object Diagram)

image:conn-89.gif[image]

[#50540613_pgfId-999134]##Generic Work Context (Interfaces)

image:conn-90.gif[image]

[#50540613_pgfId-999462]## 

[#50540613_pgfId-1003927]## 

[#50540613_pgfId-1003928]## 

======= [#50540613_pgfId-999459]## _javax.resource.spi.work_

[#50540613_pgfId-999193]## package javax.resource.spi.work;

[#50540613_pgfId-1003913]## 

[#50540613_pgfId-1003966]## public interface WorkContextProvider extends
Serializable \{

[#50540613_pgfId-999196]## List<WorkContext> getWorkContexts();

[#50540613_pgfId-999245]## }

[#50540613_pgfId-999198]## 

[#50540613_pgfId-999199]## public interface WorkContext extends
Serializable\{

[#50540613_pgfId-999200]## String getName();

[#50540613_pgfId-999201]## String getDescription();

[#50540613_pgfId-999202]## }

[#50540613_pgfId-1003926]## 

[#50540613_pgfId-999250]## public class TransactionContext extends
ExecutionContext

[#50540613_pgfId-999205]## implements WorkContext \{

[#50540613_pgfId-999206]## public TransactionContext(Xid xid) \{ ... }

[#50540613_pgfId-1001386]## public TransactionContext( Xid xid,

[#50540613_pgfId-1001408]## long timeout)\{ ... }

[#50540613_pgfId-1001870]## public String getName()\{

[#50540613_pgfId-1001871]## return "TransactionContext";

[#50540613_pgfId-1001868]## }

[#50540613_pgfId-999207]## ... other methods

[#50540613_pgfId-999209]## }

[#50540613_pgfId-999210]## 

[#50540613_pgfId-999211]## public abstract class SecurityContext
implements WorkContext \{

[#50540613_pgfId-999212]## public String getName()\{

[#50540613_pgfId-999213]## return "SecurityContext";

[#50540613_pgfId-999214]## }

[#50540613_pgfId-999215]## .... other SecurityContext related methods

[#50540613_pgfId-999216]## }

[#50540613_pgfId-1003924]## 

[#50540613_pgfId-999218]## public class WorkContextErrorCodes \{

[#50540613_pgfId-999219]## // Indicates an unsuppored context type

[#50540613_pgfId-999220]## public static final String

[#50540613_pgfId-999262]## UNSUPPORTED_CONTEXT_TYPE = "1";

[#50540613_pgfId-999221]## 

[#50540613_pgfId-999222]## // Indicates more than one contexts

[#50540613_pgfId-999267]## // of the same type passed in for Work

[#50540613_pgfId-999223]## public static final String DUPLICATE_CONTEXTS
= "2";

[#50540613_pgfId-999224]## 

[#50540613_pgfId-999225]## // Indicates failure in recreating the
WorkContext

[#50540613_pgfId-999226]## public static final String
CONTEXT_SETUP_FAILED = "3";

[#50540613_pgfId-999227]## 

[#50540613_pgfId-999228]## // Indicates that the container cannot
support

[#50540613_pgfId-999272]## // recreating the context

[#50540613_pgfId-999229]## public static final String

[#50540613_pgfId-999273]## CONTEXT_SETUP_UNSUPPORTED = "4";

[#50540613_pgfId-999230]## }

[#50540613_pgfId-999231]## 

[#50540613_pgfId-1003962]## 

[#50540613_pgfId-1003923]## public interface
WorkContextLifecycleListener \{

[#50540613_pgfId-999233]## // indicates that the WorkContext was set
successfully

[#50540613_pgfId-999234]## void contextSetupComplete();

[#50540613_pgfId-999235]## 

[#50540613_pgfId-999236]## // Indicates that the WorkContext setup
failed

[#50540613_pgfId-999237]## void contextSetupFailed(String errorCode);

[#50540613_pgfId-999238]## }

======= [#50540613_pgfId-999275]##

image:conn-88.gif[image]

[#50540613_32410]##WorkContextProvider and WorkContext Interface

[#50540613_pgfId-1001963]##The _WorkContext_ interface illustrates
execution context information of a particular type. This specification
standardizes two _WorkContext_ types: the _TransactionContext_ class and
_SecurityContext_ class, to represent the transaction and security
context with which the _Work_ instance must be executed respectively.
For more information on these classes, see
link:conn.htm#50540613_42449[See TransactionContext Class] and
link:conn.htm#50540614_83354[See SecurityContext Class].

[#50540613_pgfId-1003700]##The _getName()_ and _getDescription()_
methods may be used by the resource adapter developer and the
application server for debugging purposes.

[#50540613_pgfId-1001970]## 

[#50540613_pgfId-1001971]## package javax.resource.spi.work;

[#50540613_pgfId-1003996]## public interface WorkContext extends
Serializable\{

[#50540613_pgfId-1003997]## String getName();

[#50540613_pgfId-999486]## String getDescription();

[#50540613_pgfId-999482]## }

[#50540613_pgfId-1003992]##Additional work contexts, based on specific
EIS integration scenarios could be supported by an application server
and the resource adapter may use them.

[#50540613_pgfId-1003969]##The _WorkContextProvider_ interface is an
optional interface implemented by a _Work_ instance to indicate to the
_WorkManager_ , or its equivalent in other thread pooling
implementations, that the task encapsulated as the _Work_ instance
requires to be run with a specialized execution context.

[#50540613_pgfId-1003970]## 

[#50540613_pgfId-1003971]## package javax.resource.spi.work;

[#50540613_pgfId-1003985]## public interface WorkContextProvider extends
Serializable \{

[#50540613_pgfId-999506]## List<WorkContext> getWorkContexts();

[#50540613_pgfId-1003978]## }

[#50540613_pgfId-1003990]## 

[#50540613_pgfId-1003991]## 

[#50540613_pgfId-1004004]## When a resource adapter is required to
control the execution context in which a _Work_ instance is executed, it
creates a _Work_ instance that implements _WorkContextProvider_ . The
_Work_ instance provides an implementation of the _getWorkContexts_
method to return a List of _WorkContext_ s that the _Work_ instance
requires established as its execution context prior to execution.

[#50540613_pgfId-1000676]##When a _Work_ that implements
_WorkContextProvider_ is submitted to the _WorkManager_ for execution,
one of the free threads in the thread pooling implementation of the
application server picks up the _Work_ for execution. The _WorkManager_
makes a call to _getWorkContexts_ to obtain the _WorkContext_ s that is
required to be set as the execution context for the _Work_ instance,
iterates through the returned List of _WorkContext_ s, and sets them up
as the execution context in which the _Work_ instance is executed in.

[#50540613_pgfId-1003885]##If the resource adapter returns a null or an
empty List when the WorkManager makes a call to the getWorkContexts
method, the WorkManager must treat it as if no additional execution
contexts are associated with that Work instance and must continue with
the Work processing.

[#50540613_pgfId-1001812]##When the container’s thread has completed the
handling of the _Work_ instance, it must cleanup all the contextual
information associated with that _Work_ instance so that when the thread
is reused for another _Work_ instance, the previous contextual
information is not established for the new _Work_ instance.

[#50540613_pgfId-1003888]##The resource adapter must not make any
changes to the state of a _WorkContext_ after the _Work_ instance that
is associated with that _WorkContext_ has been submitted to the
_WorkManager_ .

[#50540613_pgfId-1001515]##Because nested _Work_ submissions are allowed
in the Connector _WorkManager_ , the Connector _WorkManager_ must
support nested contexts unless the _WorkContext_ type prohibits them.
See link:conn.htm#50540573_90493[See WorkManager Interface] for more
information on nested _Work_ submission related requirements.

[#50540613_pgfId-1001516]## 

[#50540613_pgfId-999701]##WorkContext establishment during Work
submission(Sequence Diagram)

image:conn-91.gif[image]

======= [#50540613_pgfId-999875]##[#50540613_75241]##Indicating Support for a WorkContext Type

[#50540613_pgfId-1003731]##A resource adapter provider can declare that
it requires a list of _WorkContext_ types to be supported by the
application server through the _required-work-context_ element in the
deployment descriptor of the resource adapter (see
link:conn.htm#50540561_39795[See Resource Adapter Provider]) or by way
of the Connector annotation (see link:conn.htm#50540619_30627[See
@Connector] ).

[#50540613_pgfId-999944]##The application server must check whether all
of the _WorkContext_ types declared by the resource adapter are
supported by the application server during resource adapter deployment.
The application server must employ an exact type equality check (by
using _java.lang.Class.equals(java.lang.Class)_ ) to check for the
support.

[#50540613_pgfId-1001263]##If the application server cannot support one
or more of the _WorkContext_ types declared in _required-work-context_
elements, it must fail deployment of the resource adapter.

======= [#50540613_pgfId-999881]##[#50540613_27946]##Checking Support for a WorkContext Type

[#50540613_pgfId-999883]##A resource adapter can check an application
server’s support for a particular _WorkContext_ type through the
_isContextSupported()_ method in the _BootstrapContext_ implementation
provided by the application server. This mechanism enables a resource
adapter developer to dynamically change the _WorkContext_ s based on the
support provided by the application server. Fore more information, see
link:conn.htm#50540558_94107[See ResourceAdapter JavaBean and
Bootstrapping a Resource Adapter Instance].

[#50540613_pgfId-999884]## 

[#50540613_pgfId-1000068]##

[#50540613_pgfId-1000073]## public interface BootstrapContext \{

[#50540613_pgfId-999887]## // ... other operations

[#50540613_pgfId-999888]## boolean isContextSupported(

[#50540613_pgfId-1000069]## Class<? extends WorkContext>
workContextClass);

[#50540613_pgfId-999890]## }

[#50540613_pgfId-1001225]## 

[#50540613_pgfId-1001838]##The application server must employ an exact
type equality check (by using _java.lang.Class.equals(java.lang.Class)_
) in _isContextSupported_ , to check whether it supports the
_WorkContext_ type provided by the resource adapter. This method must be
idempotent, that is, all calls to this method by a resource adapter for
a particular _WorkContext_ type must return the same Boolean value
throughout the lifecycle of that resource adapter instance.

[#50540613_pgfId-1001254]##This exact type check in _isContextSupported_
enables a resource adapter to decide whether the application server
supports the contexts that the resource adapter is attempting to
establish for a _Work_ instance. If a particular _WorkContext_ class is
not supported by the application server a resource adapter may then
either choose to fall back to a superclass that is supported by the
application server (again ascertained by way of the _isContextSupported_
method) or fail the _Work_ submission.

{empty}[#50540613_pgfId-1002749]##For _WorkContext_ classes that are
defined as abstract classes, such as _SecurityContext_ , the resource
adapter must use the abstract class while invoking the
_isContextSupported_ method and not its implementation class. For more
information on _SecurityContext_ class, see
link:conn.htm#50540614_83354[See SecurityContext Class]

[#50540613_pgfId-1002753]##For custom extensions of the standard
_WorkContext_ s, the resource adapter must always check support for the
most specific _WorkContext_ first. It may then go up the inheritance
hierarchy in order to find the most specific _WorkContext_ type
supported by the application server.

======= [#50540613_pgfId-999917]##Handling Errors During Context Assignment

[#50540613_pgfId-999918]##As specified in
link:conn.htm#50540573_25622[See WorkListener Interface and WorkEvent
Class], the _WorkManager_ must catch any exception thrown during Work
processing, which includes execution context setup (including
link:conn.htm#50540613_27946[See Checking Support for a WorkContext
Type]), and wrap it with a _WorkCompletedException_ set to an
appropriate error code defined in _WorkContextErrorCodes_ , which
indicates the nature of the error condition.

[#50540613_pgfId-999916]## 

[#50540613_pgfId-1003896]## public class WorkContextErrorCodes \{

[#50540613_pgfId-1003897]## // Indicates an unsupported context type

[#50540613_pgfId-1003898]## public static final String
UNSUPPORTED_CONTEXT_TYPE = "1";

[#50540613_pgfId-999925]## 

[#50540613_pgfId-999926]## // Indicates more than one contexts of the
same type passed

[#50540613_pgfId-1000083]## // in for Work

[#50540613_pgfId-999927]## public static final String DUPLICATE_CONTEXTS
= "2";

[#50540613_pgfId-999928]## 

[#50540613_pgfId-999929]## // Indicates failure in recreating the
WorkContext

[#50540613_pgfId-999930]## public static final String
CONTEXT_SETUP_FAILED = "3";

[#50540613_pgfId-999931]## 

[#50540613_pgfId-999932]## // Indicates that the container cannot
support recreating

[#50540613_pgfId-1000088]## // the context

[#50540613_pgfId-999933]## public static final String
CONTEXT_SETUP_UNSUPPORTED = "4";

[#50540613_pgfId-999934]## }

[#50540613_pgfId-1000089]## 

[#50540613_pgfId-999935]##The application server must make the following
checks during context assignment

[#50540613_pgfId-999938]##Because not all _WorkContext_ instances
provided by the resource adapter might be supported by the application
server, the application server must ensure that the _WorkContext_ s
provided by the resource adapter are supported by the application
server.

[#50540613_pgfId-999939]##The application server must also ensure that
the _WorkContext_ s provided by the resource adapter do not have
duplicates. For instance, a resource adapter must not be able to submit
two instances of the _TransactionContext_ class. The application server
must ensure that only one _WorkContext_ provided by the resource adapter
implements the same _WorkContext_ type supported by the application
server. If duplicates are detected, the application server must fail the
Work submission with a _WorkCompletedException_ set to the
_DUPLICATE_CONTEXTS_ error code.

[#50540613_pgfId-1001328]##The check for support and duplicates during
context assignment listed above, must be less strict than the checks
described in link:conn.htm#50540613_75241[See Indicating Support for a
WorkContext Type] and link:conn.htm#50540613_27946[See Checking Support
for a WorkContext Type]. The application server must employ a
_java.lang.Class.isAssignable(java.lang.Class)_ style check.
Specifically, this method must check whether a WorkContext class that is
supported by the application server can be converted to the type
provided by the resource adapter, by way of an identity conversion or a
widening reference conversion.

[#50540613_pgfId-1001356]##If a particular _WorkContext_ type provided
by the resource adapter is supported by the application server, the
application server must use the _WorkContext_ as-is and not attempt to
use it as a supported parent type. That is, an application server must
use the most specific _WorkContext_ type it supports.

[#50540613_pgfId-1001358]##If a particular _WorkContext_ type provided
by the resource adapter is not supported by the application server, the
application server should be able to safely fallback to a superclass
(excluding the _WorkContext_ interface) that is supported by it.

[#50540613_pgfId-1001271]##If the above conditions are not met, the
application server must fail the _Work_ processing with a
_WorkCompletedException_ with an appropriate error code to indicate the
nature of the error condition. Because the _WorkCompletedException_
might not provide a resource adapter with adequate information about the
actual failure during context assignment, the resource adapter may
implement the _WorkContextLifecycleListener_ to interpret the reasons
why a context assignment of a particular _WorkContext_ instance failed.
For more information, see Section 11.7 “WorkContextLifecycleListener
Interface”

======= [#50540613_pgfId-999951]##

image:conn-88.gif[image]

[#50540613_42449]##TransactionContext Class

[#50540613_pgfId-999953]##The _TransactionContext_ class extends the
_ExecutionContext_ class, as described in
link:conn.htm#50540573_43394[See ExecutionContext Class]. It represents
the standard interface a resource adapter can use to propagate
transaction context information from the EIS to the application server.
The _Work_ instance and any message deliveries to _MessageEndpoint_ s in
that _Work_ instance must all be carried out in the transaction context
provided by the _TransactionContext_ class.

[#50540613_pgfId-999954]## 

[#50540613_pgfId-1000092]## public class TransactionContext

[#50540613_pgfId-1000093]## extends ExecutionContext

[#50540613_pgfId-1001811]## implements WorkContext \{

[#50540613_pgfId-999957]## public TransactionContext(Xid xid) \{..}

[#50540613_pgfId-1001800]## public TransactionContext(Xid xid, long
timeout) \{..}

[#50540613_pgfId-999958]## 

[#50540613_pgfId-999959]## public String getDescription() \{

[#50540613_pgfId-999960]## return "Transaction Context";

[#50540613_pgfId-999961]## }

[#50540613_pgfId-999962]## 

[#50540613_pgfId-999963]## public String getName() \{

[#50540613_pgfId-999964]## return "TransactionContext";

[#50540613_pgfId-999965]## }

[#50540613_pgfId-999966]## }

[#50540613_pgfId-1000099]##For a resource adapter, using the
_WorkContextProvider_ interface to effect transaction inflow is optional
but recommended. A resource adapter could still continue to use the
existing _Work_ submission approach with an _ExecutionContext_ and an
application server must support this model as well.

[#50540613_pgfId-999971]##A resource adapter must not submit a _Work_
instance that implements _WorkContextProvider_ along with a valid
_ExecutionContext_ to a Connector _WorkManager_ . When such a _Work_
instance is submitted to the Connector _WorkManager_ for execution, the
application server must detect this scenario and throw a
_WorkRejectedException_ to indicate this error scenario. A resource
adapter however, could choose to use a _null_ value for the
_ExecutionContext_ parameter in Connector _WorkManager_ methods that
takes an _ExecutionContext_ as an argument.

======= [#50540613_pgfId-1001981]##

image:conn-88.gif[image]

HintsContext Interface

[#50540613_pgfId-1004013]##An application server’s _WorkManager_
implementation may allow a _Work_ instance to provide, during _Work_
submission, application-server specific hints to control the
quality-of-service (QoS) characteristics afforded to it by the
_WorkManager_ . These hints provide guidelines to the _WorkManager_
about how the _Work_ instance is to be distributed or processed.

[#50540613_pgfId-1004024]##The _HintsContext_ is a standard
_WorkContext_ defined in this specification. It provides a mechanism for
the resource adapter to pass quality-of-service metadata to the
_WorkManager_ during the submission of a _Work_ instance. The
application server may then use the specified hints to control the
execution of the _Work_ instance.

[#50540613_pgfId-1004021]## 

[#50540613_pgfId-1002141]## public class HintsContext implements
WorkContext \{

[#50540613_pgfId-1002015]## protected String description = "Hints
Context";

[#50540613_pgfId-1002016]## protected String name = "HintsContext";

[#50540613_pgfId-1002017]## 

[#50540613_pgfId-1002021]## public String getDescription() \{

[#50540613_pgfId-1002022]## return description;

[#50540613_pgfId-1002023]## }

[#50540613_pgfId-1002024]## 

[#50540613_pgfId-1002028]## public String getName() \{

[#50540613_pgfId-1004032]## return name;

[#50540613_pgfId-1002030]## }

[#50540613_pgfId-1002031]## 

[#50540613_pgfId-1002039]## public void setDescription(String
description)\{

[#50540613_pgfId-1002040]## this.description = description;

[#50540613_pgfId-1002041]## }

[#50540613_pgfId-1002048]## 

[#50540613_pgfId-1002167]## public void setName(String name)\{

[#50540613_pgfId-1002049]## this.name = name;

[#50540613_pgfId-1002050]## }

[#50540613_pgfId-1002051]## 

[#50540613_pgfId-1002052]## Map<String, Serializable> hints

[#50540613_pgfId-1004039]## = new HashMap<String, Serializable>();

[#50540613_pgfId-1002053]## 

[#50540613_pgfId-1002066]## public void setHint(String hintName,
Serializable value) \{

[#50540613_pgfId-1002067]## hints.put(hintName, value);

[#50540613_pgfId-1002199]## }

[#50540613_pgfId-1002069]## 

[#50540613_pgfId-1002070]## public Map<String, Serializable> getHints()
\{

[#50540613_pgfId-1002071]## return hints;

[#50540613_pgfId-1002072]## }

[#50540613_pgfId-1002078]## }

[#50540613_pgfId-1002250]##The resource adapter may use an instance of
the standard _HintsContext_ class to specify to the _WorkManager_ the
hints that need to be used during the processing of the _Work_ instance.

[#50540613_pgfId-1001986]##The resource adapter may use the _setHint_
method to set a hint in the context. It must use a non-null _hintName_
while calling the _setHint_ method.

[#50540613_pgfId-1002244]##This specification defines only a limited set
of standard quality-of-service attributes (that is, hint names) in
link:conn.htm#50540613_83702[See Standard Hints]. The application server
is not required to support the standard hint names.

[#50540613_pgfId-1002308]##The specification reserves the right to use
names with the prefix _javax.resource._ in future versions of the
specification. Resource adapters and application servers must not use
names with the _javax.resource._ prefix for their custom requirements.
The specification also recommends that resource adapter providers choose
_hintNames_ using the same rules that they use for _Class_ names.

[#50540613_pgfId-1002252]##The _WorkManager_ must reject the
establishment of the _HintsContext_ if the values provided for the hints
are not valid. The _WorkManager_ must ignore any unknown hint names
submitted by a resource adapter instance. Configuration tools provided
by the application server implementation may be used by the resource
adapter deployer to override or map the hint name-value pairs provided
by the resource adapter developer.

======= [#50540613_pgfId-1002287]##[#50540613_83702]##Standard Hints

======= [#50540613_pgfId-1002298]##Work Name Hint

[#50540613_pgfId-1002300]##The resource adapter may use the string
_javax.resource.Name_ , defined as a constant in
_HintsContext.NAME_HINT_ , as the _hintName_ to indicate a name for a
_Work_ instance. This _hintName_ may be used by the resource adapter and
the application server for enhanced logging and debugging purposes. The
value for the hint must be a valid _java.lang.String_ .

======= [#50540613_pgfId-1002301]##Long-running Work instance Hint

[#50540613_pgfId-1003836]##The resource adapter may use the String
_javax.resource.LongRunning_ , defined as a constant in
_HintsContext.LONGRUNNING_HINT_ , as the _hintName_ to indicate that a
_Work_ instance might run for a long period of time (typically lasting
throughout the lifecycle of the resource adapter instance) compared to
regular tasks that have a shorter execution lifecycle. The value of the
hint must be a valid _boolean_ value ( _true_ or _false_ ).

[#50540613_pgfId-1003837]##For example, the resource adapter might
employ this hint for a _Work_ instance that maintains network
connectivity to the EIS instance throughout the lifecycle of the
resource adapter.

[#50540613_pgfId-1002351]##A _WorkManager_ that supports this _hintName_
may handle such long running tasks in a separate thread pool or manage
and monitor such tasks in a different fashion compared to regular short
running tasks. This type of _WorkManager_ must provide the same _Work_
submission and processing semantics to _Work_ instances submitted with
or without this hint.

======= [#50540613_pgfId-999974]##

image:conn-88.gif[image]

[#50540613_81277]##WorkContextLifecycleListener Interface

[#50540613_pgfId-999978]##A _WorkContext_ implementation may implement
the _WorkContextLifecycleListener_ interface to get fine-grained
notifications (along with error codes, if any) while the _WorkManager_
sets up the execution context for a _Work_ instance.

[#50540613_pgfId-999975]## 

[#50540613_pgfId-1000100]## public interface
WorkContextLifecycleListener \{

[#50540613_pgfId-999983]## // Indicates that the WorkContext was set
successfully

[#50540613_pgfId-1000110]## void contextSetupComplete();

[#50540613_pgfId-999985]## 

[#50540613_pgfId-999986]## // Indicates that the WorkContext setup
failed

[#50540613_pgfId-999987]## void contextSetupFailed(String errorCode);

[#50540613_pgfId-1000115]## }

[#50540613_pgfId-999990]##When a _WorkManager_ sets up the execution
context of a _Work_ instance that implements _WorkContextProvider_ , the
_WorkManager_ must make the relevant lifecycle notifications if a
_WorkContext_ instance implements this interface. The possible error
conditions that might occur while associating a _WorkContext_ with a
_Work_ instance is captured in _WorkContextErrorCodes_ . The
_WorkManager_ must call the _contextSetupFailed_ method with the
appropriate error code in _WorkContextErrorCodes_ .

[#50540613_pgfId-1000596]##When a _Work_ instance is submitted to the
Connector _WorkManager_ using one of the methods that passes in a
_WorkListener_ as a parameter, the _WorkManager_ must send _Work_
related notifications to the _WorkListener_ and _WorkContext_
setup-related notifications to the _WorkContextLifecycleListener_
interface.

[#50540613_pgfId-1001794]##The _WorkManager_ must make the notifications
related to _Work_ accepted and started events prior to calling the
_WorkContext_ setup related notifications. The order of setup-related
notifications of _WorkContext_ types within a list of work contexts of a
_Work_ instance is undefined. The _WorkManager_ must make the
notifications related to the _Work_ completed events after the
_WorkContext_ setup related notifications.

[#50540613_pgfId-1001795]## 

[#50540613_pgfId-1001608]##Generic Work Context Lifecycle listener
callback (Sequence Diagram)

image:conn-92.gif[image]

======= [#50540613_pgfId-1000543]##

image:conn-88.gif[image]

Illustrative Example

[#50540613_pgfId-1000544]##link:conn.htm#50540571_62722[See Use Case
Scenario], provides details on use case scenarios where the Transaction
Inflow contracts defined in link:conn.htm#50540571_84673[See Transaction
Inflow] are employed. As an example implementing one of the use cases
listed there, let’s consider Wombat Systems, a finance company that has
a variety of software systems as part of its enterprise infrastructure.
The software systems include databases, messaging middleware, and
mainframe systems, as well as several Java EE application servers that
host business logic written as EJBs (session, entity, and message-driven
beans).

[#50540613_pgfId-1003857]##In order to integrate the various disparate
software systems, and to allow them to communicate with each other,
Wombat Systems did the following:

[#50540613_pgfId-1000545]##Used the application servers to hold the
integration as well as business logic, developed as EJBs

[#50540613_pgfId-1000546]##Purchased or built resource adapters and
deployed them on the application servers in order to provide
bidirectional connectivity between the applications residing on the
application servers and the various software systems

[#50540613_pgfId-1000547]##A particular situation at Wombat Systems
requires that the work done by the application components during a
message inflow be automatically enlisted as part of the imported
transaction. The resource adapter developer then leverages the
interfaces defined in the Transaction Inflow portion of the Connector
specification, and achieves the flow-in of transactional context from
the EIS to the application server.

[#50540613_pgfId-1000548]##The resource adapter constructs a _Work_
instance that is expected to do work as part of the transactional
message. It also creates an _ExecutionContext_ instance containing the
constructed _Xid_ , as detailed in link:conn.htm#50540571_72505[See
Processing of Transactional Calls]. However, because the resource
adapter has to execute the _Work_ instance with other Work contexts as
well, it uses a _Work_ implementation that implements the
_WorkContextProvider_ interface, as shown below.

[#50540613_pgfId-1000549]## 

[#50540613_pgfId-1000550]## public class MyResourceAdapterImpl
implements ResourceAdapter \{

[#50540613_pgfId-1000551]## ...

[#50540613_pgfId-1000552]## public void start(BootstrapContext ctx) \{

[#50540613_pgfId-1000553]## bootstrapCtx = ctx;

[#50540613_pgfId-1000554]## }

[#50540613_pgfId-1000555]## ...

[#50540613_pgfId-1000556]## \{

[#50540613_pgfId-1000557]## WorkManager workManager =
myRA.bootstrapCtx.getWorkManager();

[#50540613_pgfId-1000558]## workManager.scheduleWork(new MyWork());

[#50540613_pgfId-1000559]## ...

[#50540613_pgfId-1000560]## }

[#50540613_pgfId-1000561]## }

[#50540613_pgfId-1000562]## 

[#50540613_pgfId-1000563]## public class MyWork implements Work,
WorkContextProvider \{

[#50540613_pgfId-1000564]##

[#50540613_pgfId-1000565]## void release()\{ ..}

[#50540613_pgfId-1000566]##

[#50540613_pgfId-1000567]## List<WorkContext> getWorkContexts() \{

[#50540613_pgfId-1000568]## TransactionContext txIn

[#50540613_pgfId-1000569]## = new TransactionContext(xid);

[#50540613_pgfId-1000570]## List<WorkContext> icList = new
ArrayList<WorkContext>();

[#50540613_pgfId-1000571]## icList.add(txIn);

[#50540613_pgfId-1000572]## // Add additional WorkContexts

[#50540613_pgfId-1000573]## return icList;

[#50540613_pgfId-1000574]## }

[#50540613_pgfId-1000575]## 

[#50540613_pgfId-1000576]## void run()\{

[#50540613_pgfId-1000577]## // Deliver message to MessageEndpoint;

[#50540613_pgfId-1000578]## }

[#50540613_pgfId-1000579]## }

[#50540613_pgfId-1000580]## 

[#50540613_pgfId-1000581]##When this instance of _MyWork_ that
implements _WorkContextProvider_ is submitted to the _WorkManager_ for
execution, one of the free threads in the thread-pooling implementation
of the application server picks up the _Work_ for execution. The
_WorkManager_ then obtains the _WorkContext_ s (through a call to
_getWorkContexts_ method) that need to be set as the execution context
for the _Work_ instance, iterates through the returned _WorkContext_ s,
and sets them up as the execution context in which the _Work_ instance
is executed in.

[#50540613_pgfId-1000582]##Because an instance of _TransactionContext_
is set, the application server’s _WorkManager_ accepts the submitted
_Work_ instance, and re-creates the transaction execution context. That
is, the work to be done is enlisted as part of the imported transaction.
It then calls the _run_ method on the _Work_ object. When the _Work_ ’s
_run_ method is called, all deliveries to the _MessageEndpoint_ runs
under the transaction context of the _Work_ instance, depending on the
transaction preference of the bean method that is being invoked.

====== [#50540555_pgfId-874]## 

======= [#50540555_pgfId-5529]##

image:conn-93.gif[image]

Inbound Communicaton

image:conn-94.gif[image]

[#50540555_pgfId-999458]##This chapter provides a high level description
of the inbound communication model; that is, the communication from an
EIS to an application residing in an application server’s EJB container
through a resource adapter. This also introduces concepts used in
subsequent chapters related to inbound communication: Message Inflow
(link:conn.htm#50540559_25704[See Message Inflow]), EJB Invocation
(link:conn.htm#50540603_34845[See EJB Invocation]), and Transaction
Inflow (link:conn.htm#50540571_84673[See Transaction Inflow]).

======= [#50540555_pgfId-999468]##

image:conn-95.gif[image]

Overview

[#50540555_pgfId-999469]##In the inbound communication model, the EIS
initiates all communication to an application. In this case, the
application may be composed of EJBs (session, entity and message-driven
beans) and resides in an EJB container.

[#50540555_pgfId-999504]##Inbound Communication Model

image:conn-96.gif[image]

[#50540555_pgfId-999505]##In order to enable inbound communication, a
mechanism to invoke EJBs (session, entity and message-driven beans) from
a resource adapter is necessary. Further, a mechanism is needed to
propagate transaction information from an EIS to an application residing
in an EJB container.

[#50540555_pgfId-999509]##link:conn.htm#50540559_25704[See Message
Inflow] describes a mechanism to invoke message-driven beans from a
resource adapter. link:conn.htm#50540571_84673[See Transaction Inflow]
provides a mechanism to import transaction information from an EIS into
an EJB container.

======= [#50540555_pgfId-999513]##

image:conn-95.gif[image]

An Illustrative Use Case

[#50540555_pgfId-999514]##Wombat Systems is a finance company which has
a variety of software systems as part of its enterprise infrastructure.
The software systems include databases, enterprise resource planning
(ERP) and customer relationship management (CRM) systems, messaging
middleware, mainframe systems, as well as several Java EE application
servers which host business logic written as EJBs (session, entity and
message-driven beans). Further, there are web service interactions that
occur as part of the overall corporate workflow.

[#50540555_pgfId-999621]##Inbound Communication Model (an Illustrative
Use Case)

image:conn-97.gif[image]

[#50540555_pgfId-999622]##In order to integrate the various disparate
software systems, and to allow them to communicate with each other,
Wombat Systems did the following:

[#50540555_pgfId-999623]##Used the application servers to hold the
integration as well as business logic, developed as EJBs.

[#50540555_pgfId-999624]##Purchased resource adapters and deployed them
on the application servers, in order to provide bi-directional
connectivity between the applications residing on the application
servers and the various software systems.

[#50540555_pgfId-999625]##Thus, using the resource adapter as a
connectivity enabler, Wombat Systems was able to integrate the disparate
software systems in its enterprise infrastructure.

[#50540555_pgfId-998874]## 

====== [#50540559_pgfId-874]##[#50540559_48926]## 

======= [#50540559_pgfId-5529]##

image:conn-98.gif[image]

[#50540559_25704]##Message Inflow

image:conn-99.gif[image]

[#50540559_pgfId-999458]##This chapter specifies a standard, generic
contract between an application server and a resource adapter that
allows a resource adapter to asynchronously deliver messages to message
endpoints residing in the application server independent of the specific
messaging style, messaging semantics and messaging infrastructure used
to deliver messages. This contract also serves as the standard message
provider pluggability contract that allows a wide range of message
providers to be plugged into any Java EE compatible application server
through a resource adapter.

[#50540559_pgfId-1014489]##Note that the usage of the term “Endpoint” in
this chapter refers to a message endpoint (for example, a message-driven
application).

======= [#50540559_pgfId-999459]##

image:conn-100.gif[image]

Overview

[#50540559_pgfId-1015371]##Asynchronous message delivery or event
notification is a widely used application communication paradigm. Some
of the characteristics of the asynchronous message-based communication
paradigm are:

[#50540559_pgfId-1015372]##The message producer may not be directly
aware of message consumers. There may be one or more consumers
interested in the message.

[#50540559_pgfId-999462]##Message delivery is solicited; that is, a
message consumer has to express interest in receiving messages.

[#50540559_pgfId-999463]##The messaging infrastructure is type-agnostic;
that is, it treats messages as a Binary Large Object (BLOB). It stores
and routes messages reliably, to interested messsage consumers,
depending on Quality-of-Service (QoS) capabilities.

[#50540559_pgfId-999464]##The interaction is inherently loosely coupled.
The message producer and the consumer do not share any execution
context.

[#50540559_pgfId-999465]##The message producer generally is not
interested in the outcome of message processing by consumers. However,
it is possible that the provider may care to detect if the message has
been consumed or not.

[#50540559_pgfId-999466]##The message delivery always involves a message
routing infrastructure, which offers varying QoS capabilities for
storing (persistence) and routing messages reliably.

[#50540559_pgfId-999467]##The Java EE application programming model
offers a rich set of components: EJBs (session, entity and
message-driven beans), JSPs, and servlets for applications to use. The
message-driven bean is an asynchronous message consumer, or message
endpoint.

[#50540559_pgfId-999468]##Java EE applications may use two different
patterns to interact with a message provider:

[#50540559_pgfId-999469]##It may directly use specific messaging APIs,
such as Java Messaging Service (JMS), to send and synchronously receive
messages. This is achieved using the standard connector contracts for
connection management. See link:conn.htm#50540552_18615[See Connection
Management]. Any message provider may provide a connector resource
adapter that supplies connection objects for use by applications to send
and synchronously receive messages using the specific messaging API.

[#50540559_pgfId-999473]##It may use message-driven beans to
asynchronously receive messages through a message provider. The EJB
specification (see link:conn.htm#50540564_26771[See Enterprise JavaBeans
(EJB) Specification, version 3.2]) describes the message-driven bean
component contract in detail.

[#50540559_pgfId-999477]##While the above patterns allow a Java EE
application to send and receive messages, they do not provide a standard
system-level contract to plugin message providers to an application
server and to deliver messages to message endpoints, or message-driven
beans, residing in the application server. Without a standard
pluggability contract, an application server would have to use special
contracts to interact with various message providers, and a message
provider has to do the same to interact with different application
servers, which is an m x n problem.

[#50540559_pgfId-999512]##Message Inflow Contract

image:conn-101.gif[image]

[#50540559_pgfId-999513]##Thus, there is a need for a standard, generic
contract between an application server and a message provider which
allows a message provider to deliver messages to message endpoints
(message-driven beans) residing in the application server independent of
the specific messaging style, messaging semantics, and messaging
infrastructure used to deliver messages. Such a contract also serves as
the standard message provider pluggability contract which allows a wide
range of message providers to be plugged into any Java EE compatible
application server by way of a resource adapter.

======= [#50540559_pgfId-999514]##

image:conn-100.gif[image]

Goals

[#50540559_pgfId-999515]##Provide a standard, generic mechanism to plug
in a wide range of message providers, including JMS, into a Java EE
compatible application server through a resource adapter and dispatch
messages to message endpoints. This will allow Java EE components to act
as consumers of messages with no required changes to the client
programming models. Further, the Java EE components will be able to
access messages with no awareness that a resource adapter is delivering
the message.

[#50540559_pgfId-999516]##This generic contract must be capable of
supporting various messaging delivery guarantees provided by different
messaging styles, as well as allow concurrent delivery of messages.

======= [#50540559_pgfId-999517]##

image:conn-100.gif[image]

[#50540559_14276]##Message Inflow Model

[#50540559_pgfId-999564]##Message Inflow Contract (Object Diagram)

image:conn-102.gif[image]

[#50540559_pgfId-999627]##Message Inflow Contract (Interfaces)

image:conn-103.gif[image]

======= [#50540559_pgfId-1001584]## _javax.resource.spi_

[#50540559_pgfId-1001586]##package javax.resource.spi;

[#50540559_pgfId-1001588]## 

[#50540559_pgfId-1001753]##import java.beans.PropertyDescriptor;

[#50540559_pgfId-1001592]##import javax.resource.NotSupportedException;

[#50540559_pgfId-1001603]##import
javax.resource.spi.endpoint.MessageEndpointFactory;

[#50540559_pgfId-1001605]## 

[#50540559_pgfId-1001776]##public interface ResourceAdapter \{

[#50540559_pgfId-1001609]## ... // other methods

[#50540559_pgfId-1001611]## void
endpointActivation(MessageEndpointFactory,

[#50540559_pgfId-1001613]## ActivationSpec) throws ResourceException;

[#50540559_pgfId-1001615]## void
endpointDeactivation(MessageEndpointFactory,

[#50540559_pgfId-1001617]## ActivationSpec);

[#50540559_pgfId-1001619]## XAResource[] getXAResources(ActivationSpec[]
specs)

[#50540559_pgfId-1001621]## throws ResourceException;

[#50540559_pgfId-1001623]##}

[#50540559_pgfId-1001625]## 

[#50540559_pgfId-1001847]##public interface ActivationSpec \{ //
JavaBean

[#50540559_pgfId-1001629]## void validate() throws
InvalidPropertyException;

[#50540559_pgfId-1001631]##}

[#50540559_pgfId-1001633]## 

[#50540559_pgfId-1001864]##public class InvalidPropertyException extends
ResourceException \{

[#50540559_pgfId-1001637]## public InvalidPropertyException() \{ ... }

[#50540559_pgfId-1001639]## public InvalidPropertyException(String
message) \{ ... }

[#50540559_pgfId-1001641]## public InvalidPropertyException(String
message,

[#50540559_pgfId-1001643]## String errorCode) \{ ... }

[#50540559_pgfId-1001645]## public void setInvalidPropertyDescriptors(

[#50540559_pgfId-1001647]## PropertyDescriptor[] invalidProperties) \{
... }

[#50540559_pgfId-1001649]## public PropertyDescriptor[]
getInvalidPropertyDescriptors() \{

[#50540559_pgfId-1001651]## ... }

[#50540559_pgfId-1001653]##}

[#50540559_pgfId-1001655]## 

[#50540559_pgfId-1001995]##public class UnavailableException extends
ResourceException \{

[#50540559_pgfId-1001659]## public UnavailableException() \{ ... }

[#50540559_pgfId-1001661]## public UnavailableException(String message)
\{ ... }

[#50540559_pgfId-1001663]## public UnavailableException(Throwable cause)
\{ ... }

[#50540559_pgfId-1001665]## public UnavailableException(String message,
Throwable cause) \{

[#50540559_pgfId-1001667]## ... }

[#50540559_pgfId-1001669]##}

[#50540559_pgfId-1014461]## 

[#50540559_pgfId-1014459]##public class RetryableUnavailableException

[#50540559_pgfId-1014457]## extends UnavailableException

[#50540559_pgfId-1014478]## implements
javax.resource.spi.RetryableException \{}

== [#50540559_pgfId-1015201]## _javax.resource.spi.endpoint_

[#50540559_pgfId-1015203]##package javax.resource.spi.endpoint;

[#50540559_pgfId-1015205]## 

[#50540559_pgfId-1015207]##import java.lang.Exception;

[#50540559_pgfId-1015209]##import java.lang.Throwable;

[#50540559_pgfId-1015211]##import java.lang.NoSuchMethodException;

[#50540559_pgfId-1015213]##import javax.transaction.xa.XAResource;

[#50540559_pgfId-1015215]##import javax.resource.ResourceException;

[#50540559_pgfId-1015217]##import
javax.resource.spi.UnavailableException;

[#50540559_pgfId-1015219]## 

[#50540559_pgfId-1015221]##public interface MessageEndpointFactory \{

[#50540559_pgfId-1015223]## MessageEndpoint createEndpoint(XAResource)

[#50540559_pgfId-1015225]## throws UnavailableException;

[#50540559_pgfId-1015227]## MessageEndpoint createEndpoint(XAResource,
long)

[#50540559_pgfId-1015229]## throws UnavailableException;

[#50540559_pgfId-1015251]## String getActivationName();

[#50540559_pgfId-1015376]## Class<?> getEndpointClass();

[#50540559_pgfId-1015231]## boolean
isDeliveryTransacted(java.lang.reflect.Method)

[#50540559_pgfId-1015233]## throws NoSuchMethodException;

[#50540559_pgfId-1015235]##}

[#50540559_pgfId-1015237]## 

[#50540559_pgfId-1015239]##public interface MessageEndpoint \{

[#50540559_pgfId-1015241]## void
beforeDelivery(java.lang.reflect.Method)

[#50540559_pgfId-1015243]## throws NoSuchMethodException,
ResourceException;

[#50540559_pgfId-1015245]## void afterDelivery() throws
ResourceException;

[#50540559_pgfId-1015247]## void release();

[#50540559_pgfId-1015249]##}

[#50540559_pgfId-999685]##The ResourceAdapter interface supports methods
used for endpoint activations and deactivations. The endpointActivation
method is called by the application server when a message endpoint is
activated and the endpointDeactivation method is called by the
application server when a message endpoint is deactivated. The resource
adapter is supplied a MessageEndpointFactory instance and a configured
ActivationSpec instance during endpoint activations and deactivations.
The resource adapter may reject an activation by throwing a
NotSupportedException, if the activation information is incorrect.

[#50540559_pgfId-999686]##The resource adapter uses the
MessageEndpointFactory instance to obtain message endpoint instances for
delivering messages either serially or concurrently. The
MessageEndpointFactory may be used for obtaining any number of message
endpoint instances. The createEndpoint method call may throw an
UnavailableException for several reasons:

[#50540559_pgfId-999687]##The application server has not completed
endpoint activation.

[#50540559_pgfId-999688]##The application server may decide to limit
concurrent message deliveries.

[#50540559_pgfId-999689]##The application server is about to shutdown.

[#50540559_pgfId-999690]##The application server may have encountered an
internal error condition.

[#50540559_pgfId-999691]##In some cases where the offending condition is
temporary, the application server may decide to block the createEndpoint
method call instead of throwing an UnavailableException.

[#50540559_pgfId-1014451]##In cases where the _MessageEndpointFactory_
may require the rejection of the creation of the _MessageEndpoint_ and
where the failure to create an endpoint is temporary, the
_MessageEndpointFactory_ may use the _RetryableUnavailableException_ . A
resource adapter could then consider the offending condition as
transient, and may then retry the _MessageEndpoint_ creation process
later.

[#50540559_pgfId-999692]##The MessageEndpointFactory may also be used to
find out whether message deliveries to a target method on a message
listener interface that is implemented by a message endpoint or a target
method in the _Class_ returned by the _getEndpointClass_ method, will be
transacted or not through the isDeliveryTransacted method. The message
delivery preferences must not change during the lifetime of a message
endpoint.

[#50540559_pgfId-1015284]##The _MessageEndpointFactory_ also provides a
unique name for the message endpoint deployment that it represents. If
the message endpoint has been deployed into a clustered application
server, then the application server must provide the same name for that
message endpoint’s activation in each application server instance. It is
recommended that this name be human-readable, and is unchanged even in
cases when the application server is restarted or the message endpoint
redeployed.

[#50540559_pgfId-1015488]##The _MessageEndpointFactory_ allows a
resource adapter to get the _Class_ object corresponding to the message
endpoint. The resource adapter may use the _Class_ object to discover
annotations, interfaces implemented, etc. and modify the message
delivery behavior of the resource adapter accordingly. In the case of
message driven beans, the _Class_ object returned is the bean class
provided by the application component developer. Refer to the Enterprise
JavaBeans specification (see link:conn.htm#50540564_26771[See Enterprise
JavaBeans (EJB) Specification, version 3.2]) for more details on the
requirements for message driven beans with no-methods listener
interface. The _MessageEndpointFactory_ must return _null_ if the
_MessageEndpoint_ does not implement the business methods of the message
endpoint.

[#50540559_pgfId-999693]##A resource adapter capable of message delivery
to message endpoints must provide an ActivationSpec JavaBean class for
each supported endpoint message listener type. The ActivationSpec
JavaBean has a set of configurable properties specific to the messaging
style and the message provider. An instance of the ActivationSpec
JavaBean is configured by a message endpoint, or application, deployer
to setup the necessary configuration information for the endpoint
activation, and passed on to the resource adapter by way of the
application server during endpoint deployment.

[#50540559_pgfId-999694]##The resource adapter is expected to detect the
endpoint message listener type, either by using the ActivationSpec
JavaBean contents or based on the ActivationSpec JavaBean class, and
deliver messages to the endpoint. The resource adapter may optionally
pass an XAResource instance while creating a message endpoint in order
to receive transactional notifications when a message delivery is
transacted.

[#50540559_pgfId-999695]##The following steps in sequential order
represent the various stages in the message endpoint lifecycle, during
which message inflow contracts are used:

[#50540559_pgfId-999699]##Endpoint deployment

[#50540559_pgfId-999700]##Message delivery (transacted and
non-transacted)

[#50540559_pgfId-999701]##Endpoint undeployment

======= [#50540559_pgfId-999702]##

image:conn-100.gif[image]

Endpoint Deployment

[#50540559_pgfId-999743]##Endpoint (Message-Driven Bean) Deployment
(Actors)

image:conn-104.gif[image]

[#50540559_pgfId-999744]##There are several actors involved in the
deployment of a message endpoint:

[#50540559_pgfId-999745]##A message endpoint that is to be deployed on
an application server.

[#50540559_pgfId-999746]##A resource adapter capable of message
delivery. The resource adapter is typically provided by a message
provider or a third-party, and is used to plug an external message
provider into an application server. The resource adapter may be
standalone that may be shared by different applications or it may be
packaged along with an endpoint application.

[#50540559_pgfId-999747]##An application server that provides the
runtime environment for the application.

[#50540559_pgfId-999748]##A deployer of the application, a human, who
understands the application’s needs, and is also aware of the details of
the runtime environment in which the application will be deployed.

[#50540559_pgfId-999749]##A message provider, or messaging
infrastructure, that is the source for messages. A message provider may
provide special tools that can be used by the deployer to setup the
message provider for message delivery.

[#50540559_pgfId-999750]##The roles and responsibilities of the various
actors are as follows:

======= [#50540559_pgfId-999751]##Message Endpoint

[#50540559_pgfId-999752]##The message endpoint is typically a
message-driven bean application which is to be deployed on the
application server. A MessageEndpoint may be implemented as other
implementation specific objects as well. It asynchronously consumes
messages from a message provider. It is also possible for the
application to send and synchronously receive messages by directly using
messaging-style specific APIs.

[#50540559_pgfId-999753]##The message-driven bean developer provides
activation configuration information in the message-driven bean
deployment descriptor or by way of metadata annotations (
_MessageDriven_ annotation when the message-driven bean is realized as
MDBs). This includes messaging style specific configuration details, and
possibly message provider-specific details as well, which is used by the
message-driven bean deployer to setup the activation.

[#50540559_pgfId-1002369]##The EJB specification (see
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2]) has more details on the message-driven bean
deployment descriptor element activation-config used to hold the
activation configuration information. For example, the deployment
descriptor of a message-driven bean which consumes from a JMS resource
adapter may contain:

======= [#50540559_pgfId-1002375]##Message-Driven Bean Deployment Descriptor

[#50540559_pgfId-1002467]##<!-- message-driven bean deployment
descriptor -->

[#50540559_pgfId-1002387]## ...

[#50540559_pgfId-1002389]## <activation-config>

[#50540559_pgfId-1002391]## <activation-config-property>

[#50540559_pgfId-1002393]## <activation-config-property-name>

[#50540559_pgfId-1002395]## destinationType

[#50540559_pgfId-1002397]## </activation-config-property-name>

[#50540559_pgfId-1002399]## <activation-config-property-value>

[#50540559_pgfId-1002401]## javax.jms.Topic

[#50540559_pgfId-1002403]## </activation-config-property-value>

[#50540559_pgfId-1002405]## </activation-config-property>

[#50540559_pgfId-1002407]## <activation-config-property>

[#50540559_pgfId-1002409]## <activation-config-property-name>

[#50540559_pgfId-1002411]## SubscriptionDurability

[#50540559_pgfId-1002413]## </activation-config-property-name>

[#50540559_pgfId-1002415]## <activation-config-property-value>

[#50540559_pgfId-1002417]## Durable

[#50540559_pgfId-1002419]## </activation-config-property-value>

[#50540559_pgfId-1002421]## </activation-config-property>

[#50540559_pgfId-1002423]## <activation-config-property>

[#50540559_pgfId-1002425]## <activation-config-property-name>

[#50540559_pgfId-1002427]## MessageSelector

[#50540559_pgfId-1002429]## </activation-config-property-name>

[#50540559_pgfId-1002431]## <activation-config-property-value>

[#50540559_pgfId-1002433]## JMSType = 'car' AND color = 'blue'

[#50540559_pgfId-1002435]## </activation-config-property-value>

[#50540559_pgfId-1002437]## </activation-config-property>

[#50540559_pgfId-1002439]## ...

[#50540559_pgfId-1002441]## </activation-config>

[#50540559_pgfId-1002443]##...

[#50540559_pgfId-999788]##The EJB specification does not specify
messaging style-specific descriptor elements contained within the
activation-config element. It is the responsibility of each individual
messaging specification or product to specify the standard descriptor
elements specific to the messaging style for representing the activation
configuration information.

======= [#50540559_pgfId-999789]##Resource Adapter

[#50540559_pgfId-999790]##The resource adapter is a system component
located in the application server’s address space (that is, it has
already been deployed) that provides connectivity to message providers
and is capable of delivering messages to message endpoints residing in
the application server. The resource adapter is typically provided by a
message provider or a third-party, and is used to plug an external
message provider into an application server. The resource adapter may be
standalone, shared by different applications, or may be packaged along
with an endpoint application.

[#50540559_pgfId-999791]##The resource adapter provides the following
information by way of the resource adapter deployment descriptor or
through metadata annotations described in
link:conn.htm#50540619_28779[See @Activation], that is used by the
endpoint deployer to setup endpoint activation:

======= [#50540559_pgfId-999792]##List of Supported Message Listener Types

[#50540559_pgfId-999793]##The resource adapter provides a list of
endpoint message listener types it supports. Each type is represented as
a name of the Java type of the message listener interface.

======= [#50540559_pgfId-999794]##[#50540559_57563]##ActivationSpec JavaBean

[#50540559_pgfId-999795]##The resource adapter provides the Java class
name of an ActivationSpec JavaBean, one for each supported message
listener type, containing a set of configurable properties that is used
to specify endpoint activation configuration information during endpoint
deployment. Refer to link:conn.htm#50540546_81739[See JavaBean
Requirements]. An ActivationSpec JavaBean instance is created during
endpoint deployment, and the instance is configured by the endpoint
deployer.

[#50540559_pgfId-999799]##During configuration, an ActivationSpec
JavaBean instance may check the validity of the configuration settings
provided by the endpoint deployer. The ActivationSpec has a validate
method which may be used during endpoint deployment to validate the
overall activation configuration information provided by the endpoint
deployer. This helps to catch activation configuration errors earlier on
without having to wait until endpoint activation time for configuration
validation. The implementation of this self-validation check behavior is
optional.

[#50540559_pgfId-1014663]##The _ActivationSpec_ JavaBean implementation
is recommended to use the JavaBean validation mechanisms described in
link:conn.htm#50540558_66628[See JavaBean Validation] instead of the
_validate_ method to request validation by the container. If the
application server provides an implementation of the BeanValidation
specification (see link:conn.htm#50540564_77345[See Bean Validation
Specification, version 1.1]), the application server must check the
validity of the configuration settings provided by the deployer for a
JavaBean, using the capabilities provided by the Bean Validation
specification before calling the _validate_ method.

[#50540559_pgfId-999800]##Note, the ActivationSpec JavaBean instance
must not make any assumptions about the availability of a live resource
adapter instance.

[#50540559_pgfId-999801]##The resource adapter may also provide in its
deployment descriptor, using the required-config-property element, an
optional list of configuration property names required for each
activation specification. This information may be used during deployment
to ensure that the required configuration properties are specified. An
endpoint activation should fail if the required property values are not
specified.

[#50540559_pgfId-1014301]##The usage of the _required-config-property_
element to require the specification of a configuration property during
deployment is deprecated. Instead, the _ActivationSpec_ JavaBean is
recommended to use the JavaBean Validation facilities described in
link:conn.htm#50540558_66628[See JavaBean Validation]. The
_ActivationSpec_ JavaBean may annotate the field or the
JavaBeans-compliant accessor method corresponding to the configuration
property with the _@NotNull_ constraint (or the corresponding XML
validation descriptor equivalent), to indicate that the configuartion
property must be specified during activation specification.

[#50540559_pgfId-1014300]##The resource adapter may also provide in its
deployment descriptor, using the _config-property_ element, a list of
configuration property names for the activation specification.

[#50540559_pgfId-1014226]##In the case of JMS message providers, the
destination property value (refer to
link:activation.htm#50540545_97373[See Activation Configuration for
Message Inflow to JMS Endpoints]) may also be an object that implements
the javax.jms.Destination interface. In such a case, the resource
adapter should provide an administered object (refer to
link:conn.htm#50540559_47231[See Administered Objects]) that implements
the javax.jms.Destination interface. The specific type of the JMS
destination is specified by the destinationType property value. The JMS
ActivationSpec JavaBean properties should be standardized by the JMS
community.

======= [#50540559_pgfId-999803]##[#50540559_47231]##Administered Objects

[#50540559_pgfId-999804]##The resource adapter may provide the Java
class name and the interface type of an optional set of JavaBean classes
representing various administered objects. Refer to
link:conn.htm#50540546_81739[See JavaBean Requirements]. Administered
objects are specific to a messaging style or message provider.

[#50540559_pgfId-999808]##For example, some messaging styles may need
applications to use special administered objects for sending and
synchronously receiving messages through connection objects using
messaging-style specific APIs. It is also possible that administered
objects may be used to perform transformations on an asynchronously
received message in a message provider-specific way.

[#50540559_pgfId-999809]##Note, administered objects are not used for
setting up asynchronous message deliveries to message endpoints. The
ActivationSpec JavaBean is used to hold all the necessary activation
information needed for asynchronous message delivery setup.

[#50540559_pgfId-1014191]##An administered object may implement the
_ResourceAdapterAssociation_ interface to associate a resource adapter
instance with the administered object.The _ResourceAdapterAssociation_
interface specifies the methods to associate a administered object
JavaBean with a _ResourceAdapter_ JavaBean.

[#50540559_pgfId-1014195]##Prior to using the administered object, the
application server must create an association between the administered
object and a _ResourceAdapter_ JavaBean, by calling the
_setResourceAdapter_ method on the administered object. A successful
association is established only when the _setResourceAdapter_ method on
the administered object returns without throwing an exception.

[#50540559_pgfId-1014214]##An administered object instance, that
implements _ResourceAdapterAssociation_ interface must ensure that its
Java class and the interface type implements
_javax.resource.Referenceable_ and _java.io.Serializable_ interfaces.
This enables an application server to store the administered object
instance in the JNDI naming environment. Refer to
link:conn.htm#50540561_38067[See Scenario: Referenceable] for details on
the JNDI reference mechanism.

[#50540559_pgfId-1014257]##During deserialization of the administered
object, the application server must establish the association between
the administered object and the resource adapter instance by calling
setResourceAdapter.

======= [#50540559_pgfId-999810]##Configuring Administered Objects

[#50540559_pgfId-999811]##Create an administered object JavaBean
instance. This will initialize the instance with the defaults specified
through the JavaBean mechanism.

[#50540559_pgfId-999812]##Apply the administered object class
configuration properties specified in the resource adapter deployment
descriptor, on the administered object instance. This may override some
of the default values specified by way of the JavaBean mechanism.

[#50540559_pgfId-1014308]##The application server is required to merge
values specified by way of annotations and deployment descriptors as
specified in link:conn.htm#50540619_65903[See Deployment Descriptors and
Annotations], before applying the administed object class configuration
properties.

[#50540559_pgfId-999813]##The deployer may further override the values
of the administered object before deployment.

======= [#50540559_pgfId-999814]##Endpoint Deployer

[#50540559_pgfId-999815]##The endpoint deployer is a human who has the
responsibility to deploy the message endpoint, or application, on an
application server. The deployer is expected to know the requirements of
the application and be aware of the details of the runtime environment
in which the application will be deployed.

[#50540559_pgfId-999816]##The deployer selects a suitable resource
adapter that matches the requirements of the application depending on
endpoint message listener type, QoS capabilities, and so on. The
deployer configures an ActivationSpec JavaBean instance based on the
information provided by the application developer or assembler, which is
contained in the endpoint deployment descriptor or by way of metadata
annotations described in link:conn.htm#50540619_28779[See @Activation].
The deployer may also use additional message provider-specific
information to configure the ActivationSpec JavaBean instance.

[#50540559_pgfId-999817]##The deployer also configures a set of
administered objects, if necessary. The resource adapter provides the
JavaBean classes for such administered objects. The deployer may also
interact with a message provider to do the necessary setup for message
delivery.

[#50540559_pgfId-999818]##Then the deployer deploys the application on
the application server. As part of the deployment procedure, the
deployer provides all the configured JavaBean instances to the
application server, and also specifies the chosen resource adapter
instance to be used for message delivery.

======= [#50540559_pgfId-999819]##[#50540559_71477]##Application Server

[#50540559_pgfId-999820]##The application server provides the runtime
environment for the message endpoint. It activates message endpoints
when they are deployed. All such deployed endpoints are automatically
reactivated when an application server restarts after a normal shutdown
or system crash. When an application is undeployed, the application
server deactivates the endpoint.

[#50540559_pgfId-999821]##When an endpoint is activated, the application
server calls the chosen resource adapter by way of the
endpointActivation method and passes on a MessageEndpointFactory
instance and the ActivationSpec JavaBean, which was configured by the
endpoint deployer. The application server does not interpret the
contents of the ActivationSpec JavaBean and treats it as an opaque
entity. The resource adapter may reject an endpoint activation by
throwing a NotSupportedException during the endpointActivation method
call. This is due to incorrect activation information.

[#50540559_pgfId-1015159]##The application server must make the
application component environment namespace of the endpoint (that is
being activated), available to the resource adapter during the call to
the _endpointActivation_ and _endpointDeactivation_ methods. The
resource adapter may use this JNDI context to access other resources.

[#50540559_pgfId-1015161]##The resource adapter uses the
MessageEndpointFactory to create message endpoint instances to deliver
messages either serially or concurrently. There is no limit to the
number of such endpoints that may be created to deliver messages.
However, in practice the application server may decide to limit
concurrency by rejecting attempts to create new endpoints by throwing an
UnavailableException. The application server may also attempt to block a
message delivery method call in order to limit concurrency and perform
flow control.

[#50540559_pgfId-999823]##Note, a resource adapter may attempt to
deliver messages during the endpointActivation method call. It is up to
the application server to decide whether to allow message delivery
before activation is completed. If the application server chooses to
prevent message delivery during endpoint activation, it may block the
createEndpoint method call until the activation is completed or throw an
UnavailableException.

[#50540559_pgfId-999824]##The resource adapter may pass an XAResource
instance while creating a message endpoint in order to receive
transactional notifications when a message delivery is transacted. The
application server must notify the resource adapter through the
XAResource instance if a message delivery is transacted.

[#50540559_pgfId-999825]##During endpoint deployment, the application
server places the configured administered objects, if any, supplied by
the endpoint deployer in the component namespace java:comp/env. The
endpoint deployer specifies a location in the component namespace where
each administered object should reside. The configured administered
objects residing in the component namespace are used by the endpoint
application in a messaging style-specific manner.

[#50540559_pgfId-999826]##When an endpoint is deactivated, the
application server notifies the resource adapter through the
endpointDeactivation method call. The application server must pass the
same MessageEndpointFactory instance and the ActivationSpec JavaBean
instance that was used during endpoint activation.

======= [#50540559_pgfId-999827]##Message Provider

[#50540559_pgfId-999828]##A message provider, or messaging
infrastructure, is typically an external system that is the source for
messages. Message providers may vary in their QoS capabilities. A
message provider may provide special tools that can be directly used by
the endpoint deployer to setup the message provider for message
delivery.

[#50540559_pgfId-1015007]## 

[#50540559_pgfId-1014914]##Endpoint (Message-Driven Bean) Deployment
Steps

image:conn-105.gif[image]

======= [#50540559_pgfId-999909]##Endpoint Deployment Steps

[#50540559_pgfId-999910]##The sequence of steps involved in endpoint
deployment involving the various actors is as follows:

[#50540559_pgfId-999911]##The endpoint deployer obtains a list of
resource adapters capable of delivering messages to the message
endpoint, and chooses a suitable one. The decision is based on the
message listener type supported by the resource adapter and its QoS
capabilities. However, it is possible that the message endpoint
application may already contain a suitable resource adapter. In such a
case, the resource adapter is deployed along with the endpoint
application and is used to deliver messages to the specific endpoint
application.

[#50540559_pgfId-999912]##The deployer obtains the activation
configuration information provided by the endpoint developer available
by way of metadata annotations or in the endpoint deployment descriptor.

[#50540559_pgfId-999913]##The deployer may need to setup the message
provider for message delivery to the endpoint. This may be done using a
message provider specific tool.

[#50540559_pgfId-999914]##The deployer obtains an ActivationSpec
JavaBean from the selected resource adapter and configures it. The
configuration information is messaging style-specific and may include
message provider specific details.

[#50540559_pgfId-999915]##The deployer configures the JavaBean instances
of administered objects, if any are necessary.

[#50540559_pgfId-999916]##The deployer provides the configured JavaBean
instances to the application server, and also specifies the resource
adapter chosen for message delivery. Note, the contract between a
deployment tool and an application server is out of scope for this
specification.

[#50540559_pgfId-999917]##The application server places the administered
objects, if any, in the java:comp/env component namespace for use by the
message endpoint.

[#50540559_pgfId-999918]##The application server activates the message
endpoint by calling the chosen resource adapter through the
endpointActivation method and passes a MessageEndpointFactory instance
and the configured ActivationSpec JavaBean instance provided by the
deployer. The resource adapter may reject the endpoint activation by
throwing a NotSupportedException, which is due to incorrect activation
information.

======= [#50540559_pgfId-999919]##Requirements

[#50540559_pgfId-999920]##A resource adapter that is capable of
delivering messages to message endpoints must provide a list of endpoint
message listener types it supports, and also must provide an
ActivationSpec JavaBean class for each message listener type it
supports. This information must be part of the resource adapter
deployment descriptor.

[#50540559_pgfId-999921]##ActivationSpec and all administered objects
must be JavaBeans.

[#50540559_pgfId-999922]##A resource adapter must allow an application
server to make concurrent endpointActivation method or
endpointDeactivation method calls.

[#50540559_pgfId-999923]##The endpoint application’s activation-config
properties, specified in the endpoint deployment descriptor or through
the message endpoint’s annotation, should be a subset of the
ActivationSpec JavaBean’s properties. There must be a one-to-one
correspondence between the activation-config property names and the
ActivationSpec JavaBean’s property names. This allows automatic merging
of the activation-config properties with an ActivationSpec JavaBean
instance during endpoint deployment. Any specified activation-config
property which does not have a matching property in the ActivationSpec
JavaBean should be treated as an error.

[#50540559_pgfId-999924]##When an application server notifies a resource
adapter during endpoint deactivation, it must pass the same
MessageEndpointFactory instance and the ActivationSpec JavaBean instance
that was used during endpoint activation.

[#50540559_pgfId-999925]##Any exception thrown by the
endpointDeactivation method call must be ignored. After this method call
the endpoint is deemed inactive.

[#50540559_pgfId-999926]##All deployed endpoints must be automatically
reactivated by the application server when it restarts after a normal
shutdown or system crash.

[#50540559_pgfId-999927]##Before a resource adapter is undeployed, the
application server must deactivate all active endpoints consuming
messages from that specific resource adapter.

======= [#50540559_pgfId-999928]##Structure of a Message Listener Interface

[#50540559_pgfId-999929]##A message listener interface implemented by a
message endpoint, a message-driven bean, is allowed to have multiple
methods. Each method of a message listener interface is allowed to have
multiple arguments, a return value, and throw checked application
exceptions or unchecked system exceptions.

[#50540559_pgfId-999930]##Checked exceptions are thrown only by a
message listener implementation. The message-driven bean container must
propagate to the resource adapter any checked exception that occurs
during message dispatch.

[#50540559_pgfId-999931]##Unchecked exceptions
(java.lang.RuntimeException and java.lang.Error) may be thrown by either
the message listener implementation or may be thrown by the application
server code during message dispatch. The application server must wrap
such an unchecked exception within a javax.ejb.EJBException, which is a
java.lang.RuntimeException, and throw the javax.ejb.EJBException to the
resource adapter.

[#50540559_pgfId-999932]##The EJB specification describes in detail the
structural requirements of a message listener interface implemented by a
message-driven bean.

======= [#50540559_pgfId-999933]##Multiple Endpoint Activations With Similar Activation Configuration

[#50540559_pgfId-999934]##Since multiple endpoints, that is, different
applications, with similar activation configuration may be deployed in a
single application server, the application server may call the
endpointActivation method on a resource adapter instance multiple times
with similar activation configuration. The resource adapter must treat
multiple endpoint activations with similar activation configuration
separately. When messages start arriving, the resource adapter must, for
each active endpoint, deliver a separate copy of incoming messages, even
if there are multiple endpoints with similar activation configuration.

======= [#50540559_pgfId-999935]##Requirements

[#50540559_pgfId-999936]##The application server must supply a unique
MessageEndpointFactory instance for each activation.

[#50540559_pgfId-1013856]##Refer to link:conn.htm#50540546_80258[See
Equality Constraints] for equality constraints on MessageEndpointFactory
and ActivationSpec implementations.

[#50540559_pgfId-999937]##The resource adapter must treat multiple
endpoints with similar activation configuration separately and guarantee
message delivery semantics.

[#50540559_pgfId-1013867]##The resource adapter must treat each
ActivationSpec JavaBean uniquely irrespective of its contents. That is,
the resource adapter must not treat two separate ActivationSpec
JavaBeans as equals.

[#50540559_pgfId-1013868]## 

[#50540559_pgfId-1013923]##Endpoint Deployment (Sequence Diagram)

image:conn-106.gif[image]

======= [#50540559_pgfId-999994]##

image:conn-100.gif[image]

[#50540559_97757]##Message Delivery

[#50540559_pgfId-999995]##Once endpoints are activated, they are ready
to receive messages. When messages arrive, the resource adapter uses the
MessageEndpointFactory to create an endpoint instance. The resource
adapter narrows the endpoint instance to the actual message listener
type (it knows the endpoint type from the ActivationSpec), and delivers
the message to the endpoint instance. The EJB specification (see
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2]) prescribes the rules for the message
listener interface structure. The same endpoint instance may be used
again to deliver subsequent messages serially, but it must not use the
same endpoint instance concurrently.

[#50540559_pgfId-999999]##Note that the endpoint instance supplied by
the createEndpoint method call is a proxy which implements the endpoint
message listener type and the MessageEndpoint interface and it is not
the actual endpoint. This is necessary because the application server
may need to intercept the message delivery in order to inject
transactions, depending on the actual endpoint preferences, and to
perform other checks.

[#50540559_pgfId-1000000]##The proxy endpoint instance is implemented by
the application server and is used to intercept the message delivery,
performs checks, inject transactions, and so on, and to route the
message to the actual message endpoint instance. The resource adapter
does not have to make this distinction, and should treat the proxy
endpoint instance as the actual endpoint instance.

[#50540559_pgfId-1000001]##The resource adapter may use a proxy endpoint
instance to serially deliver messages. The resource adapter must not use
a proxy endpoint instance concurrently from different threads. The proxy
endpoint may throw a java.lang.IllegalStateException when invoked
concurrently. However, a proxy endpoint instance may be used by
different threads in a serial fashion.

[#50540559_pgfId-1000002]##The resource adapter may call the release
method on the proxy endpoint instance to indicate that it no longer
requires the proxy instance. This hint may be used by the application
server for proxy endpoint pooling decisions. This method call frees the
state of the proxy instance. The released proxy instance may be reused
for further proxy endpoint requests from the same resource adapter. A
proxy endpoint instance must not be reused across multiple resource
adapter instances.

[#50540559_pgfId-1000003]##Between the time a proxy endpoint instance is
released and before it is granted back to the same resource adapter (by
way of a createEndpoint method call), the proxy endpoint instance is
considered to be in a free and available state. Any attempted use of a
free proxy must result in a java.lang.IllegalStateException thrown by
the application server.

[#50540559_pgfId-1000004]##The application server may start a
transaction before delivering the message to the actual endpoint
depending on the endpoint preferences. The resource adapter may
optionally pass an XAResource instance through the createEndpoint method
in order to receive transaction notifications for those transactions
started by an application server before message delivery.

======= [#50540559_pgfId-1000005]##Sample Resource Adapter Code To Illustrate Message Delivery

======= [#50540559_pgfId-1003035]##Message Delivery in a Resource Adapter

[#50540559_pgfId-1003147]##// Reader Thread(s)

[#50540559_pgfId-1003047]##\{

[#50540559_pgfId-1003049]## // 1. Strip off msg header and parse message
description

[#50540559_pgfId-1003051]## // 2. Choose a set of endpoints which match
message description

[#50540559_pgfId-1003053]## // 3. Place message in appropriate buffer /
queue

[#50540559_pgfId-1003055]## // 4. Notify worker threads

[#50540559_pgfId-1003057]##}

[#50540559_pgfId-1003059]## 

[#50540559_pgfId-1003186]##// Worker Thread(s)

[#50540559_pgfId-1003063]##\{

[#50540559_pgfId-1003065]## // 1. Wake up on notification (message
arrival)

[#50540559_pgfId-1003067]## // 2. Pick up the message and locate the
MessageEndpointFactory

[#50540559_pgfId-1003069]## // associated with the subscription

[#50540559_pgfId-1003071]## Message msg = ...;

[#50540559_pgfId-1003073]## MessageEndpointFactory endpointFactory =
...;

[#50540559_pgfId-1003075]## MyXAResource xaResource = ...; // for
transacted delivery

[#50540559_pgfId-1003077]## 

[#50540559_pgfId-1003079]## // 4. Obtain a message endpoint and narrow
it to the

[#50540559_pgfId-1003081]## // correct type.

[#50540559_pgfId-1003083]## 

[#50540559_pgfId-1003085]## // ActivationSpec has endpoint message
listener type

[#50540559_pgfId-1003087]## // information.

[#50540559_pgfId-1003089]## Object obj =
endpointFactory.createEndpoint(xaResource);

[#50540559_pgfId-1003091]## javax.jms.MessageListener endpoint =

[#50540559_pgfId-1003093]## (javax.jms.MessageListener) obj;

[#50540559_pgfId-1003095]## 

[#50540559_pgfId-1003097]## // 5. Link the XAResource with the endpoint.
This allows the

[#50540559_pgfId-1003099]## // XAResource object to know which
endpoint/message delivery

[#50540559_pgfId-1003101]## // is transacted when it receives
transaction notifications.

[#50540559_pgfId-1003103]## // This may be unnecessary depending on the
implementation.

[#50540559_pgfId-1003105]## xaResource.setEndpoint(endpoint);

[#50540559_pgfId-1003107]## 

[#50540559_pgfId-1003109]## // Note: It may be possible to make the
XAResource object

[#50540559_pgfId-1003111]## // thread-safe/reentrant and reuse the same
object for receiving

[#50540559_pgfId-1003113]## // transaction notifications for different
endpoints.

[#50540559_pgfId-1003115]## // The XAResource object may use
thread-local storage to

[#50540559_pgfId-1003117]## // remember state, and thus avoid creating
multiple

[#50540559_pgfId-1003119]## // XAResource objects.

[#50540559_pgfId-1003121]## 

[#50540559_pgfId-1003123]## // 6. Deliver the message.

[#50540559_pgfId-1003125]## endpoint.onMessage(msg);

[#50540559_pgfId-1003127]## 

[#50540559_pgfId-1003129]## // 7. Wait for notification of incoming
messages

[#50540559_pgfId-1003131]## // and repeat the above steps on message
arrival.

[#50540559_pgfId-1003133]##}

[#50540559_pgfId-1003533]## 

[#50540559_pgfId-1003531]##package com.wombat.ra;

[#50540559_pgfId-1003529]## 

[#50540559_pgfId-1003527]##import javax.transaction.xa.*;

[#50540559_pgfId-1003525]## 

[#50540559_pgfId-1003556]##class MyXAResource implements
javax.transaction.xa.XAResource \{

[#50540559_pgfId-1003521]## 

[#50540559_pgfId-1003519]## public void start(Xid xid) throws
XAException \{

[#50540559_pgfId-1003517]## // Associate the message delivery with the
transaction id.

[#50540559_pgfId-1003515]## // That is, create the tuple (msg id,
transaction id) in

[#50540559_pgfId-1003662]## // memory.

[#50540559_pgfId-1003513]## }

[#50540559_pgfId-1003511]## 

[#50540559_pgfId-1003612]## public int prepare(Xid xid) throws
XAException \{

[#50540559_pgfId-1003507]## // Forward the tuple (message id,
transaction id) to the

[#50540559_pgfId-1003505]## // message provider. The provider must
persist this

[#50540559_pgfId-1003503]## // information, which is used during crash
recovery by the

[#50540559_pgfId-1003501]## // application server. During crash
recovery,

[#50540559_pgfId-1003499]## // the application calls the message
provider, via the

[#50540559_pgfId-1003497]## // recover method on an XAResource object,
queries for

[#50540559_pgfId-1003495]## // a list of in-doubt transactions and
completes them.

[#50540559_pgfId-1003493]## // Upon successful completion, return
"ready_to_commit"

[#50540559_pgfId-1003491]## // vote, else return "rollback_only" vote.

[#50540559_pgfId-1003489]## }

[#50540559_pgfId-1003487]## 

[#50540559_pgfId-1003793]## public void commit(Xid xid, boolean
onePhase)

[#50540559_pgfId-1003483]## throws XAException \{

[#50540559_pgfId-1003481]## // forward the transaction ID to the message
provider. This

[#50540559_pgfId-1003479]## // serves as the acknowledgement that a
message was

[#50540559_pgfId-1003477]## // delivered.

[#50540559_pgfId-1003475]## }

[#50540559_pgfId-1003473]## 

[#50540559_pgfId-1003850]## public void rollback(Xid xid) throws
XAException \{

[#50540559_pgfId-1003469]## // forward the transaction ID to the message
provider. This

[#50540559_pgfId-1003467]## // indicates to the provider that the
message was not

[#50540559_pgfId-1003465]## // delivered.

[#50540559_pgfId-1003463]## }

[#50540559_pgfId-1003461]## 

[#50540559_pgfId-1003459]## ...; // other methods

[#50540559_pgfId-1003457]##}

======= [#50540559_pgfId-1000082]##Requirements

[#50540559_pgfId-1000083]##The application server’s proxy endpoint
instance must implement the endpoint message listener type and the
MessageEndpoint interface.

[#50540559_pgfId-1000084]##The application server must pass by reference
all the method parameter objects passed by the resource adapter during a
message delivery method call on a proxy endpoint. The application server
must not copy or clone the passed method parameter objects during
message delivery to the actual endpoint instance.

[#50540559_pgfId-1000085]##If the application server starts a new
transaction, depending on endpoint preferences, before delivering a
message to an endpoint instance, it must send all transaction
notifications to the XAResource instance optionally supplied by the
resource adapter as part of the createEndpoint method call.

[#50540559_pgfId-1000086]##A resource adapter must not attempt to
deliver messages concurrently to a single endpoint instance. The
application server must reject concurrent usage of an endpoint instance.

======= [#50540559_pgfId-1000087]##Message Redelivery Upon Crash Recovery

[#50540559_pgfId-1000088]##An application server may crash during
message delivery. In the case of message deliveries transacted by the
application server, the application server must notify the commit
decision to the message provider during crash recovery.

[#50540559_pgfId-1000089]##During crash recovery:

[#50540559_pgfId-1000090]##The application server must first restart
resource adapter instances by calling the start method on each persisted
ResourceAdapter JavaBean, each corresponding to a resource adapter
instance that was active prior to the crash.

[#50540559_pgfId-1000091]##The application server must call the
getXAResources method on each ResourceAdapter JavaBean, and pass in an
array of ActivationSpec JavaBeans, each of which corresponds to a
deployed endpoint application that was active prior to the system crash.
This method need not be called if there were no endpoint applications
that were active prior to the crash.

[#50540559_pgfId-1000092]##Upon being called by the application server
during crash recovery through the getXAResources method, the resource
adapter must return an array of XAResource objects, each of which
represents a unique resource manager.

[#50540559_pgfId-1000093]##The resource adapter may return null if it
does not implement the XAResource interface. Otherwise, it must return
an array of XAResource objects, each of which represents a unique
resource manager that was used by the endpoint applications. The
resource adapter may throw a ResourceException if it encounters an error
condition.

[#50540559_pgfId-1000094]##Since each returned XAResource object
represents a unique resource manager, the number of returned XAResource
objects must be less than or equal to the number of ActivationSpec
instances specified.

[#50540559_pgfId-1000095]##Since it is possible that multiple resource
adapters may use the same resource manager, there may be more than one
XAResource object in the collection representing a resource manager. The
application server may still need to narrow the collection of XAResource
objects to a unique set of resource managers by using the isSameRM
method on the XAResource object.

[#50540559_pgfId-1000096]##The application server must use the
XAResource objects to query each resource manager for a list of in-doubt
in an already prepared state awaiting a commit decision transactions.
Then, it must complete each pending transaction by sending the commit
decision to the participating resource managers. Note, it is possible
that a resource manager may not have pending in-doubt transactions.

[#50540559_pgfId-1000097]##The crash recovery procedure ensures that the
message provider gets notified about the outcome of all message
deliveries that were in an in-doubt transaction state at the time of the
crash. Upon such notification, the message provider, depending on the
delivery outcome, may decide to redeliver the undelivered messages to
the various endpoints when they are reactivated.

======= [#50540559_pgfId-1000098]##Durable Message Delivery Setup

[#50540559_pgfId-1000099]##Once message endpoints are activated, they
are ready to receive messages from a message provider. Message delivery
setup may either be durable or non-durable.

[#50540559_pgfId-1000100]##In the case of non-durable message
deliveries, messages are lost during application server downtime. When
the application server becomes functional again, it automatically
reactivates all message endpoints that were previously deployed, and
message delivery starts again. But the messages that were produced
during the downtime are lost. This is because messages are not persisted
by the message provider and redelivered when the message endpoints are
reactivated.

[#50540559_pgfId-1000101]##In the case of durable activations, messages
are not lost during application server downtime. When the application
server becomes functional again, it automatically reactivates all
message endpoints that were previously deployed, and message delivery
starts again. The messages that were produced during the downtime are
persisted by the message provider and redelivered when the message
endpoints are reactivated. It is the responsibility of the message
provider to persist undelivered messages and redeliver them when the
endpoint is available; that is, when the endpoint is reactivated by the
app server.

[#50540559_pgfId-1000102]##Durability of message delivery may be an
attribute of the activation setup, and thus it must be captured as part
of the endpoint activation information. No additional contracts are
required to support durable activations. Activation durability can be
specified by a endpoint deployer by way of the ActivationSpec JavaBean.
Note, some message providers may not support durable message deliveries
and hence it is a QoS capability offered by the message provider.

======= [#50540559_pgfId-1000103]##Concurrent Delivery of Messages

[#50540559_pgfId-1000104]##During message endpoint activation, the
application server supplies a MessageEndpointFactory to the resource
adapter. The MessageEndpointFactory is used to get an endpoint instance
through the createEndpoint method call. Each call results in a new or an
unused endpoint instance that may be used to deliver messages
concurrently; that is, for each active message endpoint, there may be
multiple endpoint instances consuming messages concurrently.

[#50540559_pgfId-1000105]##Thus, for each message endpoint, depending on
traffic, the resource adapter may choose to deliver messages serially
using a single endpoint instance or concurrently using multiple endpoint
instances.

[#50540559_pgfId-1000106]##There is no limit to the number of such
endpoint instances that may be created, although the application server
may limit the concurrency by either throwing an UnavailableException or
by blocking the createEndpoint method call.

[#50540559_pgfId-1000107]##The application server may also attempt to
block a message delivery method call in order to limit concurrency and
perform flow control.

======= [#50540559_pgfId-1000108]##Requirements

[#50540559_pgfId-1000109]##The application server must return a new or
an unused endpoint instance for every createEndpoint method call on a
MessageEndpointFactory.

======= [#50540559_pgfId-1000110]##Delivery Semantics and Acknowledgement

[#50540559_pgfId-1000111]##When the resource adapter delivers a message
to an endpoint instance, which is really a proxy endpoint instance, the
application server intercepts the message delivery to perform checks,
inject transactions, and so on, and routes the message to the actual
message endpoint instance.

[#50540559_pgfId-1000112]##The application server may start a
transaction before delivering the message to the actual endpoint
depending on the endpoint preferences. In the case of a transacted
delivery, the resource adapter may use the transaction notifications
received through the XAResource object to send back an acknowledgement
to its message provider.

[#50540559_pgfId-1000113]##In the case of non-transacted delivery, that
is, the application server does not start a transaction, the resource
adapter has to rely on the successful completion of the message delivery
call in order to send back an acknowledgement to its provider.

======= [#50540559_pgfId-1000114]##Transacted Delivery (Using Container-Managed Transaction)

[#50540559_pgfId-1000115]##Depending on the endpoint preferences, the
application server brackets the message delivery to an endpoint instance
with a Java Transaction API (JTA) transaction.

[#50540559_pgfId-1000116]##This ensures that all the work done by the
endpoint instance is enlisted as part of the transaction.

[#50540559_pgfId-1000117]##This provides atomic message delivery/message
consumption; that is, if the transaction were to be aborted by the
application server due to an exceptional condition, all the work done by
the endpoint instance is aborted, and the delivery is undone. If this
does not occur, the transaction is committed, all the work done by the
endpoint instance is committed and the delivery is completed.

[#50540559_pgfId-1000118]##The application server notifies the resource
adapter while beginning and completing transactions by using the
XAResource instance optionally supplied through the createEndpoint
method call.

[#50540559_pgfId-1000119]##This allows the adapter to detect the outcome
of a transacted delivery, and also influence the outcome of the
transaction via through prepare method call on the XAResource instance.

[#50540559_pgfId-1000120]##This allows the adapter to send back an
acknowledgement to its message provider contingent on successful
delivery; that is, when notified through the commit method call on the
XAResource instance.

[#50540559_pgfId-1000121]##This also allows the adapter to be notified
of the correct delivery outcome upon failure recovery processing; that
is, if the system crashes when the transaction is in-doubt, that is,
when the transaction has already been prepared, the application server
upon recovery correctly completes the transaction and notifies the
adapter of the outcome of the transaction. Thus, the adapter can send
back an acknowledgement to its message provider after failure recovery,
if the message had been successfully delivered.

[#50540559_pgfId-1000122]##A resource adapter may optionally provide an
XAResource instance through the createEndpoint method call in order to
receive transactional notifications for those transactions started by an
application server before message delivery. The resource adapter may
find out whether message deliveries to a target method on a message
endpoint will be transacted or not through the isDeliveryTransacted
method in the MessageEndPointFactory instance, and decide whether to
provide an XAResource instance through the createEndpoint method. Note,
this does not require the resource adapter to support the transaction
inflow contract (see link:conn.htm#50540571_84673[See Transaction
Inflow]).

[#50540559_pgfId-1000126]##There are two delivery options available to
the resource adapter for transacted deliveries:

[#50540559_pgfId-1000127]##Option A, traditional XA style. The resource
adapter optionally provides an _XAResource_ instance through the
createEndpoint method in order to receive XA transaction notifications
for transacted message deliveries. In this case, the application server
fully controls the transaction boundaries and the resource adapter is
merely a participant (the XAResource Resource Manager (RM)). See
link:conn.htm#50540559_89810[See Transacted Message Delivery: Option
A(Sequence Diagram)].

[#50540559_pgfId-1000131]##Option B, beforeDelivery/afterDelivery. The
resource adapter still optionally provides an XAResource instance
through the createEndpoint method in order to receive XA transaction
notifications for transacted message deliveries. But the resource
adapter controls the transaction boundaries through the
beforeDelivery/afterDelivery calls, in spite of being only a participant
(an _XAResource_ RM).

[#50540559_pgfId-1000132]##During the beforeDelivery call from the
resource adapter, depending on the transactional preferences of the
intended target method (specified through the java.lang.reflect.Method
method parameter), the application server starts a transaction and
enlists the XAResource instance in the transaction. The processing (by
the application server) of the actual message delivery method call on
the endpoint must be independent of the class loader associated with the
descriptive method object (parameter).

[#50540559_pgfId-1000133]##During the afterDelivery call from the
resource adapter, the application server completes the transaction and
sends transaction completion notifications to the XAResource instance.
The actual message delivery happens in between the beforeDelivery and
afterDelivery calls.

[#50540559_pgfId-1000134]##In this case, the resource adapter controls
when the transaction is started and completed by the application server,
even though the application server decides on the outcome of the
transaction. This allows resource adapters more flexibility in handling
message deliveries. For example, the resource adapter may choose to
dequeue a message from within the container-managed transaction so that
the message dequeue is automatically undone if the container-managed
transaction aborts.

[#50540559_pgfId-1014374]##There must not be more than one message
delivery in-between a single beforeDelivery and afterDelivery method
call pair. The application server must reject beforeDelivery or
afterDelivery calls that are out of sequence by throwing an
IllegalStateException.

[#50540559_pgfId-1014377]##The application server must also allow a
resource adapter not to perform any message delivery in-between a single
_beforeDelivery_ and _afterDelivery_ method call pair. This scenario
arises, for instance, when a resource adapter first chooses to deliver a
message and calls _beforeDelivery_ , but later is unable to deliver the
message (for example in the case of JMS resource adapters, the resource
adapter may abort the message delivery and transfer the message to a
Dead Message Queue). The resource adapter must be able to call
_afterDelivery_ and complete the delivery cycle. The application server
must perform any possible cleanup of actions that occurred in between
the _beforeDelivery_ and _afterDelivery_ method calls.

[#50540559_pgfId-1000136]##The beforeDelivery and afterDelivery method
calls are considered part of a single message delivery call. For each
message delivery, the beforeDelivery, afterDelivery methods and the
actual message delivery method, must be called from a single thread of
control.

[#50540559_pgfId-1000137]##Further, the application server must set the
thread context class loader to the endpoint application class loader
during the beforeDelivery call and must reset it during a corresponding
afterDelivery call. This allows a resource adapter to use the
application class loader to load application specific classes while
deserializing, or reconstructing, a message object. Note, setting of the
thread context class loader during the beforeDelivery call is
independent of whether an XAResource instance is provided by the
resource adapter.

[#50540559_pgfId-1000138]##For each message delivery to an endpoint
instance, the application server must match an afterDelivery call with a
corresponding beforeDelivery call; that is, for each message delivery to
an endpoint instance, beforeDelivery and afterDelivery calls are treated
as a pair. See link:conn.htm#50540559_31369[See Transacted Message
Delivery: Option B (Sequence Diagram)].

[#50540559_pgfId-1000142]##Thus, in the case of transacted deliveries:

[#50540559_pgfId-1000143]##If a resource adapter does not provide an
XAResource instance, it does not get XA transaction notifications.

[#50540559_pgfId-1000144]##If a resource adapter provides an XAResource
instance, it gets XA transaction notifications.

[#50540559_pgfId-1000145]##If a resource adapter calls beforeDelivery
and afterDelivery methods in addition to providing an XAResource
instance, it not only receives XA transaction notifications but also
gains control over when the transaction is started and completed. The
beforeDelivery and afterDelivery calls have no effect when the resource
adapter does not provide an XAResource instance or when the delivery is
not transacted.

[#50540559_pgfId-1000146]##These various delivery options provide more
choices to the resource adapter and allow a wide range of resource
adapter and messaging provider implementations to be plugged-in. The
application server must support both delivery options, option A and
option B.

[#50540559_pgfId-1000147]##The release method call on a proxy endpoint
instance releases the state of the proxy instance and makes it available
for reuse. If the release method is called while a message delivery is
in-progress, the application server must throw a
java.lang.IllegalStateException, since concurrent calls on a proxy
endpoint instance is disallowed. In the case of option B, if the release
method is called in-between beforeDelivery and afterDelivery method
calls, any transaction started during the corresponding beforeDelivery
method call must be aborted by the application server.

======= [#50540559_pgfId-1000148]##Non-Transacted Delivery

[#50540559_pgfId-1000149]##The application server does not bracket the
message delivery to an endpoint instance within a JTA transaction.

[#50540559_pgfId-1003986]##The resource adapter relies on the successful
return of the message delivery call on the endpoint instance for
delivery confirmation and may send out an acknowledgement to its message
provider if appropriate.

[#50540559_pgfId-1003987]##Any exception thrown by an endpoint instance
during message delivery is taken as a failed delivery. The application
server must propagate any exception thrown during message delivery to
the resource adapter.

[#50540559_pgfId-1000152]##The application server does not notify the
resource adapter about the delivery outcome upon crash recovery. Note,
system failures may happen before the application server calls the
actual endpoint instance, or while the actual endpoint instance is doing
work, or after the endpoint has completed its work but before the
message delivery on the endpoint returns.

[#50540559_pgfId-1000153]##The application server does not have delivery
status information available during failure recovery, nor does it detect
what state the actual endpoint instance was in when the failure
happened. Consequently, it is hard to model exactly once delivery
semantics for non-transacted dispatches.

======= [#50540559_pgfId-1000154]##Transacted Delivery Using an Imported Transaction

[#50540559_pgfId-1000155]##It is possible that a resource adapter may
attempt message delivery to an endpoint instance with a transaction
initiated by a message source, or message provider; that is, the message
source initiates a transaction, and pushes a message to the resource
adapter from within the transaction. The resource adapter in turn
imports the transaction and attempts message delivery on an endpoint
instance from within the source managed transaction.

[#50540559_pgfId-1000158]##The resource adapter must use the transaction
inflow contract (see link:conn.htm#50540571_84673[See Transaction
Inflow]) to import transactions initiated by a message source.

[#50540559_pgfId-1000160]##It must be possible to serially deliver one
or more messages to one or more endpoint instances belonging to one or
more endpoint applications within a single transaction, and be able to
commit or abort the transaction as a single unit.

[#50540559_pgfId-1000161]##That is, it must be possible for a resource
adapter to serially submit one or more Work objects (associated with a
single transaction) that deliver messages to one or more endpoint
instances belonging to one or more endpoint applications. If the
enclosing transaction successfully commits, the messages are deemed to
have been successfully delivered. If the enclosing transaction aborts,
the messages that were delivered as part of the transaction are
canceled.

======= [#50540559_pgfId-1000162]##Requirements

[#50540559_pgfId-1000163]##An application server must implement the
following behavior for transacted and non-transacted message delivery to
an endpoint instance. Before invoking the actual endpoint instance the
application server must do the checks prescribed in
link:conn.htm#50540559_56353[See Application Server Behavior for
Transacted and Non-transacted Message Delivery] shown below, depending
on the endpoint transaction preferences and the presence of a source
managed transaction:

======= [#50540559_pgfId-1000170]##[#50540559_56353]##Application Server Behavior for Transacted and Non-transacted Message Delivery

[#50540559_pgfId-1000176]## 

[#50540559_pgfId-1000178]##Source managed transaction

[#50540559_pgfId-1000180]##No source managed transaction

[#50540559_pgfId-1000182]##Endpoint instance requires transacted message
delivery

[#50540559_pgfId-1000184]##Use the source managed transaction. Ignore
the _XAResource_ instance supplied by the resource adapter, if any.

[#50540559_pgfId-1000186]##Start a new transaction. Notify the
_XAResource_ instance supplied by the resource adapter, if any.

[#50540559_pgfId-1000188]##Endpoint does not need transacted message
delivery

[#50540559_pgfId-1000190]##Suspend the source managed transaction.
Ignore the _XAResource_ instance supplied by the resource adapter, if
any.

[#50540559_pgfId-1000192]##No action. Ignore the _XAResource_ instance
supplied by the resource adapter, if any.

[#50540559_pgfId-1000193]##The application server must propagate any
exception thrown during a message delivery to the resource adapter
irrespective of whether the delivery is transacted or not.

[#50540559_pgfId-1015009]##For transacted deliveries, the application
server must support both delivery options, option A and option B.

[#50540559_pgfId-1015015]## 

======= [#50540559_pgfId-1015010]##

image:conn-100.gif[image]

Endpoint Undeployment

[#50540559_pgfId-1000196]##When a message endpoint is undeployed, the
application server notifies the resource adapter through the
endpointDeactivation method. The application server must pass the same
MessageEndpointFactory instance and the ActivationSpec JavaBean instance
that was used during the endpoint activation.

[#50540559_pgfId-1000197]##The resource adapter removes the endpoint
information from its internal state and in turn may notify the message
provider.

[#50540559_pgfId-1015024]## 

[#50540559_pgfId-1015023]##[#50540559_89810]##Transacted Message
Delivery: Option A(Sequence Diagram)

image:conn-107.gif[image]

[#50540559_pgfId-1000365]##Transacted[#50540559_31369]## Message
Delivery: Option B (Sequence Diagram)

image:conn-108.gif[image]

[#50540559_pgfId-1000409]##Non-transacted Message Delivery (Sequence
Diagram)

image:conn-109.gif[image]

[#50540559_pgfId-1000448]##Endpoint Undeployment (Sequence Diagram)

image:conn-110.gif[image]

======= [#50540559_pgfId-1000449]##

image:conn-100.gif[image]

Java Message Service (JMS) Use Case

[#50540559_pgfId-1000450]##For illustration purposes, a JMS use case
involving a JMS resource adapter is discussed. The intent of this use
case is to show the following:

[#50540559_pgfId-1014183]##The JMS resource adapter uses the generic
message inflow contract and asynchronously delivers messages to
message-driven beans through the onMessage method on the
javax.jms.MessageListener interface.

[#50540559_pgfId-1014184]##The JMS resource adapter is used by an EJB
application to send and synchronously receive messages through a
javax.jms.Connection object.

[#50540559_pgfId-1000453]##This use case is shown for illustration
purposes only and an application server may or may not achieve all
message deliveries to message-driven beans using the generic message
inflow contract.

[#50540559_pgfId-1014179]##This illustrates how a JMS provider is
plugged into a Java EE application server using the standard connector
contracts.

======= [#50540559_pgfId-1006880]##Sample JMS Resource Adapter Deployment Descriptor

[#50540559_pgfId-1006882]##<?xml version="1.0" encoding="UTF-8"?>

[#50540559_pgfId-1006884]## 

[#50540559_pgfId-1006886]##<connector
xmlns="http://java.sun.com/xml/ns/j2ee"

[#50540559_pgfId-1006888]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.5">

[#50540559_pgfId-1006890]##
<display-name>Wombat-JMSAdapter</display-name>

[#50540559_pgfId-1006892]## <vendor-name>Wombat Software
Systems</vendor-name>

[#50540559_pgfId-1006894]## <eis-type>JMS Provider</eis-type>

[#50540559_pgfId-1006896]##
<resourceadapter-version>1.0</resourceadapter-version>

[#50540559_pgfId-1006898]## 

[#50540559_pgfId-1006900]## <resourceadapter>

[#50540559_pgfId-1006902]## <resourceadapter-class>

[#50540559_pgfId-1006904]## com.wombat.connector.jms.JMSAdapterImpl

[#50540559_pgfId-1006906]## </resourceadapter-class>

[#50540559_pgfId-1006908]## 

[#50540559_pgfId-1006910]## <!-- ResourceAdapter default configuration
properties -->

[#50540559_pgfId-1006912]## <config-property>

[#50540559_pgfId-1006914]##
<config-property-name>ServerName</config-property-name>

[#50540559_pgfId-1006916]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1006918]##
<config-property-value>WombatServer</config-property-value>

[#50540559_pgfId-1006920]## </config-property>

[#50540559_pgfId-1006922]## <config-property>

[#50540559_pgfId-1006924]##
<config-property-name>PortNumber</config-property-name>

[#50540559_pgfId-1006926]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1006928]##
<config-property-value>1050</config-property-value>

[#50540559_pgfId-1006930]## </config-property>

[#50540559_pgfId-1006932]## <config-property>

[#50540559_pgfId-1006934]##
<config-property-name>OperationalMode</config-property-name>

[#50540559_pgfId-1006936]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1006938]##
<config-property-value>Managed</config-property-value>

[#50540559_pgfId-1006940]## </config-property>

[#50540559_pgfId-1006942]## <config-property>

[#50540559_pgfId-1006944]##
<config-property-name>ContainerType</config-property-name>

[#50540559_pgfId-1006946]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1006948]##
<config-property-value>EJB-WEB</config-property-value>

[#50540559_pgfId-1006950]## </config-property>

[#50540559_pgfId-1006952]## 

[#50540559_pgfId-1006954]## <outbound-resourceadapter>

[#50540559_pgfId-1006956]## 

[#50540559_pgfId-1006958]## <connection-definition>

[#50540559_pgfId-1006960]## <managedconnectionfactory-class>

[#50540559_pgfId-1006962]##
com.wombat.connector.jms.QueueManagedConnectionFactoryImpl

[#50540559_pgfId-1006964]## </managedconnectionfactory-class>

[#50540559_pgfId-1006966]## 

[#50540559_pgfId-1006968]## <!-- ManagedConnectionFactory default
configuration properties -->

[#50540559_pgfId-1006970]## <config-property>

[#50540559_pgfId-1006972]##
<config-property-name>ServerName</config-property-name>

[#50540559_pgfId-1006974]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1006976]## <config-property-value>

[#50540559_pgfId-1006978]## WombatQueueServer

[#50540559_pgfId-1006980]## </config-property-value>

[#50540559_pgfId-1006982]## 

[#50540559_pgfId-1006984]## <config-property>

[#50540559_pgfId-1006986]##
<config-property-name>PortNumber</config-property-name>

[#50540559_pgfId-1006988]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1006990]##
<config-property-value>1051</config-property-value>

[#50540559_pgfId-1006992]## </config-property>

[#50540559_pgfId-1006994]## 

[#50540559_pgfId-1006996]## <connectionfactory-interface>

[#50540559_pgfId-1006998]## javax.jms.QueueConnectionFactory

[#50540559_pgfId-1007000]## </connectionfactory-interface>

[#50540559_pgfId-1007002]## <connectionfactory-impl-class>

[#50540559_pgfId-1007004]##
com.wombat.connector.jms.QueueConnectionFactoryImpl

[#50540559_pgfId-1007006]## </connectionfactory-impl-class>

[#50540559_pgfId-1007008]## 

[#50540559_pgfId-1007010]## <connection-interface>

[#50540559_pgfId-1007012]## java.jms.QueueConnection

[#50540559_pgfId-1007014]## </connection-interface>

[#50540559_pgfId-1007016]## <connection-impl-class>

[#50540559_pgfId-1007018]## com.wombat.connector.jms.QueueConnectionImpl

[#50540559_pgfId-1007020]## </connection-impl-class>

[#50540559_pgfId-1007022]## </connection-definition>

[#50540559_pgfId-1007024]## 

[#50540559_pgfId-1007026]## <connection-definition>

[#50540559_pgfId-1007028]## <managedconnectionfactory-class>

[#50540559_pgfId-1007030]##
com.wombat.connector.jms.TopicManagedConnectionFactoryImpl

[#50540559_pgfId-1007032]## </managedconnectionfactory-class>

[#50540559_pgfId-1007034]## 

[#50540559_pgfId-1007036]## <!-- ManagedConnectionFactory default
configuration properties -->

[#50540559_pgfId-1007038]## <config-property>

[#50540559_pgfId-1007040]##
<config-property-name>ServerName</config-property-name>

[#50540559_pgfId-1007042]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1007044]## <config-property-value>

[#50540559_pgfId-1007046]## WombatTopicServer

[#50540559_pgfId-1007048]## </config-property-value>

[#50540559_pgfId-1007050]## </config-property>

[#50540559_pgfId-1007052]## <config-property>

[#50540559_pgfId-1007054]##
<config-property-name>PortNumber</config-property-name>

[#50540559_pgfId-1007056]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1007058]##
<config-property-value>1052</config-property-value>

[#50540559_pgfId-1007060]## </config-property>

[#50540559_pgfId-1007062]## 

[#50540559_pgfId-1007064]## <connectionfactory-interface>

[#50540559_pgfId-1007066]## javax.jms.TopicConnectionFactory

[#50540559_pgfId-1007068]## </connectionfactory-interface>

[#50540559_pgfId-1007070]## <connectionfactory-impl-class>

[#50540559_pgfId-1007072]##
com.wombat.connector.jms.TopicConnectionFactoryImpl

[#50540559_pgfId-1007074]## </connectionfactory-impl-class>

[#50540559_pgfId-1007076]## 

[#50540559_pgfId-1007078]## <connection-interface>

[#50540559_pgfId-1007080]## java.jms.TopicConnection

[#50540559_pgfId-1007082]## </connection-interface>

[#50540559_pgfId-1007084]## <connection-impl-class>

[#50540559_pgfId-1007086]## com.wombat.connector.jms.TopicConnectionImpl

[#50540559_pgfId-1007088]## </connection-impl-class>

[#50540559_pgfId-1007090]## </connection-definition>

[#50540559_pgfId-1007092]## 

[#50540559_pgfId-1007094]## <connection-definition>

[#50540559_pgfId-1007096]## <managedconnectionfactory-class>

[#50540559_pgfId-1007098]##
com.wombat.connector.jms.ManagedConnectionFactoryImpl

[#50540559_pgfId-1007100]## </managedconnectionfactory-class>

[#50540559_pgfId-1007102]## 

[#50540559_pgfId-1007104]## <!--

[#50540559_pgfId-1007106]## This ManagedConnectionFactory JavaBean
inherits the ResourceAdapter

[#50540559_pgfId-1007108]## JavaBean configuration properties, and does
not override any

[#50540559_pgfId-1007110]## of the global defaults.

[#50540559_pgfId-1007112]## -->

[#50540559_pgfId-1007114]## 

[#50540559_pgfId-1007116]## <connectionfactory-interface>

[#50540559_pgfId-1007118]## javax.jms.ConnectionFactory

[#50540559_pgfId-1007120]## </connectionfactory-interface>

[#50540559_pgfId-1007122]## <connectionfactory-impl-class>

[#50540559_pgfId-1007124]##
com.wombat.connector.jms.ConnectionFactoryImpl

[#50540559_pgfId-1007126]## </connectionfactory-impl-class>

[#50540559_pgfId-1007128]## 

[#50540559_pgfId-1007130]## <connection-interface>

[#50540559_pgfId-1007132]## java.jms.Connection

[#50540559_pgfId-1007134]## </connection-interface>

[#50540559_pgfId-1007136]## <connection-impl-class>

[#50540559_pgfId-1007138]## com.wombat.connector.jms.ConnectionImpl

[#50540559_pgfId-1007140]## </connection-impl-class>

[#50540559_pgfId-1007142]## </connection-definition>

[#50540559_pgfId-1007144]## 

[#50540559_pgfId-1007146]##
<transaction-support>XATransaction</transaction-support>

[#50540559_pgfId-1007148]##
<reauthentication-support>false</reauthentication-support>

[#50540559_pgfId-1007150]## 

[#50540559_pgfId-1007152]## </outbound-resourceadapter>

[#50540559_pgfId-1007154]## 

[#50540559_pgfId-1007156]## <inbound-resourceadapter>

[#50540559_pgfId-1007158]## <messageadapter>

[#50540559_pgfId-1007160]## <messagelistener>

[#50540559_pgfId-1007162]## <messagelistener-type>

[#50540559_pgfId-1007164]## javax.jms.MessageListener

[#50540559_pgfId-1007166]## </messagelistener-type>

[#50540559_pgfId-1007168]## 

[#50540559_pgfId-1007170]## <activationspec>

[#50540559_pgfId-1007172]## <activationspec-class>

[#50540559_pgfId-1007174]## com.wombat.connector.jms.ActivationSpecImpl

[#50540559_pgfId-1007176]## </activationspec-class>

[#50540559_pgfId-1007178]## 

[#50540559_pgfId-1007270]## <!--

[#50540559_pgfId-1007182]## The endpoint deployer configures the
ActivationSpec JavaBean

[#50540559_pgfId-1007184]## and may override some of the global defaults
inherited from

[#50540559_pgfId-1007186]## the ResourceAdapter JavaBean. For example,
the ServerName

[#50540559_pgfId-1007188]## and the PortNumber properties.

[#50540559_pgfId-1007190]## -->

[#50540559_pgfId-1007192]## 

[#50540559_pgfId-1007402]## <!-- required config property names for
ActivationSpec -->

[#50540559_pgfId-1007196]## <required-config-property>

[#50540559_pgfId-1007198]##
<config-property-name>Destination</config-property-name>

[#50540559_pgfId-1007200]## </required-config-property>

[#50540559_pgfId-1007202]## 

[#50540559_pgfId-1007204]## </activationspec>

[#50540559_pgfId-1007206]## 

[#50540559_pgfId-1007498]## </messagelistener>

[#50540559_pgfId-1007210]## </messageadapter>

[#50540559_pgfId-1007212]## </inbound-resourceadapter>

[#50540559_pgfId-1007214]## 

[#50540559_pgfId-1007545]## <adminobject>

[#50540559_pgfId-1007218]##
<adminobject-interface>javax.jms.Queue</adminobject-interface>

[#50540559_pgfId-1007220]## <adminobject-class>

[#50540559_pgfId-1007222]## com.wombat.connector.jms.QueueImpl

[#50540559_pgfId-1007224]## </adminobject-class>

[#50540559_pgfId-1007226]## </adminobject>

[#50540559_pgfId-1007228]## <adminobject>

[#50540559_pgfId-1007230]##
<adminobject-interface>javax.jms.Topic</adminobject-interface>

[#50540559_pgfId-1007232]## <adminobject-class>

[#50540559_pgfId-1007234]## com.wombat.connector.jms.TopicImpl

[#50540559_pgfId-1007236]## </adminobject-class>

[#50540559_pgfId-1007238]## </adminobject>

[#50540559_pgfId-1007240]## <adminobject>

[#50540559_pgfId-1007242]## <adminobject-interface>

[#50540559_pgfId-1007244]## javax.jms.Destination

[#50540559_pgfId-1007246]## </adminobject-interface>

[#50540559_pgfId-1007248]## <adminobject-class>

[#50540559_pgfId-1007250]## com.wombat.connector.jms.DestinationImpl

[#50540559_pgfId-1007252]## </adminobject-class>

[#50540559_pgfId-1007254]## </adminobject>

[#50540559_pgfId-1007256]## 

[#50540559_pgfId-1007940]## </resourceadapter>

[#50540559_pgfId-1007920]##</connector>

======= [#50540559_pgfId-1000643]##A Sample JMS ActivationSpec Implementation

[width="100%",cols="100%",]
|===
a|
[#50540559_pgfId-1007963]##package com.wombat.connector.jms;

[#50540559_pgfId-1007964]## 

[#50540559_pgfId-1007965]##import java.io.Serializable;

[#50540559_pgfId-1007966]##import javax.resource.spi.ActivationSpec;

[#50540559_pgfId-1007967]##import
javax.resource.spi.InvalidPropertyException;

[#50540559_pgfId-1007968]## 

[#50540559_pgfId-1007969]##public class ActivationSpecImpl implements
ActivationSpec, Serializable \{

[#50540559_pgfId-1007970]## 

[#50540559_pgfId-1007971]## public setAcknowledgeMode(String mode) \{
... }

[#50540559_pgfId-1007972]## public String getAcknowledgeMode() \{ ... }

[#50540559_pgfId-1007973]## 

[#50540559_pgfId-1007974]## public setSubscriptionDurability(String
durability) \{ ... }

[#50540559_pgfId-1007975]## public String getSubscriptionDurability() \{
... }

[#50540559_pgfId-1007976]## 

[#50540559_pgfId-1007977]## public setMessageSelector(String selector)
\{ ... }

[#50540559_pgfId-1007978]## public String getMessageSelector() \{ ... }

[#50540559_pgfId-1007979]## 

[#50540559_pgfId-1007980]## public setDestinationType(String destType)
\{ ... }

[#50540559_pgfId-1007981]## public String getDestinationType() \{ ... }

[#50540559_pgfId-1007982]## 

[#50540559_pgfId-1007983]## public setDestination(String dest) \{ ... }

[#50540559_pgfId-1007984]## public String getDestination() \{ ... }

[#50540559_pgfId-1007985]## 

[#50540559_pgfId-1007986]## public setSubscriptionName(String name) \{
... }

[#50540559_pgfId-1007987]## public String getSubscriptionName() \{ ... }

[#50540559_pgfId-1007988]## 

[#50540559_pgfId-1007989]## public setClientId(String id) \{ ... }

[#50540559_pgfId-1007990]## public String getClientId() \{ ... }

[#50540559_pgfId-1007991]## 

[#50540559_pgfId-1007992]## public void validate() throws
InvalidPropertyException \{ ... }

[#50540559_pgfId-1007961]##}

|===

======= [#50540559_pgfId-1000675]##A Sample EJB 2.0 Message-Driven Bean Deployment Descriptor

[width="100%",cols="100%",]
|===
a|
[#50540559_pgfId-1008013]##<?xml version="1.0" encoding="US-ASCII"?>

[#50540559_pgfId-1008014]## 

[#50540559_pgfId-1008015]##<!DOCTYPE ejb-jar PUBLIC ’-//Sun
Microsystems, Inc.//DTD Enterprise

[#50540559_pgfId-1008016]##JavaBeans 2.0//EN’
’http://java.sun.com/dtd/ejb-jar_2_0.dtd’>

[#50540559_pgfId-1008017]## 

[#50540559_pgfId-1008018]##<ejb-jar>

[#50540559_pgfId-1008019]## <display-name>MDB1</display-name>

[#50540559_pgfId-1008020]## <enterprise-beans>

[#50540559_pgfId-1008021]## <message-driven>

[#50540559_pgfId-1008022]## <display-name>MDB_DURABLE_CMT</display-name>

[#50540559_pgfId-1008023]## <ejb-name>MDB_DURABLE_CMT</ejb-name>

[#50540559_pgfId-1008024]## <ejb-class>msgbean.MsgBean</ejb-class>

[#50540559_pgfId-1008025]##
<transaction-type>Container</transaction-type>

[#50540559_pgfId-1008026]## <message-driven-destination>

[#50540559_pgfId-1008027]##
<destination-type>javax.jms.Topic</destination-type>

[#50540559_pgfId-1008028]##
<subscription-durability>Durable</subscription-durability>

[#50540559_pgfId-1008029]## </message-driven-destination>

[#50540559_pgfId-1008030]## <message-selector>JMSType = ’car’ AND color
= ’blue’

[#50540559_pgfId-1008031]## </message-selector>

[#50540559_pgfId-1008032]## </message-driven>

[#50540559_pgfId-1008033]## </enterprise-beans>

[#50540559_pgfId-1008011]##</ejb-jar>

|===

======= [#50540559_pgfId-1008041]##A Sample EJB 2.1 Message-Driven Bean Deployment Descriptor

[#50540559_pgfId-1008056]##<?xml version="1.0" encoding="UTF-8"?>

[#50540559_pgfId-1008045]##<ejb-jar
xmlns="http://java.sun.com/xml/ns/j2ee"

[#50540559_pgfId-1008047]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50540559_pgfId-1008049]## version="2.1">

[#50540559_pgfId-1008098]## <display-name>MDB1</display-name>

[#50540559_pgfId-1008100]## <enterprise-beans>

[#50540559_pgfId-1008102]## <message-driven>

[#50540559_pgfId-1008248]## <display-name>MDB_DURABLE_CMT</display-name>

[#50540559_pgfId-1008106]## <ejb-name>MDB_DURABLE_CMT</ejb-name>

[#50540559_pgfId-1008108]## <ejb-class>msgbean.MsgBean</ejb-class>

[#50540559_pgfId-1008110]## <messaging-type>javax.jms.MessageListener

[#50540559_pgfId-1008366]## </messaging-type>

[#50540559_pgfId-1008112]##
<transaction-type>Container</transaction-type>

[#50540559_pgfId-1008114]## <activation-config>

[#50540559_pgfId-1008426]## <activation-config-property>

[#50540559_pgfId-1008118]## <activation-config-property-name>

[#50540559_pgfId-1008120]## destinationType

[#50540559_pgfId-1008122]## </activation-config-property-name>

[#50540559_pgfId-1008124]## <activation-config-property-value>

[#50540559_pgfId-1008126]## javax.jms.Topic

[#50540559_pgfId-1008128]## </activation-config-property-value>

[#50540559_pgfId-1008557]## </activation-config-property>

[#50540559_pgfId-1008739]## <activation-config-property>

[#50540559_pgfId-1008134]## <activation-config-property-name>

[#50540559_pgfId-1008136]## SubscriptionDurability

[#50540559_pgfId-1008138]## </activation-config-property-name>

[#50540559_pgfId-1008140]## <activation-config-property-value>

[#50540559_pgfId-1008142]## Durable

[#50540559_pgfId-1008144]## </activation-config-property-value>

[#50540559_pgfId-1008146]## </activation-config-property>

[#50540559_pgfId-1009049]## <activation-config-property>

[#50540559_pgfId-1008150]## <activation-config-property-name>

[#50540559_pgfId-1008152]## MessageSelector

[#50540559_pgfId-1008154]## </activation-config-property-name>

[#50540559_pgfId-1008156]## <activation-config-property-value>

[#50540559_pgfId-1008158]## JMSType = ’car’ AND color = ’blue’

[#50540559_pgfId-1008160]## </activation-config-property-value>

[#50540559_pgfId-1008162]## </activation-config-property>

[#50540559_pgfId-1009361]## </activation-config>

[#50540559_pgfId-1008166]## </message-driven>

[#50540559_pgfId-1008168]## </enterprise-beans>

[#50540559_pgfId-1008170]##</ejb-jar>

== [#50540559_pgfId-1009426]##Sample EJB 2.1 Deployment Descriptor

[#50540559_pgfId-1009518]##<?xml version="1.0" encoding="UTF-8"?>

[#50540559_pgfId-1009430]##<ejb-jar
xmlns="http://java.sun.com/xml/ns/j2ee"

[#50540559_pgfId-1009432]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50540559_pgfId-1009434]## version="2.1">

[#50540559_pgfId-1009436]## <display-name>Ejb1</display-name>

[#50540559_pgfId-1009438]## <enterprise-beans>

[#50540559_pgfId-1009440]## <session>

[#50540559_pgfId-1009442]## <display-name>JMSBean</display-name>

[#50540559_pgfId-1009444]## <ejb-name>JMSBean</ejb-name>

[#50540559_pgfId-1009446]## <home>jms.JMSHome</home>

[#50540559_pgfId-1009448]## <remote>jms.JMS</remote>

[#50540559_pgfId-1009450]## <ejb-class>jms.JMSEJB</ejb-class>

[#50540559_pgfId-1009452]## <session-type>Stateful</session-type>

[#50540559_pgfId-1009454]##
<transaction-type>Container</transaction-type>

[#50540559_pgfId-1009456]## <resource-ref>

[#50540559_pgfId-1009458]## <description>description</description>

[#50540559_pgfId-1009460]##
<res-ref-name>jms/MyQueueConnectionFactory</res-ref-name>

[#50540559_pgfId-1009462]##
<res-type>javax.jms.QueueConnectionFactory</res-type>

[#50540559_pgfId-1009464]## <res-auth>Application</res-auth>

[#50540559_pgfId-1009466]##
<res-sharing-scope>Shareable</res-sharing-scope>

[#50540559_pgfId-1009516]## </resource-ref>

[#50540559_pgfId-1009514]## <resource-env-ref>

[#50540559_pgfId-1009512]##
<resource-env-ref-name>jms/QueueName</resource-env-ref-name>

[#50540559_pgfId-1009510]##
<resource-env-ref-type>javax.jms.Queue</resource-env-ref-type>

[#50540559_pgfId-1009508]## </resource-env-ref>

[#50540559_pgfId-1009506]## </session>

[#50540559_pgfId-1009504]## </enterprise-beans>

[#50540559_pgfId-1009502]##</ejb-jar>

======= [#50540559_pgfId-1000771]##Message-Driven Bean Asynchronously Receiving Messages

======= [#50540559_pgfId-1000772]##Message-Driven Bean Deployment

[#50540559_pgfId-1000773]##A message-driven bean application developer
or assembler supplies a deployment descriptor, or annotated application
component, which specifies a destination type, message selector, and
subscription durability information needed to setup subscription to a
certain destination, Queue or Topic. Note, this information is a hint
which is used by the message-driven bean deployer to setup the
subscription.

[#50540559_pgfId-1000774]##The message-driven bean deployer selects an
appropriate JMS resource adapter based on the quality-of-service and
creates an ActivationSpec JavaBean instance and configures the required
property "Destination" as well as other properties related to the JMS
messaging style and the specific resource adapter.

[#50540559_pgfId-1000775]##The endpoint deployer may need to interact
with the JMS provider to setup an appropriate "Destination" and other
steps necessary to complete message-driven bean deployment.

[#50540559_pgfId-1000776]##The deployer deploys the message-driven bean
application. During deployment, the deployer provides the configured
ActivationSpec JavaBean to the application server, along with
information about the chosen JMS resource adapter.

[#50540559_pgfId-1000777]##The application server calls the
endpointActivation method on the JMS resource adapter and passes the
configured ActivationSpec JavaBean instance and a MessageEndpointFactory
instance. During the endpointActivation method call the JMS adapter
interacts with its provider to setup message delivery to the
message-driven bean. This completes the endpoint activation, and the
message-driven bean is ready to receive messages.

======= [#50540559_pgfId-1000778]##Message Delivery

[#50540559_pgfId-1000779]##When messages start arriving, the JMS adapter
uses the MessageEndpointFactory instance to get an endpoint instance and
delivers messages to the endpoint through the
javax.jms.MessageListener.onMessage method.

[#50540559_pgfId-1000780]##The application server interposes the message
delivery and injects transactions based on the message-driven bean
preferences, container-managed transaction or bean-managed transaction,
before delivering the message to a message-driven bean instance.

[#50540559_pgfId-1000781]##When a delivery is transacted, the
application server notifies the JMS resource adapter using the
XAResource object. The JMS resource adapter may use the notifications to
send acknowledgements to its message provider.

[#50540559_pgfId-1000782]##The JMS resource adapter, depending on the
traffic, may attempt concurrent delivery of messages by using multiple
endpoint instances obtained through MessageEndpointFactory. The
application server appropriately handles concurrent message deliveries
and dispatches messages to separate message-driven bean instances.

======= [#50540559_pgfId-1000783]##Message-Driven Bean Undeployment

[#50540559_pgfId-1000784]##When the message-driven bean is undeployed,
the application server calls the endpointDeactivation method on the JMS
resource adapter to deactivate the message endpoint.

[#50540559_pgfId-1000785]##The JMS adapter in turn notifies its message
provider.

======= [#50540559_pgfId-1014629]##EJB Using JMS API to Send and Synchronously Receive Messages Via a JMS Resource Adapter

[#50540559_pgfId-1014630]##The JMS resource adapter provides
javax.jms.Connection objects which expose the JMS API to the EJB
application. The EJB directly uses the JMS API to send and synchronously
receive messages. The javax.jms.Connection objects are obtained from a
ConnectionFactory supplied by the JMS resource adapter.

[#50540559_pgfId-1000788]##Based on the EJB deployment descriptor
information (resource-ref’s and resource-env-ref’s) or resource
reference injection annotations (Resource annotation defined in
link:conn.htm#50540564_50227[See Common annotations for the Java
Platform Specification, version 1.2]), the EJB deployer configures the
appropriate ConnectionFactory objects (resource-ref’s) in the component
name space (java:comp/env). The application deployer also configures the
necessary Queue or Topic administered objects (resource-env-ref’s) in
the component name space. The JMS resource adapter provides the
implementation of the various ConnectionFactory and administered
objects.

[#50540559_pgfId-1000789]##At runtime, the component does a JNDI lookup
of a ConnectionFactory object from its component name space
(java:comp/env), and uses it to create a javax.jms.Connection object
which is used for sending and synchronously receiving messages.
Similarly, the component uses the JNDI lookup mechanism to obtain the
configured Queue or Topic administered objects.

======= [#50540559_pgfId-1000790]##Using JMS API to Send Messages

======= [#50540559_pgfId-1010182]##Sending Messages Using the JMS API

[#50540559_pgfId-1010244]##// get JNDI handle

[#50540559_pgfId-1010186]##Context jndiContext = new InitialContext();

[#50540559_pgfId-1010188]## 

[#50540559_pgfId-1010190]##// get connection factory

[#50540559_pgfId-1010192]##ConnectionFactory connectionFactory =
(ConnectionFactory)

[#50540559_pgfId-1010242]##
jndiContext.lookup("QueueConnectionFactory");

[#50540559_pgfId-1010240]## 

[#50540559_pgfId-1010238]##// get connection from factory

[#50540559_pgfId-1010236]##Connection connection =
connectionFactory.getConnection();

[#50540559_pgfId-1010234]## 

[#50540559_pgfId-1010232]##// get session from connection

[#50540559_pgfId-1010230]##Session session =
connection.createSession(true,

[#50540559_pgfId-1010228]## AUTO_ACKNOWLEDGE);

[#50540559_pgfId-1010226]## 

[#50540559_pgfId-1010224]##// get destination from JNDI

[#50540559_pgfId-1010222]##Queue stockQueue = (Queue)
jndiContext.lookup("StockQueue");

[#50540559_pgfId-1010220]## 

[#50540559_pgfId-1010218]##// create a message producer

[#50540559_pgfId-1010216]##MessageProducer sender =
session.createProducer(stockQueue);

[#50540559_pgfId-1010214]## 

[#50540559_pgfId-1010212]##// create a message

[#50540559_pgfId-1010210]##TextMessage message =
session.createTextMessage();

[#50540559_pgfId-1010208]##message.setText(msgData);

[#50540559_pgfId-1010206]## 

[#50540559_pgfId-1010204]##// send the message

[#50540559_pgfId-1010202]##sender.send(message);

======= [#50540559_pgfId-1000816]##Java EE Component Using JMS API to Synchronously Receive Messages

======= [#50540559_pgfId-1010407]##Synchronously Receiving Messages in a Java EE Component

[#50540559_pgfId-1010469]##// get JNDI handle

[#50540559_pgfId-1010411]##Context jndiContext = new InitialContext();

[#50540559_pgfId-1010413]## 

[#50540559_pgfId-1010415]##// get connection factory

[#50540559_pgfId-1010417]##ConnectionFactory connectionFactory =
(ConnectionFactory)

[#50540559_pgfId-1010467]##
jndiContext.lookup("QueueConnectionFactory");

[#50540559_pgfId-1010465]## 

[#50540559_pgfId-1010463]##// get connection from factory

[#50540559_pgfId-1010461]##Connection connection =
connectionFactory.getConnection();

[#50540559_pgfId-1010459]## 

[#50540559_pgfId-1010457]##// get session from connection

[#50540559_pgfId-1010455]##Session session =
connection.createSession(true,

[#50540559_pgfId-1010453]## AUTO_ACKNOWLEDGE);

[#50540559_pgfId-1010451]## 

[#50540559_pgfId-1010449]##// get destination from JNDI

[#50540559_pgfId-1010447]##Queue stockQueue = (Queue)
jndiContext.lookup("StockQueue");

[#50540559_pgfId-1010445]## 

[#50540559_pgfId-1010443]##// create a message consumer

[#50540559_pgfId-1010441]##MessageConsumer receiver =
session.createConsumer(stockQueue);

[#50540559_pgfId-1010439]## 

[#50540559_pgfId-1010437]##// enable connection to receive messages

[#50540559_pgfId-1010435]##connection.start();

[#50540559_pgfId-1010433]## 

[#50540559_pgfId-1010431]##// synchronously receive the message

[#50540559_pgfId-1010429]##TextMessage message = (TextMessage)
receiver.receive(message);

======= [#50540559_pgfId-1000841]##

image:conn-100.gif[image]

A Non-JMS Use Case

[#50540559_pgfId-1000842]##This illustration is intended to show that it
is possible to plug a wide range of message providers into a Java EE
application server by way of the standard connector contracts, such that
it is possible for an application to either asynchronously receive
messages through the message inflow contract or to use a connection
object to send and synchronously receive messages.

======= [#50540559_pgfId-1000843]##Resource Adapter Deployment Descriptor

[#50540559_pgfId-1000844]##This is an example deployment descriptor for
a resource adapter that can provide both inbound and outbound
communication with a particular EIS.

[#50540559_pgfId-1000845]##On the inbound side, it can deliver messages
to a message-driven bean that implements a com.kangaroo.MessageListener.
Note, the deployment descriptor has a messagelistener-type element with
the value com.kangaroo.MessageListener. The activationspec-class is of
type com.kangaroo.MyEISActivationSpecImpl. This ActivationSpec JavaBean
has a single required property PortNumber, that is required to establish
a connection to the remote EIS. When the EIS data is received, the
resource adapter will convert it to a com.kangaroo.Message and deliver
it to a message-driven bean instance.

[#50540559_pgfId-1010920]##The resource adapter also provides a
ManagedConnectionFactory implementation for outbound communication to
the EIS. This also takes a single configuration parameter called
PortNumber.

======= [#50540559_pgfId-1010923]##Deployment Descriptor for a Resource Adapter

[#50540559_pgfId-1010925]##<?xml version="1.0" encoding="UTF-8"?>

[#50540559_pgfId-1010927]## 

[#50540559_pgfId-1010929]##<connector
xmlns="http://java.sun.com/xml/ns/j2ee"

[#50540559_pgfId-1010931]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50540559_pgfId-1010933]## version="1.5">

[#50540559_pgfId-1010935]## 

[#50540559_pgfId-1010937]## <display-name>KangarooAdapter</display-name>

[#50540559_pgfId-1010939]## <vendor-name>Kangaroo Software
Inc.</vendor-name>

[#50540559_pgfId-1010941]## <eis-type>JMS Provider</eis-type>

[#50540559_pgfId-1010943]##
<resourceadapter-version>1.0</resourceadapter-version>

[#50540559_pgfId-1010945]## 

[#50540559_pgfId-1010947]## <resourceadapter>

[#50540559_pgfId-1010949]## <resourceadapter-class>

[#50540559_pgfId-1010951]## com.kangaroo.MyEISAdapterImpl

[#50540559_pgfId-1010953]## </resourceadapter-class>

[#50540559_pgfId-1010955]## 

[#50540559_pgfId-1011034]## <!-- ResourceAdapter default configuration
properties -->

[#50540559_pgfId-1010959]## <config-property>

[#50540559_pgfId-1010961]## <description>URL for EIS
instance</description>

[#50540559_pgfId-1010963]##
<config-property-name>EIS_URL</config-property-name>

[#50540559_pgfId-1010965]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1010967]##
<config-property-value>TBD</config-property-value>

[#50540559_pgfId-1010969]## </config-property>

[#50540559_pgfId-1010971]## 

[#50540559_pgfId-1011195]## <outbound-resourceadapter>

[#50540559_pgfId-1010975]## <connection-definition>

[#50540559_pgfId-1010977]## <managedconnectionfactory-class>

[#50540559_pgfId-1010979]## com.Kangaroo.MyManagedConnectionFactoryImpl

[#50540559_pgfId-1010981]## </managedconnectionfactory-class>

[#50540559_pgfId-1010983]## 

[#50540559_pgfId-1011339]## <!-- ManagedConnectionFactory default
configuration properties -->

[#50540559_pgfId-1010987]## <config-property>

[#50540559_pgfId-1010989]##
<config-property-name>PortNumber</config-property-name>

[#50540559_pgfId-1010991]##
<config-property-type>java.lang.String</config-property-type>

[#50540559_pgfId-1010993]##
<config-property-value>1051</config-property-value>

[#50540559_pgfId-1010995]## </config-property>

[#50540559_pgfId-1010997]## 

[#50540559_pgfId-1011542]## <connectionfactory-interface>

[#50540559_pgfId-1011001]## javax.resource.cci.ConnectionFactory

[#50540559_pgfId-1011003]## </connectionfactory-interface>

[#50540559_pgfId-1011005]## <connectionfactory-impl-class>

[#50540559_pgfId-1011007]## com.Kangaroo.MyConnectionFactoryImpl

[#50540559_pgfId-1011009]## </connectionfactory-impl-class>

[#50540559_pgfId-1011011]## 

[#50540559_pgfId-1011780]## <connection-interface>

[#50540559_pgfId-1011015]## javax.resource.cci.Connection

[#50540559_pgfId-1011017]## </connection-interface>

[#50540559_pgfId-1011019]## <connection-impl-class>

[#50540559_pgfId-1011021]## com.Kangaroo.MyConnectionImpl

[#50540559_pgfId-1011023]## </connection-impl-class>

[#50540559_pgfId-1011778]## </connection-definition>

[#50540559_pgfId-1011776]## 

[#50540559_pgfId-1012021]##
<transaction-support>NoTransaction</transaction-support>

[#50540559_pgfId-1011772]##
<reauthentication-support>false</reauthentication-support>

[#50540559_pgfId-1011770]## </outbound-resourceadapter>

[#50540559_pgfId-1011768]## 

[#50540559_pgfId-1012088]## <inbound-resourceadapter>

[#50540559_pgfId-1011764]## <messageadapter>

[#50540559_pgfId-1011762]## <messagelistener>

[#50540559_pgfId-1011760]## <messagelistener-type>

[#50540559_pgfId-1011758]## com.kangaroo.MessageListener

[#50540559_pgfId-1011756]## </messagelistener-type>

[#50540559_pgfId-1011754]## <activationspec>

[#50540559_pgfId-1011752]## <activationspec-class>

[#50540559_pgfId-1011750]## com.Kangaroo.MyEISActivationSpecImpl

[#50540559_pgfId-1011748]## </activationspec-class>

[#50540559_pgfId-1011746]## <required-config-property>

[#50540559_pgfId-1011744]##
<config-property-name>PortNumber</config-property-name>

[#50540559_pgfId-1011742]## </required-config-property>

[#50540559_pgfId-1011740]## </activationspec>

[#50540559_pgfId-1012340]## </messagelistener>

[#50540559_pgfId-1012338]## </messageadapter>

[#50540559_pgfId-1012336]## </inbound-resourceadapter>

[#50540559_pgfId-1012334]## 

[#50540559_pgfId-1012332]## </resourceadapter>

[#50540559_pgfId-1012330]##</connector>

======= [#50540559_pgfId-1000923]##Resource Adapter Deployment

[#50540559_pgfId-1000924]##Before use, the resource adapter is required
to be deployed on the application server. During resource adapter
deployment, the deployer configures a ResourceAdapter JavaBean instance
and deploys the resource adapter.

======= [#50540559_pgfId-1000925]##Message-Driven Bean Asynchronously Receiving Notifications From an EIS

======= [#50540559_pgfId-1000926]##The Message-Driven Bean Deployment Descriptor

======= [#50540559_pgfId-1012753]##Deployment Descriptor for a Message-Driven Bean

[#50540559_pgfId-1012902]##<?xml version="1.0" encoding="US-ASCII"?>

[#50540559_pgfId-1012757]## 

[#50540559_pgfId-1012759]##<!DOCTYPE ejb-jar PUBLIC ?-//Sun
Microsystems, Inc.//DTD

[#50540559_pgfId-1012761]## Enterprise JavaBeans 2.1//EN?
?http://java.sun.com/dtd/ejb-jar_2_1.dtd?>

[#50540559_pgfId-1012763]## 

[#50540559_pgfId-1012929]##<ejb-jar>

[#50540559_pgfId-1012767]## <display-name>Ejb1</display-name>

[#50540559_pgfId-1012769]## <enterprise-beans>

[#50540559_pgfId-1012771]## <message-driven>

[#50540559_pgfId-1012989]## <display-name>EIS Receiver
Bean</display-name>

[#50540559_pgfId-1012775]## <ejb-name>EISReceiver</ejb-name>

[#50540559_pgfId-1012777]## <ejb-class>myapp.EISReceiverBean</ejb-class>

[#50540559_pgfId-1012779]##
<messaging-type>com.kangaroo.MessageListener</messaging-type>

[#50540559_pgfId-1012781]##
<transaction-type>Container</transaction-type>

[#50540559_pgfId-1012783]## <activation-config>

[#50540559_pgfId-1013143]## <activation-config-property>

[#50540559_pgfId-1012787]## <activation-config-property-name>

[#50540559_pgfId-1012789]## functionName

[#50540559_pgfId-1012791]## </activation-config-property-name>

[#50540559_pgfId-1012793]## <activation-config-property-value>

[#50540559_pgfId-1012893]## CustomerChangeNotification

[#50540559_pgfId-1012891]## </activation-config-property-value>

[#50540559_pgfId-1012889]## </activation-config-property>

[#50540559_pgfId-1012887]## <activation-config-property>

[#50540559_pgfId-1012885]## <activation-config-property-name>

[#50540559_pgfId-1012883]## CustomerName

[#50540559_pgfId-1012881]## </activation-config-property-name>

[#50540559_pgfId-1012879]## <activation-config-property-value>

[#50540559_pgfId-1012877]## Wombat Systems

[#50540559_pgfId-1012875]## </activation-config-property-value>

[#50540559_pgfId-1012873]## </activation-config-property>

[#50540559_pgfId-1013737]## </activation-config>

[#50540559_pgfId-1012869]## </message-driven>

[#50540559_pgfId-1012867]## </enterprise-beans>

[#50540559_pgfId-1012865]##</ejb-jar>

[#50540559_pgfId-1000962]##When the message-driven bean is deployed, the
bean deployer chooses an appropriate resource adapter based on the type
of the message listener it supports. In this case, the deployer chooses
the resource adapter with the ResourceAdapter class
com.kangaroo.MyEISAdapterImpl since it supports the
com.kangaroo.MessageListener type.

[#50540559_pgfId-1000963]##Then the deployer creates an instance of
com.kangaroo.MyEISActivationSpecImpl and populates it with values. The
ActivationSpec JavaBean instance will also contain values of properties
that are set in the activation-config section of the bean’s deployment
descriptor. In the example above, the properties are FunctionName, with
the value CustomerChangeNotification, and CustomerName, with the value
Wombat Systems, which the deployer may choose to override.

[#50540559_pgfId-1000964]##Finally, the deployer provides the configured
ActivationSpec JavaBean instance to the application server.

======= [#50540559_pgfId-1000965]##Message-Driven Bean and Resource Adapter Activation

[#50540559_pgfId-1000966]##When the application server is started, it
will activate the resource adapter by calling its start method. The
application server will create an instance of the message-driven bean
with class name myapp.EISReceiverBean. Then the application server will
call the endpointActivation method on the resource adapter instance and
pass in the configured ActivationSpec instance associated with the
deployed message-driven bean, and a MessageEndpointFactory instance. The
resource adapter will use the information in the ActivationSpec to
establish a subscription to the requested data from the EIS.

======= [#50540559_pgfId-1000967]##Message Delivery

[#50540559_pgfId-1000968]##When a notification arrives from the EIS, the
resource adapter has the responsibility of converting its data to a
com.kangaroo.Message if it is not already in this format. The resource
adapter will then use the MessageEndpointFactory to deliver the
notification to the message-driven bean. Note that, rather than calling
the MessageEndpointFactory directly, the resource adapter is likely to
instantiate a Work object, and pass it to the application server through
the _WorkManager_ interface. When the doWork method of the _WorkManager_
is called the dispatch will occur. This will allow the resource adapter
to continue to process incoming messages without blocking until
message-driven bean dispatch has completed.

[#50540559_pgfId-998874]## 

====== [#50540603_pgfId-874]## 

======= [#50540603_pgfId-5529]##

image:conn-111.gif[image]

[#50540603_34845]##EJB Invocation

image:conn-112.gif[image]

[#50540603_pgfId-999451]##This chapter describes how to invoke session
and entity beans from a resource adapter.

======= [#50540603_pgfId-999452]##

image:conn-113.gif[image]

Overview

[#50540603_pgfId-999453]##A resource adapter may need to call session or
entity beans for several reasons:

[#50540603_pgfId-999454]##To dispatch calls from an EIS to a bean in
order to execute business logic

[#50540603_pgfId-999455]##To use EJB container-managed persistence (CMP)
mechanism for persistence

[#50540603_pgfId-999456]##In order to dispatch calls to a session or
entity bean, the resource adapter is required to detect the target bean
type, the method name, and the method parameters. Upon receiving a
request from the EIS by way of a remote protocol, the resource adapter’s
dispatch logic is required to:

[#50540603_pgfId-999457]##Choose an appropriate bean and a target method
name based on the request received from the EIS.

[#50540603_pgfId-999458]##Unmarshall, that is, deserialize, the request
parameters received from the EIS and call the target bean method.

======= [#50540603_pgfId-999459]##

image:conn-113.gif[image]

EJB Invocation Model

[#50540603_pgfId-999497]##EJB Invocation Model

image:conn-114.gif[image]

[#50540603_pgfId-999498]##For session or entity bean invocations, the
resource adapter’s bean dispatch logic can use the bean client view
model by way of a message-driven bean. The EJB specification (see
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2]) defines the EJB client view, and describes
how the client view is used to access session or entity beans. The EJB
client view is available to a message-driven bean.

[#50540603_pgfId-999502]##The resource adapter could structure its code
such that its bean dispatch logic is written as a message-driven bean.
The message-driven bean chooses an appropriate session or entity bean
and a target method, unmarshalls the request parameters and invokes the
chosen bean based on the request information received from the EIS.

[#50540603_pgfId-999503]##The resource adapter can use the message
inflow contract to call a message-driven bean, and use the
message-driven bean to dispatch calls to session and entity beans using
the EJB client view model. The EJB specification allows a
request-response style message-driven bean call which could be used for
synchronous RPC-style calls. The message-driven bean could be packaged
either with the resource adapter or separately.

[#50540603_pgfId-999504]##Thus, the message-driven bean could be used as
a replaceable unit of the resource adapter which serves the job of a
bean dispatcher. The message inflow contract allows the creation of
multiple endpoint instances (message-driven beans) at runtime, and hence
it is possible to do concurrent bean dispatches.

[#50540603_pgfId-999508]##Further, the transaction inflow mechanism
(described in link:conn.htm#50540571_84673[See Transaction Inflow])
allows the resource adapter to use the transaction information obtained
from the EIS for bean invocations. Note, however, the application server
may suspend the imported transaction depending on the transaction
preference of the target bean method.

======= [#50540603_pgfId-999509]##

image:conn-113.gif[image]

An Illustrative Use Case

[#50540603_pgfId-999510]##Wombat Systems is a resource adapter vendor.
The resource adapter supports inbound communication from an EIS to
application components residing in an application server container. The
resource adapter uses the message inflow contract to call message-driven
beans which serve as a dispatcher for session and entity bean
invocations. In this case, Wombat Systems supplies both the resource
adapter and the message-driven beans, even though these could be
supplied by different vendors.

[#50540603_pgfId-999511]##The EIS uses multiple concurrent conversations
in its interactions with the resource adapter. Each conversation may
involve multiple serial requests. The resource adapter has a set of Work
objects (threads), each of which is used for carrying on a specific
conversation. The resource adapter manages the multiple concurrent
conversations, and calls a message-driven bean instance whenever a
request message arrives as part of a conversation.

[#50540603_pgfId-999512]##The following code sample shows a possible
message-driven bean implementation:

======= [#50540603_pgfId-999575]##A Message-Driven Bean Implementation

[#50540603_pgfId-999577]##package com.wombat.ra;

[#50540603_pgfId-999692]## 

[#50540603_pgfId-999579]##import javax.ejb.MessageDrivenBean;

[#50540603_pgfId-999581]##import javax.naming.InitialContext;

[#50540603_pgfId-999583]## 

[#50540603_pgfId-999585]##public class WombatMDB

[#50540603_pgfId-999587]## implements MessageDrivenBean,
WombatMessageListener \{

[#50540603_pgfId-999589]## 

[#50540603_pgfId-999591]##public static int CONV_START = 0;

[#50540603_pgfId-999593]## public static int CONV_CONTINUE = 1;

[#50540603_pgfId-999595]## public static int CONV_END = 2;

[#50540603_pgfId-999597]## 

[#50540603_pgfId-999599]## private Context jndiContext = null;

[#50540603_pgfId-999601]## private ConvBeanHome chome = null;

[#50540603_pgfId-999603]## 

[#50540603_pgfId-999605]## public void ejbCreate() \{

[#50540603_pgfId-999607]## jndiContext = new InitialContext();

[#50540603_pgfId-999609]## chome = (ConvBeanHome)

[#50540603_pgfId-999611]## jndi.lookup("java:comp/env/ConvBeanHome");

[#50540603_pgfId-999613]## }

[#50540603_pgfId-999615]## 

[#50540603_pgfId-999617]## ConvResponse onMessage(ConvRequest
requestMsg) \{

[#50540603_pgfId-999619]## // get conversation id and request type from
the request

[#50540603_pgfId-999824]## // message

[#50540603_pgfId-999621]## int convId = ...;

[#50540603_pgfId-999623]## int type = ...;

[#50540603_pgfId-999625]## 

[#50540603_pgfId-999627]## if (type == CONV_START) \{

[#50540603_pgfId-999629]## // create entity EJB for holding the specific

[#50540603_pgfId-999631]## // conversation state

[#50540603_pgfId-999633]## ConvBean cbean = chome.create(convId);

[#50540603_pgfId-999635]## } else if (type == CONV_CONTINUE) \{

[#50540603_pgfId-999637]## ConvBean cbean =
chome.findByPrimaryKey(convId);

[#50540603_pgfId-999639]## 

[#50540603_pgfId-999641]## // unmarshall EJB method parameters

[#50540603_pgfId-999643]## ...;

[#50540603_pgfId-999645]## 

[#50540603_pgfId-999647]## // invoke EJB and return response

[#50540603_pgfId-999649]## Object resp = cbean.myBusinessMethod(params);

[#50540603_pgfId-999651]## ConvResponse cresp = Utility.convert(resp);

[#50540603_pgfId-999653]## return cresponse;

[#50540603_pgfId-999655]## } else if (type == CONV_END) \{

[#50540603_pgfId-999657]## cbean.remove();

[#50540603_pgfId-999659]## }

[#50540603_pgfId-999661]## 

[#50540603_pgfId-999663]## return null;

[#50540603_pgfId-999665]## 

[#50540603_pgfId-999667]## }

[#50540603_pgfId-999669]## 

[#50540603_pgfId-999671]## public void ejbRemove() \{

[#50540603_pgfId-999673]## jndiContext = null;

[#50540603_pgfId-999675]## chome = null;

[#50540603_pgfId-1000052]## }

[#50540603_pgfId-1000050]##}

[#50540603_pgfId-999564]##The resource adapter uses the message-driven
bean as a generic dispatcher for session and entity bean invocations,
and relies on the application server to efficiently pool message-driven
bean instances. Each message-driven bean call should be just as
efficient as a method call on a resource adapter local object.

======= [#50540603_pgfId-1000104]##Message-Driven Bean Dispatcher Pattern

[#50540603_pgfId-1000138]##When a worker thread from a resource adapter
accesses a message-driven bean method, the JNDI context of the bean is
available to the thread, although only during the method call on the
bean.

[#50540603_pgfId-1000166]##The resource adapter may take advantage of
this, and use the bean as a dispatcher. That is, the resource adapter
may park the thread within the bean method inside a while loop, and use
it to process resource adapter specific data structures passed into the
bean method as method parameters, and also use the JNDI context of the
bean to access resources and other components.

[#50540603_pgfId-1000148]##In this case, the bean becomes a special Java
object that has access to JNDI context, which the resource adapter may
use. This usage pattern illustrates a tight coupling between the
resource adapter and the message-driven bean, and it is likely that the
resource adapter would provide the bean implementation as well.

[#50540603_pgfId-998874]## 

====== [#50540571_pgfId-874]## 

======= [#50540571_pgfId-5529]##

image:conn-115.gif[image]

[#50540571_84673]##Transaction Inflow

image:conn-116.gif[image]

[#50540571_pgfId-999458]##This chapter specifies a contract between an
application server and a resource adapter that allows a resource adapter
to propagate an imported transaction to an application server, so that
the application server and subsequent participants can do work as part
of the imported transaction. This contract also allows a resource
adapter to flow-in transaction completion and crash recovery calls
initiated by an EIS, and ensures that the atomicity, consistency,
isolation and durability (ACID) properties of the imported transaction
are preserved.

======= [#50540571_pgfId-999459]##

image:conn-117.gif[image]

Overview

[#50540571_pgfId-999460]##A resource adapter may need to import an
incoming external transaction context obtained from a remote protocol
message and do work as part of the imported transaction. The work done
by the resource adapter as part of the imported transaction may involve
interactions with the application server and the application components.

[#50540571_pgfId-999461]##The resource adapter is expected to process
the wire protocol and the transaction context format and be able to
import an incoming transaction in an EIS-specific way. The resource
adapter is required to propagate the imported transaction to the
application server and also flow-in transaction completion and crash
recovery calls initiated by the EIS. In order for the resource adapter
to accomplish this, it requires the following:

[#50540571_pgfId-999462]##A standard form to represent the transaction
context imported by the resource adapter.

[#50540571_pgfId-999463]##A mechanism to associate the work done by the
resource adapter as part of the imported transaction.

[#50540571_pgfId-999464]##A mechanism to treat the application server
like a resource manager in order to make it participate in the two-phase
commit and crash recovery flows initiated by the external transaction
originator, the EIS.

[#50540571_pgfId-999498]##Transaction Inflow Contract

image:conn-118.gif[image]

======= [#50540571_pgfId-999499]##

image:conn-117.gif[image]

Goals

[#50540571_pgfId-999500]##Provide a standard mechanism for a resource
adapter to propagate an imported transaction to an application server.

[#50540571_pgfId-999501]##Provide a standard mechanism for a resource
adapter to flow-in transaction completion and crash recovery calls from
an EIS.

[#50540571_pgfId-999502]##Ensure that the ACID properties of the
transaction imported by a resource adapter are preserved.

======= [#50540571_pgfId-999503]##

image:conn-117.gif[image]

[#50540571_62722]##Use Case Scenario

[#50540571_pgfId-999504]##An EIS initiates a transaction and calls
application components residing in an application server through a
resource adapter. The EIS propagates the transaction context as part of
each call to the resource adapter, which is used by the application
server to recreate the transaction context before the application
components are called. The work done by the application components is
automatically enlisted as part of the imported transaction. When the EIS
completes the transaction, the transaction completion notifications flow
to the application server through the resource adapter, and the
transaction is completed.

[#50540571_pgfId-999505]##The transaction inflow contract may be used in
various situations. For example:

[#50540571_pgfId-999506]##A message provider may use the contract to
push messages to a resource adapter for delivery to application
components.

[#50540571_pgfId-999507]##The contract may be leveraged to make the
application components do work as part of a transaction initiated by a
legacy EIS.

[#50540571_pgfId-1000277]##Note that application components may not
always do work as part of an EIS-initiated transaction, for example,
when the declarative transaction attribute of an enterprise bean’s
method is _RequiresNew_ , _Never_ , _NotSupported_ , or if bean-managed
transaction demarcation is used.

[#50540571_pgfId-1000276]## 

[#50540571_pgfId-999538]##Transaction Inflow Contract (Object Diagram)

image:conn-119.gif[image]

======= [#50540571_pgfId-999539]##

image:conn-117.gif[image]

Transaction Inflow Model

[width="100%",cols="100%",]
|===
a|
[#50540571_pgfId-1000186]##package javax.resource.spi;

[#50540571_pgfId-1000187]## 

[#50540571_pgfId-1000188]##import javax.transaction.xa.Xid;

[#50540571_pgfId-1000189]##import java.transaction.xa.XAException;

[#50540571_pgfId-1000190]##import javax.resource.spi.work.WorkManager;

[#50540571_pgfId-1000191]## 

[#50540571_pgfId-1000192]##public interface BootstrapContext \{

[#50540571_pgfId-1000193]## WorkManager getWorkManager();

[#50540571_pgfId-1000194]## XATerminator getXATerminator();

[#50540571_pgfId-1000195]## ... // other methods

[#50540571_pgfId-1000196]##}

[#50540571_pgfId-1000197]## 

[#50540571_pgfId-1000198]##public interface XATerminator \{

[#50540571_pgfId-1000199]## public void commit(Xid xid, boolean
onePhase) throws XAException;

[#50540571_pgfId-1000200]## public void forget(Xid xid) throws
XAException;

[#50540571_pgfId-1000201]## public int prepare(Xid xid) throws
XAException;

[#50540571_pgfId-1000202]## public Xid[] recover(int flag) throws
XAException;

[#50540571_pgfId-1000203]## public void rollback(Xid xid) throws
XAException;

[#50540571_pgfId-1000184]##}

|===

[#50540571_pgfId-999559]##The BootstrapContext interface allows the
resource adapter to obtain a _WorkManager_ instance and an XATerminator
instance. These instances are not required to be unique. The resource
adapter uses the _WorkManager_ instance to submit _Work_ instances for
execution, and uses the XATerminator instance for transaction completion
and crash recovery flows.

======= [#50540571_pgfId-999560]##[#50540571_72505]##Processing of Transactional Calls

[#50540571_pgfId-999561]##The steps involved in propagating an imported
transaction from a resource adapter to the application server in order
to do transactional work is as follows:

[#50540571_pgfId-999562]##The EIS makes a transactional call to the
resource adapter. The resource adapter is expected to process the
EIS-specific transaction context structure and the wire protocol. The
resource adapter imports the transaction context that arrived along with
the incoming message.

[#50540571_pgfId-999563]##The resource adapter represents the imported
transaction context in a standard form using the
javax.transaction.xa.Xid instance.

[#50540571_pgfId-999564]##The resource adapter constructs a _Work_
instance, which is expected to do work as part of the transactional
message, and also creates an ExecutionContext instance containing the
constructed Xid. It then submits the _Work_ instance along with the
ExecutionContext instance to the application server’s _WorkManager_ for
execution. Version 1.6 of the Connector Architecture defines a standard
class, _TransactionContext_ , for the propagation of transaction context
information from the EIS to the application server. Resource adapters
may use this instead of _ExecutionContext_ . See
link:conn.htm#50540613_42449[See TransactionContext Class] for more
information on the _TransactionContext_ class.

[#50540571_pgfId-999565]##The application server’s _WorkManager_ accepts
the submitted _Work_ instance and recreates the execution context for
the _Work_ instance. That is, the work to be done is enlisted as part of
the imported transaction. It then calls the run method on the Work
object. +
Note, however, all the work done by the Work object may not be part of
the transaction. For example, the application server may suspend the
imported transaction depending on the transaction preference of the bean
method that may be invoked.

[#50540571_pgfId-999566]##The above steps may be repeated any number of
times for a particular transaction from any resource adapter. However,
the application server must disallow transactional Work submissions with
a WorkCompletedException set to an appropriate error code, irrespective
of which resource adapter it comes from, under the following
circumstances:

[#50540571_pgfId-999567]##If a _Work_ instance associated with the
transaction is already present. That is, concurrent work within an
imported transaction is disallowed. The error code to indicate this is
WorkException.TX_CONCURRENT_WORK_DISALLOWED.

[#50540571_pgfId-999568]##The application server is unable to recreate
the transaction. That is, it fails in its attempt to enlist the _Work_
instance with the transaction. The error code to indicate this is
WorkException.TX_RECREATE_FAILED.

======= [#50540571_pgfId-999569]##Transaction Completion Processing

[#50540571_pgfId-999570]##The steps involved in completing of the
imported transaction initiated by the external EIS are as follows:

[#50540571_pgfId-999571]##The EIS sends a prepare message for a
particular transaction.

[#50540571_pgfId-999572]##The resource adapter obtains an XATerminator
instance from the application server through the getXATerminator method
of the BootstrapContext instance. Note, this step may be done at any
time, and the obtained XATerminator instance may be used for transaction
completion flows across multiple imported transactions. The XATerminator
implementation should be thread-safe and re-entrant.

[#50540571_pgfId-999573]##The resource adapter calls the prepare method
of the XATerminator instance with an appropriate Xid instance, and
returns the outcome of the prepare operation to the EIS.

[#50540571_pgfId-1000755]##When the EIS sends a commit message for the
transaction, the resource adapter calls the commit method of the
XATerminator instance with an appropriate Xid instance. Note, it is
possible for the commit method to be called without a prior prepare
method call in the case of one-phase commit.

[#50540571_pgfId-1000756]## 

[#50540571_pgfId-1000859]##Transactional Calls and Transaction
Completion Flow (Sequence Diagram)

image:conn-120.gif[image]

======= [#50540571_pgfId-999677]##Crash Recovery Processing

[#50540571_pgfId-999678]##If the EIS detects the failure of the
application server while the transaction is active (that is, transaction
completion has not begun), it does not wait for the application server
to recover or do any recovery processing. The transactional work done by
the application server site is presumed aborted.

[#50540571_pgfId-999679]##If the EIS detects the failure of the
application server while the transaction is in-doubt (that is, the
transaction has already been prepared), the EIS retries completion by
attempting to re-establish network communication until it succeeds. When
the application server recovers from the crash, it should recover the
state of all transactions that were successfully prepared before the
crash, and complete them upon receiving a commit method or rollback
method call from the EIS through the resource adapter.

[#50540571_pgfId-999680]##If the resource adapter detects the failure of
the EIS while the transaction is active (that is, transaction completion
has not begun), it aborts all active transactions that originated from
the EIS. The resource adapter should keep a list of active transactions
and abort them upon EIS failure.

[#50540571_pgfId-999681]##If the resource adapter detects the failure of
the EIS while the transaction is in-doubt (that is, the transaction has
already been prepared), it waits for the EIS to recover. When the EIS
recovers, it re-establishes network communication with the resource
adapter, and queries it for a list of in-doubt transactions. It then
completes the in-doubt transactions.

[#50540571_pgfId-1000446]## 

[#50540571_pgfId-1000371]##Crash Recovery Flows When Application Server
Crashes (Sequence Diagram)

image:conn-121.gif[image]

[#50540571_pgfId-1000372]## 

[#50540571_pgfId-1000443]##Crash Recovery Flows When EIS Crashes
(Sequence Diagram)

image:conn-122.gif[image]

======= [#50540571_pgfId-999821]##Requirements

[#50540571_pgfId-999822]##An application server must implement the
transaction inflow contract. That is, it must allow Work submissions
with a transaction context, an Xid, and provide a valid XATerminator
instance when called through the getXATerminator method of the
BootstrapContext instance.

[#50540571_pgfId-999823]##A resource adapter may optionally choose to
use the transaction inflow contract. But, a resource adapter that uses
the transaction inflow contract to import an EIS transaction and do
transactional work must implement the prescribed transaction inflow
contract.

[#50540571_pgfId-999824]##The XATerminator instance provided by the
application server must be thread-safe and re-entrant. The resource
adapter may use an XATerminator instance across different transactions
concurrently.

[#50540571_pgfId-999825]##When the application server is unable to
recreate the transaction context, if any, specified for a _Work_
instance, it must throw a WorkCompletedException set to the error code
WorkException.TX_RECREATE_FAILED.

[#50540571_pgfId-999826]##For a particular imported transaction, at any
given time, there must be at most one _Work_ instance associated with
the transaction. The associated _Work_ instance may be in any state,
that is, waiting for execution to begin or already executing. However,
it must be possible for several _Work_ instances to do work on a
transaction as long as there is at most one _Work_ instance associated
with the transaction at any time. It must also be possible for different
resource adapters to participate in the same transaction.

[#50540571_pgfId-999827]##The application server must disallow Work
submissions with a WorkCompletedException set to the error code
WorkException.TX_CONCURRENT_WORK_DISALLOWED, if there is already a
_Work_ instance associated with the transaction, irrespective of which
resource adapter is involved in the Work submission. This must be done
using the getGlobalTransactionId method of the Xid object present in the
execution context of the submitted _Work_ instance. The Xid’s branch
identifier must be ignored.

[#50540571_pgfId-999828]##The application server must not try to
serialize Work processing based on transaction information.

[#50540571_pgfId-999829]##The application server must reject Work
submissions for a transaction whose completion is in-progress, with a
WorkCompletedException set to the error code
WorkException.TX_CONCURRENT_WORK_DISALLOWED.

[#50540571_pgfId-999830]##The application server must reject transaction
completion or crash recovery calls for a specific transaction with a
javax.transaction.xa.XAException, when a _Work_ instance associated with
the transaction is present. The application server must not block or
serialize transaction completion or crash recovery calls waiting for a
_Work_ instance associated with the transaction to complete.

[#50540571_pgfId-999831]##The application server must reject multiple
transaction completion or crash recovery calls for the same transaction
with a javax.transaction.xa.XAException.

[#50540571_pgfId-999832]##The application server must reject transaction
completion or crash recovery calls with a
javax.transaction.xa.XAException upon any errors.

[#50540571_pgfId-999833]##The application server should recover the
state of all in-doubt transactions upon failure recovery.

======= [#50540571_pgfId-999834]##Non-Requirements

[#50540571_pgfId-999835]##The application server is not responsible for
ensuring transaction IDs of the imported transactions from different
EISs are unique. Each EIS is expected to use unique transaction IDs.

[#50540571_pgfId-999836]##It is possible that a rogue resource adapter
or EIS may provide non-unique Xids, or attempt to complete transactions
that it does not own. The application server is not required to detect
the above cases. It is also not required to detect transactional,
transaction completion, or crash recovery calls from a rogue EIS.

======= [#50540571_pgfId-999837]##Recommendations

[#50540571_pgfId-999838]##The resource adapter should keep a list of
active transactions and abort them upon detecting EIS failure.

======= [#50540571_pgfId-999839]##Transaction Inflow in a Non-Managed Environment

[#50540571_pgfId-999840]##Though the transaction inflow contract is
primarily intended for a managed environment, it may be used in a
non-managed environment provided the application that bootstraps a
resource adapter instance is capable of functioning as a resource
manager.

[#50540571_pgfId-999841]##In a non-managed environment, support for the
transaction inflow contract is not required. That is, the
getXATerminator method of the BootstrapContext instance may return a
null instance.[#50540571_10969]##

====== [#50540614_pgfId-998444]## 

[#50540614_pgfId-998447]## 

======= [#50540614_pgfId-998451]##

image:conn-123.gif[image]

[#50540614_88146]##Security Inflow

image:conn-124.gif[image]

[#50540614_pgfId-998595]##This chapter specifies a standard, generic
security contract between the EIS/resource adapter and the application
server that enables a resource adapter to establish security information
while submiting a _Work_ instance for execution to a _WorkManager_ and
while delivering messages to message endpoints residing in the
application server.

======= [#50540614_pgfId-998738]##

image:conn-125.gif[image]

Overview

[#50540614_pgfId-998739]##It is critical, in EIS integration scenarios,
that all interactions between an application server and resource adapter
are secure and unauthorized access to application components deployed in
an application server be prevented. The security architecture for
integration of EISs into the application server is detailed in
link:conn.htm#50540567_86332[See Security Architecture] and the security
contract in related to connection establishment with the EIS is
discussed in this chapter

[#50540614_pgfId-998742]##Resource adapters, typically employ transport
and message level security for connecting to, and receiving messages
from an EIS. To achieve end-to-end application security, it is important
that all activities that a _Work_ instance performs, including
delivering messages to a _MessageEndpoint_ happens in the context of an
established identity.

[#50540614_pgfId-998744]##This chapter references the following chapters
and documents:

{empty}[#50540614_pgfId-998745]##Security Architecture specified in
link:conn.htm#50540567_86332[See Security Architecture]

[#50540614_pgfId-998746]##Security scenarios based on the connector
architecture (Refer to Appendix D link:conn.htm#50540569_16269[See
Security Scenarios])

[#50540614_pgfId-998747]##link:conn.htm#50540564_88238[See Java
Authentication Service Provider Interface for Containers Specification,
version 1.4] (JSR-196)

[#50540614_pgfId-998753]## 

[#50540614_pgfId-998825]## 

[#50540614_pgfId-998826]## 

[#50540614_pgfId-998792]##Security Inflow Contract

image:conn-126.gif[image]

======= [#50540614_pgfId-998796]##

image:conn-125.gif[image]

Goals

[#50540614_pgfId-998806]##The Security Inflow contract is designed to
meet the following goals:

[#50540614_pgfId-998808]##Enable an end-to-end security model for Java
EE applications, to support integration with EIS based on the Connector
architecture

[#50540614_pgfId-998809]##Support the execution of a _Work_ instance in
the context of an established identity

[#50540614_pgfId-998810]##Support the propagation of user information/
_Principal_ information from an EIS to a _MessageEndpoint_ during
Message Inflow

[#50540614_pgfId-998811]##Ensure that the security inflow contract is
transparent to an application component provider

[#50540614_pgfId-998812]##Enable a _WorkManager_ to make authorization
checks based on the security context information that is provided with
the submitted _Work_ instance

[#50540614_pgfId-998813]##Enable an application component container to
authorize and control access during Message Inflow to message endpoints
residing in the application component container

[#50540614_pgfId-998814]##Allow _MessageEndpoint_ s to be portable
across multiple EISs that use different security mechanisms

[#50540614_pgfId-998815]##Map security identities in foreign domains
into corresponding identities in the receiving container or context

[#50540614_pgfId-1000122]##Ensure backward compatibility with the
existing "Security Management contract", defined in Chapter-17 of
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2] Core Contracts and Requirements
specification, for security context inflow to _MessageEndpoint_ s
realized as message-driven beans

======= [#50540614_pgfId-1000006]##

image:conn-125.gif[image]

[#50540614_74429]##Security Inflow Model

[#50540614_pgfId-1000007]##This chapter uses the terminology described
in link:conn.htm#50540567_67590[See Terminology] and does not dictate
any specific security policy or technology. The resource adapter
performs EIS sign-on and secure association with the EIS in an EIS
specific manner. No specific scheme or configuration to perform sign-on
and establish such secure associations is mandated by this security
inflow model. For more details on EIS sign-on, see
link:conn.htm#50540567_71111[See Authentication Mechanism] and for
details on secure association with the EIS, see
link:conn.htm#50540567_87495[See Secure Association].

[#50540614_pgfId-998832]##The security inflow contract between the
resource adapter and the application server leverages the Generic Work
Context mechanism (described in link:conn.htm#50540613_67821[See Generic
Work Context]) by describing a standard _WorkContext_ ,
_SecurityContext_ that may be provided by the resource adapter while
submitting a _Work_ for execution.

[#50540614_pgfId-998835]##Submitting a _Work_ instance without
specifying the security contextual information, in which the Work has to
be executed in, has the following drawbacks related to application
security:

[#50540614_pgfId-998837]##When a _Work_ instance is submitted by a
resource adapter to a _WorkManager_ for execution:

[#50540614_pgfId-998838]##The _Work_ instance is always executed in an
unknown security context, or a default security context set by the
application server’s _WorkManager_

[#50540614_pgfId-998839]##In the absence of inflow of security
identities during _Work_ submission, the container cannot ensure the
task has been granted fine-grained permissions/access-control based on
authenticated user identities but is limited to making access decisions
based on code-based identity information.

[#50540614_pgfId-998840]##When a message is delivered asynchronously to
_MessageEndpoint_ s residing in the application server, the resource
adapter cannot establish the security identity of the caller of the
_MessageEndpoint_ , that is, the value returned when
_EJBContext.getCallerPrincipal()_ is called is unknown. (when the
_MessageEndpoint_ is realized as a message-driven bean).

[#50540614_pgfId-1000656]##The _SecurityContext_ provides a portable
mechanism for the resource adapter to pass security context information
to the application server. This work context enables an EIS/resource
adapter to flow-in security context information while submitting a
_Work_ to a _WorkManager_ for execution. All activities that happen as
part of the _Work_ instance, including message deliveries to
_MessageEndpoint_ s then occurs in the context of an established
identity. This avoids the drawbacks listed above and extends the
end-to-end security model for Java EE applications to include the _Work_
execution and Message Inflow aspects.

[#50540614_pgfId-998847]##A resource adapter submits a _Work_ instance,
that implements _WorkContextProvider_ to a _WorkManager_ . The resource
adapter includes a concrete implementation of _SecurityContext_ as one
of the work contexts it requires to be established as the execution
context of the _Work_ instance.

[#50540614_pgfId-998849]##When one of the free threads from the
application server’s thread pool picks up the _Work_ instance for
execution, as described in the Generic Work Context Model (see
link:conn.htm#50540613_53525[See Generic Work Context Model]), the
application server establishes the security context information
described in the _SecurityContext_ , before executing the _Work_
instance.

[#50540614_pgfId-1000489]##When a message is delivered to a
_MessageEndpoint_ instance by the resource adapter in the context of a
_Work_ instance, the security context that is set up for that message
delivery is inherited from the security context set in the _Work_
instance. In other words, as in Transaction Inflow (see
link:conn.htm#50540571_84673[See Transaction Inflow]), all message
deliveries that are delivered to endpoints within a single _Work_
instance are processed under the same security identity.

[#50540614_pgfId-1000493]## 

[#50540614_pgfId-1000534]##Security Inflow Conmtext (Object Diagram)

image:conn-127.gif[image]

======= [#50540614_pgfId-998967]##SecurityContext

[#50540614_pgfId-999033]## 

[#50540614_pgfId-998974]## package javax.resource.spi.work;

[#50540614_pgfId-998976]##

[#50540614_pgfId-999006]## import javax.security.auth.Subject;

[#50540614_pgfId-998977]## import
javax.security.auth.callback.CallbackHandler;

[#50540614_pgfId-998978]## 

[#50540614_pgfId-998979]## public abstract class SecurityContext

[#50540614_pgfId-999007]## implements WorkContext \{

[#50540614_pgfId-1001006]##

[#50540614_pgfId-999016]## public String getDescription() \{

[#50540614_pgfId-1001008]## return "Security Context";

[#50540614_pgfId-1001020]## }

[#50540614_pgfId-1001010]## 

[#50540614_pgfId-1001014]## public String getName() \{

[#50540614_pgfId-1001015]## return "SecurityContext";

[#50540614_pgfId-1001016]## }

[#50540614_pgfId-1001023]## 

[#50540614_pgfId-1001017]## public abstract void setupSecurityContext(

[#50540614_pgfId-999017]## CallbackHandler handler,

[#50540614_pgfId-999031]## Subject executionSubject,

[#50540614_pgfId-999032]## Subject serviceSubject);

[#50540614_pgfId-998972]## }

[#50540614_pgfId-998987]## 

[#50540614_pgfId-999401]##When a resource adapter flows-in an identity
to be used by the application server, the identity may or may not belong
to the EIS security domain and the caller principal to be established
for a message-driven bean (or a _MessageEndpoint_ ) is required to be an
identity of the application server’s security domain. Therefore the EIS
integration scenario has two choices related to establishing the Caller
identity:

[#50540614_pgfId-998989]## _Case 1: Resource adapter flows-in an
identity in the application server’s security policy domain._ In this
case, the application server may just use the initiating principal,
flown-in from the resource adapter, as the caller principal in the
security context the _Work_ instance executes as.

[#50540614_pgfId-998990]## _Case 2: Resource adapter flows-in an
identity belonging to the EIS’ security domain_ . The resource adapter
establishes a connection to the EIS and requires to execute a _Work_
instance in the context of an EIS identity. In this case, the initiating
or caller principal does not exist in the application server’s security
domain. A translation from one domain to the other is required to be
performed.

[#50540614_pgfId-1000786]##For more information on these two cases, see
link:conn.htm#50540614_92584[See Case 1: Identity in the Container
Security Domain] and link:conn.htm#50540614_24959[See Case 2: Identity
Translated Between Security Domains].

[#50540614_pgfId-1000815]##The _WorkManager_ may enforce any security
policies, as per its configuration, while establishing the security
context for the _Work_ instance. The application server may also enforce
additional security policies, based on the configuration of the
_MessageEndpoint_ s, during message delivery. See
link:conn.htm#50540559_97757[See Message Delivery].

======= [#50540614_pgfId-998991]##

image:conn-125.gif[image]

[#50540614_83354]##SecurityContext Class

[#50540614_pgfId-998992]##The _SecurityContext_ is one of the standard
_WorkContext_ s defined in this specification. It enables a _Work_
instance to propagate security related context information from an EIS
to the application server. It is modelled as an abstract class that
implements the _WorkContext_ interface.

[#50540614_pgfId-998995]##The resource adapter provides a custom
concrete implementation of the _SecurityContext_ abstract class and
provides an implementation for the method _setupSecurityContext_ to set
up security context for the _Work_ instance being submitted. A resource
adapter indicates to the _WorkManager_ , that a _Work_ instance is
required to be run in a specified security execution context by
submitting a _Work_ instance that implements _WorkContextProvider_
interface and ensuring that the _List_ of _WorkContext_ s for that
_Work_ instance contains an instance of _SecurityContext._

[#50540614_pgfId-999000]## 

[#50540614_pgfId-999035]##Security Context Establishment During Work
Submission(Sequence Diagram)

image:conn-128.gif[image]

======= [#50540614_pgfId-999036]##[#50540614_41776]##Establishing the Security Context

[#50540614_pgfId-999037]##While setting the execution context of a
_Work_ instance, the _WorkManager_ establishes the security context for
the _Work_ instance when it encounters a _WorkContext_ instance
implementing _SecurityContext_ .

[#50540614_pgfId-999040]## For setting the security context of a _Work_
instance, the application server calls the _setupSecurityContext_ method
of the _SecurityContext_ implementation provided by the resource
adapter. The following conditions are applicable to the application
server provider while calling the _setupSecurityContext_ method:

[#50540614_pgfId-999043]##The _handler_ argument must not be null, and
the _CallbackHandler_ implementation passed as the argument _handler_ to
_setupSecurityContext_ must support the following _Callback_ s defined
in link:conn.htm#50540564_88238[See Java Authentication Service Provider
Interface for Containers Specification, version 1.4]:

[#50540614_pgfId-999045]## _CallerPrincipalCallback_

[#50540614_pgfId-999046]## _GroupPrincipalCallback_

[#50540614_pgfId-999047]## _PasswordValidationCallback_

[#50540614_pgfId-999048]##The following _Callback_ s are recommended to
be supported by the _CallbackHandler_ implementation:

[#50540614_pgfId-999056]## _CertStoreCallback_

[#50540614_pgfId-999058]## _PrivateKeyCallback_

[#50540614_pgfId-999059]## _SecretKeyCallback_

[#50540614_pgfId-999060]## _TrustStoreCallback_

[#50540614_pgfId-999061]##The _executionSubject_ argument must be
non-null and it must not be read-only. It is expected that the resource
adapter _Work_ implementation will populate this _executionSubject_ with
_Principal_ and credentials that would be flown into the application
server.

[#50540614_pgfId-999063]##The _serviceSubject_ argument may be null. If
it is not null, it must not be read-only. It represents the application
server’s credentials and it may be used by the _Work_ implementation to
retrieve Principals and credentials necessary to establish a connection
to the EIS (in the cause of mutual-auth like scenarios). The
_serviceSubject_ may contain the credentials of the application server
or the _SecurityContext_ implementation may collect the service
credentials, as necessary, by using the _CallbackHandler_ passed to it.

[#50540614_pgfId-1001321]##When the _setupSecurityContext_ method is
called by the application server container, the resource adapter may
perform the following steps to establish caller identity information for
a _Work_ instance:

[#50540614_pgfId-1001322]##Identify the security context that is
required to be flown-in to the application server to serve as the
execution context of the _Work_ instance.

[#50540614_pgfId-999072]##Populate the _executionSubject_ with the EIS
_Principal_ and Credentials that should serve as the security context
for the _Work_ instance to be executed in.

[#50540614_pgfId-999073]##Add instances of the necessary _Callback_ s
(link:conn.htm#50540614_87378[See Callbacks for Information from the
Application Server] describes when a particular _Callback_ is required
to be employed by the resource adapter), usually a subset of the ones
listed above, to an array and invokes the _handle()_ method in the
container’s _CallbackHandler_ implementation by passing the array of
_Callback_ instances.

[#50540614_pgfId-999074]##On sucessful return from the
_CallbackHandler.handle()_ method the _setupSecurityContext()_ returns.

[#50540614_pgfId-999077]##On successful return of _setupSecurityContext_
, the container must use the "modified" _executionSubject_ (modified as
a result of handling the various _Callback_ s) to establish the caller
identity of the _Work_ instance

[#50540614_pgfId-999079]##On successful return from
_setupSecurityContext_ , the _WorkManager_ must ensure that the _Work_
is set up to be executed with the established security identity. Any
subsequent _MessageEndpoint_ deliveries in that _Work_ instance (to
message-driven beans for instance) should have the security context
established appropriately. When message-driven beans are the
_MessageEndpoint_ s, _MessageDrivenContext.getCallerPrinicipal()_ must
return the principal corresponding to the established security identity,
and _MessageDrivenContext.isCallerInRole()_ must return the result of
testing the established security identity for role membership.

[#50540614_pgfId-1000607]##As detailed in
link:conn.htm#50540613_32410[See WorkContextProvider and WorkContext
Interface], a Connector _WorkManager_ must support nested _Work_
submissions. One or more _Work_ instances in such a nested _Work_
submission may include a _SecurityContext_ . The Connector _WorkManager_
must restrict the security context, established by way of the
_SecurityContext_ of a _Work_ instance, to that _Work_ instance alone.
When a nested _Work_ instance is submitted without a SecurityContext,
the Connector _WorkManager_ must not inherit the Security Context
information of the parent _Work_ instance. It must establish the
equivalent of an unauthenticated caller principal for the nested _Work_
instance.

[#50540614_pgfId-999501]## 

[#50540614_pgfId-999085]##Establish the Security Context (Sequence
Diagram)

image:conn-129.gif[image]

[#50540614_pgfId-999086]## 

======= [#50540614_pgfId-999087]##[#50540614_87378]##Callbacks for Information from the Application Server

[#50540614_pgfId-999089]##As part of step 3 described in the section
above, the following _Callback_ s may be employed by a resource adapter.
The descriptions of the _Callback_ s below have been taken from the
link:conn.htm#50540564_88238[See Java Authentication Service Provider
Interface for Containers Specification, version 1.4] specification. For
detailed information, refer to the link:conn.htm#50540564_88238[See Java
Authentication Service Provider Interface for Containers Specification,
version 1.4] and the Java API documentation of the _Callback_ s defined
in the _javax.security.auth.message.callback_ package of that
specification:

[#50540614_pgfId-999095]##A resource adapter may use the
_CallerPrincipalCallback_ to set the container’s representation of the
caller principal. The _CallbackHandler_ must establish the caller
principal associated with the invocation being processed by the
container. When the argument _Principal_ is null, the handler will
establish the container’s representation of the unauthenticated caller
principal.

[#50540614_pgfId-999097]##A resource adapter might use the
_GroupPrincipalCallback_ to establish the container’s representation of
the corresponding group principals within the Subject. When a null value
is passed to the groups argument, the handler will establish the
container’s representation of no group principals within the Subject.
Otherwise, the handler’s processing of this callback is additive,
yielding the union (without duplicates) of the principals existing
within the _Subject_ , and those created with the names occuring within
the argument array. The _CallbackHandler_ will define the type of the
created principals.

[#50540614_pgfId-1000678]##A resource adapter might use the
_PasswordValidationCallback_ to employ the password validation
facilities of its containing runtime. Since a resource adapter employing
the _PasswordValidationCallback_ makes an assumption of access to the
password validation facilities (and thereby access to the security
domain), it can be deployed in Case #1 scenarios only +
(For more information on Case #1 scenario, see
link:conn.htm#50540614_92584[See Case 1: Identity in the Container
Security Domain]). The resource adapter must pass this information to th
e deployer through an out-of-band mechanism.

======= [#50540614_pgfId-999099]##[#50540614_92584]##Case 1: Identity in the Container Security Domain

[#50540614_pgfId-999101]##As explained in
link:conn.htm#50540614_74429[See Security Inflow Model], the EIS
integration scenario may result in the resource adapter reusing the
application server security policy domain. In such cases, when the
resource adapter flows-in an identity through the security context
inflow model described in link:conn.htm#50540614_41776[See Establishing
the Security Context], the identity belongs to the application server’s
security domain already. Therefore, the application server may use the
_Principal_ s used in _CallerPrincipalCallback_ and
_GroupPrincipalCallback_ without any translation to the application
server security policy domain.

[#50540614_pgfId-999676]## 

[#50540614_pgfId-999751]##Case 1: Identity in Container’s Security
Domain (Sequence Diagram)

image:conn-130.gif[image]

======= [#50540614_pgfId-999107]##[#50540614_24959]##Case 2: Identity Translated Between Security Domains

[#50540614_pgfId-999109]##When the resource adapter, on the other hand,
connects to an EIS that uses a different security policy domain, it
requires that the _Work_ instance be executed in the context of the
container identity mapped from the EIS identity . To handle such a case,
these _Principal_ s and groups, available in the resource adapter, would
need to be mapped to _Principal_ s and groups as relevant in the
_MessageEndpoint_ container’s security policy domain.

[#50540614_pgfId-999111]##During the inflow of the EIS _Subject_ , the
mapping of one or more principals on the path may be required before
delivering to the _MessageEndpoint_ /message-driven bean. These
translations from the identity of initiating/caller resource principal
to an application server principal could be one of the following types
(see link:conn.htm#50540567_11150[See Resource Principal])

[#50540614_pgfId-999112]##Configured Identity

[#50540614_pgfId-999113]##Principal Mapping

[#50540614_pgfId-999114]##Caller Impersonation

[#50540614_pgfId-999115]##Credentials Mapping

[#50540614_pgfId-999117]##For example, in the case of Principal Mapping,
an employee may be identified by a userid and password (basic
authentication) in an EIS. The resource principal may need to be mapped
to a Kerberos principal, that is relevant in the application server
security domain, before delivering the method invocation to the
message-driven bean. In the case of _MessageEndpoint_ s realized as
message-driven beans _MessageDrivenContext.getCallerPrincipal_ method
then, returns the principal that is the result of the mapping and not
the original EIS principal. In this example, _getCallerPrincipal_ would
return the Kerberos principal.

[#50540614_pgfId-999119]##The management of the security infrastructure,
to enable principal mapping or other schemes listed above, is performed
by the System Administrator role and the mechanism through which a
container enables this mapping is beyond the scope of the Connector
specification.

[#50540614_pgfId-999130]##The application server must provide tools to
set up Caller Identity information for a Work/Message Endpoint
container. This includes support for mapping of EIS/resource principals
to Caller Principals in the application server security domain.

[#50540614_pgfId-999123]##To handle Principal Mapping scenarios
described above, the application server must provide a _CallbackHandler_
that can be configured to perform Principal Mapping during its handling
of the _CallerPrincipalCallback_ and _GroupPrincipalCallback_ s. This
specification does not define interfaces for Principal Mapping service
and _CallbackHandler_ configuration. The deployer must use application
server specific tools and techniques to enable this mapping.

[#50540614_pgfId-999765]##Case 2: Identity Translated Between Security
Domains (Sequence Diagram)

image:conn-131.gif[image]

======= [#50540614_pgfId-999142]##[#50540614_67024]##Establising a Principal as the Caller Identity

[#50540614_pgfId-999144]##Prior to returning to the container,
_setupSecurityContext_ must use the container provided _CallbackHandler_
to handle a _CallerPrincipalCallback_ , unless either of the following
conditions are met at the time the method returns to the container:

[#50540614_pgfId-999145]## _Case A._ The resource adapter intends to
establish an authenticated caller identity, and the principal _Set_ of
the _executionSubject_ contains exactly the one _Principal_ that would
otherwise have been used to construct the _CallerPrincipalCallback_

[#50540614_pgfId-999146]## _Case B._ The resource adapter intends to
establish the unauthenticated caller identity, and the principal _Set_
of the _executionSubject_ is empty.

[#50540614_pgfId-999147]##The resource adapter, in the two cases above,
is not required to use the _Callback_ s listed in
link:conn.htm#50540614_87378[See Callbacks for Information from the
Application Server].

======= [#50540614_pgfId-999152]##Case A: Establishing a Single Principal as the Caller Identity

[#50540614_pgfId-999154]## The resource adapter can add the one
_Principal_ it requires to be set as the Caller identity in the
_Principal_ _Set_ of the _executionSubject_ . See
link:conn.htm#50540614_77292[See Case A: Establishing a Single Principal
as the Caller Identity (Seq. Diagram)] for a sequence diagram depicting
this case. Note that the resource adapter must be configured to have the
necessary security permissions to add a Principal to the
executionSubject.

[#50540614_pgfId-999155]##On return from _setupSecurityContext_ , the
container must determine whether or not it handled the
_CallerPrincipalCallback_ . If it determines that it did not handle the
_Callback_ , the container must transform the contents of the
_executionSubject_ and of any related authentication state to be
equivalent to that which would have resulted had it handled the
_Callback_ on behalf of the resource adapter. This transformation also
includes all security identity translation requirements detailed in
link:conn.htm#50540614_24959[See Case 2: Identity Translated Between
Security Domains].

======= [#50540614_pgfId-999157]##Case B: Establishing an Unauthenticated Security Context

[#50540614_pgfId-999158]##If a resource adapter requires to establish an
unauthenticated security context (which may or may not have an
associated _Principal_ ) for the _Work_ instance, the resource adapter
may perform either of the following operations when
_setupSecurityContext_ is called:

[#50540614_pgfId-999159]##It may use the _CallbackHandler_ to handle a
_CallerPrincipalCallback_ with a null _Principal_ or name

[#50540614_pgfId-999160]##Or, if it uses the simplification described in
link:conn.htm#50540614_67024[See Establising a Principal as the Caller
Identity], it may return an empty _executionSubject_ .

[#50540614_pgfId-999161]##The _WorkManager_ must detect that the handler
was not called and establish the container’s representation of the
unauthenticated identity for that _Work_ instance.

[#50540614_pgfId-999166]##[#50540614_77292]##Case A: Establishing a
Single Principal as the Caller Identity (Seq. Diagram)

image:conn-132.gif[image]

======= [#50540614_pgfId-999172]##[#50540614_55909]##Security Configuration Responsibilities

[#50540614_pgfId-999173]##The system administrator, deployer and
application component ( _MessageEndpoint_ provider) have particular
responsiblities in the assignment of security roles, security domain and
realm assignment.

[#50540614_pgfId-999175]##When _MessageEndpoint_ s are realized as
message-driven beans, the EJB Core Contracts and Requirements of
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2], states the following responsibilities:

[#50540614_pgfId-999176]##Deployer: (section 17.4.2) : The Deployer
assigns principals and/or groups of principals (such as individual users
or user groups) used for managing security in the operational
environment to the security roles defined by means of the _DeclareRoles_
and _RolesAllowed_ metadata annotations and/or _security-role_ elements
of the deployment descriptor. ... the process of assigning the logical
security roles defined in the application’s deployment descriptor to the
operational environment’s security concepts is specific to that
operational environment. Typically, the deployment process consists of
assigning to each security role one or more user groups (or individual
users) defined in the operational environment.

[#50540614_pgfId-999177]##EJB container provider (Section 17.6.7):
Principal Mapping If the application requires that its clients are
deployed in a different security domain, or if multiple applications
deployed across multiple security domains need to interoperate, the EJB
Container Provider is responsible for the mechanism and tools that allow
mapping of principals. The tools are used by the System Administrator to
configure the security for the application?s environment.

[#50540614_pgfId-999178]##System Administrator (Section 17.7.2):
Principal Mapping : If the client is in a different security domain than
the target enterprise bean, the System Administrator is responsible for
mapping the principals used by the client to the principals defined for
the enterprise bean. The result of the mapping is available to the
Deployer. The specification of principal mapping techniques is beyond
the scope of the EJB architecture.

======= [#50540614_pgfId-999184]##Requirements

{empty}[#50540614_pgfId-999187]##The application server must support the
_SecurityContext_ interface. It must also satisfy all the requirements
stated in link:conn.htm#50540614_41776[See Establishing the Security
Context]

[#50540614_pgfId-999189]##The application server must support resource
adapters that employ Case 1 or 2 style integration mode. Cases 1 and 2
are detailed in link:conn.htm#50540614_92584[See Case 1: Identity in the
Container Security Domain] and link:conn.htm#50540614_24959[See Case 2:
Identity Translated Between Security Domains] respectively.

[#50540614_pgfId-999190]##The application server must provide
configuration tools to establish Caller Identity information for a
_MessageEndpoint_ or _Work_ instance as stated in Section
link:conn.htm#50540614_24959[See Case 2: Identity Translated Between
Security Domains]. In other words, the container must provide support
for configuring principal mapping. The application server must also
support the simplifications detailed in link:conn.htm#50540614_67024[See
Establising a Principal as the Caller Identity].

{empty}[#50540614_pgfId-1000538]##The application server must support
the security role assignments relevant to the MessageEndpoint
implementation as stated in link:conn.htm#50540614_55909[See Security
Configuration Responsibilities]

======= [#50540614_pgfId-1000542]##

image:conn-125.gif[image]

Illustrative Example

======= [#50540614_pgfId-999198]##[#50540614_44981]##Case 1: Identity in the Container Security Domain

[#50540614_pgfId-999200]##The Case #1 scenario enables resource adapters
that work closely with the application server and could authenticate the
credentials with the application server’s security domain directly. For
example, consider an EIS that is tightly plugged in with the application
server or container, like say, for illustration purposes, an XMPP
(Extensible Messaging and Presence Protocol) server.

[#50540614_pgfId-999226]##In this case the XMPP resource adapter, could
leverage the application server’s security domain directly for managing
and authenticating users instead of having its own security domain. In
this scenario, the XMPP resource adapter requires the delivery of an
XMPP "exchange message" that was sent by a user _JoeUser_ ( _JoeUser_
was authenticated in the AS security domain by the XMPP resource
adapter, through out-of-band implementation-specific schemes) to a
_MessageEndpoint_ . Since the security identity is in the application
server’s security domain, there isn’t a need to translate the known
identity to an identity in the application server’s security domain. The
XMPP resource adapter already has the user name _JoeUser_ and the
necessary authentication data and could use _JoeUser_ /authentication
data to establish the security context of the _Work_ instance.

[#50540614_pgfId-999220]##In order to support the propagation of user
information/ _Principal_ information from the EIS (XMPP server in this
case) to a _MessageEndpoint_ during message inflow, the XMPP resource
adapter uses a _Work_ instance to deliver the XMPP exchange message and
provides a _SecurityContext_ as one of the _WorkContext_ s for the
_Work_ instance.

[#50540614_pgfId-1000727]##After the container successfully processes
the security work context information, the application server will
ensure that the _Work_ is set up to be executed with the established
security identity. All subsequent _MessageEndpoint_ deliveries in that
_Work_ instance (to message-driven beans for instance) will have the
security context established appropriately. When message-driven beans
are the _MessageEndpoint_ s,
_MessageDrivenContext.getCallerPrinicipal()_ must return the principal
corresponding to the established security identity, and
_MessageDrivenContext.isCallerInRole()_ must return the result of
testing the established security identity for role membership.

[#50540614_pgfId-1000739]## 

[#50540614_pgfId-999229]## public class XMPPResourceAdapterImpl
implements ResourceAdapter \{

[#50540614_pgfId-999230]## ...

[#50540614_pgfId-999231]## public void start(BootstrapContext ctx) \{

[#50540614_pgfId-999232]## bootstrapCtx = ctx;

[#50540614_pgfId-999233]## }

[#50540614_pgfId-999234]## 

[#50540614_pgfId-999235]## ...

[#50540614_pgfId-999236]## \{

[#50540614_pgfId-999237]## WorkManager workManager =

[#50540614_pgfId-999238]## myRA.bootstrapCtx.getWorkManager();

[#50540614_pgfId-999239]## workManager.scheduleWork(new
XMPPMessageDeliveryWork());

[#50540614_pgfId-999240]## ...

[#50540614_pgfId-999241]## }

[#50540614_pgfId-999242]## }

[#50540614_pgfId-999243]## 

[#50540614_pgfId-999244]## 

[#50540614_pgfId-999245]## public class XMPPMessageDeliveryWork

[#50540614_pgfId-999246]## implements Work, WorkContextProvider \{

[#50540614_pgfId-999247]## 

[#50540614_pgfId-999248]## void release()\{ ..}

[#50540614_pgfId-999249]## 

[#50540614_pgfId-999250]## List<WorkContext> getWorkContexts() \{

[#50540614_pgfId-1001027]## List<WorkContext> l = new
ArrayList<WorkContext>();

[#50540614_pgfId-999251]## SecurityContext scIn = new
XMPPSecurityContext();

[#50540614_pgfId-1001028]## l.add(scIn);

[#50540614_pgfId-999252]## return l;

[#50540614_pgfId-999253]## }

[#50540614_pgfId-999254]##

[#50540614_pgfId-999255]## void run()\{

[#50540614_pgfId-999256]## // deliver "exchange message" from the user

[#50540614_pgfId-999257]## // to MessageEndpoint;

[#50540614_pgfId-999258]## }

[#50540614_pgfId-999259]## }

[#50540614_pgfId-999260]## 

[#50540614_pgfId-999261]## 

[#50540614_pgfId-999262]## public class XMPPSecurityContext extends
SecurityContext \{

[#50540614_pgfId-999263]##

[#50540614_pgfId-999264]## @Override

[#50540614_pgfId-999265]## public void
setupSecurityContext(CallbackHandler handler,

[#50540614_pgfId-999266]## Subject executionSubject, Subject
serviceSubject) \{

[#50540614_pgfId-999267]## // Get username, password from client’s
response

[#50540614_pgfId-999268]## // to XMPP register message

[#50540614_pgfId-999269]## // Note: PasswordValidationCallback usage is
required

[#50540614_pgfId-999270]## // only if the RA requires authentication.

[#50540614_pgfId-999271]## PasswordValidationCallback pwdCallback =

[#50540614_pgfId-999272]## new PasswordValidationCallback(

[#50540614_pgfId-999273]## executionSubject, username, pwd);

[#50540614_pgfId-999274]## CallerPrincipalCallback cpCallback =

[#50540614_pgfId-999275]## new CallerPrincipalCallback(

[#50540614_pgfId-999276]## executionSubject, username);

[#50540614_pgfId-999277]## handler.handle(new Callback[] \{ pwdCallback,
cpCallback });

[#50540614_pgfId-999278]##

[#50540614_pgfId-999279]## if (pwdCallback.getResult()) \{

[#50540614_pgfId-999280]## return; // login success.

[#50540614_pgfId-999281]## } else \{

[#50540614_pgfId-999282]## // login failure. Failure while setting
Security Context

[#50540614_pgfId-999283]## }

[#50540614_pgfId-999284]## }

[#50540614_pgfId-999285]## }

======= [#50540614_pgfId-999227]##Case 2: Identity Translated Between Security Domains

[#50540614_pgfId-999296]##The Case #2 scenario enables resource adapters
that are aware of only the EIS Principal to execute _Work_ instances
under a security context that is mapped to the application server’s
security domain. As an illustrative example, consider the case where
integration with an EIS, an XMPP (Extensible Messaging and Presence
Protocol) server is established through the deployment of a third-party
XMPP resource adapter. The XMPP resource adapter is only aware of the
identities/security domain of the XMPP server(EIS) and is unaware of the
details of the security domain where it gets deployed onto.

[#50540614_pgfId-999298]##In this case the XMPP resource adapter, the
deployer/system administrator uses application server specific tools to
effect a mapping fom the XMPP server security domain _Principal_ to an
equivalent _Principal_ in the application server’s security domain.

[#50540614_pgfId-1000748]##In this scenario, the XMPP resource adapter
needs to flow in an XMPP exchange message that was sent by a user
_JoeUser_EISPrincipal_ to a _MessageEndpoint_ _. JoeUser_EISPrincipal_
was authenticated in the XMPP server’s security domain by the XMPP
server runtime and the RA through out-of-band implementation-specific
schemes. The XMPP resource adapter is unaware about the security
identities or configuration of the application server’s security domain.

[#50540614_pgfId-999302]##The deployer/system administrator, using
application server configuration tools provides a mapping between the
XMPP security domain and the application server’s security domain. For
example let’s assume the _JoeUser_EISPrincipal_ _Principal_ is mapped to
a _JoeUser_ASPrincipal_ . When the XMPP resource adapter executes the
_CallerPrincipalCallback_ with _JoeUser_EISPrincipal_ , the
_CallbackHandler_ implementation, aware of the configured mapping rules,
maps the _JoeUser_EISPrincipal_ to _JoeUser_ASPrincipal_ and establishes
_JoeUser_ASPrincipal_ as the Caller Principal.

[#50540614_pgfId-999304]##The resource adapter implementation source
code remains the same as in link:conn.htm#50540614_44981[See Case 1:
Identity in the Container Security Domain].

[#50540614_pgfId-999294]## 

====== [#50540549_pgfId-874]## 

======= [#50540549_pgfId-5529]##

image:conn-133.gif[image]

[#50540549_18304]##Common Client Interface

image:conn-134.gif[image]

[#50540549_pgfId-999458]##This chapter specifies the Common Client
Interface (CCI).

======= [#50540549_pgfId-999459]##

image:conn-135.gif[image]

Overview

[#50540549_pgfId-999460]##The CCI defines a standard client API for
application components. The CCI enables application components and
Enterprise Application Integration (EAI) frameworks to drive
interactions across heterogeneous EISs using a common client API. The
following figure shows a high-level view of the CCI and its relationship
to other application components.

[#50540549_pgfId-999483]##[#50540549_90623]##Common Client Interface

image:conn-136.gif[image]

======= [#50540549_pgfId-999484]##

image:conn-135.gif[image]

Goals

[#50540549_pgfId-999485]##The CCI is designed with the following goals:

[#50540549_pgfId-999486]##It defines a remote function-call interface
that focuses on executing functions on an EIS and retrieving the
results. The CCI can form a base level API for EIS access on which
higher level functionality can be built.

[#50540549_pgfId-999487]##It is targeted primarily towards application
development tools and EAI frameworks.

[#50540549_pgfId-999488]##Although it is simple, it has sufficient
functionality and an extensible application programming model.

[#50540549_pgfId-999489]##It provides an API that both leverages and is
consistent with various facilities defined by the Java SE and Java EE
platforms.

[#50540549_pgfId-999490]##It is independent of a specific EIS. For
example, it does not use data types specific to an EIS. However, the CCI
can be capable of being driven by EIS-specific metadata from a
repository.

[#50540549_pgfId-999491]##An important goal for the CCI is to complement
existing standard JDBC API and not to replace this API. The CCI defines
a common client API that is parallel to the JDBC for EISs that are not
relational databases.

[#50540549_pgfId-999492]##Since the CCI is targeted primarily towards
application development tools and EAI vendors, it is not intended to
discourage the use of JDBC APIs by these vendors. For example, an EAI
vendor will typically combine JDBC with CCI by using the JDBC API to
access relational databases and using CCI to access other EISs.

======= [#50540549_pgfId-999493]##

image:conn-135.gif[image]

Scenarios

[#50540549_pgfId-999494]##The following scenarios illustrate the use of
CCI by enterprise tools and Enterprise Application Integration (EAI)
vendors:

======= [#50540549_pgfId-999495]##Enterprise Application Integration Framework

[#50540549_pgfId-999496]##The EAI vendor uses the Common Client
Interface as a standard way to plug-in resource adapters for
heterogeneous EISs. The vendor provides an application integration
framework on top of the functionality provided by the resource adapters.
The framework uses the standard CCI interfaces to drive interactions
with the connected EISs.

[#50540549_pgfId-999500]##The following figure also shows the use of
JDBC by the EAI framework for connecting to and accessing relational
databases.

[#50540549_pgfId-999528]##[#50540549_29763]##Scenario: EAI Framework

image:conn-137.gif[image]

======= [#50540549_pgfId-999529]##Metadata Repository and API

[#50540549_pgfId-999530]##An EAI or application development tool uses a
metadata repository to drive CCI-based interactions with heterogeneous
EISs. See link:conn.htm#50540549_29763[See Scenario: EAI Framework] and
link:conn.htm#50540549_93968[See Scenario: Enterprise Application
Development Tool] for illustrative examples. A repository may maintain
meta information about functions, with type mapping information and data
structures for the invocation parameters, existing on an EIS system.

[#50540549_pgfId-999537]##

image:conn-138.gif[image]

The specification of a standard repository API and metadata format is
outside the scope of the current version of the connector architecture.

image:conn-138.gif[image]

======= [#50540549_pgfId-999538]##Enterprise Application Development Tool

[#50540549_pgfId-999539]##The CCI functions as a plug-in contract for an
application development tool that develops additional functionality
around a resource adapter.

[#50540549_pgfId-999540]##The application development tool generates
Java classes based on the meta information accessed from a metadata
repository. These Java classes encapsulate CCI-based interactions and
expose a simple application programming model, typically based on the
JavaBeans framework, to the application developers. An application
component uses the generated Java classes for EIS access.

[#50540549_pgfId-1003472]##An application development tool can also
compose or generate an application component that uses the generated
Java classes for EIS access.

[#50540549_pgfId-1003509]##[#50540549_93968]##Scenario: Enterprise
Application Development Tool

image:conn-139.gif[image]

======= [#50540549_pgfId-999578]##

image:conn-135.gif[image]

Common Client Interface

[#50540549_pgfId-999579]##The CCI is divided in to the following parts:

[#50540549_pgfId-999580]##Connection-related interfaces that represent a
connection factory and an application level connection:

[#50540549_pgfId-999581]## _javax.resource.cci.ConnectionFactory_

[#50540549_pgfId-999582]## _javax.resource.cci.Connection_

[#50540549_pgfId-999583]## _javax.resource.cci.ConnectionSpec_

[#50540549_pgfId-999584]## _javax.resource.cci.LocalTransaction_

[#50540549_pgfId-999585]##Interaction-related interfaces that enable a
component to drive an interaction, specified through an
_InteractionSpec_ , with an EIS instance:

[#50540549_pgfId-999586]## _javax.resource.cci.Interaction_

[#50540549_pgfId-999587]## _javax.resource.cci.InteractionSpec_

[#50540549_pgfId-999588]##Service endpoint message listener interface:

[#50540549_pgfId-999589]## _javax.resource.cci.MessageListener_

[#50540549_pgfId-999590]##Data representation-related interfaces that
are used to represent data structures involved in an interaction with an
EIS instance:

[#50540549_pgfId-999591]## _javax.resource.cci.Record_

[#50540549_pgfId-999592]## _javax.resource.cci.MappedRecord_

[#50540549_pgfId-999593]## _javax.resource.cci.IndexedRecord_

[#50540549_pgfId-999594]## _javax.resource.cci.RecordFactory_

[#50540549_pgfId-999595]## _javax.resource.cci.Streamable_

[#50540549_pgfId-999596]## _javax.resource.cci.ResultSet_

[#50540549_pgfId-999597]## _java.sql.ResultSetMetaData_

[#50540549_pgfId-999598]##Metadata related-interfaces that provide basic
meta information about a resource adapter implementation and an EIS
connection:

[#50540549_pgfId-999599]## _javax.resource.cci.ConnectionMetaData_

[#50540549_pgfId-999600]## _javax.resource.cci.ResourceAdapterMetaData_

[#50540549_pgfId-999601]## _javax.resource.cci.ResultSetInfo_

[#50540549_pgfId-999602]##Additional classes:

[#50540549_pgfId-999603]## _javax.resource.ResourceException_

[#50540549_pgfId-999604]## _javax.resource.cci.ResourceWarning_

[#50540549_pgfId-999608]##See link:conn.htm#50540549_93562[See Class
Diagram: Common Client Interface] for the class diagram for CCI.

======= [#50540549_pgfId-999609]##Requirements

[#50540549_pgfId-999610]##A resource adapter provider provides an
implementation of the CCI interfaces as part of its resource adapter
implementation. The connector architecture does not mandate that a
resource adapter support the CCI interfaces as its client API.

[#50540549_pgfId-1003424]##

image:conn-138.gif[image]

A resource adapter is allowed to support a client API specific to its
underlying EIS. An example of an EIS-specific client APIs is JDBC API
for relational databases.

image:conn-138.gif[image]

[#50540549_pgfId-1003425]##The connector architecture also allows a
third-party vendor to provide an implementation of CCI interfaces above
a resource adapter. For example, a base resource adapter supports the
system contracts and provides an EIS specific client API. A third-party
tools vendor may provide the CCI implementation above this base resource
adapter.

[#50540549_pgfId-999613]##The connector architecture also allows a
resource adapter implementation to support all interfaces except the
data representation-related interfaces. In this case, a third-party
vendor provides both the development-time and runtime aspects of data
structures required to drive interactions wthird-partyith an EIS
instance. The section on the _Record_ interface specification describes
this case in more detail.

[#50540549_pgfId-999723]##[#50540549_93562]##Class Diagram: Common
Client Interface

image:conn-140.gif[image]

======= [#50540549_pgfId-999725]##

image:conn-135.gif[image]

[#50540549_26881]##Connection Interfaces

[#50540549_pgfId-999726]##This section specifies interfaces for the
connection factory and application level connection.

======= [#50540549_pgfId-999727]##ConnectionFactory

[#50540549_pgfId-999728]##The _javax.resource.cci.ConnectionFactory_
provides an interface for getting a connection to an EIS instance. A
component looks up a _ConnectionFactory_ instance from the JNDI
namespace and then uses it to get a connection to the EIS instance.

[#50540549_pgfId-999729]##The following code extract shows the
_ConnectionFactory_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002311]##public interface
javax.resource.cci.ConnectionFactory

[#50540549_pgfId-1002312]## extends java.io.Serializable,

[#50540549_pgfId-1002344]## javax.resource.Referenceable \{

[#50540549_pgfId-1002313]## 

[#50540549_pgfId-1002314]## public RecordFactory getRecordFactory()

[#50540549_pgfId-1002315]## throws ResourceException;

[#50540549_pgfId-1002316]## 

[#50540549_pgfId-1002317]## public Connection getConnection()

[#50540549_pgfId-1002318]## throws ResourceException;

[#50540549_pgfId-1002319]## public Connection getConnection(

[#50540549_pgfId-1002320]## javax.resource.cci.ConnectionSpec
properties)

[#50540549_pgfId-1002321]## throws ResourceException;

[#50540549_pgfId-1002322]##

[#50540549_pgfId-1002323]## public ResourceAdapterMetaData getMetaData()

[#50540549_pgfId-1002324]## throws ResourceException;

[#50540549_pgfId-1002325]## 

[#50540549_pgfId-1002309]##}

|===

[#50540549_pgfId-999746]##The _getConnection_ method gets a connection
to an EIS instance. The _getConnection_ variant with no parameters is
used when a component requires the container to manage EIS sign-on. In
this case of the container-managed sign-on, the component does not pass
any security information.

[#50540549_pgfId-999747]##A component may also use the _getConnection_
variant with a _javax.resource.cci.ConnectionSpec_ parameter, if any
resource adapter specific security information and connection parameters
is required to be passed. In the component-managed sign-on case, an
application component passes security information, such as username and
password, through the _ConnectionSpec_ instance.

[#50540549_pgfId-999748]##It is important to note that the properties
passed through the _getConnection_ method should be client-specific,
such as username, password, and language, and not be related to the
configuration of a target EIS instance, such as port number or server
name. The _ManagedConnectionFactory_ instance is configured with a
complete set of properties required for the creation of a connection to
an EIS instance. Configured properties on a _ManagedConnectionFactory_
can be overridden by client-specific properties passed by an application
component through the _getConnection_ method. Refer to
link:conn.htm#50540561_78300[See ManagedConnectionFactory] for
configuration of a _ManagedConnectionFactory_ .

[#50540549_pgfId-999752]##Note that in a managed environment, the
_getConnection_ method with no parameters is the recommended model for
getting a connection. The container manages the EIS sign-on in this
case.

[#50540549_pgfId-999753]##The _ConnectionFactory_ interface also
provides a method to get a _RecordFactory_ instance. The
_ConnectionFactory_ implementation class may throw a
_javax.resource.NotSupportedException_ from the method
_getRecordFactory_ .

======= [#50540549_pgfId-999754]##Requirements

[#50540549_pgfId-999755]##An implementation class for
_ConnectionFactory_ must implement the _java.io.Serializable_ interface
to support JNDI registration. A _ConnectionFactory_ implementation class
is also required to implement _javax.resource.Referenceable_ . Note that
the _javax.resource.Referenceable_ interface extends the
_javax.naming.Referenceable_ interface. Refer to
link:conn.htm#50540561_98699[See JNDI Configuration and Lookup] for more
details on JNDI based requirements for the _ConnectionFactory_
implementation.

[#50540549_pgfId-999759]##An implementation class for
_ConnectionFactory_ must provide a default constructor.

======= [#50540549_pgfId-999760]##ConnectionSpec

[#50540549_pgfId-999761]##The interface
_javax.resource.cci.ConnectionSpec_ is used by an application component
to pass connection request-specific properties to the _getConnection_
method.

[#50540549_pgfId-999762]##The _ConnectionSpec_ interface has been
introduced to increase the toolability of the CCI. The _ConnectionSpec_
interface must be implemented as a JavaBean. Refer to
link:conn.htm#50540546_81739[See JavaBean Requirements].

[#50540549_pgfId-999766]##The following code extract shows the
_ConnectionSpec_ interface.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002354]##public interface
javax.resource.cci.ConnectionSpec \{

[#50540549_pgfId-1002352]##}

|===

[#50540549_pgfId-999769]##The CCI specification defines a set of
standard properties for a _ConnectionSpec_ . The properties are defined
either on a derived interface or an implementation class of an empty
_ConnectionSpec_ interface. In addition, a resource adapter may define
additional properties specific to its underlying EIS.

[#50540549_pgfId-999770]##The following standard properties are defined
by the CCI specification for _ConnectionSpec_ :

======= [#50540549_pgfId-1002368]##Standard Properties for ConnectionSpec

[#50540549_pgfId-1002372]##Property

[#50540549_pgfId-1002374]##Description

[#50540549_pgfId-1002376]## _UserName_

[#50540549_pgfId-1002378]##The name of the user establishing a
connection to an EIS instance.

[#50540549_pgfId-1002380]## _Password_

[#50540549_pgfId-1002382]##The password for the user establishing a
connection.

[#50540549_pgfId-999774]##An important point to note is about the
relationship between _ConnectionSpec_ and _ConnectionRequestInfo_ . The
_ConnectionSpec_ is used at the application level and is defined under
the scope of CCI while _ConnectionRequestInfo_ is defined as part of the
system contracts. Separate interfaces have been defined to ensure the
separation between CCI interfaces and system contracts.
_ConnectionRequestInfo_ has no explicit dependency on CCI. Note that a
resource adapter may not implement CCI but it must implement system
contracts. The specification of a standard repository API and metadata
format is outside the scope of the current version of the connector
architecture. The mapping between CCI’s _ConnectionSpec_ and
_ConnectionRequestInfo_ is achieved in an implementation-specific manner
by a resource adapter.

======= [#50540549_pgfId-999775]##Connection

[#50540549_pgfId-999776]##A _javax.resource.cci.Connection_ represents
an application level connection handle that is used by a component to
access an EIS instance. The actual physical connection associated with a
_Connection_ instance is represented by a _ManagedConnection_ .

[#50540549_pgfId-999777]##A component gets a _Connection_ instance by
using the _getConnection_ method of a _ConnectionFactory_ instance. A
_Connection_ instance may be associated with zero or more _Interaction_
instances.

[#50540549_pgfId-999778]##The following code extract shows the
_Connection_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002412]##public interface
javax.resource.cci.Connection \{

[#50540549_pgfId-1002435]## public Interaction createInteraction()
throws

[#50540549_pgfId-1002436]## ResourceException;

[#50540549_pgfId-1002437]## 

[#50540549_pgfId-1002415]## public ConnectionMetaData getMetaData()
throws

[#50540549_pgfId-1002444]## ResourceException;

[#50540549_pgfId-1002416]## public ResultSetInfo getResultSetInfo()
throws

[#50540549_pgfId-1002450]## ResourceException;

[#50540549_pgfId-1002417]## 

[#50540549_pgfId-1002418]## public LocalTransaction
getLocalTransaction()

[#50540549_pgfId-1002419]## throws ResourceException;

[#50540549_pgfId-1002420]##

[#50540549_pgfId-1002421]## public void close() throws
ResourceException;

[#50540549_pgfId-1002410]##}

|===

[#50540549_pgfId-999790]##The _createInteraction_ method creates an
_Interaction_ instance associated with the _Connection_ instance. An
_Interaction_ enables a component to access EIS data and functions.

[#50540549_pgfId-999791]##The _getMetaData_ method returns information
about the EIS instance associated with a _Connection_ instance. The EIS
instance-specific information is represented by the _ConnectionMetaData_
interface.

[#50540549_pgfId-999792]##The _getResultSetInfo_ method returns
information on the result set functionality supported by the connected
EIS instance. If the CCI implementation does not support result set
functionality, then the method _getResultSetInfo_ must throw a
_NotSupportedException_ .

[#50540549_pgfId-999796]##The _close_ method initiates a close of the
connection. The OID in link:conn.htm#50540552_38047[See OID: Connection
Pool Management with Connection Matching] describes the resulting
behavior of such an application level connection close.

[#50540549_pgfId-999797]##The _getLocalTransaction_ method returns a
_LocalTransaction_ instance that enables a component to demarcate
resource manager local transactions. If a resource adapter does not
allow a component to demarcate local transactions using the
_LocalTransaction_ interface, the _getLocalTransaction_ method must
throw a _NotSupportedException_ .

======= [#50540549_pgfId-999798]##Auto Commit

[#50540549_pgfId-999799]##When a _Connection_ is in an auto-commit mode,
an _Interaction_ , associated with the _Connection_ , automatically
commits after it has been executed. The auto-commit mode must be turned
off if multiple interactions have to be grouped in a single transaction
and committed or rolled back as a unit.

[#50540549_pgfId-999800]##CCI does not provide explicit _set_ /
_getAutoCommit_ methods in the _Connection_ interface. This simplifies
the application programming model for the transaction management.

[#50540549_pgfId-999801]##A resource adapter must manage the auto-commit
mode as follows:

[#50540549_pgfId-999802]##A transactional resource adapter either at the
_XATransaction_ or _LocalTransaction_ level must set the auto-commit
mode of _Connection_ instances participating in a transaction to off
within the transaction. This requirement holds for true both
container-managed and bean-managed transaction demarcation.

[#50540549_pgfId-999803]##A transactional resource adapter must set the
auto-commit mode of _Connection_ instances to on when used outside a
transaction.

[#50540549_pgfId-999804]##These requirements are independent of whether
a transaction is managed as a local or XA transaction. A transactional
resource adapter should implement this requirement in an
implementation-specific manner.

[#50540549_pgfId-999805]##A non-transactional resource adapter at the
_NoTransaction_ level, is not required to support the auto-commit mode
for _Connection_ .

======= [#50540549_pgfId-999806]##

image:conn-135.gif[image]

Interaction Interfaces

[#50540549_pgfId-999807]##This section specifies interfaces that enable
a component to drive an interaction with an EIS instance and to
demarcate resource manager local transactions.

======= [#50540549_pgfId-999808]##Interaction

[#50540549_pgfId-999809]##The _javax.resource.cci.Interaction_ enables a
component to execute EIS functions. An _Interaction_ instance supports
the following interactions with an EIS instance:

[#50540549_pgfId-999810]##An _execute_ method that takes an input
_Record_ , output _Record_ , and an _InteractionSpec_ . This method
executes the EIS function represented by the _InteractionSpec_ and
updates the output _Record_ .

[#50540549_pgfId-999811]##An _execute_ method that takes an input
_Record_ and an _InteractionSpec_ . This method implementation executes
the EIS function represented by the _InteractionSpec_ and produces the
output _Record_ as a return value.

[#50540549_pgfId-999812]##If an _Interaction_ implementation does not
support a variant of the _execute_ method, the method must throw a
_javax.resource.NotSupportedException_ .

[#50540549_pgfId-999816]##Refer to link:conn.htm#50540549_24620[See
Interaction and Record] for details on how input and output records are
created and used in the above variants of the _execute_ method.

[#50540549_pgfId-999817]##An _Interaction_ instance is created from a
_Connection_ and must maintain its association with the _Connection_
instance. The _close_ method releases all resources maintained by the
resource adapter for the _Interaction_ . The _close_ of an _Interaction_
instance should not close the associated _Connection_ instance.

[#50540549_pgfId-999818]##The following code extract shows the
_Interaction_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002468]##public interface
javax.resource.cci.Interaction \{

[#50540549_pgfId-1002469]## 

[#50540549_pgfId-1002470]## public Connection getConnection();

[#50540549_pgfId-1002471]## 

[#50540549_pgfId-1002472]## public void close() throws
ResourceException;

[#50540549_pgfId-1002473]## 

[#50540549_pgfId-1002474]## public boolean execute(InteractionSpec
ispec,

[#50540549_pgfId-1002475]## Record input,

[#50540549_pgfId-1002476]## Record output) throws ResourceException;

[#50540549_pgfId-1002477]## 

[#50540549_pgfId-1002478]## public Record execute(InteractionSpec ispec,

[#50540549_pgfId-1002479]## Record input) throws ResourceException;

[#50540549_pgfId-1002480]## ...

[#50540549_pgfId-1002466]##}

|===

======= [#50540549_pgfId-999833]##InteractionSpec

[#50540549_pgfId-999834]##A _javax.resource.cci.InteractionSpec_ holds
properties for driving an _Interaction_ with an EIS instance. An
_InteractionSpec_ uses an _Interaction_ to execute the specified
function on an underlying EIS.

[#50540549_pgfId-999835]##The CCI specification defines a set of
standard properties for an _InteractionSpec_ . The properties are
defined either on a derived interface or an implementation class of an
empty _InteractionSpec_ interface. The following code extract shows the
_InteractionSpec_ interface.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002490]##public interface
javax.resource.cci.InteractionSpec

[#50540549_pgfId-1002491]## extends java.io.Serializable \{

[#50540549_pgfId-1002492]##

[#50540549_pgfId-1002493]## // Standard Interaction Verbs

[#50540549_pgfId-1002494]## public static final int SYNC_SEND = 0;

[#50540549_pgfId-1002495]## public static final int SYNC_SEND_RECEIVE =
1;

[#50540549_pgfId-1002496]## public static final int SYNC_RECEIVE = 2;

[#50540549_pgfId-1002497]## 

[#50540549_pgfId-1002488]##}

|===

[#50540549_pgfId-999845]##An _InteractionSpec_ implementation is not
required to support a standard property if that property does not apply
to its underlying EIS. The _InteractionSpec_ implementation class must
provide getter and setter methods for each of its supported properties.
The getter and setter methods convention should be based on the
JavaBeans design pattern.

======= [#50540549_pgfId-999846]##Standard Properties

[#50540549_pgfId-999847]##The standard properties are as follows:

[#50540549_pgfId-999848]## _FunctionName_ . A string representing the
name of an EIS function. Some examples are the name of a transaction
program in a CICS system or the name of a business object or function
module in an ERP system. The format of the name is specific to an EIS
and is outside the scope of the CCI specification.

[#50540549_pgfId-999849]## _InteractionVerb_ . An integer representing
the mode of interaction with an EIS instance as specified by the
_InteractionSpec_ . The values of the interaction verb may be one of the
following:

[#50540549_pgfId-999850]## _SYNC_SEND._ The execution of an
_Interaction_ does only a send to the target EIS instance. The input
record is sent to the EIS instance without any synchronous response in
terms of an output _Record_ or _ResultSet_ .

[#50540549_pgfId-999851]## _SYNC_SEND_RECEIVE._ The execution of an
_Interaction_ sends a request to the EIS instance and receives a
response synchronously. The input record is sent to the EIS instance
with the output received either as _Record_ or a _ResultSet_ .

[#50540549_pgfId-999852]## _SYNC_RECEIVE._ The execution of an
_Interaction_ results in a synchronous receive of an output _Record_ .
For instance, a session bean gets a method invocation and it uses this
_SYNC_RECEIVE_ form of interaction to retrieve messages that have been
delivered to a message queue.

[#50540549_pgfId-999853]##The default _InteractionVerb_ property is
_SYNC_SEND_RECEIVE_ .

[#50540549_pgfId-999854]##If the _InteractionVerb_ property is not
defined for an _InteractionSpec_ , the default mode for an interaction
is _SYNC_SEND_RECEIVE_ .

[#50540549_pgfId-999855]##Other forms of interaction verbs are outside
the scope of the CCI specification.

[#50540549_pgfId-999856]##The CCI does not support asynchronous delivery
of messages to the component instances. The message inflow contract
should be used for asynchronous delivery of messages.

[#50540549_pgfId-999857]## _ExecutionTimeout_ . An integer representing
the number of milliseconds an _Interaction_ waits for an EIS __ to
execute the specified function.

======= [#50540549_pgfId-999858]##ResultSet Properties

[#50540549_pgfId-999859]##The following standard properties give hints
to an _Interaction_ instance about the _ResultSet_ requirements:

[#50540549_pgfId-999860]## _FetchSize_ . An integer representing the
number of rows that should be fetched from an EIS when more rows are
needed for a result set. If the value is zero, the hint is ignored. The
default value is zero.

[#50540549_pgfId-999861]## _FetchDirection_ . An integer representing
the direction in which the rows in a result set are processed. The valid
integer values are defined in the _java.sql.ResultSet_ interface. The
default value is _ResultSet_ . _FETCH_FORWARD_ .

[#50540549_pgfId-999862]## _MaxFieldSize_ . An integer representing the
maximum number of bytes allowed for any value in a column of a result
set or a value in a _Record_ .

[#50540549_pgfId-999863]## _ResultSetType_ . An integer representing the
type of the result set produced by an execution of the _InteractionSpec_
. The _java.sql.ResultSet_ interface defines the result set types.

[#50540549_pgfId-999864]## _ResultSetConcurrency_ . An integer
representing the concurrency type of the result set produced by the
execution of the _InteractionSpec_ . The _java.sql.ResultSet_ interface
defines the concurrency types for a result set.

[#50540549_pgfId-999865]##Note that if a CCI implementation cannot
support the specified requirements for a result set, it should choose an
appropriate alternative and raise a _SQLWarning_ from the _ResultSet_
methods to indicate this condition. Refer to
link:conn.htm#50540549_85000[See ResultSet] for more details.

[#50540549_pgfId-999869]##A component can determine the actual scrolling
ability and concurrency type of a result set by invoking the _getType_
and _getConcurrencyType_ methods of the _ResultSet_ interface.

======= [#50540549_pgfId-999870]##Additional Properties

[#50540549_pgfId-999871]##An _InteractionSpec_ implementation may define
additional properties besides the standard properties. Note that the
format and type of the additional properties is specific to an EIS and
is outside the scope of the CCI specification.

======= [#50540549_pgfId-999872]##Implementation

[#50540549_pgfId-999873]##The _InteractionSpec_ interface must be
implemented as a JavaBean to support tools. The properties on the
_InteractionSpec_ implementation class must be defined through the
getter and setter methods design pattern.

[#50540549_pgfId-999874]##The CCI implementation may, though is not
required to, provide a _BeanInfo_ class for the _InteractionSpec_
implementation. This class provides explicit information about the
properties supported by the _InteractionSpec_ .

[#50540549_pgfId-999875]##An implementation class for the
_InteractionSpec_ interface must implement the _java.io.Serializable_
interface.

[#50540549_pgfId-999876]##The specified properties must be implemented
as either bound or constrained properties. Refer to the JavaBeans
specification (refer to
http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html)
for details on bound and constrained properties.

======= [#50540549_pgfId-999877]##Administered Object

[#50540549_pgfId-999878]##An _InteractionSpec_ instance may be, though
it is not required to be, registered as an administered object in the
JNDI namespace. This enables a component provider to access
_InteractionSpec_ instances using logical names, called resource
environment references. Resource environment references are special
entries in the component’s environment. The deployer binds a resource
environment reference to an _InteractionSpec_ administered object in the
operational environment.

[#50540549_pgfId-999882]##The EJB specification (see
link:conn.htm#50540564_26771[See Enterprise JavaBeans (EJB)
Specification, version 3.2]) specifies resource environment references
in more detail.

======= [#50540549_pgfId-999883]##Illustrative Scenario

[#50540549_pgfId-999884]##The development tool introspects the
_InteractionSpec_ implementation class and shows a property sheet with
all the configurable properties. The developer then configures the
properties for an _InteractionSpec_ instance.

[#50540549_pgfId-999885]##At runtime, the configured _InteractionSpec_
instance is used to specify properties for the execution of an
_Interaction_ . The runtime environment may lookup an _InteractionSpec_
instance using a logical name from the JNDI namespace.

======= [#50540549_pgfId-999886]##LocalTransaction

[#50540549_pgfId-999887]##The _javax.resource.cci.LocalTransaction_
defines a transaction demarcation interface for resource manager local
transactions. An application component uses the _LocalTransaction_
interface to demarcate local transactions. Refer to
link:conn.htm#50540572_68848[See Transaction Management] for more
details on local transactions.

[#50540549_pgfId-999891]##Note that this interface is used for local
transaction demarcation at the application level, while the
_javax.resource.spi.LocalTransaction_ interface is defined as part of
the system contracts and is used by a container for local transaction
management.

[#50540549_pgfId-999892]##The following code extract shows the
_LocalTransaction_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002510]##public interface
javax.resource.cci.LocalTransaction \{

[#50540549_pgfId-1002511]## public void begin() throws
ResourceException;

[#50540549_pgfId-1002512]## public void commit() throws
ResourceException;

[#50540549_pgfId-1002513]## public void rollback() throws
ResourceException;

[#50540549_pgfId-1002508]##}

|===

======= [#50540549_pgfId-999898]##Requirements

[#50540549_pgfId-999899]##A CCI implementation may, though is not
required to, implement the _LocalTransaction_ interface.

[#50540549_pgfId-999900]##If the _LocalTransaction_ interface is
supported by a CCI implementation, the _Connection.getLocalTransaction_
method must return a _LocalTransaction_ instance. A component may then
use the returned _LocalTransaction_ to demarcate a resource manager
local transaction on the underlying EIS instance.

[#50540549_pgfId-999901]##A resource adapter is allowed to implement the
_javax.resource.spi.LocalTransaction_ interface without implementing the
application-level _javax.resource.cci.LocalTransaction_ interface. In
this case, a container uses the system contract-level _LocalTransaction_
interface for managing local transactions. Refer to
link:conn.htm#50540572_84546[See Local Transaction Management Contract]
for more details on local transaction management.

======= [#50540549_pgfId-999905]##

image:conn-135.gif[image]

Basic Metadata Interfaces

[#50540549_pgfId-999906]##This section specifies the interfaces that
provide basic meta information about a resource adapter implementation
and an EIS connection.

======= [#50540549_pgfId-999907]##ConnectionMetaData

[#50540549_pgfId-999908]##The _javax.resource.cci.ConnectionMetaData_
interface provides information about an EIS instance connected through a
_Connection_ instance. A component calls the _Connection.getMetaData_
method to get a _ConnectionMetaData_ instance.

[#50540549_pgfId-999909]##The following code extract shows the
_ConnectionMetaData_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002526]##public interface
javax.resource.cci.ConnectionMetaData \{

[#50540549_pgfId-1002527]## public String getEISProductName() throws
ResourceException;

[#50540549_pgfId-1002528]## public String getEISProductVersion() throws

[#50540549_pgfId-1002541]## ResourceException;

[#50540549_pgfId-1002529]## public String getUserName() throws
ResourceException;

[#50540549_pgfId-1002530]## 

[#50540549_pgfId-1002524]##}

|===

[#50540549_pgfId-999916]##The _getEISProductName_ and
_getEISProductVersion_ methods return information about the EIS
instance.

[#50540549_pgfId-999917]##The _getUserName_ method returns the user name
for an active connection as known to the underlying EIS instance. The
name corresponds the resource principal under whose security context a
connection to the EIS instance has been established.

======= [#50540549_pgfId-999918]##Implementation

[#50540549_pgfId-999919]##A CCI implementation must provide an
implementation class for the _ConnectionMetaData_ interface.

[#50540549_pgfId-999920]##A resource adapter provider or third-party
vendor may extend the _ConnectionMetaData_ interface to provide
additional information. Note that the format and type of the additional
information is specific to an EIS and is outside the scope of the CCI
specification.

======= [#50540549_pgfId-999921]##ResourceAdapterMetaData

[#50540549_pgfId-999922]##The
_javax.resource.cci.ResourceAdapterMetaData_ interface provides
information about the capabilities of a resource adapter implementation.
Note that this interface does not provide information about an EIS
instance that is connected through a resource adapter.

[#50540549_pgfId-999923]##A component uses the _ConnectionFactory_ .
_getMetaData_ method to get metadata information about a resource
adapter. The _getMetaData_ method does not require that an active
connection to an EIS instance be established.

[#50540549_pgfId-999924]##The following code extract shows the
_ResourceAdapterMetaData_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002557]##public interface
javax.resource.cci.ResourceAdapterMetaData \{

[#50540549_pgfId-1002558]## public String getAdapterVersion();

[#50540549_pgfId-1002559]## public String getAdapterVendorName();

[#50540549_pgfId-1002560]## public String getAdapterName();

[#50540549_pgfId-1002561]## public String getAdapterShortDescription();

[#50540549_pgfId-1002562]## 

[#50540549_pgfId-1002563]## public String getSpecVersion();

[#50540549_pgfId-1002564]## 

[#50540549_pgfId-1002565]## public String[]
getInteractionSpecsSupported();

[#50540549_pgfId-1002566]## public boolean
supportsExecuteWithInputAndOutputRecord();

[#50540549_pgfId-1002567]## public boolean
supportsExecuteWithInputRecordOnly();

[#50540549_pgfId-1002568]## 

[#50540549_pgfId-1002569]## public boolean
supportsLocalTransactionDemarcation();

[#50540549_pgfId-1002555]##}

|===

[#50540549_pgfId-999939]##The _getSpecVersion_ method returns a string
representation of the version of the connector architecture
specification that is supported by the resource adapter.

[#50540549_pgfId-999940]##The _getInteractionSpecsSupported_ method
returns an array of fully-qualified names of _InteractionSpec_ types
supported by the CCI implementation for this resource adapter. Note that
the fully-qualified class name is for the implementation class of an
_InteractionSpec_ . This method may be used by tools vendors to find
information on the supported _InteractionSpec_ types. The method should
return an array of length 0 if the CCI implementation does not define
specific _InteractionSpec_ types.

[#50540549_pgfId-999941]##The _supportsExecuteWithInputAndOutputRecord_
and _supportsExecuteWithInputRecordOnly_ methods are used by tools
vendors to find information about the _Interaction_ implementation. It
is important to note that the _Interaction_ implementation must support
at least one variant of the _execute_ methods.

[#50540549_pgfId-999942]##The _supportsExecuteWithInputAndOutputRecord_
method returns _true_ if the implementation class for the _Interaction_
interface implements the _public boolean execute(InteractionSpec ispec,
Record input, Record output)_ method. If not, the method returns _false_
.

[#50540549_pgfId-999943]##The _supportsExecuteWithInputRecordOnly_
method returns _true_ if the implementation class for the _Interaction_
interface implements the _public Record execute(InteractionSpec ispec,
Record input)_ method. If not, the method returns _false_ .

[#50540549_pgfId-999944]##The _supportsLocalTransactionDemarcation_
method returns _true_ if the resource adapter implements the
_LocalTransaction_ interface and supports local transaction demarcation
on the underlying EIS instance through the _LocalTransaction_ interface.

[#50540549_pgfId-999945]##The _ResourceAdapterMetaData_ interface may be
extended to provide more information specific to a resource adapter
implementation.

======= [#50540549_pgfId-999946]##

image:conn-135.gif[image]

Service Endpoint Message Listener Interface

[#50540549_pgfId-999947]##The MessageListener interface serves as a
request-response message listener type that message endpoints (refer to
link:conn.htm#50540559_25704[See Message Inflow]) may implement. This
allows an EIS to communicate with an endpoint using a request-response
style.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002585]##interface javax.resource.cci.MessageListener
\{

[#50540549_pgfId-1002586]## Record onMessage(Record inputData) throws
ResourceException;

[#50540549_pgfId-1002583]##}

|===

======= [#50540549_pgfId-999954]##

image:conn-135.gif[image]

Exception Interfaces

[#50540549_pgfId-999955]##This section specifies _ResourceException_
class defined by the CCI.

======= [#50540549_pgfId-999956]##ResourceException

[#50540549_pgfId-999957]##The _javax.resource.ResourceException_ class
is used as the root of the exception hierarchy for CCI. A
_ResourceException_ provides the following information:

[#50540549_pgfId-999958]##A resource adapter-specific string describing
the error. This string is a standard Java exception message and is
available through the _getMessage_ method.

[#50540549_pgfId-999959]##A resource adapter-specific error code.

[#50540549_pgfId-999960]##A reference to another exception. A
_ResourceException_ is often the result of a lower level problem. If
appropriate, this lower level exception, a _java.lang.Exception_ or its
derived exception type, can be linked to a _ResourceException_ instance.
Note, this has been deprecated in favor of the J2SE release 1.4
exception chaining facility.

[#50540549_pgfId-999961]##A CCI implementation can extend the
_ResourceException_ interface to throw more specific exceptions. It may
also chain instances of _java.lang.Exception_ or its subtypes to a
_ResourceException_ .

======= [#50540549_pgfId-999962]##ResourceWarning

[#50540549_pgfId-999963]##The _javax.resource.cci.ResourceWarning_ class
provides information on the warnings related to interactions with EIS. A
_ResourceWarning_ is silently chained to an _Interaction_ instance that
has caused the warning to be reported.

[#50540549_pgfId-999964]##The _Interaction.getWarnings_ method enables a
component to access the first _ResourceWarning_ in a chain of warnings.
Other _ResourceWarning_ instances are chained to the first returned
_ResourceWarning_ instance.

======= [#50540549_pgfId-999966]##

image:conn-135.gif[image]

[#50540549_54166]##Record

[#50540549_pgfId-999967]##A _Record_ is the Java representation of a
data structure used as input or output to an EIS function.

[#50540549_pgfId-999971]##A _Record_ has both development-time and
runtime aspects. See the following figure for an illustration of this.
An implementation of a _Record_ is either:

[#50540549_pgfId-999972]##A custom _Record_ implementation that gets
generated at the development time by a tool. The generation of a custom
implementation is based on the meta information accessed by the tool
from a metadata repository. The type mapping and data
representatiothird-partyn is generated as part of the custom _Record_
implementation. So the custom _Record_ implementation typically does not
need to access the metadata repository at runtime.

[#50540549_pgfId-999973]##A generic _Record_ implementation that uses a
metadata repository at runtime for meta information. For example, a
generic type of _Record_ may access the type mapping information from
the repository at runtime.

[#50540549_pgfId-999974]##Note: The specification of a standard
repository API and metadata format is outside the scope of the current
version of the connector architecture.

[#50540549_pgfId-1000015]##[#50540549_50933]##Record at Development-time
and Runtime

image:conn-141.gif[image]

[#50540549_pgfId-1000016]##The meta information used in a _Record_
representation and type mapping may be available in a metadata
repository as:

[#50540549_pgfId-1000017]##Meta information expressed in an EIS-specific
format. For example, an ERP system has its own descriptive format for
its meta information.

[#50540549_pgfId-1000018]##Formatted in structures based on the
programming language that has been used for writing the target EIS
function, such as, _COBOL_ structures used by CICS transaction programs.

[#50540549_pgfId-1000019]##A standard representation of data structures
as required for EIS functions. The standard representation is typically
aggregated in a metadata repository based on the meta information
extracted from multiple EISs.

[#50540549_pgfId-1000020]##A resource adapter may provide an
implementation of all CCI interfaces except the data
representation-related interfaces, namely, _Record_ and _RecordFactory_
. In this case, a third-party vendor provides both development-time and
runtime support for the _Record_ and _RecordFactory_ interfaces. This
requires that a _Record_ implementation must support both component-view
and resource adapter-view contracts, as specified in the following
subsections.

======= [#50540549_pgfId-1000021]##Component-View Contract

[#50540549_pgfId-1000022]##The component-view contract provides a
standard contract for using a _Record_ for components and component
building tools. A _Record_ implementation must support the
component-view contract.

[#50540549_pgfId-1000023]##The application programming model for a
_Record_ is as follows:

[#50540549_pgfId-1000024]##A component creates an instance of a
generated implementation class for a custom record. The implementation
class represents an EIS-specific data structure.

[#50540549_pgfId-1000025]##A component uses the _RecordFactory_
interface to create an instance of the generic _Record_ implementation
class. The implementation class of a generic _Record_ is independent of
any EIS-specific data structure.

[#50540549_pgfId-1003305]##A related CCI issue is the level of support
in the CCI data representation interfaces (namely, _Record_ ,
_MappedRecord_ , and _IndexedRecord_ ) for the type mapping facility.
The issue has to be addressed based on the following parameters:

[#50540549_pgfId-1000027]##There is no standardized mapping across
various type systems. For example, the existing type systems range from
Java, CORBA, COM, COBOL and many more. It is difficult to standardize
the type specification and mappings across such a diverse set of type
systems within the connector architecture scope.

[#50540549_pgfId-1000028]##Building a limited type mapping facility into
the CCI data representation interfaces will constrain the use of CCI
data representation interfaces across different types of EISs. For
example, it may be difficult to support EISs that have complex
structured types with a limited type mapping support.

[#50540549_pgfId-1003301]##Building an extensive type mapping facility
into the current version of CCI data representation interfaces will
limit the future extensibility of these interfaces. This applies
specifically to the support for standards that are emerging for
XML-based data representation. An important goal for CCI data
representation interfaces is to support XML-based facilities. This goal
is difficult to achieve in the current scope of the connector
architecture.

[#50540549_pgfId-1003302]##This specification proposes that the type
mapping support for the CCI be kept open for future versions. A future
version of this specification may standardize type mappings.

======= [#50540549_pgfId-1000031]##Type Mapping

[#50540549_pgfId-1000032]##Type mapping for EIS-specific types to Java
types is not directly exposed to an application component. For example
in the case of a custom _Record_ implementation, the getter and setter
methods, defined in a _Record_ and exposed to an application component,
return the correct Java types for the values extracted from the _Record_
. The custom _Record_ implementation internally handles all the type
mapping.

[#50540549_pgfId-1000033]##In the case of a generic _Record_
implementation, the type mapping is done in the generic _Record_ by
means of the type mapping information obtained from the metadata
repository. Since the component uses generic methods on the _Record_
interface, the component code does the required type casting.

[#50540549_pgfId-1000034]##The compatibility of Java types and EIS types
should be based on a type mapping that is defined specific to a class of
EISs. For example, an ERP system from vendor X specifies a type mapping
specific to its own EIS. Another example is type mapping between Java
and COBOL types. Note that the JDBC specification specifies a standard
mapping of SQL data types to Java types specific to relational
databases.

[#50540549_pgfId-1000035]##In cases of both custom and generic _Records_
, the type mapping information is provided by a metadata repository
either at development-time or runtime.

======= [#50540549_pgfId-1000036]##Record Interface

[#50540549_pgfId-1000037]##The _javax.resource.cci.Record_ interface is
the base interface for the representation of a record. A _Record_
instance is used as an input or output to the _execute_ methods defined
in an _Interaction_ .

[#50540549_pgfId-1000090]##[#50540549_20460]##Component-view Contract

image:conn-142.gif[image]

[#50540549_pgfId-1000091]##The _Record_ interface may be extended to
form one of the following representations:

[#50540549_pgfId-1000092]## _javax.resource.cci.MappedRecord_ : A
key-value pair based collection represents a record. This interface is
based on _java.util.Map._

[#50540549_pgfId-1000093]## _javax.resource.cci.IndexedRecord_ : An
ordered and indexed collection represents a record. This interface is
based on _java.util.List._

[#50540549_pgfId-1000094]## _javax.resource.cci.ResultSet_ : This
interface extends both _java.sql.ResultSet_ and
_javax.resource.cci.Record_ . A result set represents tabular data.
link:conn.htm#50540549_85000[See ResultSet] specifies the requirements
for the _ResultSet_ interface in detail.

[#50540549_pgfId-1000098]##A JavaBean based representation of an EIS
data structure: An example is a custom record generated to represent a
purchase order in an ERP system or an invoice in a mainframe TP system.

[#50540549_pgfId-1000102]##Refer to link:conn.htm#50540549_39416[See
Code Samples] for code samples that illustrate the use of record.

[#50540549_pgfId-1000103]## _MappedRecord_ or _IndexedRecord_ may
contain another _Record_ . This means that _MappedRecord_ and
_IndexedRecord_ can be used to create a hierarchical structure of any
arbitrary depth.

[#50540549_pgfId-1000104]## _MappedRecord_ and _IndexedRecord_ can be
used to represent either a generic or custom record.

[#50540549_pgfId-1000105]##A basic Java type is used as the leaf element
of a hierarchical structure represented by a _MappedRecord_ or
_IndexedRecord_ .

[#50540549_pgfId-1000106]##A generated custom _Record_ may also contain
other records to form a hierarchical structure.

[#50540549_pgfId-1000107]##The following code extract shows the _Record_
interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002599]##public interface javax.resource.cci.Record

[#50540549_pgfId-1002600]## extends java.lang.Cloneable,
java.io.Serializable \{

[#50540549_pgfId-1002601]## 

[#50540549_pgfId-1002602]## public String getRecordName();

[#50540549_pgfId-1002603]## public void setRecordName(String name);

[#50540549_pgfId-1002604]## 

[#50540549_pgfId-1002605]## public void setRecordShortDescription(String
description);

[#50540549_pgfId-1002606]## public String getRecordShortDescription();

[#50540549_pgfId-1002607]##

[#50540549_pgfId-1002608]## public boolean equals(Object other);

[#50540549_pgfId-1002609]## public int hashCode();

[#50540549_pgfId-1002610]## 

[#50540549_pgfId-1002611]## public Object clone() throws
CloneNotSupportedException;

[#50540549_pgfId-1002597]##}

|===

[#50540549_pgfId-1000122]##The _Record_ interface defines the following
set of standard properties:

[#50540549_pgfId-1000123]## _Name_ of a _Record_ : Note that the CCI
does not define a standard format for naming a _Record_ . The name
format is specific to an EIS type.

[#50540549_pgfId-1000124]## _Description_ of a _Record_ : This property
is used primarily by tools to show a description of a _Record_ instance.

======= [#50540549_pgfId-1000125]##MappedRecord and IndexedRecord Interfaces

[#50540549_pgfId-1000126]##The _javax.resource.cci.MappedRecord_
interface is used for representing a key-value map based collection of
record elements. The _MappedRecord_ interface extends both the _Record_
and _java.util.Map_ interface.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002631]##public interface
javax.resource.cci.MappedRecord

[#50540549_pgfId-1002632]## extends Record, java.util.Map,

[#50540549_pgfId-1002639]## java.io.Serializable \{

[#50540549_pgfId-1002629]##}

|===

[#50540549_pgfId-1000130]##The _javax.resource.cci.IndexedRecord_
interface represents an ordered collection of record elements based on
the _java.util.List_ interface. This interface allows a component to
access record elements by their integer index, position in the list, and
search for elements in the list.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002650]##public interface
javax.resource.cci.IndexedRecord

[#50540549_pgfId-1002669]## extends Record, java.util.List,

[#50540549_pgfId-1002670]## java.io.Serializable \{

[#50540549_pgfId-1002648]##}

|===

======= [#50540549_pgfId-1000134]##RecordFactory

[#50540549_pgfId-1000135]##The _javax.resource.cci.RecordFactory_
interface is used for creating _MappedRecord_ and _IndexedRecord_
instances. Note that the _RecordFactory_ is only used for creating
generic record instances. A CCI implementation provides an
implementation class for the _RecordFactory_ interface.

[#50540549_pgfId-1000136]##The following code extract shows the
_RecordFactory_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002684]##public interface
javax.resource.cci.RecordFactory \{

[#50540549_pgfId-1002685]## public MappedRecord
createMappedRecord(String recordName)

[#50540549_pgfId-1002686]## throws ResourceException;

[#50540549_pgfId-1002687]## 

[#50540549_pgfId-1002688]## public IndexedRecord
createIndexedRecord(String

[#50540549_pgfId-1002697]## recordName) throws ResourceException;

[#50540549_pgfId-1002690]## 

[#50540549_pgfId-1002682]##}

|===

[#50540549_pgfId-1000145]##The methods _createMappedRecord_ and
_createIndexedRecord_ take the name of the record that is to be created
by the _RecordFactory_ . The name of the record acts as a pointer to the
meta information stored in the metadata repository for a specific record
type. The format of the name is outside the scope of the CCI
specification and specific to a CCI implementation and/or metadata
repository.

[#50540549_pgfId-1000146]##A _RecordFactory_ implementation should be
capable of using the name of the desired _Record_ and accessing meta
information for the creation of the _Record_ .

======= [#50540549_pgfId-1000148]##[#50540549_24620]##Interaction and Record

[#50540549_pgfId-1000149]##Records should be used as follows for the two
variants of the _execute_ method of the _Interaction_ interface:

[#50540549_pgfId-1000150]##boolean execute(InteractionSpec, Record
input, Record output)

[#50540549_pgfId-1000151]##A custom record instance is used as an input
or output to the _execute_ method. A custom record implementation class
is generated by an application development tool or EAI framework based
on the meta information.

[#50540549_pgfId-1000152]##The _RecordFactory_ interface is used to
create a generic _MappedRecord_ or _IndexedRecord_ instance. The generic
record is used as input or output to the _execute_ method.

[#50540549_pgfId-1000153]##Record execute(InteractionSpec, Record input)

[#50540549_pgfId-1000154]##The input record can be either a custom or
generic record.

[#50540549_pgfId-1000155]##The returned record is a generic record
instance created by the implementation of the _execute_ method. The
generic record instance may represent a _ResultSet_ or a hierarchical
structure as represented through the _MappedRecord_ and _IndexedRecord_
interfaces.

[#50540549_pgfId-1000156]##When the _Interaction_ . _execute_ method is
called, a generic record instance may use the connection associated with
the _Interaction_ instance to access the metadata from the underlying
EIS. If there is a separate metadata repository, then the generic record
gets the metadata from the repository. The generic record implementation
may use the above illustrative mechanism to achieve the necessary type
mapping.

[#50540549_pgfId-1000157]##The generic record implementation
encapsulates the above behavior and interacts with _Interaction_
implementation in the _execute_ method to get the active connection, if
so needed. The contract between the generic record and _Interaction_
implementation classes is specific to a CCI implementation.

======= [#50540549_pgfId-1000158]##Resource Adapter-view Contract

[#50540549_pgfId-1000159]##A resource adapter views the data represented
by a _Record_ either as:

[#50540549_pgfId-1000160]##A stream of bytes through the _Streamable_
interface, or,

[#50540549_pgfId-1000161]##A format specific to a resource adapter. For
example, a resource adapter may extract or set the data for a _Record_
using an interface defined specifically for the resource adapter.

[#50540549_pgfId-1000162]##A resource adapter-specific interface for
viewing the _Record_ representation is outside the scope of the CCI
specification. A resource adapter must describe the resource
adapter-specific interface to the users, typically tools vendors, of the
resource adapter-view contract.

======= [#50540549_pgfId-1000163]##Streamable Interface

[#50540549_pgfId-1000164]##The _javax.resource.cci.Streamable_ interface
enables a resource adapter to extract data from an input _Record_ or set
data into an output _Record_ as a stream of bytes. See the following
figure.

[#50540549_pgfId-1000203]##[#50540549_55631]##Streamable Interface

image:conn-143.gif[image]

[#50540549_pgfId-1000204]##The _Streamable_ interface provides a
resource adapter’s view of the data set in a _Record_ instance by a
component. A component uses _Record_ or any derived interfaces to manage
records.

[#50540549_pgfId-1000205]##A component does not directly use the
_Streamable_ interface. The interface is used by a resource adapter
implementation.

[#50540549_pgfId-1000206]##The following code extract shows the
_Streamable_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002723]##public interface
javax.resource.cci.Streamable \{

[#50540549_pgfId-1002724]## public void read(InputStream istream) throws
IOException;

[#50540549_pgfId-1002725]## public void write(OutputStream ostream)
throws IOException;

[#50540549_pgfId-1002721]##}

|===

[#50540549_pgfId-1000211]##The _read_ extracts method data from an
_InputStream_ and initializes fields of a _Streamable_ object. The
_write_ method writes fields of a _Streamable_ object to an
_OutputStream_ . The implementations of both the _read and write_
methods for a _Streamable_ object must call the _read_ and _write_
methods respectively on the super class if there is one.

[#50540549_pgfId-1000212]##An implementation class of _Record_ may
choose to implement the _Streamable_ interface or support a resource
adapter-specific interface to manage record data.

======= [#50540549_pgfId-1000214]##

image:conn-135.gif[image]

[#50540549_85000]##ResultSet

[#50540549_pgfId-1000215]##A result set represents tabular data that is
retrieved from an EIS instance by the execution of an interaction. The
_execute_ method on the _Interaction_ interface can return a _ResultSet_
instance.

[#50540549_pgfId-1000216]##The CCI _ResultSet_ interface is based on the
JDBC _ResultSet_ interface. The _ResultSet_ extends the
_java.sql.ResultSet_ and _javax.resource.cci.-Record_ interfaces.

[#50540549_pgfId-1000217]##The following code extract shows the
_ResultSet_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002738]##public interface javax.resource.cci.ResultSet

[#50540549_pgfId-1002739]## extends Record, java.sql.ResultSet \{

[#50540549_pgfId-1002736]##}

|===

[#50540549_pgfId-1003362]##ResultSet Interface

image:conn-144.gif[image]

[#50540549_pgfId-1003363]##The following section specifies the
requirements for a CCI _ResultSet_ implementation.

[#50540549_pgfId-1000245]##Refer to the JDBC (see
link:conn.htm#50540564_32901[See JDBC API Specification, version 4.1])
specification and Java docs for more details on the _java.sql.ResultSet_
interface. The following section specifies only a brief outline of the
_ResultSet_ interface. It focuses on the differences between the
implementation requirements set by the CCI and JDBC. Note that the JDBC
semantics for a _ResultSet_ hold for the cases that are not explicitly
mentioned in the following section.

[#50540549_pgfId-1000246]##CCI uses the JDBC _ResultSet_ interface
because:

[#50540549_pgfId-1000247]##JDBC _ResultSet_ is a standard, established,
and well-documented interface for accessing and updating tabular data.

[#50540549_pgfId-1000248]##JDBC _ResultSet_ interface is defined in the
core _java.sql package_ . An introduction of an independent CCI-specific
_ResultSet_ interface (that is, different from the JDBC _ResultSet_
interface) may create confusion in terms of differences in the
programming model and functionality.

[#50540549_pgfId-1000249]##The use of the JDBC _ResultSet_ interface
enables a tool or EAI vendor to leverage existing facilities that have
been for the JDBC _ResultSet_ .

[#50540549_pgfId-1000250]##

image:conn-138.gif[image]

A CCI implementation is not required to support the
_javax.resource.cci.ResultSet_ interface. If a CCI implementation does
not support result set functionality, it should not support interfaces
and methods that are associated with the result set functionality. An
example is the _java.sql.ResultSetMetaData_ interface.

image:conn-138.gif[image]

======= [#50540549_pgfId-1000251]##ResultSet Interface

[#50540549_pgfId-1000252]##The _ResultSet_ interface provides a set of
getter methods for retrieving column values from the current row. A
column value can be retrieved using either the index number of the
column or the name of the column. The columns are numbered starting at
one. For maximum portability, result set columns within each row should
be read left-to-right, and each column should be read only once.

[#50540549_pgfId-1000253]##The _ResultSet_ interface also defines a set
of _update_ XXX methods for updating the column values of the current
row.

======= [#50540549_pgfId-1000254]##Type Mapping

[#50540549_pgfId-1000255]##A _ResultSet_ implementation should attempt
to convert the underlying EIS-specific data type to the Java type as
specified in the _XXX_ part of the _get_ XXX method and return a
suitable Java value.

[#50540549_pgfId-1000256]##A _ResultSet_ implementation must establish a
type mapping between the EIS specific data types and Java types. The
type mapping is specific to an EIS.

[#50540549_pgfId-1000257]##The CCI specification does not specify
standard type mappings specific to each type of EIS.

======= [#50540549_pgfId-1000258]##ResultSet Types

[#50540549_pgfId-1000259]##The CCI _ResultSet_ , similar to the JDBC
_ResultSet_ , supports the following types of result set: _forward-only_
, _scroll-insensitive_ , and _scroll-sensitive_ .

[#50540549_pgfId-1000260]##A forward-only result set is non-scrollable;
its cursor moves only forward, from top to bottom. The view of data in
the result set depends on whether the EIS instance materializes results
incrementally.

[#50540549_pgfId-1000261]##A scroll-insensitive result set is
scrollable; its cursor can move forward or backward and can be moved to
a particular row or to a row whose position is relative to the current
row. This type of result set is not sensitive to any changes made by
another transaction or result sets in the same transaction that are made
while the result set is open. This type of result set provides a static
view of the underlying data with respect to changes made by other result
sets. The order and values of rows are set at the time of the creation
of a scroll-insensitive result set.

[#50540549_pgfId-1000262]##A scroll-sensitive result set is scrollable.
It is sensitive to changes that are made while the result set is open.
This type of result set provides a more dynamic view of the underlying
data.

[#50540549_pgfId-1003532]##A component can use the
_ownUpdatesAreVisible_ , _ownDeletesAreVisible_ , and
_ownInsertsAreVisible_ methods of the _ResultSetInfo_ interface to
determine whether a result set can “see” its own changes while the
result set is open. For example, a result set’s own changes are visible
if the updated column values can be retrieved by calling the _get_ XXX
method after the corresponding _update_ XXX method. Refer to the JDBC
(see link:conn.htm#50540564_32901[See JDBC API Specification, version
4.1]) specification for more details on this feature.

======= [#50540549_pgfId-1000267]##Scrolling

[#50540549_pgfId-1000268]##The CCI _ResultSet_ supports the same
scrolling ability as the JDBC _ResultSet_ .

[#50540549_pgfId-1000269]##If a resource adapter implements the cursor
movement methods, its result sets are scrollable. A scrollable result
set created by executing an _Interaction_ can move through its contents
in both a forward (first-to-last) or backward (last-to-first) direction.
A scrollable result set also supports relative and absolute positioning.

[#50540549_pgfId-1000270]##The CCI _ResultSet_ , similar to the JDBC
_ResultSet_ , maintains a cursor that indicates the row in the result
set that is currently being accessed. The cursor maintained on a
_forward-only_ result set can only move forward through the contents of
the result set. The rows are accessed in a first-to-last order. A
scrollable result set can also be moved in a backward direction
(last-to-first) and to a particular row.

[#50540549_pgfId-1000271]##Note that a CCI _ResultSet_ implementation
should only provide support for scrollable result sets if the underlying
EIS supports such a facility.

======= [#50540549_pgfId-1000272]##Concurrency Types

[#50540549_pgfId-1000273]##A component can set the concurrency type of a
CCI _ResultSet_ to be either read-only or updatable. These types are
consistent with the concurrency types defined by the JDBC _ResultSet_ .

[#50540549_pgfId-1000274]##A result set that uses read-only concurrency
does not allow updates of its content, while an updatable result set
allows updates to its contents. An updatable result set may hold a write
lock on the underlying data item and thus reduce concurrency.

[#50540549_pgfId-1000278]##Refer to the JDBC specification (see
link:conn.htm#50540564_32901[See JDBC API Specification, version 4.1])
for detailed information and examples.

======= [#50540549_pgfId-1000279]##Updatability

[#50540549_pgfId-1000280]##A result set of concurrency type
_CONCUR_UPDATABLE_ supports the ability to update, insert, and delete
its rows. The CCI support for this type of result set is similar to the
JDBC _ResultSet_ .

[#50540549_pgfId-1000281]##The methods _update_ XXX on the _ResultSet_
interface are used to modify the values of an individual column in the
current row. These methods do not update the underlying EIS. The
_updateRow_ method must be called to update data on the underlying EIS.
A resource adapter may discard changes made by a component if the
component moves the cursor from the current row before calling the
method _updateRow_ .

[#50540549_pgfId-1000285]##Refer to the JDBC specification (see
link:conn.htm#50540564_32901[See JDBC API Specification, version 4.1])
for more information.

======= [#50540549_pgfId-1000286]##Persistence of Java Objects

[#50540549_pgfId-1000287]##The _ResultSet_ interface provides the
_getObject_ method to enable a component to retrieve column values as
Java objects. The type of the Java object returned from the _getObject_
method is compatible with the type mapping supported by a resource
adapter-specific to its underlying EIS. The _updateObject_ method
enables a component to update a column value using a Java object.

======= [#50540549_pgfId-1000288]##Support for SQL Types

[#50540549_pgfId-1000289]##It is optional for a CCI _ResultSet_ to
support the _SQL_ type _JAVA_OBJECT_ as defined in _java.sql.Types_ .The
JDBC specification specifies the JDBC support for persistence of Java
objects.

[#50540549_pgfId-1000290]##The support for the following _SQL_ types as
defined in _java.sql.Types_ is optional for a CCI _ResultSet_
implementation:

[#50540549_pgfId-1000291]##Binary large object ( _BLOB_ )

[#50540549_pgfId-1000292]##Character large object ( _CLOB_ )

[#50540549_pgfId-1000293]## _SQL ARRAY_ type

[#50540549_pgfId-1000294]## _SQL REF_ type

[#50540549_pgfId-1000295]## _SQL DISTINCT_ type

[#50540549_pgfId-1000296]## _SQL STRUCT_ type

[#50540549_pgfId-1000297]##If an implementation of the CCI _ResultSet_
interface does not support these types, it must throw a
_java.sql.SQLException_ indicating that the method is not supported, or
_java.lang.UnsupportedOperationException_ from the following methods:

[#50540549_pgfId-1000298]## _getBlob_

[#50540549_pgfId-1000299]## _getClob_

[#50540549_pgfId-1000300]## _getArray_

[#50540549_pgfId-1000301]## _getRef_

======= [#50540549_pgfId-1000302]##Support for Customized SQL Type Mapping

[#50540549_pgfId-1000303]##The CCI is not required to support customized
mapping of SQL structured and distinct types to Java classes. The JDBC
API defines support for such customization mechanisms.

[#50540549_pgfId-1000304]##The CCI _ResultSet_ should throw a
_java.sql.SQLException_ indicating that the method is not supported or
_java.lang.UnsupportedOperationException_ from the _getObject_ method
that takes a _java.util.Map_ parameter.

======= [#50540549_pgfId-1000305]##ResultSetMetaData

[#50540549_pgfId-1000306]##The _java.sql.ResultSetMetaData_ interface
provides information about the columns in a _ResultSet_ instance. A
component uses _ResultSet_ . _getMetaData_ method to get information
about a _ResultSet_ .

[#50540549_pgfId-1000307]##Refer to the JDBC API documentation for a
detailed specification of the _ResultSetMetaData_ interface.

======= [#50540549_pgfId-1000308]##ResultSetInfo

[#50540549_pgfId-1000309]##The _javax.resource.cci.ResultSetInfo_
interface provides information on the support provided for _ResultSet_
functionality by a connected EIS instance. A component calls the
_Connection.getResultInfo_ method to get the _ResultSetInfo_ instance.

[#50540549_pgfId-1000310]##A CCI implementation is not required to
support the _javax.resource.cci.ResultSetInfo_ interface. The
implementation of this interface is provided only if the CCI supports
the _ResultSet_ facility.

[#50540549_pgfId-1000311]##The following code extract shows the
_ResultSetInfo_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002752]##public interface
javax.resource.cci.ResultSetInfo \{

[#50540549_pgfId-1002753]## public boolean updatesAreDetected(int type)

[#50540549_pgfId-1002754]## throws ResourceException;

[#50540549_pgfId-1002755]## public boolean insertsAreDetected(int type)

[#50540549_pgfId-1002756]## throws ResourceException;

[#50540549_pgfId-1002757]## public boolean deletesAreDetected(int type)

[#50540549_pgfId-1002758]## throws ResourceException;

[#50540549_pgfId-1002759]##  

[#50540549_pgfId-1002760]## public boolean supportsResultSetType(int
type)

[#50540549_pgfId-1002761]## throws ResourceException;

[#50540549_pgfId-1002762]## public boolean
supportsResultTypeConcurrency(int type,

[#50540549_pgfId-1002763]## int concurrency)

[#50540549_pgfId-1002764]## throws ResourceException;

[#50540549_pgfId-1002765]## 

[#50540549_pgfId-1002766]## public boolean ownUpdatesAreVisible(int
type)

[#50540549_pgfId-1002767]## throws ResourceException;

[#50540549_pgfId-1002768]## public boolean ownInsertsAreVisible(int
type)

[#50540549_pgfId-1002769]## throws ResourceException;

[#50540549_pgfId-1002770]## public boolean ownDeletesAreVisible(int
type)

[#50540549_pgfId-1002771]## throws ResourceException;

[#50540549_pgfId-1002772]## 

[#50540549_pgfId-1002773]##

[#50540549_pgfId-1002774]## public boolean othersUpdatesAreVisible(int
type)

[#50540549_pgfId-1002775]## throws ResourceException;

[#50540549_pgfId-1002776]## public boolean othersInsertsAreVisible(int
type)

[#50540549_pgfId-1002777]## throws ResourceException;

[#50540549_pgfId-1002778]## public boolean othersDeletesAreVisible(int
type)

[#50540549_pgfId-1002779]## throws ResourceException;

[#50540549_pgfId-1002750]##}

|===

[#50540549_pgfId-1000341]##The type parameter to the above methods
represents the type of the _ResultSet,_ defined as _TYPE__ XXX in the
_ResultSet_ interface.

[#50540549_pgfId-1000342]##Note that these methods should throw a
_ResourceException_ in the following cases:

[#50540549_pgfId-1000343]##A resource adapter and the connected EIS
instance cannot provide any meaningful values for these properties.

[#50540549_pgfId-1000344]##The CCI implementation does not support the
_ResultSet_ functionality. In this case, a _NotSupportedException_
should be thrown from invocations on the above methods.

[#50540549_pgfId-1000345]##A component uses the _rowUpdated_ ,
_rowInserted_ , and _rowDeleted_ methods of the _ResultSet_ interface to
determine whether a row has been affected by a visible update, insert,
or delete is the result set is open. The _updatesAreDetected_ ,
_insertsAreDetected_ and _deletesAreDetected_ methods enable a component
to find out whether or not changes to a _ResultSet_ are detected.

[#50540549_pgfId-1000346]##A component uses the _ownUpdatesAreVisible_ ,
_ownDeletesAreVisible_ and _ownInsertsAreVisible_ methods to determine
whether a _ResultSet_ can “see” its own changes when the result set is
open.

[#50540549_pgfId-1000347]##A component uses the _supportsResultSetType_
method to check the _ResultSet_ types supported by a resource adapter
and its underlying EIS instance.

[#50540549_pgfId-1000348]##The _supportsResultSetTypeConcurency_ method
provides information on the _ResultSet_ concurrency types supported by a
resource adapter and its underlying EIS instance.

======= [#50540549_pgfId-1000350]##

image:conn-135.gif[image]

[#50540549_39416]##Code Samples

[#50540549_pgfId-1000351]##The following code extracts illustrate the
application programming model based on the CCI.

[#50540549_pgfId-1000352]##An application development tool or EAI
framework normally hides all the CCI-based programming details from an
application developer. For example, an application development tool
generates a set of Java classes that abstract the CCI-based application
programming model and offers a simple programming model to an
application developer.

======= [#50540549_pgfId-1000353]##Connection

[#50540549_pgfId-1000354]##Get a _Connection_ to an EIS instance after a
lookup of a _ConnectionFactory_ instance from the JNDI namespace. In
this case, the component allows the container to manage the EIS sign-on.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002799]##javax.naming.Context nc = new
InitialContext();

[#50540549_pgfId-1002800]##javax.resource.cci.ConnectionFactory cf =

[#50540549_pgfId-1002812]## (ConnectionFactory)nc.lookup(

[#50540549_pgfId-1002801]## "java:comp/env/eis/ConnectionFactory");

[#50540549_pgfId-1002797]##javax.resource.cci.Connection cx =
cf.getConnection();

|===

[#50540549_pgfId-1000360]##Create an _Interaction_ instance:

[#50540549_pgfId-1000361]##javax.resource.cci.Interaction ix =
cx.createInteraction();

======= [#50540549_pgfId-1000363]##InteractionSpec

[#50540549_pgfId-1000364]##Create a new instance of the respective
_InteractionSpec_ class or look up a pre-configured _InteractionSpec_ in
the runtime environment using JNDI.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002829]##com.wombat.cci.InteractionSpecImpl ixSpec =
// ...

[#50540549_pgfId-1002830]## 

[#50540549_pgfId-1002831]##ixSpec.setFunctionName("<EIS_SPECIFIC_FUNCTION_NAME>");

[#50540549_pgfId-1002832]##ixSpec.setInteractionVerb(InteractionSpec.SYNC_SEND_RECEIVE);

[#50540549_pgfId-1002827]##...

|===

======= [#50540549_pgfId-1000370]##Mapped Record

[#50540549_pgfId-1000371]##Get a _RecordFactory_ instance:

[#50540549_pgfId-1000372]##javax.resource.cci.RecordFactory rf = // ...
get a RecordFactory

[#50540549_pgfId-1000374]##Create a generic _MappedRecord_ using the
_RecordFactory_ instance. This record instance acts as an input to the
execution of an interaction. The name of the _Record_ acts as a pointer
to the meta information, stored in the metadata repository, for a
specific record type.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002850]##javax.resource.cci.MappedRecord input =

[#50540549_pgfId-1002848]## rf.createMappedRecord(“<NAME_OF_RECORD>”);

|===

[#50540549_pgfId-1000378]##Populate the generic _MappedRecord_ instance
with input values. The component code adds the values based on the meta
information it has accessed from the metadata repository.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002869]##input.put(“<key: element1>", new
String(“<VALUE>”));

[#50540549_pgfId-1002870]##input.put(“<key: element2>", ...);

[#50540549_pgfId-1002861]##...

|===

[#50540549_pgfId-1000383]##Create a generic _IndexedRecord_ to hold the
output values that are set by the execution of the interaction.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002883]##javax.resource.cci.IndexedRecord output =

[#50540549_pgfId-1002881]## rf.createIndexedRecord(“<NAME_OF_RECORD>”);

|===

[#50540549_pgfId-1000387]##Execute the _Interaction_ :

[#50540549_pgfId-1000388]##boolean ret = ix.execute(ixSpec, input,
output);

[#50540549_pgfId-1000390]##Extract data from the output _IndexedRecord._
Note that the type mapping is done in the generic _IndexedRecord_ by
means of the type mapping information in the metadata repository. Since
the component uses generic methods on the _IndexedRecord_ , the
component code does the required type casting.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002898]##java.util.Iterator iterator =
output.iterator();

[#50540549_pgfId-1002899]##while (iterator.hasNext()) \{

[#50540549_pgfId-1002900]## // Get a record element and extract value

[#50540549_pgfId-1002896]##}

|===

======= [#50540549_pgfId-1000395]##ResultSet

[#50540549_pgfId-1000396]##Set the requirements for the _ResultSet_
returned by the execution of an _Interaction_ . This step is optional.
Default values are used if the requirements are not explicitly set:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002913]##com.wombat.cci.InteractionSpecImpl ixSpec =
.. // get an

[#50540549_pgfId-1002926]## // InteractionSpec;

[#50540549_pgfId-1002914]## 

[#50540549_pgfId-1002915]##ixSpec.setFetchSize(20);

[#50540549_pgfId-1002911]##ixSpec.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE);

|===

[#50540549_pgfId-1000402]##Execute an _Interaction_ that returns a
_ResultSet_ :

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002978]##javax.resource.cci.ResultSet rs =
(javax.resource.cci.ResultSet)

[#50540549_pgfId-1002976]## ix.execute(ixSpec, input);

|===

[#50540549_pgfId-1000406]##Iterate over the _ResultSet_ . The example
here positions the cursor on the first row and then iterates forward
through the contents of the _ResultSet_ . The _get_ XXX methods are used
to retrieve column values:

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1002994]##rs.beforeFirst();

[#50540549_pgfId-1002995]##while (rs.next()) \{

[#50540549_pgfId-1002996]## // get the column values for the current row
using getXXX

[#50540549_pgfId-1003003]## // method

[#50540549_pgfId-1002992]##}

|===

[#50540549_pgfId-1000412]##The following example shows a backward
iteration through the _ResultSet_ :

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1003017]##rs.afterLast();

[#50540549_pgfId-1003018]##while (rs.previous()) \{

[#50540549_pgfId-1003019]## // get the column values for the current row
using getXXX

[#50540549_pgfId-1003028]## // method

[#50540549_pgfId-1003015]##}

|===

======= [#50540549_pgfId-1000417]##Custom Record

[#50540549_pgfId-1000418]##Extend the _Record_ interface to represent an
EIS-specific custom Record. The _CustomerRecord_ interface supports a
simple getter-setter design pattern for its field values. A development
tool generates the implementation class of the _CustomerRecord_ .

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1003038]##public interface CustomerRecord extends
javax.resource.cci.Record,

[#50540549_pgfId-1003039]## javax.resource.cci.Streamable \{

[#50540549_pgfId-1003040]## 

[#50540549_pgfId-1003041]## public void setName(String name);

[#50540549_pgfId-1003042]## public void setId(String custId);

[#50540549_pgfId-1003043]## public void setAddress(String address);

[#50540549_pgfId-1003044]## 

[#50540549_pgfId-1003045]## public String getName();

[#50540549_pgfId-1003046]## public String getId();

[#50540549_pgfId-1003047]## public String getAddress();

[#50540549_pgfId-1003036]##}

|===

[#50540549_pgfId-1000431]##Create an empty _CustomerRecord_ instance to
hold output from the execution of an _Interaction_ .

[#50540549_pgfId-1000432]##CustomerRecord customer = ... // create an
instance

[#50540549_pgfId-1000434]##Create a _PurchaseOrderRecord_ instance as an
input to the _Interaction_ and set the properties on this instance. The
_PurchaseOrderRecord_ is another example of a custom _Record_ .

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1003065]##PurchaseOrderRecord purchaseOrder = ... //
create an instance

[#50540549_pgfId-1003066]##purchaseOrder.setProductName(“...”);

[#50540549_pgfId-1003067]##purchaseOrder.setQuantity(“...”);

[#50540549_pgfId-1003063]##...

|===

[#50540549_pgfId-1000440]##Execute an _Interaction_ that populates the
output _CustomerRecord_ instance.

[width="100%",cols="100%",]
|===
a|
[#50540549_pgfId-1003080]##// Execute the Interaction

[#50540549_pgfId-1003081]##boolean ret = ix.execute(ixSpec,
purchaseOrder, customer);

[#50540549_pgfId-1003082]## 

[#50540549_pgfId-1003083]##// Check the CustomerRecord

[#50540549_pgfId-1003084]##System.out.println( customer.getName() + ":"
+

[#50540549_pgfId-1003085]## customer.getId() + ":" +

[#50540549_pgfId-1003078]## customer.getAddress());

|===

[#50540549_pgfId-998874]## 

====== [#50540619_pgfId-999087]## 

======= [#50540619_pgfId-999100]##

image:conn-145.gif[image]

[#50540619_87413]##Metadata Annotations

image:conn-146.gif[image]

===== [#50540619_pgfId-999012]## 

[#50540619_pgfId-999357]##This chapter defines a simplified API for
development of resource adapters. The goal of the API is to simplify the
development of resource adapter implementations for programmers who are
just starting with resource adapters, or developing resource adapters of
small to medium complexity. The existing Connector APIs remain available
for use in resource adapters that require them and resource adapter
implementations written to those APIs may be used in conjunction with
components written to the new Connector 1.6 APIs.

======= [#50540619_pgfId-999110]##

image:conn-147.gif[image]

Overview

[#50540619_pgfId-999115]##The simplified API makes extensive use of Java
language annotations, that was introduced in Java SE 5.0 (see
link:conn.htm#50540564_53023[See A Metadata Facility for the Java
Programming Language]). The purpose of the API is to improve the
existing Connector architecture by reducing its complexity from a
resource adapter developer’s point of view.

[#50540619_pgfId-1001293]##The use of annotations reduces or completely
eliminates the need to deal with a deployment descriptor in many cases.
The use of annotations also reduces the need to keep the deployment
descriptor synchronized with changes to source code.

[#50540619_pgfId-999697]##Other component specifications in the Java EE
platform, like Enterprise JavaBeans and Web Services through the
annotations defined in the Web Services Metadata specification have
already brought such ease of development simplifications to the
developer.

======= [#50540619_pgfId-999341]##

image:conn-147.gif[image]

Goals

[#50540619_pgfId-999342]##The simplified API is designed with the
following goals:

[#50540619_pgfId-999343]##Define Java language metadata annotations that
can be used to annotate resource adapter artifacts. These annotations
may reduce the need for implementing certain interfaces and assist in
reducing the number of classes required to build a resource adapter
implementation.

[#50540619_pgfId-999355]##Reduce the need to write redundant code by
leveraging existing facilities in the Java EE platform.

[#50540619_pgfId-999363]##Limit and reduce the need for a deployment
descriptor for common scenarios by defining related metadata annotations

[#50540619_pgfId-999364]##Define “programmatic defaults” to reduce the
need for a resource adapter developer to develop code to represent
common scenarios.

======= [#50540619_pgfId-999413]##

image:conn-147.gif[image]

[#50540619_65903]##Deployment Descriptors and Annotations

[#50540619_pgfId-999388]##Deployment descriptors are considered as an
alternative to metadata annotations or as a mechanism for the overriding
of metadata annotations (for example to permit the further customization
of an application for a particular development environment at a later
stage of the development or application assembly etc).

[#50540619_pgfId-1001017]##For additional requirements on annotations
discovery and processing by the application server, see the Deployment
Section of the “Application Assembly and Deployment” chapter of
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7].

[#50540619_pgfId-1001016]##Deployment descriptors may be “sparse”,
unlike the full deployment descriptors required as part of the J2EE
Connector 1.5 specification.

[#50540619_pgfId-999403]##The specification allows a resource adapter to
be developed in mixed-mode form, that is the ability for a resource
adapter developer to utillize the metadata annotations defined in this
chapter and the deployment descriptors in their application. When such a
combination is used, if the specification does not define a particular
behavior, the rules for the use of deployment descriptors as an
overriding mechanism apply.

======= [#50540619_pgfId-1000898]##metadata-complete Deployment Descriptor Element

[#50540619_pgfId-1000888]##A new attribute, _metadata-complete_ , is
introduced in the Connector 1.6 deployment descriptor ( _ra.xml_ ). The
_metadata-complete_ attribute defines whether the deployment descriptor
for the resource adapter module is complete, or whether the class files
available to the module and packaged with the resource adapter should be
examined for annotations that specify deployment information.

[#50540619_pgfId-1000842]##If _metadata-complete_ is set to "true", the
deployment tool of the application server must ignore any annotations
that specify deployment information, which might be present in the class
files of the application. If _metadata-complete_ is not specified or is
set to "false", the deployment tool must examine the class files of the
application for annotations, as specified by this specification. If the
deployment descriptor is not included or is included but not marked
_metadata-complete_ , the deployment tool will process annotations.

[#50540619_pgfId-1000954]##Application servers must assume that
_metadata-complete_ is true for resource adapter modules with deployment
descriptor version lower than 1.6. The following table describes the
requirements for determining when to process annotations on the classes
in a resource adapter archive.

======= [#50540619_pgfId-1001623]##Annotation Processing Requirements for a Resource Adapter Archive

[#50540619_pgfId-1001629]##Deployment Descriptor

[#50540619_pgfId-1001631]##metadata-complete?

[#50540619_pgfId-1001633]##process annotations

[#50540619_pgfId-1001635]##Connector 1.5 ra.xml or earlier

[#50540619_pgfId-1001637]##Not applicable

[#50540619_pgfId-1001639]##No

[#50540619_pgfId-1001641]##Connector 1.6 _ra.xml_

[#50540619_pgfId-1001643]##True

[#50540619_pgfId-1001645]##No

[#50540619_pgfId-1001647]##Connector 1.6 _ra.xml_

[#50540619_pgfId-1001649]##False or Unspecified

[#50540619_pgfId-1001651]##Yes

[#50540619_pgfId-1001653]##No _ra.xml_ bundled with the RAR module
archive

[#50540619_pgfId-1001655]##Not Applicable

[#50540619_pgfId-1001657]##Yes

======= [#50540619_pgfId-1001375]##Merging Annotations and Deployment Descriptor

[#50540619_pgfId-1001381]##An application assembler or deployer may use
the deployment descriptor to override the metadata annotations specified
by the resource adapter developer. See the chapter titled “Resources,
Naming, and Injection” in the Java EE Platform specification (see
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7]) for general rules on annotations and
injection and override behavior. The rules below complement the rules
specified in that section.

[#50540619_pgfId-1001448]##An application assembler or deployer is
recommended not to override certain information specified through
annotations, such as transaction support, authentication and security
requirements of the resource adapter module, using the deployment
descriptor. The resource adapter developer specifies this information
considering the capabilities of the resource adapter, and altering these
values using the deployment descriptor may not be valid or appropriate.
For instance, if a resource adapter developer marks a resource adapter’s
transaction support level as _LocalTransaction_ through annotations,
since the resource adapter implementation only supports the
_LocalTransaction_ interface and not the _XATransaction_ interface, it
is incorrect and prohibited to override the transaction support level
through the deployment descriptor to _XATransaction_ .

[#50540619_pgfId-1001505]##When _metadata-complete_ is specified as
_false_ or if the _metadata-complete_ attribute is unspecified in the
deployment descriptor, the deployment tool must examine the classes of
the resource adapter for annotations. The deployment tool must follow
the annotation discovery and processing requirements specified in the
“Deployment Section” of the “Application Assembly and Deployment”
chapter of the Java EE Platform Specification (see
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7]).

[#50540619_pgfId-1001529]##The information provided by the annotations
must be merged with the deployment descriptor packaged along with the
resource adapter module. The general rule is that uniqueness constraints
specified in the deployment descriptor schema (see
link:conn.htm#50540561_30009[See Resource Adapter XML Schema
Definition]) specify what combinations of annotations and their
corresponding deployment descriptor elements are allowed.

[#50540619_pgfId-1001388]##While merging the information present in the
annotations and the deployment descriptor, the application server must
satisfy the following requirements:

[#50540619_pgfId-1001389]##If a deployment descriptor element and one or
more annotations specify information for the same unique identity (as
specified by the XML schema), the information provided in the deployment
descriptor overrides the value specified in the annotation.

[#50540619_pgfId-1001442]##If there is no match between the identity of
the annotations and the deployment descriptor, and as long as the XML
schema allow the combination of these identities, the information
provided in the deployment descriptor must be considered in addition to
the annotations.

[#50540619_pgfId-1001683]##It is an error, either by way of annotations
alone or as a result of the combination of annotation and deployment
descriptor, to specify combinations of identities that do not satisfy
the uniqueness constraints in the deployment descriptor schema.

[#50540619_pgfId-1005434]## The application server must consider the
following exceptions to the third rule above:

[#50540619_pgfId-1005435]##If a resource adapter module specifies the
fully qualified Java class name of the resource adapter class in the
deployment descriptor through the _resourceadapter-class_ element, the
application server must ignore any _Connector_ annotations in the
resource adapter module’s annotation discovery scope.

[#50540619_pgfId-1001792]##If the JavaBean class specified in the
_resourceadapter-class_ element is annotated with the _Connector_
annotation, the application server must use the information in the
deployment descriptor to override the values specified in the
annotation.

======= [#50540619_pgfId-1001430]##Annotation Processing Requirements of Superclasses

[#50540619_pgfId-1002064]##The following JavaBeans are permitted to have
superclasses that are themselves of the same type:

[#50540619_pgfId-1002066]## _ResourceAdapter_

[#50540619_pgfId-1002097]## _ManagedConnectionFactory_

[#50540619_pgfId-1002100]## _ActivationSpec_

[#50540619_pgfId-1002103]##Administered Object

[#50540619_pgfId-1002070]##For instance, a _ResourceAdapter_ JavaBean is
permitted to have a superclass that is itself a _ResourceAdapter_
JavaBean. See link:conn.htm#50540558_94107[See ResourceAdapter JavaBean
and Bootstrapping a Resource Adapter Instance] for more information on
_ResourceAdapter_ JavaBean.

[#50540619_pgfId-1002162]##However there are no rules for processing of
annotations or the deployment descriptor in these cases. For the
purposes of processing the particular JavaBean, all superclass
processing is identical regardless of whether the superclasses are
themselves JavaBean types listed above.

[#50540619_pgfId-1002121]##In this regard, the use of JavaBean types as
superclasses merely represents a convenient use of implementation
inheritance, but does not have component inheritance semantics.
Therefore, if a class is annotated with the _Connector_ annotation, its
subclass is not considered a _ResourceAdapter_ JavaBean unless the
subclass is also annotated with the _Connector_ annotation.

[#50540619_pgfId-1002130]##However, the application server is required
to process _ConfigProperty_ annotations placed on the superclasses while
processing the configuration properties of a JavaBean. As an example, if
a subclass _MySubClass_ , is annotated with the _Connector_ annotation,
and the application server is processing _ConfigProperty_ annotations
placed in the field or setter methods in the subclass, the container
must also process any _ConfigProperty_ annotations placed on the fields
or setter methods of all superclasses of the subclass.

[#50540619_pgfId-1002062]## 

[#50540619_pgfId-1002155]##All the metadata annotations described in
this chapter are in the _javax.resource.spi_ package unless otherwise
specified. The following sections will describe the metadata annotations
that are required to be supported by the application server.

======= [#50540619_pgfId-1000956]##

image:conn-147.gif[image]

[#50540619_30627]##@Connector

[#50540619_pgfId-999534]##The _Connector_ annotation is a
component-defining annotation and it can be used by the resource adapter
developer to specify that the JavaBean is a resource adapter JavaBean.
The _Connector_ annotation is applied to the JavaBean class and the
JavaBean class must implement the _ResourceAdapter_ interface. It is
recommended that the resource adapter developer annotate at most one
JavaBean with the _Connector_ annotation within the valid annotation
discovery scope as defined in link:conn.htm#50540619_65903[See
Deployment Descriptors and Annotations].

[#50540619_pgfId-1001992]##If more than one JavaBean is annotated with
the _Connector_ annotation, the application server must use the JavaBean
class specified in the deployment descriptor through the
_resourceadapter-class_ element. It is an error to provide a resource
adapter module with more than one JavaBean class annotated with the
_Connector_ annotation and not providing a deployment descriptor.

[#50540619_pgfId-1001995]## 

======= [#50540619_pgfId-999590]##Connector Annotation

[#50540619_pgfId-999592]## 

[#50540619_pgfId-999702]## package javax.resource.spi;

[#50540619_pgfId-999550]## @Documented

[#50540619_pgfId-999551]## @Retention(RUNTIME)

[#50540619_pgfId-999552]## @Target(TYPE)

[#50540619_pgfId-999554]## public @interface Connector \{

[#50540619_pgfId-999555]## String[] description() default \{};

[#50540619_pgfId-999556]## String[] displayName() default \{};

[#50540619_pgfId-999557]## String[] smallIcon() default \{};

[#50540619_pgfId-999558]## String[] largeIcon() default \{};

[#50540619_pgfId-1001112]## 

[#50540619_pgfId-999559]## String vendorName() default "";

[#50540619_pgfId-999560]## String eisType() default "";

[#50540619_pgfId-999561]## String version() default "";

[#50540619_pgfId-1001111]## 

[#50540619_pgfId-999562]## String[] licenseDescription() default \{};

[#50540619_pgfId-999563]## boolean licenseRequired() default false;

[#50540619_pgfId-1001110]## 

[#50540619_pgfId-999629]## AuthenticationMechanism[] authMechanisms()
default \{};

[#50540619_pgfId-999567]## boolean reauthenticationSupport() default
false;

[#50540619_pgfId-1001256]## 

[#50540619_pgfId-999568]## SecurityPermission[] securityPermissions()
default \{};

[#50540619_pgfId-999569]## 

[#50540619_pgfId-999570]## TransactionSupport.TransactionSupportLevel
transactionSupport()

[#50540619_pgfId-999571]## default
TransactionSupport.TransactionSupportLevel.NoTransaction;

[#50540619_pgfId-1001259]## 

[#50540619_pgfId-999574]## Class<? extends WorkContext>[]
requiredWorkContexts()

[#50540619_pgfId-999650]## default \{};

[#50540619_pgfId-999653]## }

[#50540619_pgfId-999575]## 

[#50540619_pgfId-1002185]##The _smallIcon_ and _largeIcon_ annotation
elements specifies file names for small and a large GIF or JPEG icon
images that are used to represent the resource adapter in a GUI tool.
Each _smallIcon_ must be associated with a _largeIcon_ element and the
application server must use the ordinal value in their respective arrays
to find the related pairs of icons.

[#50540619_pgfId-1001567]##The _vendorName_ annotation element specifies
the name of the resource adapter provider vendor. The _eisType_
annotation element contains information about the type of EIS. For
example, the type of an EIS can be product name of EIS independent of
any version info. This helps in identifying EIS instances that can be
used with this resource adapter.

[#50540619_pgfId-1001128]##The _licenseDescription_ and
_licenseRequired_ annotation elements specify licensing requirements for
the resource adapter module. This type specifies whether a license is
required to deploy and use this resource adapter, and an optional
description of the licensing terms.

[#50540619_pgfId-1001219]##The _authMechanisms_ element specifies the
authentication mechanisms supported by the resource adapter. See
link:conn.htm#50540619_63282[See @AuthenticationMechanism] for more
information on the _AuthenticationMechanism_ annotation. The annotation
element _reauthenticationSupport_ specifies whether the resource adapter
implementation supports re-authentication of existing ManagedConnection
instance. Note that this information is for the resource adapter
implementation and not for theunderlying EIS instance.

[#50540619_pgfId-1001224]##The _securityPermissions_ annotation element
specifies the extended security permissions required to be provided for
the operation of the resource adapter module. See
link:conn.htm#50540619_57131[See @SecurityPermission] for more
information on the _SecurityPermission_ annotation.

[#50540619_pgfId-1005430]## The _transactionSupport_ annotation element
specifies the level of transaction support provided by the resource
adapter.

[#50540619_pgfId-1005431]##The _requiredWorkContexts_ annotation element
specifies a list of fully qualified classes that implements the
_WorkContext_ interface that a resource adapter requires the application
server to support.

======= [#50540619_pgfId-1001079]##Implementing the ResourceAdapter Interface

[#50540619_pgfId-999679]##It is optional for a resource adapter
implementation to bundle a JavaBean class implementing the
_javax.resource.spi.ResourceAdapter_ interface (see
link:conn.htm#50540558_94107[See ResourceAdapter JavaBean and
Bootstrapping a Resource Adapter Instance]). In particular, a resource
adapter implementation that only performs outbound communication to the
EIS might not provide a JavaBean that implements the _ResourceAdapter_
interface or a JavaBean annotated with the _Connector_ annotation.

[#50540619_pgfId-999678]##However, if a resource adapter requires to
perform tasks that uses the facilities provided by the application
server through the _ResourceAdapter_ interface (for example obtain a
reference to the _BootstrapContext_ , get lifecycle callbacks, or
perform inbound message delivery), the resource adapter implementation
must provide a JavaBean that implements the _ResourceAdapter_ interface.
The resource adapter developer may, in this case, use the _Connector_
annotation or the deployment descriptor (see
link:conn.htm#50540561_39795[See Resource Adapter Provider]) to specify
the resource adapter JavaBean. A JavaBean that is annotated with the
_Connector_ annotation must implement the _ResourceAdapter_ interface
and must satisfy the requirements listed in
link:conn.htm#50540558_94107[See ResourceAdapter JavaBean and
Bootstrapping a Resource Adapter Instance].

======= [#50540619_pgfId-999692]##Example

[#50540619_pgfId-999694]##A simple resource adapter JavaBean, that does
not support transactions, could be defined as follows by the resource
adapter provider.

[#50540619_pgfId-1001042]## 

======= [#50540619_pgfId-1001021]##Connector Annotation Usage Example

[#50540619_pgfId-1001023]## 

[#50540619_pgfId-1001035]## @Connector( )

[#50540619_pgfId-1001027]## public class MyResourceAdapter implements
ResourceAdapter\{

[#50540619_pgfId-1001053]## // Define common configuration properties.

[#50540619_pgfId-1001070]## ...

[#50540619_pgfId-1001030]## }

======= [#50540619_pgfId-999691]##[#50540619_63282]##@AuthenticationMechanism

[#50540619_pgfId-999916]##The _AuthenticationMechanism_ annotation can
be used by the developer, as part of the _Connector_ annotation, to
specify the authentication mechanism supported by the resource adapter
(see link:conn.htm#50540567_71111[See Authentication Mechanism]).

[#50540619_pgfId-999903]## 

======= [#50540619_pgfId-999924]##AuthenticationMechanism Annotation

[#50540619_pgfId-999708]## 

[#50540619_pgfId-999925]## package javax.resource.spi;

[#50540619_pgfId-999900]## 

[#50540619_pgfId-999928]## @Documented

[#50540619_pgfId-999718]## @Retention(RUNTIME)

[#50540619_pgfId-999719]## @Target(\{})

[#50540619_pgfId-999727]## public @interface AuthenticationMechanism \{

[#50540619_pgfId-999933]## public enum CredentialInterface \{

[#50540619_pgfId-999743]## PasswordCredential, GSSCredential,
GenericCredential

[#50540619_pgfId-999810]## }

[#50540619_pgfId-999769]## 

[#50540619_pgfId-999770]## String authMechanism() default
"BasicPassword";

[#50540619_pgfId-999830]## String[] description() default \{};

[#50540619_pgfId-999863]## CredentialInterface credentialInterface()

[#50540619_pgfId-999864]## default
CredentialInterface.PasswordCredential;

[#50540619_pgfId-999790]## }

[#50540619_pgfId-999802]## 

[#50540619_pgfId-999940]##The _authMechanism_ annotation element
specifies an authentication mechanism supported by the resource adapter.
Note that this authentication support is for the resource adapter and
not for the underlying EIS instance. The _CredentialInterface_
enumeration is used to represent the various credential interfaces that
can be used by the resource adaper to support the representation of
credentials and the _credentialInterface_ annotation element is used to
specify the credential interface supported by the resource adapter.

======= [#50540619_pgfId-999998]##[#50540619_57131]##@SecurityPermission

[#50540619_pgfId-1000018]##The _SecurityPermission_ annotation can be
used by the developer, as part of the _Connector_ annotation, to specify
the extended security permissions required by the resource adapter (see
link:conn.htm#50540561_39795[See Resource Adapter Provider]).

[#50540619_pgfId-1000027]## 

======= [#50540619_pgfId-1000019]##SecurityPermission annotation

[#50540619_pgfId-999999]## package javax.resource.spi;

[#50540619_pgfId-1000001]## 

[#50540619_pgfId-1000008]## @Documented

[#50540619_pgfId-1000009]## @Retention(RUNTIME)

[#50540619_pgfId-1000010]## @Target(\{})

[#50540619_pgfId-1000011]## public @interface SecurityPermission \{

[#50540619_pgfId-1000012]## String[] description() default \{};

[#50540619_pgfId-1000013]## String permissionSpec() default "";

[#50540619_pgfId-1000014]## }

[#50540619_pgfId-1000046]## 

[#50540619_pgfId-1001332]##The _description_ element is used to provide
an optional description to mention any specific reason that a resource
requires a given security permission.

[#50540619_pgfId-1001352]##The _permissionSpec_ element specifies a
security permission based on the Security policy file syntax. These
security permissions are different from those required by the default
permission set as specified in link:conn.htm#50540566_43666[See Security
Permissions].

======= [#50540619_pgfId-1001356]##

image:conn-147.gif[image]

[#50540619_88169]##@ConfigProperty

[#50540619_pgfId-1000271]##The _ConfigProperty_ annotation can be used
by the developer on JavaBeans listed below to indicate to the
application server, that a specific JavaBean property is a configuration
property for that JavaBean. A configuration property may be used by the
deployer and resource adapter provider to provide additional
configuration information. The _ConfigProperty_ annotation may be placed
on a property mutator method (the setter method) or the field
corresponding to the JavaBean property.

[#50540619_pgfId-1000369]## 

======= [#50540619_pgfId-1000357]##ConfigProperty Annotation

[#50540619_pgfId-1000313]## 

[#50540619_pgfId-1000409]## package javax.resource.spi;

[#50540619_pgfId-1000273]## 

[#50540619_pgfId-1000280]## @Documented

[#50540619_pgfId-1000281]## @Retention(RUNTIME)

[#50540619_pgfId-1000282]## @Target(\{FIELD, METHOD})

[#50540619_pgfId-1000291]## public @interface ConfigProperty \{

[#50540619_pgfId-1000296]## Class type() default Object.class;

[#50540619_pgfId-1000298]## String[] description() default \{};

[#50540619_pgfId-1000303]## String defaultValue() default "";

[#50540619_pgfId-1000353]## boolean ignore() default false;

[#50540619_pgfId-1001726]## boolean supportsDynamicUpdates() default
false;

[#50540619_pgfId-1001727]## boolean confidential() default false;

[#50540619_pgfId-1000311]## }

[#50540619_pgfId-1000312]## 

[#50540619_pgfId-1000371]##The _type_ element defines the Java type of
the configuration property and the _defaultValue_ element specifies the
default value for the property.

[#50540619_pgfId-1000384]##When the _ConfigProperty_ annotation is
applied on a field, the default value of the _type_ element is the type
of the field. When applied on a method, the default value is the type of
the JavaBean property.

[#50540619_pgfId-1000373]##For field based annotation, if the _type_
element is not specified by the developer, the application server must
infer its value by looking at the field declaration itself. If the
defaultValue annotation element is not specified, the application server
must use the value assigned to the field, if any, as the default value
of the configuration property. It is an error if the value of the _type_
annotation element specified by the developer in the _ConfigProperty_
annotation, and the type of the field are not equal.

[#50540619_pgfId-1001692]##For setter method based annotations, if the
_type_ annotation element is not specified by the developer, the
application server must infer its value by inspecting the method
declartion. The property setter methods must follow the standard
JavaBeans convention (as defined by the JavaBeans _Introspector_ class).
It is an error if the _type_ specified by the developer in the
_ConfigProperty_ annotation and the type of the setter method’s
parameter are not equal.

[#50540619_pgfId-1001693]##The valid values of the _type_ element,
whether inferred or explicitly specified, must be limited to the values
detailed in the documentation of the config-property-typeType element in
the resource adapter XML Schema (see link:conn.htm#50540561_30009[See
Resource Adapter XML Schema Definition]).

[#50540619_pgfId-1000337]##The _ignore_ annotation element is used to
indicate that the configuration tools must ignore considering the
configuration property during auto-discovery of Configuration
properties. (see link:conn.htm#50540619_13546[See Discovery of
Configuration Properties]).

[#50540619_pgfId-1001733]##The _supportsDynamicUpdates_ and the
_confidential_ annotation elements provide additional metadata about the
configuration property to the application server. See
link:conn.htm#50540558_43441[See Configuration Property Attributes] for
more information on these configuration property attributes.

[#50540619_pgfId-1000411]##The application server is required to process
_ConfigProperty_ annotations specified in the field or setter method
declaration of the following JavaBeans:

[#50540619_pgfId-1000412]## _ResourceAdapter_ . A JavaBean implementing
the _ResourceAdapter_ interface or a JavaBean annotated with the
_Connector_ annotation

[#50540619_pgfId-1000413]## _ManagedConnectionFactory_ . A JavaBean
implementing the _ManagedConnectionFactory_ interface or a JavaBean
annotated with the _ConnectionDefinition_ annotation

[#50540619_pgfId-1000419]## _AdministeredObject_ . A JavaBean annotated
with the _AdministeredObject_ annotation or a JavaBean specified as an
administered object’s implementation class using the deployment
descriptor

[#50540619_pgfId-1000422]## _ActivationSpec_ . A JavaBean implementing
the _ActivationSpec_ interface or a JavaBean annotated with the
_Activation_ annotation.

[#50540619_pgfId-1002034]##These JavaBeans are still required to satisfy
the JavaBean requirements listed in link:conn.htm#50540546_81739[See
JavaBean Requirements]. The application server is required to process
ConfigProperty annotations in the JavaBeans listed above irrespective of
whether the JavaBeans are specified by way of deployment descriptor
elements or metadata annotations.

======= [#50540619_pgfId-1002039]##[#50540619_13546]##Discovery of Configuration Properties

[#50540619_pgfId-1001484]##Configuration tools provided by the container
must introspect the JavaBeans listed in link:conn.htm#50540619_88169[See
@ConfigProperty] above for Connector 1.6 resource adapters to
automatically discover the configuration properties of a JavaBean
through JavaBeans introspection.

[#50540619_pgfId-1000439]##The resource adapter developer is, therefore,
not required to annotate every property of the JavaBean with the
_ConfigProperty_ annotation. The resource adapter developer may only
annotate specific properties of a JavaBean with the _ConfigProperty_
annotation to specify non-default values. For example, when a property
is required to be hidden from a configuration tool, the resource adapter
provider need only annotate that property in the JavaBean with the
_ConfigProperty_ annotation and specifying the _ignore_ annotation
element as true.

======= [#50540619_pgfId-1000270]##

image:conn-147.gif[image]

[#50540619_28377]##@ConnectionDefinition and @ConnectionDefinitions

[#50540619_pgfId-1000211]##The _ConnectionDefinition_ and
_ConnectionDefinitions_ annotations are applied to the JavaBean class
and are restricted to be applied only on JavaBean classes that implement
the _ManagedConnectionFactory_ interface (see
link:conn.htm#50540558_23545[See ManagedConnectionFactory JavaBean and
Outbound Communication]).

[#50540619_pgfId-1000212]##The _ConnectionDefinition_ annotation defines
a set of connection interfaces and classes pertaining to a particular
connection type (identical to the role played by the
connection-definition element in the deployment descriptor).

[#50540619_pgfId-1000443]##The _ConnectionDefinitions_ annotation can be
used by the developer to specify a set of connection definitions that a
_ManagedConnectionFactory_ JavaBean is a part of. (see
link:conn.htm#50540561_39795[See Resource Adapter Provider] and
link:conn.htm#50540561_30009[See Resource Adapter XML Schema Definition]
for a discussion on connection-definition).

[#50540619_pgfId-1000264]##If a _ManagedConnectionFactory_ JavaBean is
part of only one connection-definition, the developer may annotate that
JavaBean with a _ConnectionDefinition_ annotation. The
_ConnectionDefinitions_ annotation is intended for
_ManagedConnectionFactory_ JavaBeans that are part of more than one
connection-definitions. It is an error to annotate a JavaBean that does
not implement the _ManagedConnectionFactory_ interface with either ot
these two annotations.

[#50540619_pgfId-1000265]## 

======= [#50540619_pgfId-1000266]##ConnectionDefinitions Annotation

[#50540619_pgfId-1000134]## 

[#50540619_pgfId-1000135]## package javax.resource.spi;

[#50540619_pgfId-1000051]## 

[#50540619_pgfId-1000058]## @Documented

[#50540619_pgfId-1000059]## @Retention(RUNTIME)

[#50540619_pgfId-1000060]## @Target(TYPE)

[#50540619_pgfId-1000065]##

[#50540619_pgfId-1000066]## public @interface ConnectionDefinitions \{

[#50540619_pgfId-1000067]## ConnectionDefinition[] value();

[#50540619_pgfId-1000069]## }

[#50540619_pgfId-1000070]## 

======= [#50540619_pgfId-1000139]##ConnectionDefinition Annotation

[#50540619_pgfId-1000164]## 

[#50540619_pgfId-1000163]## package javax.resource.spi;

[#50540619_pgfId-1000080]## @Documented

[#50540619_pgfId-1000081]## @Retention(RUNTIME)

[#50540619_pgfId-1000082]## @Target(TYPE)

[#50540619_pgfId-1000088]## public @interface ConnectionDefinition \{

[#50540619_pgfId-1000092]## Class connectionFactory();

[#50540619_pgfId-1000094]## Class connectionFactoryImpl();

[#50540619_pgfId-1000151]## Class connection();

[#50540619_pgfId-1000157]## Class connectionImpl();

[#50540619_pgfId-1000160]## }

[#50540619_pgfId-1000100]## 

[#50540619_pgfId-1005427]##The _connectionFactory_ and
_connectionFactoryImpl_ annotation elements are used by the developer to
specify the fully qualified Java interface and implementation class for
the connection factory that is supported by the resource adapter as part
of the connectionDefinition.

[#50540619_pgfId-1005424]##The _connection_ and _connectionImpl_
annotation elements are used by the developer to specify the fully
qualified Java interface and implementation class for the connection
that is supported by the resource adapter as part of the
connectionDefinition.

======= [#50540619_pgfId-1000455]##Example

[#50540619_pgfId-1000456]##A simple _ManagedConnectionFactory_
implementation that is part of a connection definition, could be defined
as follows

======= [#50540619_pgfId-1000457]##ConnectionDefinition Annotation Usage Example

[#50540619_pgfId-1000468]## 

[#50540619_pgfId-1000473]## @ConnectionDefinition(
connectionFactory=com.wombat.ra.CF.class,

[#50540619_pgfId-1000474]## connectionFactoryImpl=

[#50540619_pgfId-1002176]## com.wombat.ra.CFImpl.class,

[#50540619_pgfId-1000476]## connection=com.wombat.ra.Conn.class,

[#50540619_pgfId-1000478]## connectionImpl=com.wombat.ra.ConnImpl.class)

[#50540619_pgfId-1000458]## public class ManagedConnectionFactoryImpl

[#50540619_pgfId-1000465]## implements ManagedConnectionFactory \{

[#50540619_pgfId-1000466]## ...

[#50540619_pgfId-1000467]## }

======= [#50540619_pgfId-1000489]##

image:conn-147.gif[image]

[#50540619_28779]##@Activation

[#50540619_pgfId-1000504]##The _ActivationSpec_ JavaBean contains the
configuration information pertaining to inbound connectivity from an EIS
instance. A resource adapter capable of message delivery to message
endpoints must provide a JavaBean class that implements the
_javax.resource.spi.ActivationSpec_ interface (see
link:conn.htm#50540558_43298[See ActivationSpec JavaBean and Inbound
Communication]) or annotate a JavaBean with the _Activation_ annotation
for each supported endpoint message listener type.

[#50540619_pgfId-1000703]##The _Activation_ annotation can be used by a
resource adapter provider to designate a JavaBean as an _ActivationSpec_
JavaBean (see link:conn.htm#50540558_43298[See ActivationSpec JavaBean
and Inbound Communication]). The _Activation_ annotation is applied to
the JavaBean class. The resource adapter provider may annotate one or
more JavaBeans with the _Activation_ annotation. The JavaBean is
required to implement the _javax.resource.spi.ActivationSpec_ interface
even if the JavaBean is annotated with the _Activation_ annotation.

======= [#50540619_pgfId-1000523]##Activation Annotation

[#50540619_pgfId-1001844]## 

[#50540619_pgfId-1000567]## package javax.resource.spi;

[#50540619_pgfId-1000568]## 

[#50540619_pgfId-1000575]## @Documented

[#50540619_pgfId-1000576]## @Retention(RUNTIME)

[#50540619_pgfId-1000577]## @Target(TYPE)

[#50540619_pgfId-1000538]## public @interface Activation \{

[#50540619_pgfId-1000531]## Class[] messageListeners();

[#50540619_pgfId-1000532]## }

[#50540619_pgfId-1000543]##The _messageListeners_ annotation element
indicates the message listener type(s) supported with the ActivationSpec
JavaBean. Together with the _messageListeners_ annotation element, this
annotation specifies information about the specific message listener
types supported by the messaging resource adapter.

======= [#50540619_pgfId-1001746]##Example

[#50540619_pgfId-1001747]##An _ActivationSpec_ JavaBean that is
associated with the _MyMessageListener_ message listener type, uses Bean
Validation annotations and the _validate_ method to validate the state
of the JavaBean could be defined as follows by the resource adapter
provider.

======= [#50540619_pgfId-1001752]##Activation Annotation Usage Example

[#50540619_pgfId-1001807]##

[#50540619_pgfId-1001814]## @Activation(messageListeners =

[#50540619_pgfId-1002183]## \{com.wombat.ra.MyMessageListener.class})

[#50540619_pgfId-1001768]## public class MyActivationSpec implements
ActivationSpec\{

[#50540619_pgfId-1001775]## //Use of Bean Validation annotations to
express

[#50540619_pgfId-1001786]## //validation requirements

[#50540619_pgfId-1001778]## @Size(min=5, max=5)

[#50540619_pgfId-1001776]## private int length;

[#50540619_pgfId-1001777]## 

[#50540619_pgfId-1001770]## //... other methods

[#50540619_pgfId-1001779]## //Use of validate() method is also allowed

[#50540619_pgfId-1001771]## public void validate() throws
InvalidPropertyException \{

[#50540619_pgfId-1001773]## //custom validation logic

[#50540619_pgfId-1001772]## }

[#50540619_pgfId-1001769]## }

======= [#50540619_pgfId-1000719]##

image:conn-147.gif[image]

[#50540619_68330]##@AdministeredObject

[#50540619_pgfId-1000720]##The _AdministeredObject_ annotation can be
used by the resource adapter provider to designate a JavaBean as an
administered object (see link:conn.htm#50540559_47231[See Administered
Objects]). Administered objects are specific to a messaging style or
message provider.

[#50540619_pgfId-1001323]##The _AdministeredObject_ annotation is
applied to the JavaBean class. A resource adapter implementation that
supports inbound communication may annotate one or more JavaBeans with
the _AdministeredObject_ annotation.

[#50540619_pgfId-1001066]## 

======= [#50540619_pgfId-1000779]##AdministeredObject Annotation

[#50540619_pgfId-1000756]## 

[#50540619_pgfId-1000780]## package javax.resource.spi;

[#50540619_pgfId-1000724]## 

[#50540619_pgfId-1000731]## @Documented

[#50540619_pgfId-1000732]## @Retention(RUNTIME)

[#50540619_pgfId-1000733]## @Target(TYPE)

[#50540619_pgfId-1000738]## public @interface AdministeredObject \{

[#50540619_pgfId-1000744]## Class[] adminObjectInterfaces() default \{};

[#50540619_pgfId-1000745]## }

[#50540619_pgfId-1000793]## 

[#50540619_pgfId-1001067]##The _adminObjectInterfaces_ annotation
element specifies the Java type of the interface implemented by the
administered object. This annotation element is optional and when this
value is not provided by the resource adapter provider, the application
server must use the following rules to determine the Java interfaces of
the administered object:

[#50540619_pgfId-1000815]##The following interfaces must be excluded
while determining the Java interfaces of the administered object:

[#50540619_pgfId-1000816]## _java.io.Serializable_

[#50540619_pgfId-1000817]## _java.io.Externalizable_

[#50540619_pgfId-1004362]##
_javax.resource.spi.ResourceAdapterAssociation_

[#50540619_pgfId-1000818]##If the JavaBean implements only one
interface, that interface is chosen as the Java Interface implemented by
the administered object

[#50540619_pgfId-1000819]##If the JavaBean class implements more than
one Java interface, the resource adapter provider must explicitly state
the interfaces supported by the administered object either through the
_adminObjectInterfaces_ annotation element or through the deployment
descriptor. It is an error if the resource adapter provider does not use
either of the two schemes to specify the Java types of the interfaces
supported by the administered object.

======= [#50540619_pgfId-1002365]##

image:conn-147.gif[image]

[#50540619_10882]##Resource Definition Annotations

[#50540619_pgfId-1002388]##Resource definition annotations allow an
application to be deployed into a Java EE environment with less
administrative configuration. Refer to the section titled “Resource
Definition and Configuration” in the “Resources, Naming and Injection”
chapter of the Java EE Platform Specification (see
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7]) for an overview of resource definition
annotations.

[#50540619_pgfId-1003057]##The _ConnectionFactoryDefinition_ and
_AdministeredObjectDefinition_ annotations described below are resource
definition annotations that aid the application developer in defining
and configuring resource adapter related resources needed for the
operational environment.

[#50540619_pgfId-1003463]##These resource definition annotations refer
to a resource adapter by name, from which the resources needs to be
created. The name of a resource adapter is decided as per the rules
defined in the sections titled “Deploying a Stand-Alone Java EE Module”
and “Deploying a Java EE Application” in the “Application Assembly and
Deployment” chapter of the Java EE Platform Specification.

[#50540619_pgfId-1004452]##When a resource adapter RAR packaged within a
Java EE application EAR needs to be referenced, the resource adapter
name may be prefixed with a “ _#_ ” character to portably refer to the
embedded resource adapter within the EAR. As an example, a Servlet
bundled in an enterprise archive EAR, may access the embedded resource
adapter foo.rar in the EAR, by using the name “#foo”.

[#50540619_pgfId-1003491]##These resource definition annotations must
only be defined in modules that have access to the resource adapter as
per the rules defined in link:conn.htm#50540561_67351[See Requirements].

[#50540619_pgfId-1004574]##These resource definition annotations must be
supported in all products that support the deployment process as defined
by the Java EE Platform Specification, and that support the Connector
API. For example, a product that includes support for both the Connector
API and the Servlet API must support the use of these resource
definition annotations in web applications.

[#50540619_pgfId-1004595]##It is not required to support the placement
of these resource definitions in classes packaged in resource adapter
modules.

======= [#50540619_pgfId-1003037]##@ConnectionFactoryDefinition

[#50540619_pgfId-1004122]##The _ConnectionFactoryDefinition_ annotation
is a resource definition annotation that is used to define a connector
connection factory and have it registered in JNDI. See the section
titled “Connection Factory Definition” in the “Resources, Naming, and
Injection” chapter of the Java EE Platform Specification for more
details on the connection factory resource definition annotation.

[#50540619_pgfId-1005444]##The section titled “Annotations and
Deployment Descriptors” of the “Resources, Naming, and Injection”
chapter of the Java EE Platform Specification describes how environment
entries created by these annotations may be specified or overridden
using deployment descriptor elements. The deployment descriptor element
_connection-factory_ that may be used to define or override the values
defined in the _ConnectionFactoryDefinition_ annotation is described in
the section titled “Common Java EE 7 XML Schema definitions” of the Java
EE Platform Specification.

[#50540619_pgfId-1004082]## 

======= [#50540619_pgfId-1004077]##ConnectionFactoryDefinition Annotation

[#50540619_pgfId-1002522]## 

[#50540619_pgfId-1002808]## package javax.resource;

[#50540619_pgfId-1002524]## import java.lang.annotation.Target;

[#50540619_pgfId-1002525]## import java.lang.annotation.Retention;

[#50540619_pgfId-1002526]## import java.lang.annotation.ElementType;

[#50540619_pgfId-1002527]## import java.lang.annotation.RetentionPolicy;

[#50540619_pgfId-1002528]## 

[#50540619_pgfId-1002529]## @Documented

[#50540619_pgfId-1002530]## @Target(\{ElementType.TYPE})

[#50540619_pgfId-1002531]## @Retention(RetentionPolicy.RUNTIME)

[#50540619_pgfId-1002532]## public @interface
ConnectionFactoryDefinition \{

[#50540619_pgfId-1002533]## String name();

[#50540619_pgfId-1002534]## String description() default "";

[#50540619_pgfId-1002535]## 

[#50540619_pgfId-1005447]## String resourceAdapter();

[#50540619_pgfId-1005448]## String interfaceName();

[#50540619_pgfId-1005449]## 

[#50540619_pgfId-1003340]## TransactionSupport.TransactionSupportLevel
transactionSupport()

[#50540619_pgfId-1002538]## default

[#50540619_pgfId-1002762]##
TransactionSupport.TransactionSupportLevel.NoTransaction;

[#50540619_pgfId-1002539]## int maxPoolSize() default -1;

[#50540619_pgfId-1002540]## int minPoolSize() default -1;

[#50540619_pgfId-1002541]## String[] properties() default \{};

[#50540619_pgfId-1002515]## }

[#50540619_pgfId-1002849]## 

[#50540619_pgfId-1003963]##The connection factory will be registered in
JNDI under the name specified in the mandatory _name_ annotation
element. It may be defined to be in any valid Java EE namespace, and the
namespace will determine the accessibility of the connection factory
from other components. The optional _description_ element specifies a
description of the connection factory.

[#50540619_pgfId-1005420]##The name of the resource adapter that the
connection factory must be created from must be indicated by the
_resourceAdapter_ element. The resource adapter must be available at
runtime prior to any attempt to access the connection factory.

[#50540619_pgfId-1005421]##The mandatory _interfaceName_ specifies the
fully qualified name of the connection factory interface class. The
_interfaceName_ annotation element is used by the container to choose
the appropriate connection definition included in the resource adapter,
and identify the _ManagedConnectionFactory_ that is used to create this
connection factory.

[#50540619_pgfId-1002861]##The _transactionSupport_ annotation element
specifies the level of transaction support the connection factory needs
to support. If a transaction support level is specified, it must be a
level of transaction support whose ordinal value in the
_TransactionSupport.TransactionSupportLevel_ enum is equal to or lesser
than the resource adapter’s transaction support classification.

[#50540619_pgfId-1002863]##The _minPoolSize_ annotation element
specifies the minimum number of connections that should be allocated for
a connection pool that backs this connnection factory resource. The
_maxPoolSize_ annotation element specifies the maximum number of
connections that should be allocated for a connection pool that backs
this connnection factory resource. The defaults for these attributes are
vendor specific (See the section titled “Resource Definition and
Configuration” in the “Resources, Naming, and Injection” of the Java EE
Platform Specification for more details on these default values).

[#50540619_pgfId-1002865]##The connection factory may be configured by
setting the annotation elements for the commonly used connection factory
properties as indicated above. Additional properties required by the
_ManagedConnectionFactory_ , that is associated with the connection
factory being defined, are specified through the _properties_ element.
Properties, if specified, that do not match configuration property names
of the _ManagedConnectionFactory_ or cannot be mapped to vendor-specific
properties may be ignored.

======= [#50540619_pgfId-1003770]##Example

[#50540619_pgfId-1003771]##A XA-capable connection factory resource may
be defined in a Servlet as follows:

[#50540619_pgfId-1003875]## 

======= [#50540619_pgfId-1003595]##ConnectionFactoryDefinition Annotation Definition Example

[#50540619_pgfId-1003615]## 

[#50540619_pgfId-1003988]##
@ConnectionFactoryDefinition(name="java:comp/eis/MyEISCF",

[#50540619_pgfId-1003616]## interfaceName="com.eis.ConnectionFactory",

[#50540619_pgfId-1003617]## resourceAdapter="MyEISRA",

[#50540619_pgfId-1003618]## transactionSupport=

[#50540619_pgfId-1003681]##
TransactionSupport.TransactionSupportLevel.XATransaction)

[#50540619_pgfId-1003689]## 

[#50540619_pgfId-1003894]##Once defined, a connector connection factory
resource may be referenced by a component, that has the standalone
_MyEISRA_ resource adapter visible to it as per the rules defined in
link:conn.htm#50540561_67351[See Requirements], using the _resource-ref_
deployment descriptor element or the _Resource_ annotation. For example,
the above connection factory could be referenced as follows in a
Stateless Session Bean in the same enterprise application archive.

[#50540619_pgfId-1003901]## 

======= [#50540619_pgfId-1003895]##ConnectionFactoryDefinition Annotation Usage Example

[#50540619_pgfId-1003896]## @Stateless

[#50540619_pgfId-1003693]## public class MySessionBean \{

[#50540619_pgfId-1003694]## @Resource(lookup = "java:comp/eis/MyEISCF")

[#50540619_pgfId-1003695]## com.eis.ConnectionFactory myCF;

[#50540619_pgfId-1003696]## ...

[#50540619_pgfId-1003682]## }

======= [#50540619_pgfId-1003683]##@ConnectionFactoryDefinitions

[#50540619_pgfId-1004623]##The _ConnectionFactoryDefinition_ annotation
is a resource definition annotation that is used to define a connector
connection factory and have it registered in JNDI. Since repeated
annotations are not allowed, the _ConnectionFactoryDefinitions_
annotation acts as a container for multiple connector connection factory
definitions.

======= [#50540619_pgfId-1004657]##ConnectionFactoryDefinitions Annotation

[#50540619_pgfId-1004658]## 

[#50540619_pgfId-1004659]## package javax.resource;

[#50540619_pgfId-1004660]## import java.lang.annotation.Target;

[#50540619_pgfId-1004661]## import java.lang.annotation.Retention;

[#50540619_pgfId-1004662]## import java.lang.annotation.ElementType;

[#50540619_pgfId-1004663]## import java.lang.annotation.RetentionPolicy;

[#50540619_pgfId-1004664]## 

[#50540619_pgfId-1004665]## @Documented

[#50540619_pgfId-1004666]## @Target(\{ElementType.TYPE})

[#50540619_pgfId-1004667]## @Retention(RetentionPolicy.RUNTIME)

[#50540619_pgfId-1004668]## public @interface
ConnectionFactoryDefinitions \{

[#50540619_pgfId-1004694]## ConnectionFactoryDefinition[] value();

[#50540619_pgfId-1004681]## }

[#50540619_pgfId-1004649]##The _value_ annotation element contains the
multiple connector connection factory definitions.

======= [#50540619_pgfId-1004814]##Example

[#50540619_pgfId-1004815]##Multiple connector connection factory
definitions may be declared in a Servlet as follows:

======= [#50540619_pgfId-1004816]##ConnectionFactoryDefinitions Annotation Definition Example

[#50540619_pgfId-1004754]## 

[#50540619_pgfId-1004770]## @ConnectionFactoryDefinitions(\{

[#50540619_pgfId-1004755]##
@ConnectionFactoryDefinition(name="java:comp/eis/MyXACF",

[#50540619_pgfId-1004756]##
interfaceName="com.eis.FooConnectionFactory",

[#50540619_pgfId-1004757]## resourceAdapter="MyEISRA1",

[#50540619_pgfId-1004758]## transactionSupport=XATransaction),

[#50540619_pgfId-1004789]##
@ConnectionFactoryDefinition(name="java:comp/eis/MyNoTXCF",

[#50540619_pgfId-1004790]##
interfaceName="com.eis.BarConnectionFactory",

[#50540619_pgfId-1004791]## resourceAdapter="MyEISRA2",

[#50540619_pgfId-1004781]## transactionSupport=NoTransaction)

[#50540619_pgfId-1004803]## })

[#50540619_pgfId-1004840]## 

[#50540619_pgfId-1004914]##Once defined, the connector connection
factory resources may be referenced by a component, that has the
standalone _MyEISRA1_ and _MyEISRA2_ resource adapters visible to it as
per the rules defined in link:conn.htm#50540561_67351[See Requirements],
using the _resource-ref_ deployment descriptor element or the _Resource_
annotation. For example, the above connection factories could be
referenced as follows in a Stateless Session Bean in the same enterprise
application archive.

======= [#50540619_pgfId-1004845]##ConnectionFactoryDefinitions Annotation Usage Example

[#50540619_pgfId-1004846]## @Stateless

[#50540619_pgfId-1004847]## public class MySessionBean \{

[#50540619_pgfId-1004848]## @Resource(lookup = "java:comp/eis/MyXACF")

[#50540619_pgfId-1004849]## com.eis.FooConnectionFactory xacf;

[#50540619_pgfId-1004850]## ...

[#50540619_pgfId-1004884]## @Resource(lookup = "java:comp/eis/MyNoTXCF")

[#50540619_pgfId-1004885]## com.eis.BarConnectionFactory notxcf;

[#50540619_pgfId-1004897]## ...

[#50540619_pgfId-1004851]## }

======= [#50540619_pgfId-1004612]##@AdministeredObjectDefinition

[#50540619_pgfId-1003600]##The _AdministeredObjectDefinition_ annotation
is a resource definition annotation that is used to define an
administered object and have it registered in JNDI. See the section
titled “Connector Administered Object Definition” in the “Resources,
Naming, and Injection” chapter of the Java EE Platform for more details
on the administered object definition annotation.

[#50540619_pgfId-1004182]##The section titled “Annotations and
Deployment Descriptors” of the “Resources, Naming, and Injection”
chapter of the Java EE Platform Specification describes how environment
entries created by these annotations may be specified or overridden
using deployment descriptor elements. The deployment descriptor element
_administered-object_ that may be used to define or override the values
defined in the _AdministeredObjectDefinition_ annotation, is described
in the section titled “Common Java EE 7 XML Schema definitions” of the
Java EE Platform Specification.

[#50540619_pgfId-1003220]## 

======= [#50540619_pgfId-1003163]##AdministeredObjectDefinition Annotation

[#50540619_pgfId-1003164]## 

[#50540619_pgfId-1003165]## package javax.resource;

[#50540619_pgfId-1003166]## import java.lang.annotation.Target;

[#50540619_pgfId-1003167]## import java.lang.annotation.Retention;

[#50540619_pgfId-1003168]## import java.lang.annotation.ElementType;

[#50540619_pgfId-1003169]## import java.lang.annotation.RetentionPolicy;

[#50540619_pgfId-1003170]## 

[#50540619_pgfId-1003171]## @Documented

[#50540619_pgfId-1003172]## @Target(\{ElementType.TYPE})

[#50540619_pgfId-1003173]## @Retention(RetentionPolicy.RUNTIME)

[#50540619_pgfId-1003174]## public @interface
AdministeredObjectDefinition \{

[#50540619_pgfId-1003175]## String name();

[#50540619_pgfId-1003176]## String description() default "";

[#50540619_pgfId-1003347]## 

[#50540619_pgfId-1003177]## String resourceAdapter();

[#50540619_pgfId-1003178]## String className();

[#50540619_pgfId-1003243]## String interfaceName() default “”;

[#50540619_pgfId-1003184]## 

[#50540619_pgfId-1003354]## String[] properties() default \{};

[#50540619_pgfId-1003185]## }

[#50540619_pgfId-1003186]## 

[#50540619_pgfId-1003187]##The administered object will be registered in
JNDI under the name specified in the mandatory _name_ annotation
element. It may be defined to be in any valid Java EE namespace, and the
namespace will determine the accessibility of the administered object
from other components. The optional _description_ element specifies a
description of the administered object.

[#50540619_pgfId-1005413]##The name of the resource adapter that the
administered object must be created from must be indicated by the
_resourceAdapter_ element. The resource adapter must be available at
runtime prior to any attempt to access the administered object.

[#50540619_pgfId-1005414]##The mandatory fully qualified name of the
administered object’s class must be indicated by the _className_
element. The fully qualified name of the administered object’s interface
must be indicated by the _interfaceName_ element, only if the class
indicated in the _className_ element implements more than one interface
and the application server cannot determine the unique Java interface of
the administered object according the rules defined in
link:conn.htm#50540619_68330[See @AdministeredObject].

[#50540619_pgfId-1004534]##Additional properties required to be
configured in the administered object are specified through the
_properties_ element. Properties, if specified, that do not match
configuration property names of the _AdministeredObject_ JavaBean or
cannot be mapped to vendor-specific properties may be ignored.

======= [#50540619_pgfId-1003785]##Example

[#50540619_pgfId-1003786]##A Queue Administered Object resource of an
embedded JMS resource adapter may be defined in a Servlet as follows:

======= [#50540619_pgfId-1003788]##AdministeredObjectDefinition Annotation Definition Example

[#50540619_pgfId-1003789]## 

[#50540619_pgfId-1004052]## @AdministeredObjectDefinition
(name="java:comp/eis/MyQueue",

[#50540619_pgfId-1003791]##
className="com.wombat.connector.jms.QueueImpl",

[#50540619_pgfId-1003792]## resourceAdapter="#MyJMSRA")

[#50540619_pgfId-1003795]## 

[#50540619_pgfId-1005255]##Once defined, the Queue resource may be
referenced by a component, that has the embedded _MyJMSRA_ resource
adapter visible to it as per the rules defined in
link:conn.htm#50540561_67351[See Requirements], using the _resource-ref_
deployment descriptor element or the _Resource_ annotation. For example,
the above administered object definition could be referenced as follows
in a Stateless Session Bean in the same enterprise application _EAR_
archive.

[#50540619_pgfId-1005259]##

======= [#50540619_pgfId-1005260]##AdministeredObjectDefinition Annotation Usage Example

[#50540619_pgfId-1003798]## @Stateless

[#50540619_pgfId-1003799]## public class MySessionBean \{

[#50540619_pgfId-1003800]## @Resource(lookup = "java:comp/eis/MyQueue")

[#50540619_pgfId-1003801]## javax.jms.Queue myQ;

[#50540619_pgfId-1004059]## ...

[#50540619_pgfId-1003802]## }

======= [#50540619_pgfId-1004940]##@AdministeredObjectDefinitions

[#50540619_pgfId-1004941]##The _AdministeredObjectDefinition_ annotation
is a resource definition annotation that is used to define an
administered object and have it registered in JNDI. Since repeated
annotations are not allowed, the _AdministeredObjectDefinitions_
annotation acts as a container for multiple administered object
definitions.

[#50540619_pgfId-1005208]## 

======= [#50540619_pgfId-1004942]##AdministeredObjectDefinitions Annotation

[#50540619_pgfId-1004943]## 

[#50540619_pgfId-1004944]## package javax.resource;

[#50540619_pgfId-1004945]## import java.lang.annotation.Target;

[#50540619_pgfId-1004946]## import java.lang.annotation.Retention;

[#50540619_pgfId-1004947]## import java.lang.annotation.ElementType;

[#50540619_pgfId-1004948]## import java.lang.annotation.RetentionPolicy;

[#50540619_pgfId-1004949]## 

[#50540619_pgfId-1004950]## @Documented

[#50540619_pgfId-1004951]## @Target(\{ElementType.TYPE})

[#50540619_pgfId-1004952]## @Retention(RetentionPolicy.RUNTIME)

[#50540619_pgfId-1004953]## public @interface
AdministeredObjectDefinitions \{

[#50540619_pgfId-1004954]## AdministeredObjectDefinition[] value();

[#50540619_pgfId-1004955]## }

[#50540619_pgfId-1005215]## 

[#50540619_pgfId-1004956]##The _value_ annotation element contains the
multiple administered object definitions.

======= [#50540619_pgfId-1004957]##Example

[#50540619_pgfId-1005128]##Multiple administered object definitions, for
instance a Queue and a Topic administered object, may be declared
together in a Servlet as follows:

[#50540619_pgfId-1005222]## 

======= [#50540619_pgfId-1005129]##AdministeredObjectDefinitions Annotation Definition Example

[#50540619_pgfId-1005130]## 

[#50540619_pgfId-1004961]## @AdministeredObjectDefinitions(\{

[#50540619_pgfId-1005052]## @AdministeredObjectDefinition
(name="java:comp/eis/MyQueue",

[#50540619_pgfId-1005053]##
className="com.wombat.connector.jms.QueueImpl",

[#50540619_pgfId-1005054]## resourceAdapter="MyJMSRA"),

[#50540619_pgfId-1005075]## @AdministeredObjectDefinition
(name="java:comp/eis/MyTopic",

[#50540619_pgfId-1005076]##
className="com.wombat.connector.jms.TopicImpl",

[#50540619_pgfId-1005088]## resourceAdapter="MyJMSRA")

[#50540619_pgfId-1005090]## })

[#50540619_pgfId-1005229]## 

[#50540619_pgfId-1004972]##Once defined, the Queue and Topic
administered resources may be referenced by a component, that has the
standalone _MyJMSRA_ resource adapter visible to it as per the rules
defined in link:conn.htm#50540561_67351[See Requirements], using the
_resource-ref_ deployment descriptor element or the _Resource_
annotation. For example, the above administered objects could be
referenced as follows in a Stateless Session Bean in the same enterprise
application archive.

[#50540619_pgfId-1005236]## 

======= [#50540619_pgfId-1004977]##AdministeredObjectDefinitions Annotation Usage Example

[#50540619_pgfId-1004978]## @Stateless

[#50540619_pgfId-1004979]## public class MySessionBean \{

[#50540619_pgfId-1005159]## @Resource(lookup = "java:comp/eis/MyQueue")

[#50540619_pgfId-1005160]## javax.jms.Queue myQ;

[#50540619_pgfId-1004982]## ...

[#50540619_pgfId-1005172]## @Resource(lookup = "java:comp/eis/MyTopic")

[#50540619_pgfId-1005173]## javax.jms.Queue myT;

[#50540619_pgfId-1004985]## ...

[#50540619_pgfId-1004986]## }

====== [#50540546_pgfId-874]## 

======= [#50540546_pgfId-5529]##

image:conn-148.gif[image]

[#50540546_42817]##API Requirements

image:conn-149.gif[image]

[#50540546_pgfId-999458]##This chapter specifies the API requirements
for the resource adapter and application server implementations.

======= [#50540546_pgfId-999459]##

image:conn-150.gif[image]

Requirements of the Application Server

[#50540546_pgfId-999460]##The application server must support the
deployment of a resource adapter in EJB and Web containers.

[#50540546_pgfId-999461]##The application server must support all the
connector architecture API requirements in EJB and Web containers.

[#50540546_pgfId-999462]##A single resource adapter instance may be
shared by both a Web container and an EJB container.

[#50540546_pgfId-999463]##The application server must support all
versions of the resource adapter DTDs (Document Type Definitions) and
the resource adapter XML Schema Definition. This ensures that resource
adapters written to previous versions of this specification can be
deployed on products supporting the current version of this
specification.

======= [#50540546_pgfId-999464]##

image:conn-150.gif[image]

Requirements of the Resource adapter

[#50540546_pgfId-999465]##The following matrix specifies the required
(+) and optional (?) API requirements on a resource adapter.

[#50540546_pgfId-999466]##LM - Lifecycle management contract

[#50540546_pgfId-999467]##WM - Work management contract

[#50540546_pgfId-999468]##MI - Message Inflow contract

[#50540546_pgfId-999469]##TI - Transaction Inflow contract

[#50540546_pgfId-999470]##CM - Connection management contract

[#50540546_pgfId-999471]##TM- Transaction management contract

[#50540546_pgfId-999472]##SM - Security management contract

[#50540546_pgfId-999564]##CCI - Common Client Interface

======= [#50540546_pgfId-999475]##Resource Adapter API Requirements

[#50540546_pgfId-999493]## 

[#50540546_pgfId-999495]##LM

[#50540546_pgfId-999497]##WM

[#50540546_pgfId-999499]##MI

[#50540546_pgfId-999501]##TI

[#50540546_pgfId-999503]##CM

[#50540546_pgfId-999505]##TM

[#50540546_pgfId-999507]##SM

[#50540546_pgfId-999509]##CCI

[#50540546_pgfId-999511]##Outbound

[#50540546_pgfId-999513]## ?

[#50540546_pgfId-999515]## ?

[#50540546_pgfId-999517]##  

[#50540546_pgfId-999519]##  

[#50540546_pgfId-999521]## +

[#50540546_pgfId-999523]## +

[#50540546_pgfId-999525]## +

[#50540546_pgfId-999527]## ?

[#50540546_pgfId-999529]##Inbound

[#50540546_pgfId-999531]## +

[#50540546_pgfId-999533]## ?

[#50540546_pgfId-999535]## +

[#50540546_pgfId-999537]## ?

[#50540546_pgfId-999539]##

[#50540546_pgfId-999541]##

[#50540546_pgfId-999543]##

[#50540546_pgfId-999545]##

[#50540546_pgfId-999547]##Bi-directional

[#50540546_pgfId-999549]## +

[#50540546_pgfId-999551]## ?

[#50540546_pgfId-999553]## +

[#50540546_pgfId-999555]## ?

[#50540546_pgfId-999557]## +

[#50540546_pgfId-999559]## +

[#50540546_pgfId-999561]## +

[#50540546_pgfId-999563]## ?

[#50540546_pgfId-999565]##Note, the message inflow contract must be
supported by an inbound resource adapter.

======= [#50540546_pgfId-999567]##

image:conn-150.gif[image]

[#50540546_81739]##JavaBean Requirements

[#50540546_pgfId-999568]##The various JavaBean implementations provided
by a resource adapter must adhere to the following rules:

[#50540546_pgfId-999569]##A JavaBean implementation must contain a null
constructor.

[#50540546_pgfId-999570]##A JavaBean implementation must provide getter
and setter methods, to access and modify the public properties of the
JavaBean instance.

[#50540546_pgfId-999571]##Note, for JavaBean serialization, implementing
the java.io.Serializable interface is not necessary. The XML long-term
persistence mechanism introduced in J2SE 1.4 can save the state of a
JavaBean in an XML format that is resilient to version changes in the
implementation of that JavaBean. Refer to Java SE (see
link:conn.htm#50540564_25780[See Java Platform, Standard Edition 7API
Specification]) classes _java.beans.XMLEncoder_ ,
_java.beans.XMLEncoder_ , and _java.beans.PersistenceDelegate_ .

[#50540546_pgfId-999578]##For details, refer to JavaBeans specification
(see link:conn.htm#50540564_89998[See JavaBeans Specification 1.01 Final
Release]).

======= [#50540546_pgfId-998874]##

image:conn-150.gif[image]

[#50540546_80258]##Equality Constraints

[#50540546_pgfId-999665]##This section specifies the equality
constraints on object implementations of the various types defined by
this specification.

======= [#50540546_pgfId-999666]##Equality based on Java Object Identity

[#50540546_pgfId-999668]##The candidate objects are implementations of
MessageEndpointFactory, ActivationSpec, _ManagedConnection_ types.

[#50540546_pgfId-999671]##These objects, in general, should not override
the default _equals_ and _hashCode_ methods. However, if these methods
are overridden, they must preserve the equality constraints based on
Java object identity; that is, no two objects are considered equal.

======= [#50540546_pgfId-999676]##Equality Based on Config Properties and Class Information

[#50540546_pgfId-999678]##The candidate objects are implementations of
ResourceAdapter, _ManagedConnectionFactory_ , _ConnectionRequestInfo_ ,
java.security.Principal, org.ietf.jgss.GSSCredential, GenericCredential,
_PasswordCredential_ , and _Record_ types.

[#50540546_pgfId-999681]##These objects must override the default
_equals_ and _hashCode_ methods, and provide an equality behavior based
on the configuration properties and class information. That is, any two
objects can be equal only if their configuration properties match and
they have the same class implementation.

[#50540546_pgfId-999793]## 

====== [#50540561_pgfId-874]## 

======= [#50540561_pgfId-5529]##

image:conn-151.gif[image]

[#50540561_85904]##Packaging Requirements

image:conn-152.gif[image]

[#50540561_pgfId-999458]##This chapter specifies requirements for
packaging and deploying a resource adapter. These requirements support a
modular, portable deployment of a resource adapter into a Java EE
compliant application server.

======= [#50540561_pgfId-999459]##

image:conn-153.gif[image]

Overview

[#50540561_pgfId-999460]##A resource adapter provider develops a set of
Java interfaces and classes as part of its implementation of a resource
adapter. These Java classes implement connector architecture-specified
contracts and EIS-specific functionality provided by the resource
adapter. The development of a resource adapter may also require the use
of native libraries specific to the underlying EIS.

[#50540561_pgfId-999461]##The Java interfaces and classes are packaged
together (with required native libraries, help files, documentation, and
other resources) with a deployment descriptor to create a resource
adapter module. A deployment descriptor defines the contract between a
resource adapter provider and a deployer for the deployment of a
resource adapter. With the introduction of a simplified API through the
use of Java language annotations described in
link:conn.htm#50540619_87413[See Metadata Annotations], it is optional
for a resource adapter provider and a deployer to provide a deployment
descriptor along with a resource adapter module.

[#50540561_pgfId-1050668]## 

[#50540561_pgfId-999490]##Packaging and Deployment Lifecycle of a
Resource adapter

image:conn-154.gif[image]

[#50540561_pgfId-999491]##A resource adapter module corresponds to a
Java EE module in terms of the Java EE composition hierarchy. Refer to
the Java EE Platform specification (see link:conn.htm#50540564_22967[See
Java Platform, Enterprise Edition (Java EE) Specification, version 7])
for more details on the deployment of Java EE modules and applications.
A Java EE module represents the basic unit of composition of a Java EE
application. Examples of Java EE modules include EJB modules,
application client modules, and web client modules.

[#50540561_pgfId-999495]##A resource adapter module must be deployed
either:

[#50540561_pgfId-999496]##Directly into an application server as a
stand-alone unit or,

[#50540561_pgfId-999497]##Deployed with a Java EE application that
consists of one or more Java EE modules in addition to a resource
adapter module. The Java EE specification specifies requirements for the
assembly and packaging of Java EE applications.

[#50540561_pgfId-999501]##The following figure shows the composition
model of a resource adapter module with other Java EE modules.

[#50540561_pgfId-999680]##[#50540561_81850]##Deployment of a Resource
Adapter Module

image:conn-155.gif[image]

[#50540561_pgfId-999681]##The stand-alone deployment of a resource
adapter module into an application server is typically done to support
scenarios in which multiple Java EE applications share a single resource
adapter module. However, in certain scenarios, a resource adapter module
is required only by components within a single Java EE application. The
deployment option of a resource adapter module bundled with a Java EE
application supports the latter scenario.

[#50540561_pgfId-999682]##At deployment time, a resource adapter
deployer deploys a resource adapter module to an application server.

======= [#50540561_pgfId-999683]##

image:conn-153.gif[image]

Packaging

[#50540561_pgfId-999684]##The file format for a packaged resource
adapter module defines the contract between a resource adapter provider
and deployer.

[#50540561_pgfId-999685]##A packaged resource adapter includes the
following elements:

[#50540561_pgfId-999686]##Java classes and interfaces that are required
for the implementation of both the connector architecture contracts and
the functionality of the resource adapter.

[#50540561_pgfId-999687]##Utility Java classes for the resource adapter.

[#50540561_pgfId-999688]##Platform-dependent native libraries required
by the resource adapter.

[#50540561_pgfId-999689]##Help files and documentation.

[#50540561_pgfId-999690]##Descriptive meta information that ties the
above elements together.

======= [#50540561_pgfId-999691]##Resource Adapter Archive

[#50540561_pgfId-999692]##A resource adapter must be packaged using the
Java Archive (JAR) format in to an RAR ( _r_ esource adapter _ar_
chive). For example, a resource adapter for EIS A can be packaged as an
archive with a filename _eisA.rar_ .

[#50540561_pgfId-999695]##The _RAR_ file may contain a deployment
descriptor based on the format specified in
link:conn.htm#50540561_80713[See Requirements]. If a resource adapter
module chooses to bundle a deployment descriptor, the deployment
descriptor must be stored with the name _META-INF/ra.xml_ in the RAR
file.

[#50540561_pgfId-999697]##The Java interfaces, implementation, and
utility classes required by the resource adapter must be packaged as one
or more JAR files as part of the resource adapter module. A JAR file
must use the _.jar_ file extension.

[#50540561_pgfId-1054344]##The resource adapter may also use the library
support mechanisms described in the Java EE Platform Specification to
specify library dependencies. See the link:conn.htm#50540564_22967[See
Java Platform, Enterprise Edition (Java EE) Specification, version 7]
for more information on the Java EE Platform’s support for libraries.

[#50540561_pgfId-999698]##The platform-specific libraries required by
the resource adapter must be packaged with the resource adapter module.

======= [#50540561_pgfId-999699]##RAR Contents

[#50540561_pgfId-999700]##The following table describes the contents of
a RAR file, where each element is located within the RAR file and
whether they are required.

======= [#50540561_pgfId-999703]##Description of RAR File Contents

[#50540561_pgfId-999709]##Contents of RAR file

[#50540561_pgfId-999711]##Requirements

[#50540561_pgfId-999713]##Relative Location Within RAR File

[#50540561_pgfId-999715]##Deployment Descriptor

[#50540561_pgfId-999717]##Optional

[#50540561_pgfId-999719]## _META-INF/ra.xml_

[#50540561_pgfId-999721]##howto.html, image files, locale files, etc.

[#50540561_pgfId-999723]##Optional

[#50540561_pgfId-999725]##Arbitrary (that is, could be at root level or
at a sub-level).

[#50540561_pgfId-999727]##JAR files

[#50540561_pgfId-999729]##Optional

[#50540561_pgfId-999731]##Arbitrary

[#50540561_pgfId-999733]##Platform-specific native libraries

[#50540561_pgfId-999735]##Optional

[#50540561_pgfId-999737]##Arbitrary

======= [#50540561_pgfId-999738]##Sample Directory Structure

[#50540561_pgfId-999739]##The following lists the files in a sample
resource adapter module:

[#50540561_pgfId-999740]## _META-INF/ra.xml_

[#50540561_pgfId-999741]##howto.html

[#50540561_pgfId-999742]##images/icon.jpg

[#50540561_pgfId-999743]## _ra.jar_

[#50540561_pgfId-999744]## _cci.jar_

[#50540561_pgfId-999745]## _win.dll_

[#50540561_pgfId-999746]## _solaris.so_

[#50540561_pgfId-999748]##In the above example, _ra.xml_ is the
deployment descriptor. _ra.jar_ and _cci.jar_ contain Java interfaces
and implementation classes for the resource adapter. _win.dll_ and
_solaris.so_ are examples of native libraries.

[#50540561_pgfId-999749]##Note that a resource adapter module can be
structured such that various elements are partitioned using
subdirectories.

======= [#50540561_pgfId-999750]##[#50540561_67351]##Requirements

[#50540561_pgfId-999751]##When a standalone resource adapter _RAR_ is
deployed, the resource adapter may be made available to all Java EE
applications in the application server. The application server, however,
must make the standalone resource adapter RAR available to applications
that meet the requirements listed in link:conn.htm#50540561_19166[See
Class Loading Requirements].

[#50540561_pgfId-999752]##When a resource adapter _RAR_ packaged within
a Java EE application _EAR_ (also referred to as an “embedded RAR”) is
deployed, the resource adapter must be made available only to the Java
EE application with which it is packaged.

======= [#50540561_pgfId-999754]##

image:conn-153.gif[image]

[#50540561_19166]##Class Loading Requirements

[#50540561_pgfId-1048178]##This specification does not define the exact
arrangement or hierarchy of classloaders that must be used by a
container. This section of the specification defines the requirements in
terms of what applications must have visibility to a resource adapter
RAR.

[#50540561_pgfId-1048208]##A resource adapter RAR packaged within a Java
EE application EAR, as specified in link:conn.htm#50540561_67351[See
Requirements] above, must be made available only to the Java EE
application with which it is packaged.

[#50540561_pgfId-1048207]##The requirements below specify the
applications that must have visibility to a standalone resource adapter
RAR.

[#50540561_pgfId-1048215]##If an application references a resource using
a deployment descriptor entry or a corresponding annotation, and that
resource is supplied by a standalone resource adapter, that standalone
resource adapter must be made available to the application.

[#50540561_pgfId-1048189]##If an application references an extension
using the Extension Mechanism Architecture (see the section titled
“Library Support” in the “Application Assembly and Deployment” chapter
of the link:conn.htm#50540564_22967[See Java Platform, Enterprise
Edition (Java EE) Specification, version 7]) and a jar file within a
standalone resource adapter supplies that extension, the standalone
resource adapter must be made available to the application.

[#50540561_pgfId-1050454]##If a standalone resource adapter is
configured to deliver messages to a message-driven bean in an
application, the standalone resource adapter must be made available to
the application.

[#50540561_pgfId-1050461]##Even lacking such a reference, it must be
possible for the Deployer to configure an application so that any
particular standalone resource adapter is available to the application.

[#50540561_pgfId-1048218]##An application that satisfy the requirements
can portably assume the visibility of the corresponding standalone
resource adapter RAR. An application server may choose to make all
deployed standalone resource adapter RARs available to all applications.

======= [#50540561_pgfId-1048173]##

image:conn-153.gif[image]

[#50540561_49014]##Deployment

[#50540561_pgfId-999755]##A deployment descriptor defines the contract
between a resource adapter provider and a deployer. It captures the
declarative information that is intended for the deployer to enable
deployment of a resource adapter in a target operational environment.
Deployment information may also provided by the metadata annotations
described in link:conn.htm#50540619_87413[See Metadata Annotations]. The
container is required to follow the rules defined in
link:conn.htm#50540619_65903[See Deployment Descriptors and Annotations]
to derive the final deployment information.

[#50540561_pgfId-999756]##A resource adapter module must be deployed
based on the deployment requirements specified by the resource adapter
provider in the deployment descriptor and through metadata annotations.
link:conn.htm#50540561_30009[See Resource Adapter XML Schema Definition]
specifies the XML Schema for the deployment descriptor for a resource
adapter module. See link:conn.htm#50540619_87413[See Metadata
Annotations] for more information on the metadata annotations that can
be employed.

[#50540561_pgfId-999763]##The J2EE Deployment API Specification (see
link:conn.htm#50540564_81680[See J2EE Deployment API Specification])
describes the general deployment procedure in detail.

======= [#50540561_pgfId-999764]##[#50540561_39795]##Resource Adapter Provider

[#50540561_pgfId-999765]##The resource adapter provider is responsible
for specifying the deployment descriptor for a resource adapter.

[#50540561_pgfId-999766]##The resource adapter provider may specify the
following information in the deployment descriptor or through
metadata-annotations:

[#50540561_pgfId-999767]##General information: The resource adapter
provider should specify the following general information:

[#50540561_pgfId-999768]##Name of the resource adapter.

[#50540561_pgfId-999769]##Description of the resource adapter.

[#50540561_pgfId-999770]##URI of a UI icon for the resource adapter.

[#50540561_pgfId-999771]##Name of the vendor who provides the resource
adapter.

[#50540561_pgfId-999772]##Licensing requirement and description. Note
that the management of licensing is outside the scope of the connector
architecture.

[#50540561_pgfId-999773]##Type of the EIS system supported. For example,
the name of a specific database, ERP system, or mainframe TP system
without any versioning information.

[#50540561_pgfId-999774]##Version of the connector architecture
specification, represented as a string, supported by the resource
adapter.

[#50540561_pgfId-999775]##Version of the resource adapter represented as
a string

[#50540561_pgfId-1050272]##Required _WorkContext_ classes: A resource
adapter may optionally provide a list of _required-work-context_
elements representing a list of _WorkContext_ classes that a resource
adapter requires the application server to support. . The resource
adapter provider must specify the name of a Java _Class_ that implements
the _javax.resource.spi.work.WorkContext_ interface.

[#50540561_pgfId-999776]##ResourceAdapter class: The resource adapter
provider must specify, if available, the name of a Java class that
implements the _javax.resource.spi.ResourceAdapter_ interface. The
implementation of this class must be a JavaBean. A ResourceAdapter
JavaBean is configured by the resource adapter deployer during
deployment. The application server must instantiate exactly one
ResourceAdapter JavaBean per functional resource adapter instance. The
application server must create at least one functional resource adapter
instance per resource adapter deployment. The configuration properties
are specific to a resource adapter.

[#50540561_pgfId-999777]##ResourceAdapter class configuration
properties: The resource adapter provider may optionally provide a set
of configuration properties for the ResourceAdapter instance, which may
be used by the resource adapter deployer to configure a ResourceAdapter
JavaBean instance.

[#50540561_pgfId-999778]##Outbound resource adapter information:

[#50540561_pgfId-999779]## _ManagedConnectionFactory_ class: The
resource adapter provider must specify the name of the Java class that
implements the _javax.resource.spi.ManagedConnectionFactory_ interface.
The implementation must be a JavaBean.

[#50540561_pgfId-999780]##Typically, a _ManagedConnectionFactory_ class
is used to produce _ConnectionFactory_ and _Connection_ objects of a
particular type. In order to produce objects of different types, a
separate _ManagedConnectionFactory_ class can be used for each supported
type. The deployment descriptor element connection-definition can be
used to specify different _ManagedConnectionFactory_ classes, each
pertaining to a particular type.

[#50540561_pgfId-999781]## _ConnectionFactory_ interface and
implementation class: The resource adapter provider must specify the
fully-qualified name of the Java interface and implementation class for
each connection factory supported by the resource adapter.

[#50540561_pgfId-999782]## _Connection_ interface and implementation
class: The resource adapter provider must specify the fully-qualified
name of the Java interface and implementation class for each connection
supported by the resource adapter.

[#50540561_pgfId-999783]##Transactional support: The resource adapter
provider must specify the level of transaction support provided by the
resource adapter implementation. The level of transaction support must
be any one of the following: _NoTransaction_ , _LocalTransaction_ , or
_XATransaction_ . Note that this support is specified for a resource
adapter and not for the underlying EIS instance. +
_NoTransaction_ : The resource adapter does not support either the
resource manager local or JTA transactions. It does not implement either
_XAResource_ or _LocalTransaction_ interfaces. +
_LocalTransaction_ : The resource adapter supports resource manager
local transactions by implementing the _LocalTransaction_ interface. The
local transaction management contract is specified in
link:conn.htm#50540572_84546[See Local Transaction Management
Contract]. +
_XATransaction_ : The resource adapter supports both resource manager
local and JTA transactions by implementing the _LocalTransaction_ and
_XAResource_ interfaces respectively. The requirements for supporting
the _XAResource_ based contract are specified in
link:conn.htm#50540572_98900[See XAResource-based Transaction Contract].

[#50540561_pgfId-999793]##Configurable properties per
_ManagedConnectionFactory_ instance: The resource adapter provider
specifies the name, type, description, and an optional default value for
the properties that have to be configured on a per
_ManagedConnectionFactory_ instance.

[#50540561_pgfId-999794]##Each _ManagedConnectionFactory_ instance
creates connections to a specific EIS instance based on the properties
configured on the _ManagedConnectionFactory_ instance. The configurable
properties are specified only once in the deployment descriptor, even
though a resource adapter can be used to configure multiple
_ManagedConnnectionFactory_ instances that create connections to
different instances of the same underlying EIS type.

[#50540561_pgfId-999795]##Authentication mechanism: The resource adapter
provider must specify all authentication mechanisms supported by the
resource adapter. This includes the support provided by the resource
adapter implementation but not by the underlying EIS instance. The
standard values are: _BasicPassword_ and _Kerbv5_ . A resource adapter
may support one or more of these authentication mechanisms.

======= [#50540561_pgfId-999796]## _BasicPassword:_ user-password based authentication mechanism that is specific to an EIS.

======= [#50540561_pgfId-999797]## _Kerbv5:_ Kerberos version 5 based authentication mechanism.

[#50540561_pgfId-999798]##If no authentication mechanism is specified as
part of the deployment descriptor, the resource adapter supports no
standard security authentication mechanism as part of the security
contract.

[#50540561_pgfId-999799]##Reauthentication support: The resource adapter
provider must specify whether a resource adapter supports
re-authentication of an existing physical connection.

[#50540561_pgfId-999800]##Extended security permissions: The security
permissions listed in the deployment descriptor are different from those
required by the default permission set. Refer to
link:conn.htm#50540566_64651[See Runtime Environment] for more details
on security permissions.

[#50540561_pgfId-999804]##Inbound resource adapter information

[#50540561_pgfId-999805]##Message listener type: The resource adapter
provider must specify one or more message listener types supported by a
messaging resource adapter. The message listener type is the name of the
Java type of a message listener interface.

[#50540561_pgfId-999806]##ActivationSpec class: The resource adapter
provider must specify the Java class name of the activation
specification class. The implementation of this class must be a
JavaBean. An ActivationSpec specifies an activation specification per
message listener type. The ActivationSpec is configured by a message
endpoint deployer during application deployment.

[#50540561_pgfId-999807]##Required ActivationSpec properties: The
resource adapter provider may optionally specify a set of required
properties for an ActivationSpec. This is useful in validating the
ActivationSpec during endpoint application deployment.

[#50540561_pgfId-1050255]##ActivationSpec class configuration
properties: The resource adapter provider may optionally provide a set
of configuration properties for the _ActivationSpec_ instance, which may
be used by the resource adapter deployer to configure a _ActivationSpec_
JavaBean instance

[#50540561_pgfId-999808]##Administered objects: The resource adapter
provider must specify the name of the Java type of the interface
implemented by an administered object, which must be a JavaBean, and its
Java class name. Administered objects are specific to a messaging style
or message provider. There may be zero to more administered objects
specified. There must be no more than one administered object definition
with the same interface and Class name combination in a resource
adapter.

[#50540561_pgfId-999809]##The deployment descriptor specified by the
resource adapter provider for its resource adapter must be consistent
with the XML Schema specified in link:conn.htm#50540561_30009[See
Resource Adapter XML Schema Definition]. Metadata annotations are
detailed in link:conn.htm#50540619_87413[See Metadata Annotations].

[#50540561_pgfId-999813]##

image:conn-156.gif[image]

The connector architecture does not specify standard deployment
properties for the configuration of non-Java parts, such as native
libraries, of a resource adapter. This applies only to the properties of
the non-Java part not exposed through the Java part of the resource
adapter. The non-Java part of a resource adapter should be configured
using mechanisms specific to a resource adapter.

image:conn-156.gif[image]

======= [#50540561_pgfId-999814]##Deployer

[#50540561_pgfId-999815]##During resource adapter deployment, the
deployer is responsible for configuring a resource adapter. The
configuration of a resource adapter is based on the properties defined
in the deployment descriptor and metadata annotations (see
link:conn.htm#50540619_65903[See Deployment Descriptors and
Annotations]) as part of the resource adapter module.

======= [#50540561_pgfId-999816]##Standalone Resource Adapter Module

[#50540561_pgfId-999817]##During deployment, the deployer configures and
deploys a resource adapter based on the deployment descriptor
information. The deployer may choose to override the information in the
deployment descriptor.

======= [#50540561_pgfId-999818]##Resource Adapter Module with Java EE Application

[#50540561_pgfId-999822]##Refer to the Java EE platform specification
(see link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition
(Java EE) Specification, version 7]) for the requirements specified for
the deployment of a Java EE application.

======= [#50540561_pgfId-999823]##Configuration

[#50540561_pgfId-999824]##To configure a resource adapter, the deployer
must configure a ResourceAdapter JavaBean instance. The configuration
properties are specific to a resource adapter. In the case of outbound
resource adapters, the deployer must do the following tasks:

[#50540561_pgfId-999827]##Configure one or more property sets (one
property set per _ManagedConnectionFactory_ instance) for creating
connections to various underlying EIS instances. The deployer creates a
property set to set valid values for various configurable fields. The
configuration of each field is based on the name, type and description
of the field specified in the deployment descriptor or metadata
annotations described in link:conn.htm#50540619_87413[See Metadata
Annotations].

[#50540561_pgfId-999828]##Each property set represents a specific
configuration to be set on a _Managed-ConnectionFactory_ instance for
creating connections to a specific EIS instance. Since a resource
adapter may be used to create connections to multiple instances of the
same EIS, there can be multiple property sets for a single resource
adapter, one for each configured _ManagedConnectionFactory_ instance.

[#50540561_pgfId-999829]##Configure application server mechanisms for
transaction management based on the level of transaction support
specified by the resource adapter.

[#50540561_pgfId-999830]##Configure security in the target operational
environment based on the security requirements specified by the resource
adapter in its deployment descriptor or annotations discussed in
link:conn.htm#50540619_57131[See @SecurityPermission].

======= [#50540561_pgfId-999831]##Security Configuration

[#50540561_pgfId-999832]##The security configuration is based on:

[#50540561_pgfId-999833]##Whether the resource adapter supports a
specific authentication mechanism and credentials interface. The
deployment descriptor includes an element _authentication-mechanism_
that specifies a supported authentication mechanism and the
corresponding credentials interface.

[#50540561_pgfId-999834]##Whether the application server is configured
to support a specific mechanism type. For example, if the application
server is not configured for the Kerberos mechanism, it is not capable
of passing Kerberos credentials to the resource adapter as part of the
security contract.

[#50540561_pgfId-999835]##During the deployment, the deployer may,
though is not required to, check whether or not an underlying EIS
supports the same capabilities, such as transaction support and
authentication mechanisms, as the corresponding resource adapter.

[#50540561_pgfId-999836]##For example, if a resource adapter provides
implementation support for Kerberos based authentication but the
underlying EIS instance does not support Kerberos, the deployer may
decide not to configure Kerberos for authentication to this EIS
instance. However if the deployer does not perform such checks during
deployment, any invalid configurations should lead to runtime
exceptions.

======= [#50540561_pgfId-999837]##

image:conn-153.gif[image]

Interfaces/Classes

[#50540561_pgfId-999838]##This section specifies the Java classes and
interfaces related to the configuration of a resource adapter in an
operational environment.

======= [#50540561_pgfId-999840]##[#50540561_35502]##ResourceAdapter

[#50540561_pgfId-999841]##The Java class which implements the interface
_javax.resource.spi.ResourceAdapter_ must be a JavaBean. The
_ResourceAdapter_ JavaBean may also be specified through the _Connector_
annotation (see link:conn.htm#50540619_30627[See @Connector]).

[#50540561_pgfId-1050691]##A _ResourceAdapter_ JavaBean represents
exactly one functional resource adapter unit or instance. The
application server must instantiate exactly one ResourceAdapter JavaBean
per functional resource adapter instance. The application server must
create at least one functional resource adapter instance per resource
adapter deployment. A _ResourceAdapter_ JavaBean instance is configured
by the resource adapter deployer during deployment. The configuration
properties are specific to a resource adapter.

[#50540561_pgfId-999842]##The resource adapter provider may optionally
provide a set of configuration properties, specified in the resource
adapter deployment descriptor, for the _ResourceAdapter_ instance, which
is used by the resource adapter deployer to configure the
_ResourceAdapter_ JavaBean instance during deployment. The deployer may
override the configuration information in the deployment descriptor
while configuring the _ResourceAdapter_ JavaBean instance.

======= [#50540561_pgfId-999843]##Requirements

[#50540561_pgfId-999844]##The _ResourceAdapter_ implementation must be a
JavaBean.

======= [#50540561_pgfId-999846]##[#50540561_78300]##ManagedConnectionFactory

[#50540561_pgfId-999847]##The class that implements the
_ManagedConnectionFactory_ interface supports a set of properties. These
properties provide information required by the
_ManagedConnectionFactory_ for the creation of physical connections to
the underlying EIS.

[#50540561_pgfId-999848]##A resource adapter must implement the
_ManagedConnectionFactory_ interface as a JavaBean. As a JavaBean
implementor, the resource adapter can also provide a _BeanInfo_ class
that implements the _java.beans.BeanInfo_ interface and provides
explicit information about the methods and properties supported by the
_ManagedConnectionFactory_ implementation class.

[#50540561_pgfId-999849]##The implementation of
_ManagedConnectionFactory_ as a JavaBean improves the ability of tools
that are based on the JavaBeans framework to manage the configuration of
_ManagedConnectionFactory_ instances.

======= [#50540561_pgfId-999850]##Requirements

[#50540561_pgfId-999851]##The _ManagedConnectionFactory_ implementation
must be a JavaBean. The _ManagedConnectionFactory_ implementation may
also be annotated with the _ConnectionDefinition_ annotation (see
link:conn.htm#50540619_28377[See @ConnectionDefinition and
@ConnectionDefinitions]). Any specified _ManagedConnectionFactory_
property in the deployment descriptor which does not have a matching
property in the _ManagedConnectionFactory_ JavaBean should be treated as
an error.

======= [#50540561_pgfId-999852]##Properties Conventions

[#50540561_pgfId-999853]##The _ManagedConnectionFactory_ implementation
class must provide getter and setter methods for each of its supported
properties. The supported properties must be consistent with the
specification of configurable properties specified in the deployment
descriptor. With the introduction of metadata annotations for specifying
configuration properties, the resource adapter provider is not required
to specify the configuration properties through the deployment
descriptor and may use the _ConfigProperty_ annotation (see
link:conn.htm#50540619_88169[See @ConfigProperty]) instead. The
container is also required to discover configuration properties of a
JavaBean. See link:conn.htm#50540619_13546[See Discovery of
Configuration Properties] for more information.

[#50540561_pgfId-999854]##The getter and setter methods convention must
be based on the JavaBeans design pattern. These methods are defined in
the implementation class and not in the _ManagedConnectionFactory_
interface. This requirement keeps the _ManagedConnectionFactory_
interface independent of any resource adapter or EIS-specific
properties.

======= [#50540561_pgfId-999856]##[#50540561_90538]##Standard Properties

[#50540561_pgfId-999857]##The connector architecture identifies a
standard set of properties common across various types of resource
adapters and EISs. A resource adapter is not required to support a
standard property if that property does not apply to its configuration.

[#50540561_pgfId-999858]##These standard properties are defined as
follows:

======= [#50540561_pgfId-1001575]##Standard Properties of the Connector Architecture

[#50540561_pgfId-1001579]##Property

[#50540561_pgfId-1001581]##Description

[#50540561_pgfId-1001583]## _ServerName_

[#50540561_pgfId-1001585]##Name of the server for the EIS instance.

[#50540561_pgfId-1001587]## _PortNumber_

[#50540561_pgfId-1001589]##Port number for establishing a connection to
an EIS instance.

[#50540561_pgfId-1001591]## _UserName_

[#50540561_pgfId-1001593]##Name of the user establishing a connection to
an EIS instance.

[#50540561_pgfId-1001595]## _Password_

[#50540561_pgfId-1001597]##Password for the user establishing a
connection.

[#50540561_pgfId-1001599]## _ConnectionURL_

[#50540561_pgfId-1001601]##URL for the EIS instance to which it
connects.

[#50540561_pgfId-999864]##In addition to these standard properties, a
_ManagedConnectionFactory_ implementation class may support properties
specific to a resource adapter and its underlying EIS.

[#50540561_pgfId-999865]##All properties are administered by the
deployer and are not visible to an application component provider.

[#50540561_pgfId-1054799]##The specified properties are required to be
implemented as either bound or constrained properties. Refer to the
JavaBeans specification (
_http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html_
) for details on bound and constrained properties.

[#50540561_pgfId-1054883]##In the XML deployment descriptor, any bounds
or well-defined values of properties should be described in the
_description_ element. With the support for Bean Validation (see
link:conn.htm#50540558_66628[See JavaBean Validation]), the resource
adapter provider is not required to describe the bounds and constraints
of properties and may use the Bean Validation annotations to describe
bounds and constraints.

======= [#50540561_pgfId-1054888]##

image:conn-153.gif[image]

[#50540561_98699]##JNDI Configuration and Lookup

[#50540561_pgfId-999870]##This section specifies requirements for the
configuration of the JNDI environment for a resource adapter.

[#50540561_pgfId-999871]##In both managed and non-managed application
scenarios, an application component or application client must look up a
connection factory instance in the component’s environment using the
JNDI interface. The application component then uses the connection
factory instance to get a connection to the underlying EIS.
link:conn.htm#50540552_99873[See Application Programming Model]
specifies the application programming model in more detail.

[#50540561_pgfId-999875]##The following code extract shows the JNDI
lookup of a _javax.resource.cci.ConnectionFactory_ instance.

[width="100%",cols="100%",]
|===
a|
[#50540561_pgfId-1001653]##// Application Component/Client Code

[#50540561_pgfId-1001654]##obtain the initial JNDI context

[#50540561_pgfId-1001655]##Context initctx = new InitialContext();

[#50540561_pgfId-1001656]## 

[#50540561_pgfId-1001657]##// perform JNDI lookup to obtain connection
factory

[#50540561_pgfId-1001658]##javax.resource.cci.ConnectionFactory cxf =

[#50540561_pgfId-1001659]##
(javax.resource.cci.ConnectionFactory)initctx.lookup(“java:comp/env/eis/MyEIS”);

[#50540561_pgfId-1001660]## 

[#50540561_pgfId-1001651]##javax.resource.cci.Connection cx =
cxf.getConnection();

|===

======= [#50540561_pgfId-999885]##Responsibilities

[#50540561_pgfId-999886]##In both managed and non-managed environments,
registration of a connection factory instance in the JNDI namespace must
use either the JNDI _Reference_ or _Serializable_ mechanism.

[#50540561_pgfId-999887]##The choice between the two JNDI mechanisms
depends on:

[#50540561_pgfId-999888]##Whether the JNDI provider being used supports
a specific mechanism.

[#50540561_pgfId-999889]##Whether the application server and resource
adapter provide the necessary support, specified in the respective
requirements.

[#50540561_pgfId-999890]##Constraints on the size of serialized objects
that can be stored in the JNDI namespace. The reference mechanism allows
only a reference to the actual object to be stored in the JNDI
namespace. This is preferable to the serializable mechanism, which
stores the whole serialized object in the namespace.

[#50540561_pgfId-999891]##This section specifies the responsibilities of
the roles involved in the JNDI configuration of a resource adapter.

======= [#50540561_pgfId-999892]##Deployer

[#50540561_pgfId-999893]##The deployer is responsible for configuring
connection factory instances in the JNDI environment. The deployer
should manage the JNDI namespace such that the same programming model,
as shown in link:conn.htm#50540561_98699[See JNDI Configuration and
Lookup], for the JNDI-based connection factory lookup is supported in
both managed and non-managed environments.

======= [#50540561_pgfId-999897]##Resource Adapter

[#50540561_pgfId-999898]##The implementation class for a connection
factory interface must implement both the _java.io.Serializable_ and
_javax.resource.Referenceable_ interfaces to support JNDI registration.

[#50540561_pgfId-999899]##The following code extract shows the
_javax.resource.Referenceable_ interface:

[width="100%",cols="100%",]
|===
a|
[#50540561_pgfId-1001679]##public interface javax.resource.Referenceable

[#50540561_pgfId-1001680]## extends javax.naming.Referenceable \{

[#50540561_pgfId-1001681]## public void setReference(Reference ref);

[#50540561_pgfId-1001677]##}

|===

[#50540561_pgfId-999904]##The _ManagedConnectionFactory_ implementation
class must implement the j _ava.io.Serializable_ interface.

[#50540561_pgfId-999905]##To support the _Reference_ mechanism in a
non-managed environment, a resource adapter or a helper class must
provide an implementation of the j _avax.naming.spi.ObjectFactory_
interface.

======= [#50540561_pgfId-999906]##Application Server

[#50540561_pgfId-999907]##The implementation class for
_javax.resource.spi.ConnectionManager_ must implement the
_java.io.Serializable_ interface.

[#50540561_pgfId-999908]##An application server must provide an
implementation class for the _javax.naming.spi.ObjectFactory_ interface
to support JNDI _Reference_ mechanism-based connection factory lookup.
The implementation of this interface is application server-specific.

[#50540561_pgfId-999912]##link:conn.htm#50540561_38067[See Scenario:
Referenceable] specifies more details on _Reference_ mechanism-based
JNDI configuration in a managed environment.

======= [#50540561_pgfId-999913]##Scenario: Serializable

[#50540561_pgfId-999914]##The implementation classes for both the
_javax.resource.cci.ConnectionFactory_ and
_javax.resource.spi.ManagedConnectionFactory_ interfaces implement the
_java.io.Serializable_ interface.

[#50540561_pgfId-999915]##The deployment code retrieves the
configuration properties from the XML deployment descriptor or the
metadata annotations (see link:conn.htm#50540619_88169[See
@ConfigProperty]) for the resource adapter. The deployment code then
creates an instance of the _ManagedConnectionFactory_ implementation
class and configures the properties of the instance.

[width="100%",cols="100%",]
|===
a|
[#50540561_pgfId-1001694]##// Deployment Code

[#50540561_pgfId-1001695]##// Create an instance of the
ManagedConnectionFactory class

[#50540561_pgfId-1001696]##com.myeis.ManagedConnectionFactoryImpl mcf =

[#50540561_pgfId-1001697]## new
com.myeis.ManagedConnectionFactoryImpl();

[#50540561_pgfId-1001698]## 

[#50540561_pgfId-1001699]##// Set the properties of the
ManagedConnectionFactory instance

[#50540561_pgfId-1001700]##// Note: Properties are defined in the
implementation class and

[#50540561_pgfId-1001710]##// not in the

[#50540561_pgfId-1001701]##//
javax.resource.spi.ManagedConnectionFactory interface

[#50540561_pgfId-1001702]##mcf.setServerName(“...”);

[#50540561_pgfId-1001703]##mcf.setPortNumber(“...”);

[#50540561_pgfId-1001692]##...

|===

[#50540561_pgfId-999927]##Note that in a non-managed environment, an
application developer writes the deployment code. In a managed
environment, the deployment tool typically hides the deployment code.

[#50540561_pgfId-999928]##The deployment code uses the
_ManagedConnectionFactory_ instance to create a connection factory
instance. The code then registers the connection factory instance in the
JNDI namespace.

[width="100%",cols="100%",]
|===
a|
[#50540561_pgfId-1001718]##// Deployment Code

[#50540561_pgfId-1001719]##// In a managed environment, create a
ConnectionManager specific to

[#50540561_pgfId-1001720]##// the application server. Note that in a
non-managed environment,

[#50540561_pgfId-1001721]##// ConnectionManager will be specific to the
resource adapter.

[#50540561_pgfId-1001722]##com.wombatserver.ConnectionManager cm =

[#50540561_pgfId-1001723]## new com.wombatserver.ConnectionManager(...);

[#50540561_pgfId-1001724]## 

[#50540561_pgfId-1001725]##// Create an instance of a connection factory

[#50540561_pgfId-1001726]##Object cxf = mcf.createConnectionFactory(cm);

[#50540561_pgfId-1001727]## 

[#50540561_pgfId-1001728]##// Get the JNDI context

[#50540561_pgfId-1001729]##javax.naming.Context ctx = new
javax.naming.InitialContext(env);

[#50540561_pgfId-1001730]## 

[#50540561_pgfId-1001731]##// Bind to the JNDI namespace specifying a
factory name

[#50540561_pgfId-1001716]##ctx.bind("...", cxf);

|===

[#50540561_pgfId-999944]##When an application component does a JNDI
lookup of a connection factory instance, the returned connection factory
instance should get associated with a configured
_ManagedConnectionFactory_ instance and a _ConnectionManager_ instance.
The implementation class for connection factory should achieve the
association between these instances in an implementation-specific
manner.

[#50540561_pgfId-999945]##The following section illustrates JNDI
configuration in a managed environment based on the _Reference_
mechanism. This section uses the CCI interfaces
_javax.resource.cci.ConnectionFactory_ and
_javax.resource.cci.Connection_ as the connection factory and connection
interfaces respectively.

======= [#50540561_pgfId-999947]##[#50540561_38067]##Scenario: Referenceable

[#50540561_pgfId-999948]##The implementation class for the
_ConnectionFactory_ interface implements _javax.resource.Referenceable_
shown in the following code extract. Refer to the JNDI specification for
more details on the _Referenceable_ interface.

[width="100%",cols="100%",]
|===
a|
[#50540561_pgfId-1001744]##public class com.myeis.ConnectionFactoryImpl
implements

[#50540561_pgfId-1001745]## javax.resource.Referenceable,

[#50540561_pgfId-1001746]## java.io.Serializable,

[#50540561_pgfId-1001747]## javax.resource.cci.ConnectionFactory \{

[#50540561_pgfId-1001748]## 

[#50540561_pgfId-1001749]## // Reference to this ConnectionFactory

[#50540561_pgfId-1001750]## javax.naming.Reference reference;

[#50540561_pgfId-1001751]##

[#50540561_pgfId-1001752]## // setReference is called by the deployment
code

[#50540561_pgfId-1001753]## public void setReference(Reference ref) \{

[#50540561_pgfId-1001754]## reference = ref;

[#50540561_pgfId-1001755]## }

[#50540561_pgfId-1001756]## 

[#50540561_pgfId-1001757]## // getReference is called by the JNDI
provider during

[#50540561_pgfId-1001768]## // Context.bind

[#50540561_pgfId-1001758]## public Reference getReference() throws
NamingException \{

[#50540561_pgfId-1001759]## return reference;

[#50540561_pgfId-1001760]## }

[#50540561_pgfId-1001761]## ...

[#50540561_pgfId-1001742]##}

|===

[#50540561_pgfId-999968]##The getReference method on the
_ConnectionFactory_ implementation class must return a non-null value or
throw javax.naming.NamingException.

======= [#50540561_pgfId-999969]##ObjectFactory Implementation

[#50540561_pgfId-999970]##An application server provides a class (in an
application server-specific implementation) that implements the
_javax.naming.spi.ObjectFactory_ interface. Refer to the JNDI
specification for more details on the _ObjectFactory_ interface.

[#50540561_pgfId-999971]##In the _ObjectFactory.getObjectInstance_
method, the information carried by the _Reference_ parameter (set in the
_ConnectionFactoryImpl.setReference_ method) is used to lookup the
property set to be configured on the target _ManagedConnectionFactory_
instance.

[#50540561_pgfId-999972]##The mapping from a _Reference_ instance to
multiple configured property sets enables an application server to
configure multiple _ManagedConnectionFactory_ instances with respective
property sets. An application server maintains the property set
configuration in an implementation-specific way based on the deployment
descriptor specification and metadata annotations.

[#50540561_pgfId-999973]##The implementation and structure of
_Reference_ is specific to an application server. The following code
extract is an illustrative example. It illustrates an implementation of
the _ObjectFactory.getObjectInstance_ method:

[width="100%",cols="100%",]
|===
a|
[#50540561_pgfId-1001781]##public class
com.wombatserver.ApplicationServerJNDIHandler

[#50540561_pgfId-1001782]## implements javax.naming.spi.ObjectFactory \{

[#50540561_pgfId-1001783]## // ...

[#50540561_pgfId-1001784]## public Object getObjectInstance(Object obj,
Name name,

[#50540561_pgfId-1001785]## Context ctx, Hashtable env)

[#50540561_pgfId-1001786]## throws Exception \{

[#50540561_pgfId-1001787]## 

[#50540561_pgfId-1001788]## javax.naming.Reference ref =

[#50540561_pgfId-1001842]## (javax.naming.Reference)obj;

[#50540561_pgfId-1001789]##

[#50540561_pgfId-1001790]## // Using the information carried by the
Reference

[#50540561_pgfId-1001836]## // instance,

[#50540561_pgfId-1001791]## // (<referenceName, logicalName> in this
example) lookup

[#50540561_pgfId-1001792]## // a configured property set and then
configure a

[#50540561_pgfId-1001793]## // ManagedConnectionFactory instance with
specified

[#50540561_pgfId-1001794]## // properties.

{empty}[#50540561_pgfId-1001795]## ... // [implementation specific]

[#50540561_pgfId-1001796]## //

[#50540561_pgfId-1001797]## // For example, instantiation of the

[#50540561_pgfId-1001830]## // ManagedConnectionFactory

[#50540561_pgfId-1001798]## // class and invocation of its setter method

[#50540561_pgfId-1001799]## // can be done using the Java Reflection
mechanism.

[#50540561_pgfId-1001800]##

[#50540561_pgfId-1001801]## javax.resource.spi.ManagedConnectionFactory
mcf = ...

[#50540561_pgfId-1001802]##

[#50540561_pgfId-1001803]## // Create a Connection Manager instance
specific to the

[#50540561_pgfId-1001804]## // application server

[#50540561_pgfId-1001805]## com.wombatserver.ConnectionManager cxManager
= ...

[#50540561_pgfId-1001806]## 

[#50540561_pgfId-1001807]## // Create a connection factory instance.

[#50540561_pgfId-1001808]## // The ConnectionManager instance provided
by the

[#50540561_pgfId-1001824]## // application

[#50540561_pgfId-1001809]## // server gets associated with the created

[#50540561_pgfId-1001810]## // connection factory instance

[#50540561_pgfId-1001811]## return
mcf.createConnectionFactory(cxManager);

[#50540561_pgfId-1001812]## }

[#50540561_pgfId-1001813]## ...

[#50540561_pgfId-1001779]##}

|===

======= [#50540561_pgfId-1000008]##Deployment

[#50540561_pgfId-1000009]##The following deployment code shows the
registration of a reference to a connection factory instance in the JNDI
namespace:

[width="100%",cols="100%",]
|===
a|
[#50540561_pgfId-1001858]##// Deployment Code

[#50540561_pgfId-1001859]##javax.naming.Context ctx = new
javax.naming.InitialContext(env);

[#50540561_pgfId-1001860]## 

[#50540561_pgfId-1001861]##// Create an instance of the connection
factory

[#50540561_pgfId-1001862]##com.myeis.ConnectionFactoryImpl cf =

[#50540561_pgfId-1001863]## new com.myeis.ConnectionFactoryImpl();

[#50540561_pgfId-1001864]## 

[#50540561_pgfId-1001865]##// Create a reference for the
ConnectionFactory instance

[#50540561_pgfId-1001866]##javax.naming.Reference ref = new
javax.naming.Reference(

[#50540561_pgfId-1001867]## ConnectionFactoryImpl.class.getName(),

[#50540561_pgfId-1001868]## new javax.naming.StringRefAddr(

[#50540561_pgfId-1001869]## “<referenceName>”, “<logicalName>”),

[#50540561_pgfId-1001870]##
ApplicationServerJNDIHandler.class.getName(),

[#50540561_pgfId-1001871]## null);

[#50540561_pgfId-1001872]##

[#50540561_pgfId-1001873]##cf.setReference(ref);

[#50540561_pgfId-1001874]## 

[#50540561_pgfId-1001875]##// Bind to the JNDI namespace specifying a
name for the connection

[#50540561_pgfId-1001882]##// factory

[#50540561_pgfId-1001856]##ctx.bind("...", cf);

|===

[#50540561_pgfId-1000029]##Note that the deployment code should be
designed as generic, though the above example does not show it that way.
The code should dynamically create an instance of a connection factory,
create a _Reference_ instance, and then set the reference.

[#50540561_pgfId-1000030]##The _Context.bind_ method registers a
_Reference_ to the connection factory instance in the JNDI namespace.

======= [#50540561_pgfId-1000031]##Scenario: Connection Factory Lookup

[#50540561_pgfId-1000032]##The following steps occur when an application
component calls the method JNDI _Context.lookup_ to lookup a connection
factory instance:

[#50540561_pgfId-1000033]##JNDI passes control to the application
server. The _ObjectFactory-.getObjectInstance_ method implemented by the
application server is called.

[#50540561_pgfId-1000034]##The application server creates a new instance
of the _ManagedConnectionFactory_ implementation class provided by the
resource adapter. The application server must follow the requirements in
link:conn.htm#50540558_23545[See ManagedConnectionFactory JavaBean and
Outbound Communication] and link:conn.htm#50540558_24229[See
ManagedConnectionFactory JavaBean Instance Configuration] while
configuring a _ManagedConnectionFactory_ JavaBean instance. The
application server may use an existing instance of the
_ManagedConnectionFactory_ implementation class, if available.

[#50540561_pgfId-1000035]##The application server calls setter methods
on the _ManagedConnectionFactory_ instance to set various configuration
properties of this instance. These properties provide information
required by the _ManagedConnectionFactory_ instance to create physical
connections to the underlying EIS. The application server uses an
existing property set configured during the deployment of a resource
adapter to set the required properties of the _ManagedConnectionFactory_
instance.

[#50540561_pgfId-1000036]##After the newly created
_ManagedConnectionFactory_ instance has been configured with its
properties set, the application server creates a new _ConnectionManager_
instance.

[#50540561_pgfId-1048231]##The application server calls the
_createConnectionFactory_ method of the _ManagedConnectionFactory_
instance, passing in the _ConnectionManager_ instance from the previous
step, to get a _ConnectionFactory_ instance.

[#50540561_pgfId-1051613]##The application server returns the connection
factory instance to the JNDI provider, so that this instance can be
returned as a result of the JNDI lookup. The application component gets
the _ConnectionFactory_ instance as a result of the JNDI lookup.

[#50540561_pgfId-1051614]## 

[#50540561_pgfId-1051607]##[#50540561_52027]##OID:Lookup of a
ConnectionFactory Instance from JNDI

image:conn-157.gif[image]

======= [#50540561_pgfId-1000104]##[#50540561_80713]##Requirements

[#50540561_pgfId-1000105]##The default configuration values for the
various JavaBean classes specified in the resource adapter deployment
descriptor by way of the config-property element or through the
_ConfigProperty_ annotation, override and take precedence over the
defaults specified for the same classes by the resource adapter
developer through the JavaBean mechanism. Note, a deployer may finally
override such default configuration information while configuring the
various JavaBean instances.

======= [#50540561_pgfId-1000106]##

image:conn-153.gif[image]

[#50540561_30009]##Resource Adapter XML Schema Definition

[#50540561_pgfId-1042734]##This section specifies the XML Schema
Definition (XSD) for the deployment descriptor for a resource adapter.
Some of the types used in this XSD are defined in the Java EE platform
specification (link:conn.htm#50540564_22967[See Java Platform,
Enterprise Edition (Java EE) Specification, version 7]). The comments in
the XSD specify additional requirements for syntax and semantics that
cannot be specified by using the XML Schema language. Note, the
description-group element defined in javaee_7.xsd allows multiple
descriptions, in order to allow specifying the same description for
different locales.

======= [#50540561_pgfId-1051803]##Schema Definition for the Deployment Descriptor for a Resource Adapter

[#50540561_pgfId-1051805]##<?xml version="1.0" encoding="UTF-8"?>

[#50540561_pgfId-1051807]##<xsd:schema
xmlns="http://www.w3.org/2001/XMLSchema"

[#50540561_pgfId-1051809]##
targetNamespace="http://xmlns.jcp.org/xml/ns/javaee"

[#50540561_pgfId-1051811]##
xmlns:javaee="http://xmlns.jcp.org/xml/ns/javaee"

[#50540561_pgfId-1051813]## xmlns:xsd="http://www.w3.org/2001/XMLSchema"

[#50540561_pgfId-1051815]## elementFormDefault="qualified"

[#50540561_pgfId-1051817]## attributeFormDefault="unqualified"

[#50540561_pgfId-1051819]## version="1.7">

[#50540561_pgfId-1051821]## <xsd:annotation>

[#50540561_pgfId-1051823]## <xsd:documentation>

[#50540561_pgfId-1051825]## $Id$

[#50540561_pgfId-1051827]## </xsd:documentation>

[#50540561_pgfId-1051829]## </xsd:annotation>

[#50540561_pgfId-1051831]## 

[#50540561_pgfId-1051833]## <xsd:annotation>

[#50540561_pgfId-1051835]## <xsd:documentation>

[#50540561_pgfId-1051837]## <![CDATA[

[#50540561_pgfId-1051839]## 

[#50540561_pgfId-1051841]## This is the XML Schema for the Connector 1.7
deployment

[#50540561_pgfId-1051843]## descriptor. The deployment descriptor must
be named

[#50540561_pgfId-1051845]## "META-INF/ra.xml" in the connector’s rar
file. All Connector

[#50540561_pgfId-1051847]## deployment descriptors must indicate the
connector resource

[#50540561_pgfId-1051849]## adapter schema by using the Java EE
namespace:

[#50540561_pgfId-1051851]## 

[#50540561_pgfId-1051853]## http://xmlns.jcp.org/xml/ns/javaee

[#50540561_pgfId-1051855]## 

[#50540561_pgfId-1051857]## and by indicating the version of the schema
by

[#50540561_pgfId-1051859]## using the version element as shown below:

[#50540561_pgfId-1051861]## 

[#50540561_pgfId-1051863]## <connector
xmlns="http://xmlns.jcp.org/xml/ns/javaee"

[#50540561_pgfId-1051865]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50540561_pgfId-1051867]##
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee

[#50540561_pgfId-1051869]##
http://xmlns.jcp.org/xml/ns/javaee/connector_1_7.xsd”

[#50540561_pgfId-1051871]## version="1.7">

[#50540561_pgfId-1051873]## ...

[#50540561_pgfId-1051875]## </connector>

[#50540561_pgfId-1051877]## 

[#50540561_pgfId-1051879]## The instance documents may indicate the
published version of

[#50540561_pgfId-1051881]## the schema using the xsi:schemaLocation
attribute for Java EE

[#50540561_pgfId-1051883]## namespace with the following location:

[#50540561_pgfId-1051885]## 

[#50540561_pgfId-1051887]##
http://xmlns.jcp.org/xml/ns/javaee/connector_1_7.xsd

[#50540561_pgfId-1051889]## 

[#50540561_pgfId-1051891]## ]]>

[#50540561_pgfId-1051893]## </xsd:documentation>

[#50540561_pgfId-1051895]## </xsd:annotation>

[#50540561_pgfId-1051897]## 

[#50540561_pgfId-1051899]## <xsd:annotation>

[#50540561_pgfId-1051901]## <xsd:documentation>

[#50540561_pgfId-1051903]## 

[#50540561_pgfId-1051905]## The following conventions apply to all Java
EE

[#50540561_pgfId-1051907]## deployment descriptor elements unless
indicated otherwise.

[#50540561_pgfId-1051909]## 

[#50540561_pgfId-1051911]## - In elements that specify a pathname to a
file within the

[#50540561_pgfId-1051913]## same JAR file, relative filenames (i.e.,
those not

[#50540561_pgfId-1051915]## starting with "/") are considered relative
to the root of

[#50540561_pgfId-1051917]## the JAR file’s namespace. Absolute filenames
(i.e., those

[#50540561_pgfId-1051919]## starting with "/") also specify names in the
root of the

[#50540561_pgfId-1051921]## JAR file’s namespace. In general, relative
names are

[#50540561_pgfId-1051923]## preferred. The exception is .war files where
absolute

[#50540561_pgfId-1051925]## names are preferred for consistency with the
Servlet API.

[#50540561_pgfId-1051927]## 

[#50540561_pgfId-1051929]## </xsd:documentation>

[#50540561_pgfId-1051931]## </xsd:annotation>

[#50540561_pgfId-1051933]## 

[#50540561_pgfId-1051935]## <xsd:include schemaLocation="javaee_7.xsd"/>

[#50540561_pgfId-1051937]## 

[#50540561_pgfId-1051939]## 

[#50540561_pgfId-1051941]##<!--
**************************************************** -->

[#50540561_pgfId-1051943]## 

[#50540561_pgfId-1051945]## 

[#50540561_pgfId-1051947]## <xsd:element name="connector"
type="javaee:connectorType">

[#50540561_pgfId-1051949]## <xsd:annotation>

[#50540561_pgfId-1051951]## <xsd:documentation>

[#50540561_pgfId-1051953]## 

[#50540561_pgfId-1051955]## The connector element is the root element of
the deployment

[#50540561_pgfId-1051957]## descriptor for the resource adapter. This
element includes

[#50540561_pgfId-1051959]## general information - vendor name, resource
adapter version,

[#50540561_pgfId-1051961]## icon - about the resource adapter module. It
also includes

[#50540561_pgfId-1051963]## information specific to the implementation
of the resource

[#50540561_pgfId-1051965]## adapter library as specified through the
element

[#50540561_pgfId-1051967]## resourceadapter.

[#50540561_pgfId-1051969]## 

[#50540561_pgfId-1051971]## </xsd:documentation>

[#50540561_pgfId-1051973]## </xsd:annotation>

[#50540561_pgfId-1051975]## 

[#50540561_pgfId-1051977]## </xsd:element>

[#50540561_pgfId-1051979]## 

[#50540561_pgfId-1051981]##<!--
**************************************************** -->

[#50540561_pgfId-1051983]## 

[#50540561_pgfId-1051985]## <xsd:complexType name="activationspecType">

[#50540561_pgfId-1051987]## <xsd:annotation>

[#50540561_pgfId-1051989]## <xsd:documentation>

[#50540561_pgfId-1051991]## 

[#50540561_pgfId-1051993]## The activationspecType specifies an
activation

[#50540561_pgfId-1051995]## specification. The information includes

[#50540561_pgfId-1051997]## Java class name of an activation
specification and a set of

[#50540561_pgfId-1051999]## required configuration property names.

[#50540561_pgfId-1052001]## 

[#50540561_pgfId-1052003]## </xsd:documentation>

[#50540561_pgfId-1052005]## </xsd:annotation>

[#50540561_pgfId-1052007]## 

[#50540561_pgfId-1052009]## <xsd:sequence>

[#50540561_pgfId-1052011]## <xsd:element name="activationspec-class"

[#50540561_pgfId-1052013]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1052015]## <xsd:annotation>

[#50540561_pgfId-1052017]## <xsd:documentation>

[#50540561_pgfId-1052019]## <![CDATA[

[#50540561_pgfId-1052021]## 

[#50540561_pgfId-1052023]## The element activationspec-class specifies
the fully

[#50540561_pgfId-1052025]## qualified Java class name of the activation

[#50540561_pgfId-1052027]## specification class. This class must
implement the

[#50540561_pgfId-1052029]## javax.resource.spi.ActivationSpec interface.
The

[#50540561_pgfId-1052031]## implementation of this class is required to
be a

[#50540561_pgfId-1052033]## JavaBean.

[#50540561_pgfId-1052035]## 

[#50540561_pgfId-1052037]## Example:

[#50540561_pgfId-1052039]##
<activationspec-class>com.wombat.ActivationSpecImpl

[#50540561_pgfId-1052041]## </activationspec-class>

[#50540561_pgfId-1052043]## 

[#50540561_pgfId-1052045]## ]]>

[#50540561_pgfId-1052047]## </xsd:documentation>

[#50540561_pgfId-1052049]## </xsd:annotation>

[#50540561_pgfId-1052051]## </xsd:element>

[#50540561_pgfId-1052053]## <xsd:element name="required-config-property"

[#50540561_pgfId-1052055]## type="javaee:required-config-propertyType"

[#50540561_pgfId-1052057]## minOccurs="0"

[#50540561_pgfId-1052059]## maxOccurs="unbounded"/>

[#50540561_pgfId-1052061]## <xsd:element name="config-property"

[#50540561_pgfId-1052063]## type="javaee:config-propertyType"

[#50540561_pgfId-1052065]## minOccurs="0"

[#50540561_pgfId-1052067]## maxOccurs="unbounded">

[#50540561_pgfId-1052069]## <xsd:annotation>

[#50540561_pgfId-1052071]## <xsd:documentation>

[#50540561_pgfId-1052073]## The required-config-property element is
deprecated since

[#50540561_pgfId-1052075]## Connector 1.6 specification. The resource
adapter

[#50540561_pgfId-1052077]## implementation is recommended to use the
@NotNull

[#50540561_pgfId-1052079]## Bean Validation annotation or its XML
validation

[#50540561_pgfId-1052081]## descriptor equivalent to indicate that a
configuration

[#50540561_pgfId-1052083]## property is required to be specified by the
deployer.

[#50540561_pgfId-1052085]## See the Connectors specification for more
information.

[#50540561_pgfId-1052087]## </xsd:documentation>

[#50540561_pgfId-1052089]## </xsd:annotation>

[#50540561_pgfId-1052091]## 

[#50540561_pgfId-1052093]## </xsd:element>

[#50540561_pgfId-1052095]## 

[#50540561_pgfId-1052097]## </xsd:sequence>

[#50540561_pgfId-1052099]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1052101]## </xsd:complexType>

[#50540561_pgfId-1052103]## 

[#50540561_pgfId-1052105]##<!--
**************************************************** -->

[#50540561_pgfId-1052107]## 

[#50540561_pgfId-1052109]## <xsd:complexType name="adminobjectType">

[#50540561_pgfId-1052111]## <xsd:annotation>

[#50540561_pgfId-1052113]## <xsd:documentation>

[#50540561_pgfId-1052115]## 

[#50540561_pgfId-1052117]## The adminobjectType specifies information
about an

[#50540561_pgfId-1052119]## administered object. Administered objects
are specific to a

[#50540561_pgfId-1052121]## messaging style or message provider. This
contains

[#50540561_pgfId-1052123]## information on the Java type of the
interface implemented by

[#50540561_pgfId-1052125]## an administered object, its Java class name
and its

[#50540561_pgfId-1052127]## configuration properties.

[#50540561_pgfId-1052129]## 

[#50540561_pgfId-1052131]## </xsd:documentation>

[#50540561_pgfId-1052133]## </xsd:annotation>

[#50540561_pgfId-1052135]## 

[#50540561_pgfId-1052137]## <xsd:sequence>

[#50540561_pgfId-1052139]## <xsd:element name="adminobject-interface"

[#50540561_pgfId-1052141]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1052143]## <xsd:annotation>

[#50540561_pgfId-1052145]## <xsd:documentation>

[#50540561_pgfId-1052147]## <![CDATA[

[#50540561_pgfId-1052149]## 

[#50540561_pgfId-1052151]## The element adminobject-interface specifies
the

[#50540561_pgfId-1052153]## name of the Java type of the

[#50540561_pgfId-1052155]## interface implemented by an administered
object.

[#50540561_pgfId-1052157]## 

[#50540561_pgfId-1052159]## Example:

[#50540561_pgfId-1052161]## <adminobject-interface>javax.jms.Destination

[#50540561_pgfId-1052163]## </adminobject-interface>

[#50540561_pgfId-1052165]## 

[#50540561_pgfId-1052167]## ]]>

[#50540561_pgfId-1052169]## </xsd:documentation>

[#50540561_pgfId-1052171]## </xsd:annotation>

[#50540561_pgfId-1052173]## 

[#50540561_pgfId-1052175]## </xsd:element>

[#50540561_pgfId-1052177]## <xsd:element name="adminobject-class"

[#50540561_pgfId-1052179]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1052181]## <xsd:annotation>

[#50540561_pgfId-1052183]## <xsd:documentation>

[#50540561_pgfId-1052185]## <![CDATA[

[#50540561_pgfId-1052187]## 

[#50540561_pgfId-1052189]## The element adminobject-class specifies the
fully

[#50540561_pgfId-1052191]## qualified Java class name of an administered
object.

[#50540561_pgfId-1052193]## 

[#50540561_pgfId-1052195]## Example:

[#50540561_pgfId-1052197]##
<adminobject-class>com.wombat.DestinationImpl

[#50540561_pgfId-1052199]## </adminobject-class>

[#50540561_pgfId-1052201]## 

[#50540561_pgfId-1052203]## ]]>

[#50540561_pgfId-1052205]## </xsd:documentation>

[#50540561_pgfId-1052207]## </xsd:annotation>

[#50540561_pgfId-1052209]## </xsd:element>

[#50540561_pgfId-1052211]## 

[#50540561_pgfId-1052213]## <xsd:element name="config-property"

[#50540561_pgfId-1052215]## type="javaee:config-propertyType"

[#50540561_pgfId-1052217]## minOccurs="0"

[#50540561_pgfId-1052219]## maxOccurs="unbounded"/>

[#50540561_pgfId-1052221]## </xsd:sequence>

[#50540561_pgfId-1052223]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1052225]## </xsd:complexType>

[#50540561_pgfId-1052227]## 

[#50540561_pgfId-1052229]##<!--
**************************************************** -->

[#50540561_pgfId-1052231]## 

[#50540561_pgfId-1052233]## <xsd:complexType
name="authentication-mechanismType">

[#50540561_pgfId-1052235]## <xsd:annotation>

[#50540561_pgfId-1052237]## <xsd:documentation>

[#50540561_pgfId-1052239]## 

[#50540561_pgfId-1052241]## The authentication-mechanismType specifies
an authentication

[#50540561_pgfId-1052243]## mechanism supported by the resource adapter.
Note that this

[#50540561_pgfId-1052245]## support is for the resource adapter and not
for the

[#50540561_pgfId-1052247]## underlying EIS instance. The optional
description specifies

[#50540561_pgfId-1052249]## any resource adapter specific requirement
for the support of

[#50540561_pgfId-1052251]## security contract and authentication
mechanism.

[#50540561_pgfId-1052253]## 

[#50540561_pgfId-1052255]## Note that BasicPassword mechanism type
should support the

[#50540561_pgfId-1052257]##
javax.resource.spi.security.PasswordCredential interface.

[#50540561_pgfId-1052259]## The Kerbv5 mechanism type should support the

[#50540561_pgfId-1052261]## org.ietf.jgss.GSSCredential interface or the
deprecated

[#50540561_pgfId-1052263]##
javax.resource.spi.security.GenericCredential interface.

[#50540561_pgfId-1052265]## 

[#50540561_pgfId-1052267]## </xsd:documentation>

[#50540561_pgfId-1052269]## </xsd:annotation>

[#50540561_pgfId-1052271]## 

[#50540561_pgfId-1052273]## <xsd:sequence>

[#50540561_pgfId-1052275]## <xsd:element name="description"

[#50540561_pgfId-1052277]## type="javaee:descriptionType"

[#50540561_pgfId-1052279]## minOccurs="0"

[#50540561_pgfId-1052281]## maxOccurs="unbounded"/>

[#50540561_pgfId-1052283]## <xsd:element
name="authentication-mechanism-type"

[#50540561_pgfId-1052285]## type="javaee:xsdStringType">

[#50540561_pgfId-1052287]## <xsd:annotation>

[#50540561_pgfId-1052289]## <xsd:documentation>

[#50540561_pgfId-1052291]## <![CDATA[

[#50540561_pgfId-1052293]## 

[#50540561_pgfId-1052295]## The element authentication-mechanism-type
specifies

[#50540561_pgfId-1052297]## type of an authentication mechanism.

[#50540561_pgfId-1052299]## 

[#50540561_pgfId-1052301]## The example values are:

[#50540561_pgfId-1052303]## 

[#50540561_pgfId-1052305]## <authentication-mechanism-type>BasicPassword

[#50540561_pgfId-1052307]## </authentication-mechanism-type>

[#50540561_pgfId-1052309]## 

[#50540561_pgfId-1052311]## <authentication-mechanism-type>Kerbv5

[#50540561_pgfId-1052313]## </authentication-mechanism-type>

[#50540561_pgfId-1052315]## 

[#50540561_pgfId-1052317]## Any additional security mechanisms are
outside the

[#50540561_pgfId-1052319]## scope of the Connector architecture
specification.

[#50540561_pgfId-1052321]## 

[#50540561_pgfId-1052323]## ]]>

[#50540561_pgfId-1052325]## </xsd:documentation>

[#50540561_pgfId-1052327]## </xsd:annotation>

[#50540561_pgfId-1052329]## 

[#50540561_pgfId-1052331]## </xsd:element>

[#50540561_pgfId-1052333]## <xsd:element name="credential-interface"

[#50540561_pgfId-1052335]## type="javaee:credential-interfaceType"/>

[#50540561_pgfId-1052337]## </xsd:sequence>

[#50540561_pgfId-1052339]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1052341]## </xsd:complexType>

[#50540561_pgfId-1052343]## 

[#50540561_pgfId-1052345]##<!--
**************************************************** -->

[#50540561_pgfId-1052347]## 

[#50540561_pgfId-1052349]## <xsd:complexType
name="config-property-nameType">

[#50540561_pgfId-1052351]## <xsd:annotation>

[#50540561_pgfId-1052353]## <xsd:documentation>

[#50540561_pgfId-1052355]## <![CDATA[

[#50540561_pgfId-1052357]## 

[#50540561_pgfId-1052359]## The config-property-nameType contains the
name of a

[#50540561_pgfId-1052361]## configuration property.

[#50540561_pgfId-1052363]## 

[#50540561_pgfId-1052365]## The connector architecture defines a set of
well-defined

[#50540561_pgfId-1052367]## properties all of type java.lang.String.
These are as

[#50540561_pgfId-1052369]## follows.

[#50540561_pgfId-1052371]## 

[#50540561_pgfId-1052373]## ServerName

[#50540561_pgfId-1052375]## PortNumber

[#50540561_pgfId-1052377]## UserName

[#50540561_pgfId-1052379]## Password

[#50540561_pgfId-1052381]## ConnectionURL

[#50540561_pgfId-1052383]## 

[#50540561_pgfId-1052385]## A resource adapter provider can extend this
property set to

[#50540561_pgfId-1052387]## include properties specific to the resource
adapter and its

[#50540561_pgfId-1052389]## underlying EIS.

[#50540561_pgfId-1052391]## 

[#50540561_pgfId-1052393]## Possible values include

[#50540561_pgfId-1052395]## ServerName

[#50540561_pgfId-1052397]## PortNumber

[#50540561_pgfId-1052399]## UserName

[#50540561_pgfId-1052401]## Password

[#50540561_pgfId-1052403]## ConnectionURL

[#50540561_pgfId-1052405]## 

[#50540561_pgfId-1052407]## Example:
<config-property-name>ServerName</config-property-name>

[#50540561_pgfId-1052409]## 

[#50540561_pgfId-1052411]## ]]>

[#50540561_pgfId-1052413]## </xsd:documentation>

[#50540561_pgfId-1052415]## </xsd:annotation>

[#50540561_pgfId-1052417]## <xsd:simpleContent>

[#50540561_pgfId-1052419]## <xsd:restriction
base="javaee:xsdStringType"/>

[#50540561_pgfId-1052421]## </xsd:simpleContent>

[#50540561_pgfId-1052423]## </xsd:complexType>

[#50540561_pgfId-1052425]## 

[#50540561_pgfId-1052427]##<!--
**************************************************** -->

[#50540561_pgfId-1052429]## 

[#50540561_pgfId-1052431]## <xsd:complexType
name="config-property-typeType">

[#50540561_pgfId-1052433]## <xsd:annotation>

[#50540561_pgfId-1052435]## <xsd:documentation>

[#50540561_pgfId-1052437]## <![CDATA[

[#50540561_pgfId-1052439]## 

[#50540561_pgfId-1052441]## The config-property-typeType contains the
fully

[#50540561_pgfId-1052443]## qualified Java type of a configuration
property.

[#50540561_pgfId-1052445]## 

[#50540561_pgfId-1052447]## The following are the legal values:

[#50540561_pgfId-1052449]## java.lang.Boolean, java.lang.String,
java.lang.Integer,

[#50540561_pgfId-1052451]## java.lang.Double, java.lang.Byte,
java.lang.Short,

[#50540561_pgfId-1052453]## java.lang.Long, java.lang.Float,
java.lang.Character

[#50540561_pgfId-1052455]## 

[#50540561_pgfId-1052457]## Used in: config-property

[#50540561_pgfId-1052459]## 

[#50540561_pgfId-1052461]## Example:

[#50540561_pgfId-1052463]##
<config-property-type>java.lang.String</config-property-type>

[#50540561_pgfId-1052465]## 

[#50540561_pgfId-1052467]## ]]>

[#50540561_pgfId-1052469]## </xsd:documentation>

[#50540561_pgfId-1052471]## </xsd:annotation>

[#50540561_pgfId-1052473]## <xsd:simpleContent>

[#50540561_pgfId-1052475]## <xsd:restriction base="javaee:string">

[#50540561_pgfId-1052477]## <xsd:enumeration value="java.lang.Boolean"/>

[#50540561_pgfId-1052479]## <xsd:enumeration value="java.lang.String"/>

[#50540561_pgfId-1052481]## <xsd:enumeration value="java.lang.Integer"/>

[#50540561_pgfId-1052483]## <xsd:enumeration value="java.lang.Double"/>

[#50540561_pgfId-1052485]## <xsd:enumeration value="java.lang.Byte"/>

[#50540561_pgfId-1052487]## <xsd:enumeration value="java.lang.Short"/>

[#50540561_pgfId-1052489]## <xsd:enumeration value="java.lang.Long"/>

[#50540561_pgfId-1052491]## <xsd:enumeration value="java.lang.Float"/>

[#50540561_pgfId-1052493]## <xsd:enumeration
value="java.lang.Character"/>

[#50540561_pgfId-1052495]## </xsd:restriction>

[#50540561_pgfId-1052497]## </xsd:simpleContent>

[#50540561_pgfId-1052499]## </xsd:complexType>

[#50540561_pgfId-1052501]## 

[#50540561_pgfId-1052503]##<!--
**************************************************** -->

[#50540561_pgfId-1052505]## 

[#50540561_pgfId-1052507]## <xsd:complexType name="config-propertyType">

[#50540561_pgfId-1052509]## <xsd:annotation>

[#50540561_pgfId-1052511]## <xsd:documentation>

[#50540561_pgfId-1052513]## 

[#50540561_pgfId-1052515]## The config-propertyType contains a
declaration of a single

[#50540561_pgfId-1052517]## configuration property that may be used for
providing

[#50540561_pgfId-1052519]## configuration information.

[#50540561_pgfId-1052521]## 

[#50540561_pgfId-1052523]## The declaration consists of an optional
description, name,

[#50540561_pgfId-1052525]## type and an optional value of the
configuration property. If

[#50540561_pgfId-1052527]## the resource adapter provider does not
specify a value than

[#50540561_pgfId-1052529]## the deployer is responsible for providing a
valid value for

[#50540561_pgfId-1052531]## a configuration property.

[#50540561_pgfId-1052533]## 

[#50540561_pgfId-1052535]## Any bounds or well-defined values of
properties should be

[#50540561_pgfId-1052537]## described in the description element.

[#50540561_pgfId-1052539]## 

[#50540561_pgfId-1052541]## </xsd:documentation>

[#50540561_pgfId-1052543]## </xsd:annotation>

[#50540561_pgfId-1052545]## <xsd:sequence>

[#50540561_pgfId-1052547]## <xsd:element name="description"

[#50540561_pgfId-1052549]## type="javaee:descriptionType"

[#50540561_pgfId-1052551]## minOccurs="0"

[#50540561_pgfId-1052553]## maxOccurs="unbounded"/>

[#50540561_pgfId-1052555]## <xsd:element name="config-property-name"

[#50540561_pgfId-1052557]## type="javaee:config-property-nameType"/>

[#50540561_pgfId-1052559]## <xsd:element name="config-property-type"

[#50540561_pgfId-1052561]## type="javaee:config-property-typeType"/>

[#50540561_pgfId-1052563]## <xsd:element name="config-property-value"

[#50540561_pgfId-1052565]## type="javaee:xsdStringType"

[#50540561_pgfId-1052567]## minOccurs="0">

[#50540561_pgfId-1052569]## <xsd:annotation>

[#50540561_pgfId-1052571]## <xsd:documentation>

[#50540561_pgfId-1052573]## <![CDATA[

[#50540561_pgfId-1052575]## 

[#50540561_pgfId-1052577]## The element config-property-value contains
the value

[#50540561_pgfId-1052579]## of a configuration entry. Note, it is
possible for a

[#50540561_pgfId-1052581]## resource adapter deployer to override this

[#50540561_pgfId-1052583]## configuration information during deployment.

[#50540561_pgfId-1052585]## 

[#50540561_pgfId-1052587]## Example:

[#50540561_pgfId-1052589]##
<config-property-value>WombatServer</config-property-value>

[#50540561_pgfId-1052591]## 

[#50540561_pgfId-1052593]## ]]>

[#50540561_pgfId-1052595]## </xsd:documentation>

[#50540561_pgfId-1052597]## </xsd:annotation>

[#50540561_pgfId-1052599]## </xsd:element>

[#50540561_pgfId-1052601]## 

[#50540561_pgfId-1052603]## <xsd:element name="config-property-ignore"
type="javaee:true-falseType"

[#50540561_pgfId-1052605]## minOccurs="0" maxOccurs="1">

[#50540561_pgfId-1052607]## <xsd:annotation>

[#50540561_pgfId-1052609]## <xsd:documentation>

[#50540561_pgfId-1052611]## <![CDATA[

[#50540561_pgfId-1052613]## 

[#50540561_pgfId-1052615]## The element config-property-ignore is used
to specify

[#50540561_pgfId-1052617]## whether the configuration tools must ignore
considering the

[#50540561_pgfId-1052619]## configuration property during auto-discovery
of

[#50540561_pgfId-1052621]## Configuration properties. See the Connector
specification for

[#50540561_pgfId-1052623]## more details. If unspecified, the container
must not ignore

[#50540561_pgfId-1052625]## the configuration property during
auto-discovery.

[#50540561_pgfId-1052627]## This element must be one of the following,
"true" or "false".

[#50540561_pgfId-1052629]## 

[#50540561_pgfId-1052631]## ]]>

[#50540561_pgfId-1052633]## </xsd:documentation>

[#50540561_pgfId-1052635]## </xsd:annotation>

[#50540561_pgfId-1052637]## </xsd:element>

[#50540561_pgfId-1052639]## <xsd:element
name="config-property-supports-dynamic-updates" type
"javaee:true-falseType"

[#50540561_pgfId-1052641]## minOccurs="0" maxOccurs="1">

[#50540561_pgfId-1052643]## <xsd:annotation>

[#50540561_pgfId-1052645]## <xsd:documentation>

[#50540561_pgfId-1052647]## <![CDATA[

[#50540561_pgfId-1052649]## The element
config-property-supports-dynamic-updates is used to specify

[#50540561_pgfId-1052651]## whether the configuration property allows
its value to be updated, by

[#50540561_pgfId-1052653]## application server’s configuration tools,
during the lifetime of

[#50540561_pgfId-1052655]## the JavaBean instance. See the Connector
specification for

[#50540561_pgfId-1052657]## more details. If unspecified, the container
must not dynamically

[#50540561_pgfId-1052659]## reconfigure the property.

[#50540561_pgfId-1052661]## This element must be one of the following,
"true" or "false".

[#50540561_pgfId-1052663]## 

[#50540561_pgfId-1052665]## ]]>

[#50540561_pgfId-1052667]## </xsd:documentation>

[#50540561_pgfId-1052669]## </xsd:annotation>

[#50540561_pgfId-1052671]## </xsd:element>

[#50540561_pgfId-1052673]## 

[#50540561_pgfId-1052675]## <xsd:element
name="config-property-confidential" type="javaee:true-falseType"

[#50540561_pgfId-1052677]## minOccurs="0" maxOccurs="1">

[#50540561_pgfId-1052679]## <xsd:annotation>

[#50540561_pgfId-1052681]## <xsd:documentation>

[#50540561_pgfId-1052683]## <![CDATA[

[#50540561_pgfId-1052685]## The element config-property-confidential is
used to specify

[#50540561_pgfId-1052687]## whether the configuration property is
confidential and

[#50540561_pgfId-1052689]## recommends application server’s
configuration tools to use special

[#50540561_pgfId-1052691]## visual aids for editing them. See the
Connector specification for

[#50540561_pgfId-1052693]## more details. If unspecified, the container
must not treat the

[#50540561_pgfId-1052695]## property as confidential.

[#50540561_pgfId-1052697]## 

[#50540561_pgfId-1052699]## This element must be one of the following,
"true" or "false".

[#50540561_pgfId-1052701]## ]]>

[#50540561_pgfId-1052703]## </xsd:documentation>

[#50540561_pgfId-1052705]## </xsd:annotation>

[#50540561_pgfId-1052707]## </xsd:element>

[#50540561_pgfId-1052709]## 

[#50540561_pgfId-1052711]## 

[#50540561_pgfId-1052713]## </xsd:sequence>

[#50540561_pgfId-1052715]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1052717]## </xsd:complexType>

[#50540561_pgfId-1052719]## 

[#50540561_pgfId-1052721]##<!--
**************************************************** -->

[#50540561_pgfId-1052723]## 

[#50540561_pgfId-1052725]## <xsd:complexType
name="connection-definitionType">

[#50540561_pgfId-1052727]## <xsd:annotation>

[#50540561_pgfId-1052729]## <xsd:documentation>

[#50540561_pgfId-1052731]## 

[#50540561_pgfId-1052733]## The connection-definitionType defines a set
of connection

[#50540561_pgfId-1052735]## interfaces and classes pertaining to a
particular connection

[#50540561_pgfId-1052737]## type. This also includes configurable
properties for

[#50540561_pgfId-1052739]## ManagedConnectionFactory instances that may
be produced out

[#50540561_pgfId-1052741]## of this set.

[#50540561_pgfId-1052743]## 

[#50540561_pgfId-1052745]## </xsd:documentation>

[#50540561_pgfId-1052747]## </xsd:annotation>

[#50540561_pgfId-1052749]## 

[#50540561_pgfId-1052751]## <xsd:sequence>

[#50540561_pgfId-1052753]## <xsd:element
name="managedconnectionfactory-class"

[#50540561_pgfId-1052755]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1052757]## <xsd:annotation>

[#50540561_pgfId-1052759]## <xsd:documentation>

[#50540561_pgfId-1052761]## <![CDATA[

[#50540561_pgfId-1052763]## 

[#50540561_pgfId-1052765]## The element managedconnectionfactory-class
specifies

[#50540561_pgfId-1052767]## the name of the Java class that

[#50540561_pgfId-1052769]## implements the

[#50540561_pgfId-1052771]## javax.resource.spi.ManagedConnectionFactory
interface.

[#50540561_pgfId-1052773]## This Java class is provided as part of
resource

[#50540561_pgfId-1052775]## adapter’s implementation of connector
architecture

[#50540561_pgfId-1052777]## specified contracts. The implementation of
this

[#50540561_pgfId-1052779]## class is required to be a JavaBean.

[#50540561_pgfId-1052781]## 

[#50540561_pgfId-1052783]## Example:

[#50540561_pgfId-1052785]## <managedconnectionfactory-class>

[#50540561_pgfId-1052787]## com.wombat.ManagedConnectionFactoryImpl

[#50540561_pgfId-1052789]## </managedconnectionfactory-class>

[#50540561_pgfId-1052791]## 

[#50540561_pgfId-1052793]## ]]>

[#50540561_pgfId-1052795]## </xsd:documentation>

[#50540561_pgfId-1052797]## </xsd:annotation>

[#50540561_pgfId-1052799]## </xsd:element>

[#50540561_pgfId-1052801]## <xsd:element name="config-property"

[#50540561_pgfId-1052803]## type="javaee:config-propertyType"

[#50540561_pgfId-1052805]## minOccurs="0"

[#50540561_pgfId-1052807]## maxOccurs="unbounded"/>

[#50540561_pgfId-1052809]## <xsd:element
name="connectionfactory-interface"

[#50540561_pgfId-1052811]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1052813]## <xsd:annotation>

[#50540561_pgfId-1052815]## <xsd:documentation>

[#50540561_pgfId-1052817]## <![CDATA[

[#50540561_pgfId-1052819]## 

[#50540561_pgfId-1052821]## The element connectionfactory-interface
specifies

[#50540561_pgfId-1052823]## the name of the ConnectionFactory

[#50540561_pgfId-1052825]## interface supported by the resource adapter.

[#50540561_pgfId-1052827]## 

[#50540561_pgfId-1052829]## Example:

[#50540561_pgfId-1052831]##
<connectionfactory-interface>com.wombat.ConnectionFactory

[#50540561_pgfId-1052833]## </connectionfactory-interface>

[#50540561_pgfId-1052835]## 

[#50540561_pgfId-1052837]## OR

[#50540561_pgfId-1052839]## 

[#50540561_pgfId-1052841]##
<connectionfactory-interface>javax.resource.cci.ConnectionFactory

[#50540561_pgfId-1052843]## </connectionfactory-interface>

[#50540561_pgfId-1052845]## 

[#50540561_pgfId-1052847]## ]]>

[#50540561_pgfId-1052849]## </xsd:documentation>

[#50540561_pgfId-1052851]## </xsd:annotation>

[#50540561_pgfId-1052853]## </xsd:element>

[#50540561_pgfId-1052855]## 

[#50540561_pgfId-1052857]## <xsd:element
name="connectionfactory-impl-class"

[#50540561_pgfId-1052859]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1052861]## <xsd:annotation>

[#50540561_pgfId-1052863]## <xsd:documentation>

[#50540561_pgfId-1052865]## <![CDATA[

[#50540561_pgfId-1052867]## 

[#50540561_pgfId-1052869]## The element connectionfactory-impl-class
specifies

[#50540561_pgfId-1052871]## the name of the ConnectionFactory

[#50540561_pgfId-1052873]## class that implements resource adapter

[#50540561_pgfId-1052875]## specific ConnectionFactory interface.

[#50540561_pgfId-1052877]## 

[#50540561_pgfId-1052879]## Example:

[#50540561_pgfId-1052881]## 

[#50540561_pgfId-1052883]##
<connectionfactory-impl-class>com.wombat.ConnectionFactoryImpl

[#50540561_pgfId-1052885]## </connectionfactory-impl-class>

[#50540561_pgfId-1052887]## 

[#50540561_pgfId-1052889]## ]]>

[#50540561_pgfId-1052891]## </xsd:documentation>

[#50540561_pgfId-1052893]## </xsd:annotation>

[#50540561_pgfId-1052895]## </xsd:element>

[#50540561_pgfId-1052897]## <xsd:element name="connection-interface"

[#50540561_pgfId-1052899]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1052901]## <xsd:annotation>

[#50540561_pgfId-1052903]## <xsd:documentation>

[#50540561_pgfId-1052905]## <![CDATA[

[#50540561_pgfId-1052907]## 

[#50540561_pgfId-1052909]## The connection-interface element specifies
the fully

[#50540561_pgfId-1052911]## qualified name of the Connection interface
supported

[#50540561_pgfId-1052913]## by the resource adapter.

[#50540561_pgfId-1052915]## 

[#50540561_pgfId-1052917]## Example:

[#50540561_pgfId-1052919]## 

[#50540561_pgfId-1052921]##
<connection-interface>javax.resource.cci.Connection

[#50540561_pgfId-1052923]## </connection-interface>

[#50540561_pgfId-1052925]## 

[#50540561_pgfId-1052927]## ]]>

[#50540561_pgfId-1052929]## </xsd:documentation>

[#50540561_pgfId-1052931]## </xsd:annotation>

[#50540561_pgfId-1052933]## </xsd:element>

[#50540561_pgfId-1052935]## <xsd:element name="connection-impl-class"

[#50540561_pgfId-1052937]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1052939]## <xsd:annotation>

[#50540561_pgfId-1052941]## <xsd:documentation>

[#50540561_pgfId-1052943]## <![CDATA[

[#50540561_pgfId-1052945]## 

[#50540561_pgfId-1052947]## The connection-impl-classType specifies the
fully

[#50540561_pgfId-1052949]## qualified name of the Connection class that

[#50540561_pgfId-1052951]## implements resource adapter specific
Connection

[#50540561_pgfId-1052953]## interface. It is used by the
connection-impl-class

[#50540561_pgfId-1052955]## elements.

[#50540561_pgfId-1052957]## 

[#50540561_pgfId-1052959]## Example:

[#50540561_pgfId-1052961]## 

[#50540561_pgfId-1052963]##
<connection-impl-class>com.wombat.ConnectionImpl

[#50540561_pgfId-1052965]## </connection-impl-class>

[#50540561_pgfId-1052967]## 

[#50540561_pgfId-1052969]## ]]>

[#50540561_pgfId-1052971]## </xsd:documentation>

[#50540561_pgfId-1052973]## </xsd:annotation>

[#50540561_pgfId-1052975]## </xsd:element>

[#50540561_pgfId-1052977]## </xsd:sequence>

[#50540561_pgfId-1052979]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1052981]## </xsd:complexType>

[#50540561_pgfId-1052983]## 

[#50540561_pgfId-1052985]##<!--
**************************************************** -->

[#50540561_pgfId-1052987]## 

[#50540561_pgfId-1052989]## <xsd:complexType name="connectorType">

[#50540561_pgfId-1052991]## <xsd:annotation>

[#50540561_pgfId-1052993]## <xsd:documentation>

[#50540561_pgfId-1052995]## 

[#50540561_pgfId-1052997]## The connectorType defines a resource
adapter.

[#50540561_pgfId-1052999]## 

[#50540561_pgfId-1053001]## </xsd:documentation>

[#50540561_pgfId-1053003]## </xsd:annotation>

[#50540561_pgfId-1053005]## 

[#50540561_pgfId-1053007]## <xsd:sequence>

[#50540561_pgfId-1054547]## <xsd:element name="module-name"
type="javaee:string" minOccurs="0">

[#50540561_pgfId-1054549]## <xsd:annotation>

[#50540561_pgfId-1054551]## <xsd:documentation>

[#50540561_pgfId-1054553]## 

[#50540561_pgfId-1054555]## The element module-name specifies the name
of the

[#50540561_pgfId-1054557]## resource adapter.

[#50540561_pgfId-1054559]## 

[#50540561_pgfId-1054561]## If there is no module-name specified, the
module-name

[#50540561_pgfId-1054563]## is determined as defined in Section EE.8.1.1
and EE.8.1.2

[#50540561_pgfId-1054565]## of the Java Platform, Enterprise Edition
(Java EE)

[#50540561_pgfId-1054725]## Specification, version 6.

[#50540561_pgfId-1054723]## </xsd:documentation>

[#50540561_pgfId-1054721]## </xsd:annotation>

[#50540561_pgfId-1054766]## </xsd:element>

[#50540561_pgfId-1053009]## <xsd:group ref="javaee:descriptionGroup"/>

[#50540561_pgfId-1053011]## <xsd:element name="vendor-name"

[#50540561_pgfId-1053013]## type="javaee:xsdStringType" minOccurs=”0”>

[#50540561_pgfId-1053015]## <xsd:annotation>

[#50540561_pgfId-1053017]## <xsd:documentation>

[#50540561_pgfId-1053019]## 

[#50540561_pgfId-1053021]## The element vendor-name specifies the name
of

[#50540561_pgfId-1053023]## resource adapter provider vendor.

[#50540561_pgfId-1053025]## 

[#50540561_pgfId-1053027]##If there is no vendor-name specified, the
application server

[#50540561_pgfId-1053029]##server must consider the default ““ (empty
string) as

[#50540561_pgfId-1053031]##the name of the resource adapter provider
vendor.

[#50540561_pgfId-1053033]## 

[#50540561_pgfId-1053035]## </xsd:documentation>

[#50540561_pgfId-1053037]## </xsd:annotation>

[#50540561_pgfId-1053039]## </xsd:element>

[#50540561_pgfId-1053041]## <xsd:element name="eis-type"

[#50540561_pgfId-1053043]## type="javaee:xsdStringType" minOccurs=”0”>

[#50540561_pgfId-1053045]## <xsd:annotation>

[#50540561_pgfId-1053047]## <xsd:documentation>

[#50540561_pgfId-1053049]## 

[#50540561_pgfId-1053051]## The element eis-type contains information
about the

[#50540561_pgfId-1053053]## type of the EIS. For example, the type of an
EIS can

[#50540561_pgfId-1053055]## be product name of EIS independent of any
version

[#50540561_pgfId-1053057]## info.

[#50540561_pgfId-1053059]## 

[#50540561_pgfId-1053061]## This helps in identifying EIS instances that
can be

[#50540561_pgfId-1053063]## used with this resource adapter.

[#50540561_pgfId-1053065]## 

[#50540561_pgfId-1054089]## If there is no eis-type specified, the
application

[#50540561_pgfId-1054087]## server must consider the default "" (empty
string) as

[#50540561_pgfId-1054085]## the type of the EIS.

[#50540561_pgfId-1054083]## 

[#50540561_pgfId-1053067]## </xsd:documentation>

[#50540561_pgfId-1053069]## </xsd:annotation>

[#50540561_pgfId-1053071]## </xsd:element>

[#50540561_pgfId-1053073]## <xsd:element name="resourceadapter-version"

[#50540561_pgfId-1053075]## type="javaee:xsdStringType" minOccurs=”0”>

[#50540561_pgfId-1053077]## <xsd:annotation>

[#50540561_pgfId-1053079]## <xsd:documentation>

[#50540561_pgfId-1053081]## 

[#50540561_pgfId-1053083]## The element resourceadapter-version
specifies a string-based version

[#50540561_pgfId-1053085]## of the resource adapter from the resource
adapter

[#50540561_pgfId-1053087]## provider.

[#50540561_pgfId-1053089]## 

[#50540561_pgfId-1054158]## If there is no resourceadapter-version
specified, the application

[#50540561_pgfId-1054156]## server must consider the default "" (empty
string) as

[#50540561_pgfId-1054154]## the version of the resource adapter.

[#50540561_pgfId-1054152]## 

[#50540561_pgfId-1053091]## </xsd:documentation>

[#50540561_pgfId-1053093]## </xsd:annotation>

[#50540561_pgfId-1053095]## 

[#50540561_pgfId-1053097]## </xsd:element>

[#50540561_pgfId-1053099]## <xsd:element name="license"

[#50540561_pgfId-1053101]## type="javaee:licenseType"

[#50540561_pgfId-1053103]## minOccurs="0"/>

[#50540561_pgfId-1053105]## <xsd:element name="resourceadapter"

[#50540561_pgfId-1053107]## type="javaee:resourceadapterType"/>

[#50540561_pgfId-1053109]## 

[#50540561_pgfId-1053111]## <xsd:element name="required-work-context"

[#50540561_pgfId-1053113]## type="javaee:fully-qualified-classType”

[#50540561_pgfId-1053115]## minOccurs="0”

[#50540561_pgfId-1053117]## maxOccurs="unbounded”>

[#50540561_pgfId-1053119]## <xsd:annotation>

[#50540561_pgfId-1053121]## <xsd:documentation>

[#50540561_pgfId-1053123]## 

[#50540561_pgfId-1053125]## The element required-work-context specifies
the

[#50540561_pgfId-1053127]## class name that implements WorkContext
interface,

[#50540561_pgfId-1053129]## that a resource adapter requires the
application server to support.

[#50540561_pgfId-1053131]## 

[#50540561_pgfId-1053133]## </xsd:documentation>

[#50540561_pgfId-1053135]## </xsd:annotation>

[#50540561_pgfId-1053137]## </xsd:element>

[#50540561_pgfId-1053139]## 

[#50540561_pgfId-1053141]## </xsd:element>

[#50540561_pgfId-1053143]## 

[#50540561_pgfId-1053145]## </xsd:sequence>

[#50540561_pgfId-1053147]## <xsd:attribute name="version"

[#50540561_pgfId-1053149]## type="javaee:dewey-versionType"

[#50540561_pgfId-1053151]## fixed="1.7"

[#50540561_pgfId-1053153]## use="required">

[#50540561_pgfId-1053155]## <xsd:annotation>

[#50540561_pgfId-1053157]## <xsd:documentation>

[#50540561_pgfId-1053159]## 

[#50540561_pgfId-1053161]## The version indicates the version of the
schema to be used by the

[#50540561_pgfId-1053163]## deployment tool. This attribute does not
have a default, and the

[#50540561_pgfId-1053165]## resource adapter developer/deployer is
required to specify it.

[#50540561_pgfId-1053167]## This attribute allows the deployment tool to
choose which

[#50540561_pgfId-1053169]## schema to validate the descriptor against.

[#50540561_pgfId-1053171]## 

[#50540561_pgfId-1053173]## 

[#50540561_pgfId-1053175]## </xsd:documentation>

[#50540561_pgfId-1053177]## </xsd:annotation>

[#50540561_pgfId-1053179]## </xsd:attribute>

[#50540561_pgfId-1053181]## <xsd:attribute name="metadata-complete"
type="xsd:boolean">

[#50540561_pgfId-1053183]## <xsd:annotation>

[#50540561_pgfId-1053185]## <xsd:documentation>

[#50540561_pgfId-1053187]## The metadata-complete attribute defines
whether the deployment

[#50540561_pgfId-1053189]## descriptor for the resource adapter module
is complete, or whether

[#50540561_pgfId-1053191]## the class files available to the module and
packaged with the resource

[#50540561_pgfId-1053193]## adapter should be examined for annotations
that specify deployment

[#50540561_pgfId-1053195]## information.

[#50540561_pgfId-1053197]## 

[#50540561_pgfId-1053199]## If metadata-complete is set to "true", the
deployment tool of the

[#50540561_pgfId-1053201]## application server must ignore any
annotations that specify

[#50540561_pgfId-1053203]## deployment information, which might be
present in the class files of

[#50540561_pgfId-1053205]## the application.If metadata-complete is not
specified or is set to

[#50540561_pgfId-1053207]## “false”, the deployment tool must examine
the class files of the

[#50540561_pgfId-1053209]##application for annotations, as specified by
this specification. If

[#50540561_pgfId-1053211]##the deployment descriptor is not included or
is included but not

[#50540561_pgfId-1053213]## marked metadata-complete, the deployment
tool will process

[#50540561_pgfId-1053215]##annotations

[#50540561_pgfId-1054234]## 

[#50540561_pgfId-1053217]## Application servers must assume that
metadata-complete is true for

[#50540561_pgfId-1053219]## resource adapter modules with deployment
descriptor version

[#50540561_pgfId-1053221]## lower than 1.6.

[#50540561_pgfId-1053223]## </xsd:documentation>

[#50540561_pgfId-1053225]## </xsd:annotation>

[#50540561_pgfId-1053227]## </xsd:attribute>

[#50540561_pgfId-1053229]## 

[#50540561_pgfId-1053231]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1053233]## </xsd:complexType>

[#50540561_pgfId-1053235]## 

[#50540561_pgfId-1053237]##<!--
**************************************************** -->

[#50540561_pgfId-1053239]## 

[#50540561_pgfId-1053241]## <xsd:complexType
name="credential-interfaceType">

[#50540561_pgfId-1053243]## <xsd:annotation>

[#50540561_pgfId-1053245]## <xsd:documentation>

[#50540561_pgfId-1053247]## 

[#50540561_pgfId-1053249]## The credential-interfaceType specifies the

[#50540561_pgfId-1053251]## interface that the resource adapter
implementation

[#50540561_pgfId-1053253]## supports for the representation of the

[#50540561_pgfId-1053255]## credentials. This element(s) that use this
type,

[#50540561_pgfId-1053257]## i.e. credential-interface, should be used by

[#50540561_pgfId-1053259]## application server to find out the
Credential

[#50540561_pgfId-1053261]## interface it should use as part of the
security

[#50540561_pgfId-1053263]## contract.

[#50540561_pgfId-1053265]## 

[#50540561_pgfId-1053267]## The possible values are:

[#50540561_pgfId-1053269]## 

[#50540561_pgfId-1053271]##
javax.resource.spi.security.PasswordCredential

[#50540561_pgfId-1053273]## org.ietf.jgss.GSSCredential

[#50540561_pgfId-1053275]##
javax.resource.spi.security.GenericCredential

[#50540561_pgfId-1053277]## 

[#50540561_pgfId-1053279]## </xsd:documentation>

[#50540561_pgfId-1053281]## </xsd:annotation>

[#50540561_pgfId-1053283]## <xsd:simpleContent>

[#50540561_pgfId-1053285]## <xsd:restriction
base="javaee:fully-qualified-classType">

[#50540561_pgfId-1053287]## <xsd:enumeration

[#50540561_pgfId-1053289]##
value="javax.resource.spi.security.PasswordCredential"/>

[#50540561_pgfId-1053291]## <xsd:enumeration

[#50540561_pgfId-1053293]## value="org.ietf.jgss.GSSCredential"/>

[#50540561_pgfId-1053295]## <xsd:enumeration

[#50540561_pgfId-1053297]##
value="javax.resource.spi.security.GenericCredential"/>

[#50540561_pgfId-1053299]## </xsd:restriction>

[#50540561_pgfId-1053301]## </xsd:simpleContent>

[#50540561_pgfId-1053303]## </xsd:complexType>

[#50540561_pgfId-1053305]## 

[#50540561_pgfId-1053307]##<!--
**************************************************** -->

[#50540561_pgfId-1053309]## 

[#50540561_pgfId-1053311]## <xsd:complexType
name="inbound-resourceadapterType">

[#50540561_pgfId-1053313]## <xsd:annotation>

[#50540561_pgfId-1053315]## <xsd:documentation>

[#50540561_pgfId-1053317]## 

[#50540561_pgfId-1053319]## The inbound-resourceadapterType specifies
information

[#50540561_pgfId-1053321]## about an inbound resource adapter. This
contains information

[#50540561_pgfId-1053323]## specific to the implementation of the
resource adapter

[#50540561_pgfId-1053325]## library as specified through the
messageadapter element.

[#50540561_pgfId-1053327]## 

[#50540561_pgfId-1053329]## </xsd:documentation>

[#50540561_pgfId-1053331]## </xsd:annotation>

[#50540561_pgfId-1053333]## 

[#50540561_pgfId-1053335]## <xsd:sequence>

[#50540561_pgfId-1053337]## <xsd:element name="messageadapter"

[#50540561_pgfId-1053339]## type="javaee:messageadapterType"

[#50540561_pgfId-1053341]## minOccurs="0">

[#50540561_pgfId-1053343]## <xsd:unique
name="messagelistener-type-uniqueness">

[#50540561_pgfId-1053345]## <xsd:annotation>

[#50540561_pgfId-1053347]## <xsd:documentation>

[#50540561_pgfId-1053349]## 

[#50540561_pgfId-1053351]## The messagelistener-type element content
must be

[#50540561_pgfId-1053353]## unique in the messageadapter. Several
messagelisteners

[#50540561_pgfId-1053355]## can not use the same messagelistener-type.

[#50540561_pgfId-1053357]## 

[#50540561_pgfId-1053359]## </xsd:documentation>

[#50540561_pgfId-1053361]## </xsd:annotation>

[#50540561_pgfId-1053363]## <xsd:selector
xpath="javaee:messagelistener"/>

[#50540561_pgfId-1053365]## <xsd:field
xpath="javaee:messagelistener-type"/>

[#50540561_pgfId-1053367]## </xsd:unique>

[#50540561_pgfId-1053369]## </xsd:element>

[#50540561_pgfId-1053371]## </xsd:sequence>

[#50540561_pgfId-1053373]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1053375]## </xsd:complexType>

[#50540561_pgfId-1053377]## 

[#50540561_pgfId-1053379]##<!--
**************************************************** -->

[#50540561_pgfId-1053381]## 

[#50540561_pgfId-1053383]## <xsd:complexType name="licenseType">

[#50540561_pgfId-1053385]## <xsd:annotation>

[#50540561_pgfId-1053387]## <xsd:documentation>

[#50540561_pgfId-1053389]## 

[#50540561_pgfId-1053391]## The licenseType specifies licensing
requirements for the

[#50540561_pgfId-1053393]## resource adapter module. This type specifies
whether a

[#50540561_pgfId-1053395]## license is required to deploy and use this
resource adapter,

[#50540561_pgfId-1053397]## and an optional description of the licensing
terms

[#50540561_pgfId-1053399]## (examples: duration of license, number of
connection

[#50540561_pgfId-1053401]## restrictions). It is used by the license
element.

[#50540561_pgfId-1053403]## 

[#50540561_pgfId-1053405]## </xsd:documentation>

[#50540561_pgfId-1053407]## </xsd:annotation>

[#50540561_pgfId-1053409]## 

[#50540561_pgfId-1053411]## <xsd:sequence>

[#50540561_pgfId-1053413]## <xsd:element name="description"

[#50540561_pgfId-1053415]## type="javaee:descriptionType"

[#50540561_pgfId-1053417]## minOccurs="0"

[#50540561_pgfId-1053419]## maxOccurs="unbounded"/>

[#50540561_pgfId-1053421]## <xsd:element name="license-required"

[#50540561_pgfId-1053423]## type="javaee:true-falseType">

[#50540561_pgfId-1053425]## <xsd:annotation>

[#50540561_pgfId-1053427]## <xsd:documentation>

[#50540561_pgfId-1053429]## 

[#50540561_pgfId-1053431]## The element license-required specifies
whether a

[#50540561_pgfId-1053433]## license is required to deploy and use the

[#50540561_pgfId-1053435]## resource adapter. This element must be one
of

[#50540561_pgfId-1053437]## the following, "true" or "false".

[#50540561_pgfId-1053439]## 

[#50540561_pgfId-1053441]## </xsd:documentation>

[#50540561_pgfId-1053443]## </xsd:annotation>

[#50540561_pgfId-1053445]## </xsd:element>

[#50540561_pgfId-1053447]## </xsd:sequence>

[#50540561_pgfId-1053449]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1053451]## </xsd:complexType>

[#50540561_pgfId-1053453]## 

[#50540561_pgfId-1053455]##<!--
**************************************************** -->

[#50540561_pgfId-1053457]## 

[#50540561_pgfId-1053459]## <xsd:complexType name="messageadapterType">

[#50540561_pgfId-1053461]## <xsd:annotation>

[#50540561_pgfId-1053463]## <xsd:documentation>

[#50540561_pgfId-1053465]## 

[#50540561_pgfId-1053467]## The messageadapterType specifies information
about the

[#50540561_pgfId-1053469]## messaging capabilities of the resource
adapter. This

[#50540561_pgfId-1053471]## contains information specific to the
implementation of the

[#50540561_pgfId-1053473]## resource adapter library as specified
through the

[#50540561_pgfId-1053475]## messagelistener element.

[#50540561_pgfId-1053477]## 

[#50540561_pgfId-1053479]## </xsd:documentation>

[#50540561_pgfId-1053481]## </xsd:annotation>

[#50540561_pgfId-1053483]## 

[#50540561_pgfId-1053485]## <xsd:sequence>

[#50540561_pgfId-1053487]## <xsd:element name="messagelistener"

[#50540561_pgfId-1053489]## type="javaee:messagelistenerType"

[#50540561_pgfId-1053491]## maxOccurs="unbounded"/>

[#50540561_pgfId-1053493]## </xsd:sequence>

[#50540561_pgfId-1053495]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1053497]## </xsd:complexType>

[#50540561_pgfId-1053499]## 

[#50540561_pgfId-1053501]##<!--
**************************************************** -->

[#50540561_pgfId-1053503]## 

[#50540561_pgfId-1053505]## <xsd:complexType name="messagelistenerType">

[#50540561_pgfId-1053507]## <xsd:annotation>

[#50540561_pgfId-1053509]## <xsd:documentation>

[#50540561_pgfId-1053511]## 

[#50540561_pgfId-1053513]## The messagelistenerType specifies
information about a

[#50540561_pgfId-1053515]## specific message listener supported by the
messaging

[#50540561_pgfId-1053517]## resource adapter. It contains information on
the Java type

[#50540561_pgfId-1053519]## of the message listener interface and an
activation

[#50540561_pgfId-1053521]## specification.

[#50540561_pgfId-1053523]## 

[#50540561_pgfId-1053525]## </xsd:documentation>

[#50540561_pgfId-1053527]## </xsd:annotation>

[#50540561_pgfId-1053529]## 

[#50540561_pgfId-1053531]## <xsd:sequence>

[#50540561_pgfId-1053533]## <xsd:element name="messagelistener-type"

[#50540561_pgfId-1053535]## type="javaee:fully-qualified-classType">

[#50540561_pgfId-1053537]## <xsd:annotation>

[#50540561_pgfId-1053539]## <xsd:documentation>

[#50540561_pgfId-1053541]## <![CDATA[

[#50540561_pgfId-1053543]## 

[#50540561_pgfId-1053545]## The element messagelistener-type specifies
the fully

[#50540561_pgfId-1053547]## qualified name of the Java type of a message

[#50540561_pgfId-1053549]## listener interface.

[#50540561_pgfId-1053551]## 

[#50540561_pgfId-1053553]## Example:

[#50540561_pgfId-1053555]## 

[#50540561_pgfId-1053557]##
<messagelistener-type>javax.jms.MessageListener

[#50540561_pgfId-1053559]## </messagelistener-type>

[#50540561_pgfId-1053561]## 

[#50540561_pgfId-1053563]## ]]>

[#50540561_pgfId-1053565]## </xsd:documentation>

[#50540561_pgfId-1053567]## </xsd:annotation>

[#50540561_pgfId-1053569]## 

[#50540561_pgfId-1053571]## </xsd:element>

[#50540561_pgfId-1053573]## <xsd:element name="activationspec"

[#50540561_pgfId-1053575]## type="javaee:activationspecType"/>

[#50540561_pgfId-1053577]## </xsd:sequence>

[#50540561_pgfId-1053579]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1053581]## </xsd:complexType>

[#50540561_pgfId-1053583]## 

[#50540561_pgfId-1053585]##<!--
**************************************************** -->

[#50540561_pgfId-1053587]## 

[#50540561_pgfId-1053589]## <xsd:complexType
name="outbound-resourceadapterType">

[#50540561_pgfId-1053591]## <xsd:annotation>

[#50540561_pgfId-1053593]## <xsd:documentation>

[#50540561_pgfId-1053595]## 

[#50540561_pgfId-1053597]## The outbound-resourceadapterType specifies
information about

[#50540561_pgfId-1053599]## an outbound resource adapter. The
information includes fully

[#50540561_pgfId-1053601]## qualified names of classes/interfaces
required as part of

[#50540561_pgfId-1053603]## the connector architecture specified
contracts for

[#50540561_pgfId-1053605]## connection management, level of transaction
support

[#50540561_pgfId-1053607]## provided, one or more authentication
mechanisms supported

[#50540561_pgfId-1053609]## and additional required security
permissions.

[#50540561_pgfId-1053611]## 

[#50540561_pgfId-1054364]## If any of the outbound resource adapter
elements (transaction-support,

[#50540561_pgfId-1054366]## authentication-mechanism,
reauthentication-support) is specified through

[#50540561_pgfId-1054368]## this element or metadata annotations, and no
connection-definition is

[#50540561_pgfId-1054370]## specified as part of this element or through
annotations, the

[#50540561_pgfId-1054418]## application server must consider this an
error and fail deployment.

[#50540561_pgfId-1054372]## 

[#50540561_pgfId-1053613]## If there is no authentication-mechanism
specified as part of

[#50540561_pgfId-1053615]## this or metadata annotations, then the
resource adapter does not

[#50540561_pgfId-1053617]## support any standard security authentication
mechanisms as

[#50540561_pgfId-1053619]## part of security contract. The application
server ignores

[#50540561_pgfId-1053621]## the security part of the system contracts in
this case.

[#50540561_pgfId-1053623]## 

[#50540561_pgfId-1054242]## If there is no transaction-support specified
as part of

[#50540561_pgfId-1054240]## this element, then the application server
must

[#50540561_pgfId-1054238]## consider that the resource adapter does not
support either

[#50540561_pgfId-1054236]## the resource manager local or JTA
transactions and must consider

[#50540561_pgfId-1054298]## the transaction support as NoTransaction.
Note that resource adapters may

[#50540561_pgfId-1054441]##specify the level of transaction support to
be used at runtime for a

[#50540561_pgfId-1054443]##ManagedConnectionFactory through the
TransactionSupport interface.

[#50540561_pgfId-1054445]## 

[#50540561_pgfId-1054447]## If there is no reauthentication-support
specified as part of

[#50540561_pgfId-1054449]## this element or metadata annotation, then
the application server must

[#50540561_pgfId-1054451]## consider that the resource adapter does not
support re-authentication of

[#50540561_pgfId-1054453]## ManagedConnections.

[#50540561_pgfId-1054455]## 

[#50540561_pgfId-1053625]## </xsd:documentation>

[#50540561_pgfId-1053627]## </xsd:annotation>

[#50540561_pgfId-1053629]## 

[#50540561_pgfId-1053631]## <xsd:sequence>

[#50540561_pgfId-1053633]## <xsd:element name="connection-definition"

[#50540561_pgfId-1053635]## type="javaee:connection-definitionType"

[#50540561_pgfId-1053637]## maxOccurs="unbounded" minOccurs=”0”/>

[#50540561_pgfId-1053639]## <xsd:element name="transaction-support"

[#50540561_pgfId-1053641]## type="javaee:transaction-supportType"
minOccurs=”0”/>

[#50540561_pgfId-1053643]## <xsd:element name="authentication-mechanism"

[#50540561_pgfId-1053645]## type="javaee:authentication-mechanismType"

[#50540561_pgfId-1053647]## minOccurs="0"

[#50540561_pgfId-1053649]## maxOccurs="unbounded"/>

[#50540561_pgfId-1053651]## <xsd:element name="reauthentication-support"

[#50540561_pgfId-1053653]## type="javaee:true-falseType" minOccurs=”0”/>

[#50540561_pgfId-1053655]## <xsd:annotation>

[#50540561_pgfId-1053657]## <xsd:documentation>

[#50540561_pgfId-1053659]## 

[#50540561_pgfId-1053661]## The element reauthentication-support
specifies

[#50540561_pgfId-1053663]## whether the resource adapter implementation
supports

[#50540561_pgfId-1053665]## re-authentication of existing Managed-
Connection

[#50540561_pgfId-1053667]## instance. Note that this information is for
the

[#50540561_pgfId-1053669]## resource adapter implementation and not for
the

[#50540561_pgfId-1053671]## underlying EIS instance. This element must
have

[#50540561_pgfId-1053673]## either a "true" or "false" value.

[#50540561_pgfId-1053675]## 

[#50540561_pgfId-1053677]## </xsd:documentation>

[#50540561_pgfId-1053679]## </xsd:annotation>

[#50540561_pgfId-1053681]## 

[#50540561_pgfId-1053683]## </xsd:element>

[#50540561_pgfId-1053685]## </xsd:sequence>

[#50540561_pgfId-1053687]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1053689]## </xsd:complexType>

[#50540561_pgfId-1053691]## 

[#50540561_pgfId-1053693]##<!--
**************************************************** -->

[#50540561_pgfId-1053695]## 

[#50540561_pgfId-1053697]## <xsd:complexType
name="required-config-propertyType">

[#50540561_pgfId-1053699]## <xsd:annotation>

[#50540561_pgfId-1053701]## <xsd:documentation>

[#50540561_pgfId-1053703]## <![CDATA[

[#50540561_pgfId-1053705]## 

[#50540561_pgfId-1053707]## The required-config-propertyType contains a
declaration

[#50540561_pgfId-1053709]## of a single configuration property used for
specifying a

[#50540561_pgfId-1053711]## required configuration property name. It is
used

[#50540561_pgfId-1053713]## by required-config-property elements.

[#50540561_pgfId-1053715]## 

[#50540561_pgfId-1053717]## 

[#50540561_pgfId-1053719]## Usage of this type is deprecated from
Connector 1.6 specification.

[#50540561_pgfId-1053721]## Refer to required-config-property element
for more information.

[#50540561_pgfId-1053723]## 

[#50540561_pgfId-1053725]## Example:

[#50540561_pgfId-1053727]## 

[#50540561_pgfId-1053729]##
<required-config-property>Destination</required-config-property>

[#50540561_pgfId-1053731]## 

[#50540561_pgfId-1053733]## ]]>

[#50540561_pgfId-1053735]## </xsd:documentation>

[#50540561_pgfId-1053737]## </xsd:annotation>

[#50540561_pgfId-1053739]## 

[#50540561_pgfId-1053741]## <xsd:sequence>

[#50540561_pgfId-1053743]## <xsd:element name="description"

[#50540561_pgfId-1053745]## type="javaee:descriptionType"

[#50540561_pgfId-1053747]## minOccurs="0"

[#50540561_pgfId-1053749]## maxOccurs="unbounded"/>

[#50540561_pgfId-1053751]## <xsd:element name="config-property-name"

[#50540561_pgfId-1053753]## type="javaee:config-property-nameType"/>

[#50540561_pgfId-1053755]## </xsd:sequence>

[#50540561_pgfId-1053757]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1053759]## </xsd:complexType>

[#50540561_pgfId-1053761]## 

[#50540561_pgfId-1053763]##<!--
**************************************************** -->

[#50540561_pgfId-1053765]## 

[#50540561_pgfId-1053767]## <xsd:complexType name="resourceadapterType">

[#50540561_pgfId-1053769]## <xsd:annotation>

[#50540561_pgfId-1053771]## <xsd:documentation>

[#50540561_pgfId-1053773]## 

[#50540561_pgfId-1053775]## The resourceadapterType specifies
information about the

[#50540561_pgfId-1053777]## resource adapter. The information includes

[#50540561_pgfId-1053779]## resource adapter Java class name,
configuration properties,

[#50540561_pgfId-1053781]## information specific to the implementation
of the resource

[#50540561_pgfId-1053783]## adapter library as specified through the

[#50540561_pgfId-1053785]## outbound-resourceadapter and
inbound-resourceadapter

[#50540561_pgfId-1053787]## elements, and an optional set of
administered objects.

[#50540561_pgfId-1053789]## 

[#50540561_pgfId-1053791]## </xsd:documentation>

[#50540561_pgfId-1053793]## </xsd:annotation>

[#50540561_pgfId-1053795]## 

[#50540561_pgfId-1053797]## <xsd:sequence>

[#50540561_pgfId-1053799]## <xsd:element name="resourceadapter-class"

[#50540561_pgfId-1053801]## type="javaee:fully-qualified-classType"

[#50540561_pgfId-1053803]## minOccurs="0">

[#50540561_pgfId-1053805]## <xsd:annotation>

[#50540561_pgfId-1053807]## <xsd:documentation>

[#50540561_pgfId-1053809]## 

[#50540561_pgfId-1053811]## The element resourceadapter-class specifies
the

[#50540561_pgfId-1053813]## name of a Java class that implements

[#50540561_pgfId-1053815]## the javax.resource.spi.ResourceAdapter

[#50540561_pgfId-1053817]## interface. This Java class is provided as
part of

[#50540561_pgfId-1053819]## resource adapter’s implementation of
connector

[#50540561_pgfId-1053821]## architecture specified contracts. The
implementation

[#50540561_pgfId-1053823]## of this class is required to be a JavaBean.

[#50540561_pgfId-1053825]## 

[#50540561_pgfId-1053827]## </xsd:documentation>

[#50540561_pgfId-1053829]## </xsd:annotation>

[#50540561_pgfId-1053831]## 

[#50540561_pgfId-1053833]## </xsd:element>

[#50540561_pgfId-1053835]## <xsd:element name="config-property"

[#50540561_pgfId-1053837]## type="javaee:config-propertyType"

[#50540561_pgfId-1053839]## minOccurs="0"

[#50540561_pgfId-1053841]## maxOccurs="unbounded"/>

[#50540561_pgfId-1053843]## <xsd:element name="outbound-resourceadapter"

[#50540561_pgfId-1053845]## type="javaee:outbound-resourceadapterType"

[#50540561_pgfId-1053847]## minOccurs="0">

[#50540561_pgfId-1053849]## <xsd:unique
name="connectionfactory-interface-uniqueness">

[#50540561_pgfId-1053851]## <xsd:annotation>

[#50540561_pgfId-1053853]## <xsd:documentation>

[#50540561_pgfId-1053855]## 

[#50540561_pgfId-1053857]## The connectionfactory-interface element
content

[#50540561_pgfId-1053859]## must be unique in the
outbound-resourceadapter.

[#50540561_pgfId-1053861]## Multiple connection-definitions can not use
the

[#50540561_pgfId-1053863]## same connectionfactory-type.

[#50540561_pgfId-1053865]## 

[#50540561_pgfId-1053867]## </xsd:documentation>

[#50540561_pgfId-1053869]## </xsd:annotation>

[#50540561_pgfId-1053871]## <xsd:selector
xpath="javaee:connection-definition"/>

[#50540561_pgfId-1053873]## <xsd:field
xpath="javaee:connectionfactory-interface"/>

[#50540561_pgfId-1053875]## </xsd:unique>

[#50540561_pgfId-1053877]## </xsd:element>

[#50540561_pgfId-1053879]## <xsd:element name="inbound-resourceadapter"

[#50540561_pgfId-1053881]## type="javaee:inbound-resourceadapterType"

[#50540561_pgfId-1053883]## minOccurs="0"/>

[#50540561_pgfId-1053885]## <xsd:element name="adminobject"

[#50540561_pgfId-1053887]## type="javaee:adminobjectType"

[#50540561_pgfId-1053889]## minOccurs="0"

[#50540561_pgfId-1053891]## maxOccurs="unbounded"/>

[#50540561_pgfId-1053893]## 

[#50540561_pgfId-1053895]## <xsd:unique
name="adminobject-type-uniqueness">

[#50540561_pgfId-1053897]## <xsd:annotation>

[#50540561_pgfId-1053899]## <xsd:documentation>

[#50540561_pgfId-1053901]## 

[#50540561_pgfId-1053903]## The adminobject-interface and
adminobject-class element content must be

[#50540561_pgfId-1053905]## unique in the resourceadapterType. Several
admin objects

[#50540561_pgfId-1053907]## can not use the same adminobject-interface
and adminobject-class.

[#50540561_pgfId-1053909]## 

[#50540561_pgfId-1053911]## </xsd:documentation>

[#50540561_pgfId-1053913]## </xsd:annotation>

[#50540561_pgfId-1053915]## <xsd:selector xpath="javaee:adminobject"/>

[#50540561_pgfId-1053917]## <xsd:field
xpath="javaee:adminobject-interface"/>

[#50540561_pgfId-1053919]## <xsd:field
xpath="javaee:adminobject-class"/>

[#50540561_pgfId-1053921]## </xsd:unique>

[#50540561_pgfId-1053923]## 

[#50540561_pgfId-1053925]## <xsd:element name="security-permission"

[#50540561_pgfId-1053927]## type="javaee:security-permissionType"

[#50540561_pgfId-1053929]## minOccurs="0"

[#50540561_pgfId-1053931]## maxOccurs="unbounded"/>

[#50540561_pgfId-1053933]## </xsd:sequence>

[#50540561_pgfId-1053935]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1053937]## </xsd:complexType>

[#50540561_pgfId-1053939]## 

[#50540561_pgfId-1053941]##<!--
**************************************************** -->

[#50540561_pgfId-1053943]## 

[#50540561_pgfId-1053945]## <xsd:complexType
name="security-permissionType">

[#50540561_pgfId-1053947]## <xsd:annotation>

[#50540561_pgfId-1053949]## <xsd:documentation>

[#50540561_pgfId-1053951]## 

[#50540561_pgfId-1053953]## The security-permissionType specifies a
security

[#50540561_pgfId-1053955]## permission that is required by the resource
adapter code.

[#50540561_pgfId-1053957]## 

[#50540561_pgfId-1053959]## The security permission listed in the
deployment descriptor

[#50540561_pgfId-1053961]## are ones that are different from those
required by the

[#50540561_pgfId-1053963]## default permission set as specified in the
connector

[#50540561_pgfId-1053965]## specification. The optional description can
mention specific

[#50540561_pgfId-1053967]## reason that resource adapter requires a
given security

[#50540561_pgfId-1053969]## permission.

[#50540561_pgfId-1053971]## 

[#50540561_pgfId-1053973]## </xsd:documentation>

[#50540561_pgfId-1053975]## </xsd:annotation>

[#50540561_pgfId-1053977]## 

[#50540561_pgfId-1053979]## <xsd:sequence>

[#50540561_pgfId-1053981]## <xsd:element name="description"

[#50540561_pgfId-1053983]## type="javaee:descriptionType"

[#50540561_pgfId-1053985]## minOccurs="0"

[#50540561_pgfId-1053987]## maxOccurs="unbounded"/>

[#50540561_pgfId-1053989]## <xsd:element name="security-permission-spec"

[#50540561_pgfId-1053991]## type="javaee:xsdStringType">

[#50540561_pgfId-1053993]## <xsd:annotation>

[#50540561_pgfId-1053995]## <xsd:documentation>

[#50540561_pgfId-1053997]## 

[#50540561_pgfId-1053999]## The element security-permission-spec
specifies a security

[#50540561_pgfId-1054001]## permission based on the Security policy file

[#50540561_pgfId-1054003]## syntax. Refer to the following URL for Sun’s

[#50540561_pgfId-1054005]## implementation of the security permission

[#50540561_pgfId-1054007]## specification:

[#50540561_pgfId-1054009]## 

[#50540561_pgfId-1054011]##
http://docs.oracle.com/javase/6/docs/technotes/guides/security/PolicyF

[#50540561_pgfId-1054913]## iles.html

[#50540561_pgfId-1054013]## </xsd:documentation>

[#50540561_pgfId-1054015]## </xsd:annotation>

[#50540561_pgfId-1054017]## </xsd:element>

[#50540561_pgfId-1054019]## </xsd:sequence>

[#50540561_pgfId-1054021]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540561_pgfId-1054023]## </xsd:complexType>

[#50540561_pgfId-1054025]## 

[#50540561_pgfId-1054079]## 

[#50540561_pgfId-1054081]##</xsd:schema>

[#50540561_pgfId-1045977]## 

====== [#50540566_pgfId-874]## 

======= [#50540566_pgfId-5529]##

image:conn-158.gif[image]

[#50540566_64651]##Runtime Environment

image:conn-159.gif[image]

[#50540566_pgfId-999458]##This chapter focuses on the Java portion of a
resource adapter that executes within a Java compatible runtime
environment. A Java runtime environment is provided by an application
server and its containers.

[#50540566_pgfId-999459]##The chapter specifies the Java APIs that a
Java EE-compliant application server and its containers must make
available to a resource adapter at runtime. A portable resource adapter
can rely on these APIs to be available on all Java EE-compliant
application servers.

[#50540566_pgfId-999460]##The chapter also specifies programming
restrictions imposed on a resource adapter. These restrictions enable an
application server to enforce security and manage a runtime environment
with multiple configured resource adapters.

======= [#50540566_pgfId-999461]##

image:conn-160.gif[image]

Programming APIs

[#50540566_pgfId-999462]##A resource adapter provider relies on a Java
EE compliant application server to provide the following APIs:

[#50540566_pgfId-999463]##Java SDK, Standard Edition, version 6.0 that
includes the following as part of either the core platform or standard
extensions: Java IDL, JNDI Standard Extension, and RMI-IIOP. (see
link:conn.htm#50540564_25780[See Java Platform, Standard Edition 7API
Specification])

[#50540566_pgfId-999464]##Required APIs for Java _TM_ Platform,
Enterprise Edition, Version 6 as specified in the Java EE platform
specification (see link:conn.htm#50540564_22967[See Java Platform,
Enterprise Edition (Java EE) Specification, version 7]).

[#50540566_pgfId-999468]##Java Authentication and Authorization Service
(JAAS) 1.0 that requires at least Java 2 SDK, Standard Edition, version
1.3 or the Java 2 Runtime Environment version 1.3.

======= [#50540566_pgfId-999470]##

image:conn-160.gif[image]

[#50540566_43666]##Security Permissions

[#50540566_pgfId-999471]##An application server must provide a set of
security permissions for executing a resource adapter in a managed
runtime environment. A resource adapter must be granted explicit
permissions to access system resources.

[#50540566_pgfId-999472]##Since the exact set of required security
permissions for a resource adapter depends on the overall security
policy for an operational environment and the implementation
requirements of a resource adapter, the connector architecture does not
define a fixed set of permissions.

[#50540566_pgfId-999473]##The following permission set represents the
default set of security permissions that a resource adapter should
expect from an application server. These security permissions are
described in detail in the JavaTM Platform, Standard Edition
documentation. Refer to
_http://docs.oracle.com/javase/6/docs/technotes/guides/security/permissions.html_
.

======= [#50540566_pgfId-999938]##[#50540566_22585]##Default Security Permission Set

[#50540566_pgfId-999944]##Security Permission

[#50540566_pgfId-999946]##Default Policy

[#50540566_pgfId-999948]##Notes

[#50540566_pgfId-999950]## _java.security._

[#50540566_pgfId-999951]## _AllPermission_

[#50540566_pgfId-999953]##deny

[#50540566_pgfId-999955]##Extreme care should be taken before granting
this permission to a resource adapter. This permission should only be
granted if the resource adapter code is completely trusted and when it
is prohibitively cumbersome to add necessary permissions to the security
policy.

[#50540566_pgfId-999957]## _java.awt.AWTPermission_

[#50540566_pgfId-999959]##deny *

[#50540566_pgfId-999961]##A resource adapter must not use AWT code to
interact with display or input devices.

[#50540566_pgfId-999963]## _java.io.FilePermission_

[#50540566_pgfId-999965]##grant read and write <pathname>

[#50540566_pgfId-999966]## 

[#50540566_pgfId-999967]##deny rest

[#50540566_pgfId-999969]##A _java.io.FilePermission_ represents access
to a file or directory. A _FilePermission_ consists of a pathname and a
set of actions valid for that pathname.

[#50540566_pgfId-999970]##A resource adapter is granted permission to
read/write files as specified by the _pathname_ , which is specific to a
configured operational environment.

[#50540566_pgfId-999971]##It is important to consider the implications
of granting _Write_ permission for _<<ALL FILES>>_ because this grants
the resource adapter permissions to write to the entire file system.
This can allow a malicious resource adapter to mangle system binaries
for the JVM environment.

[#50540566_pgfId-999973]## _java.net.NetPermission_

[#50540566_pgfId-999975]##deny *

[#50540566_pgfId-999977]## 

[#50540566_pgfId-999979]## _java.util._

[#50540566_pgfId-999980]## _PropertyPermission_

[#50540566_pgfId-999982]##grant read

[#50540566_pgfId-999983]##(allows _System.getProperty_ to be called)

[#50540566_pgfId-999984]## 

[#50540566_pgfId-999985]##deny rest

[#50540566_pgfId-999987]##Granting code permission to access certain
system properties ( _java.home_ ) can potentially give malevolent code
sensitive information about the system environment, such as the Java
installation directory.

[#50540566_pgfId-999989]## _java.lang.reflect.ReflectPermission_

[#50540566_pgfId-999991]##deny *

[#50540566_pgfId-999993]## 

[#50540566_pgfId-999995]## _java.lang._

[#50540566_pgfId-999996]## _RuntimePermission_

[#50540566_pgfId-999998]##deny _*_

[#50540566_pgfId-1000000]##By default, _RuntimePermission_ is denied to
the resource adapter code.

[#50540566_pgfId-1000001]##A resource adapter should explicitly request
_LoadLibrary.\{libraryName}_ to link a dynamic library. The
_libraryName_ represents a specific library.

[#50540566_pgfId-1000002]##A resource adapter that manages threads must
explicitly request permission to _modifyThread_ through its deployment
descriptor.

[#50540566_pgfId-1000003]##A resource adapter should never be granted
_exitVM_ permission in a managed application server environment.

[#50540566_pgfId-1000005]## _java.security._

[#50540566_pgfId-1000006]## _SecurityPermission_

[#50540566_pgfId-1000008]##deny *

[#50540566_pgfId-1000010]## 

[#50540566_pgfId-1000012]## _java.net._

[#50540566_pgfId-1000013]## _SocketPermission_

[#50540566_pgfId-1000015]##grant connect *

[#50540566_pgfId-1000016]## 

[#50540566_pgfId-1000017]##deny rest

[#50540566_pgfId-1000019]##This represents permission to access a
network by way of sockets. A _SocketPermission_ consists of a host
specification and a set of actions specifying ways to connect to that
host.

[#50540566_pgfId-1000020]##A resource adapter is granted permission to
connect to any host as indicated by the wildcard *.

[#50540566_pgfId-1000021]##A resource adapter may be granted permission
to accept connections from other hosts by way of a “grant accept *”.
This may be necessary for resource adapters that support inbound
communication.

[#50540566_pgfId-1000023]## _java.security._

[#50540566_pgfId-1000024]## _SerializablePermission_

[#50540566_pgfId-1000026]##deny *

[#50540566_pgfId-1000028]##This ensures that a resource adapter cannot
subclass _ObjectOutputStream_ or _ObjectInputStream_ to override the
default serialization or deserialization of objects or to substitute one
object for another during serialization or deserialization.

[#50540566_pgfId-999935]## 

======= [#50540566_pgfId-999568]##

image:conn-160.gif[image]

Requirements

[#50540566_pgfId-999569]##A resource adapter provider must ensure that
resource adapter code does not conflict with the default security
permission set. By ensuring this, a resource adapter can be deployed and
run in any application server without execution or manageability
problems.

[#50540566_pgfId-999570]##If a resource adapter requires security
permissions other than those specified in the default set, it must
describe such requirements in the XML deployment descriptor using the
_security-permission_ element or through the _SecurityPermission_
annotation described in link:conn.htm#50540619_57131[See
@SecurityPermission].

[#50540566_pgfId-999571]##A deployment descriptor-based specification of
an extended permission set for a resource adapter allows the deployer to
analyze the security implications of the extended permission set and
make a deployment decision accordingly. An application server must be
capable of deploying a resource adapter with the default permission set.

======= [#50540566_pgfId-999572]##Example

[#50540566_pgfId-999573]##The resource adapter implementation creates a
_java.net.Socket_ and retrieves the hostname using the _getHostName_
method in _java.net.InetAddress_ .

======= [#50540566_pgfId-999576]##Methods and Security Permissions Required

[#50540566_pgfId-999582]##Method

[#50540566_pgfId-999584]##Security Manager Method Called

[#50540566_pgfId-999586]##Permission

[#50540566_pgfId-999588]## _java.net.Socket_

[#50540566_pgfId-999589]## _Socket(...)_

[#50540566_pgfId-999591]## _checkConnect(_ host, port _)_

[#50540566_pgfId-999593]## _java.net.SocketPermission_ "host:port _",
"connect"_

[#50540566_pgfId-999595]## _java.net.InetAddress_

[#50540566_pgfId-999596]## _public String_

[#50540566_pgfId-999597]## _getHostName()_

[#50540566_pgfId-999598]## 

[#50540566_pgfId-999600]## _checkConnect(_ host, -1 _)_

[#50540566_pgfId-999601]## 

[#50540566_pgfId-999603]## _java.net.SocketPermission "_ host _", "_
resolve _"_

[#50540566_pgfId-999604]## 

[#50540566_pgfId-999608]##The default _SocketPermission_ , as specified
in link:conn.htm#50540566_22585[See Default Security Permission Set], is
_grant connect_ and _deny rest_ . This means that if resource adapter
uses the default permission set, the first method _Socket(...)_ will be
allowed while the second method _InetAddress_ . _getHostName_ is
disallowed.

[#50540566_pgfId-999609]##The resource adapter is required to explicitly
request security permission for the _InetAddress_ . _getHostName_ method
in the _security-permission-spec_ element of its XML deployment
descriptor or through the _SecurityPermission_ annotation described in
link:conn.htm#50540619_57131[See @SecurityPermission]. The following is
an example of allowing additional security permissions:

[width="100%",cols="100%",]
|===
a|
[#50540566_pgfId-999709]##<security-permission-spec>

[#50540566_pgfId-999710]## grant \{

[#50540566_pgfId-999711]## permission java.net.SocketPermission *,
"resolve";

[#50540566_pgfId-999712]## };

[#50540566_pgfId-999707]##</security-permission-spec>

|===

======= [#50540566_pgfId-999615]##

image:conn-160.gif[image]

Privileged Code

[#50540566_pgfId-999616]##A resource adapter runs in its own protection
domain as identified by its code source and security permission set. For
the resource adapter to be allowed to perform a secured action, such as
writing a file, it must have been granted permission for that particular
action.

[#50540566_pgfId-999617]##Resource adapter code is considered system
code which may require more security permissions than the calling
application component code. For example, when an application component
calls a resource adapter method to execute a function call on the
underlying EIS instance, the resource adapter code may need more
security permissions than allowed to the calling component, such as the
ability to create a thread.

[#50540566_pgfId-999618]##The Java security architecture requires that
whenever a system resource access or any secured action is attempted,
all code traversed by the current execution thread up to that point must
have the necessary permissions for the system resource access, unless
some code on the thread has been marked as privileged. Refer to
_http://docs.oracle.com/javase/6/docs/technotes/guides/security/doprivileged.html._

[#50540566_pgfId-999884]##To support such scenarios, the resource
adapter code should use the _privileged_ code feature in the Java
security architecture. This enables the resource adapter code to
temporarily perform more secured actions than are available directly to
the application code calling the resource adapter.

======= [#50540566_pgfId-999885]##Example

[#50540566_pgfId-999886]##A resource adapter from Wombat Systems
packaged in the wombat.rar file contains the following permission
specification:

[width="100%",cols="100%",]
|===
a|
[#50540566_pgfId-999889]##<security-permission>

[#50540566_pgfId-999890]## <security-permission-spec>

[#50540566_pgfId-999891]## grant \{

[#50540566_pgfId-999892]## permission java.io.FilePermission

[#50540566_pgfId-999893]##
"$\{user.home}$\{file.separator}trace\{file.separator}-",

[#50540566_pgfId-999894]## "read,write,delete";

[#50540566_pgfId-999895]## };

[#50540566_pgfId-999896]## </security-permission-spec>

[#50540566_pgfId-999897]##</security-permission>

|===

[#50540566_pgfId-999631]##During resource adapter deployment, the
application server processes this _security-permission-spec_ and grants
the necessary permissions to the _wombat.rar_ code base. This is an
implementation-specific mechanism and not prescribed by the
specification. As an example, the application server may append these
permissions to the _java.policy_ file or some implementation-specific
policy file, and this may involve manual intervention.

[width="100%",cols="100%",]
|===
a|
[#50540566_pgfId-999757]##// application code

[#50540566_pgfId-999758]##...

[#50540566_pgfId-999759]##WombatConnectionFactory wcf =

[#50540566_pgfId-999760]## (WombatConnectionFactory)
jndi.lookup("WombatConnectionFactory");

[#50540566_pgfId-999761]##WombatConnection wc = wcf.getConnection(..);

[#50540566_pgfId-999762]##doWork(wc); // calls into resource adapter
code

[#50540566_pgfId-999763]##// resource adapter implementation of
WombatConnection

[#50540566_pgfId-999764]##...

[#50540566_pgfId-999765]##AccessController.doPrivileged(new
PrivilegedAction() \{

[#50540566_pgfId-999766]## public Object run() \{

[#50540566_pgfId-999767]## // privileged code goes here, for example:

[#50540566_pgfId-999768]## File file = File.createNewFile();

[#50540566_pgfId-999769]## writeTraceInfoToFile(file);

[#50540566_pgfId-999770]## return null; // nothing to return

[#50540566_pgfId-999771]## }

[#50540566_pgfId-999755]##});

|===

[#50540566_pgfId-999648]##In addition to specifying these required
permissions, the resource adapter must also use _doPrivileged_ blocks at
strategic locations in its code to prevent the permission checking from
reaching the application code or the application server code. The
_doPrivileged_ block allows the _AccessController_ to temporarily grant
the necessary permissions to the resource adapter code and to stop
checking the rest of the call stack. This allows the resource adapter
code to be unaffected by the calling application code’s security
permission restrictions.

======= [#50540566_pgfId-1000058]##

image:conn-160.gif[image]

[#50540566_17637]##Dependency Injection

[#50540566_pgfId-1000079]##A resource adapter archive can be a bean
archive (see Chapter 12 of link:conn.htm#50540564_23149[See Contexts and
Dependency Injection for the Java EE Platform 1.1]). The section titled
“Support for Dependency Injection” in the “Resources, Naming and
Injection” chapter of the Java EE Platform Specification (see
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7]) provides more details on the dependency
injection requirements of an application server.

[#50540566_pgfId-1000160]##The following JavaBeans of a resource adapter
archive have their lifecycle managed by the application server (see
link:conn.htm#50540558_48357[See Lifecycle Management]):

[#50540566_pgfId-1000230]## _ResourceAdapter_

[#50540566_pgfId-1000289]## _ManagedConnectionFactory_

[#50540566_pgfId-1000301]## _ActivationSpec_

[#50540566_pgfId-1000310]##Administered Objects

[#50540566_pgfId-1000323]##These JavaBeans may be used as CDI managed
beans if they are annotated with a CDI bean-defining annotation or
contained in a bean archive for which CDI is enabled. However, if they
are used as CDI managed beans, it must be noted that the instances that
are managed by CDI may not be the instances that are managed by the
application server. For example:

[#50540566_pgfId-1000422]##If a _ResourceAdapter_ class is injected into
other component classes like Servlets, the injected _ResourceAdapter_
instance may not be the _ResourceAdapter_ instance managed by the
application server

[#50540566_pgfId-1000449]##If an _ActivationSpec_ declares an injection
point whose bean type is a _ResourceAdapter_ class, the injected
_ResourceAdapter_ instance may not be the _ResourceAdapter_ instance
managed by the application server or the one associated with the
_ActivationSpec_

[#50540566_pgfId-1000494]##Since these JavaBeans may not be portably
supported as CDI managed beans, it is recommended to not use these
JavaBeans as CDI managed beans. A future version of this specification
would address supporting these JavaBeans as CDI managed beans.

====== [#50540554_pgfId-874]## 

======= [#50540554_pgfId-5529]##

image:conn-161.gif[image]

[#50540554_88682]##Exceptions

image:conn-162.gif[image]

[#50540554_pgfId-999458]##This chapter specifies standard exceptions
that identify error conditions which may occur as part of the connector
architecture.

[#50540554_pgfId-999459]##The connector architecture defines two classes
of exceptions:

[#50540554_pgfId-999460]##System Exceptions - Indicate an unexpected
error condition that occurs as part of an invocation of a method defined
in the system contracts. For example, system exceptions are used to
indicate transaction management-related errors. A system exception is
targeted for handling by an application server or resource adapter,
depending on who threw the exception, and may not be reported in its
original form directly to an application component.

[#50540554_pgfId-999461]##Application Exceptions - Thrown when an
application component accesses an EIS resource. For example, an
application exception may indicate an error in the execution of a
function on a target EIS. These exceptions are meant to be handled
directly by an application component.

[#50540554_pgfId-999462]##The connector architecture defines the
_javax.resource.ResourceException_ class as the root of the system
exception hierarchy. The _ResourceException_ class extends the
_java.lang.Exception_ class and is a checked exception.

[#50540554_pgfId-999463]##The _javax.resource.ResourceException_ is also
the root of the application exception hierarchy for CCI. Application
level exceptions are specified in more detail in the API documentation
for CCI.

[#50540554_pgfId-999615]##Note, an extended implementation of an
exception type provided by a resource adapter may override the
_getLocalizedMessage_ method to provide a localized message.

======= [#50540554_pgfId-999464]##

image:conn-163.gif[image]

ResourceException

[#50540554_pgfId-999465]##A _ResourceException_ provides the following
information:

[#50540554_pgfId-999466]##A resource adapter-specific string describing
the error. This string is a standard Java exception message and is
available through the _getMessage_ method.

[#50540554_pgfId-999467]##A resource adapter-specific error code that
identifies the error condition represented by the _ResourceException_ .

[#50540554_pgfId-999468]##A reference to another exception. Often a
_ResourceException_ results from a lower-level problem. If appropriate,
a lower-level exception, such as _java.lang.Exception_ or any derived
exception type, may be linked to a _ResourceException_ instance.

======= [#50540554_pgfId-999470]##

image:conn-163.gif[image]

[#50540554_68528]##System Exceptions

[#50540554_pgfId-999471]##The connector architecture requires that
methods, as part of a system contract implementation, use the checked
_ResourceException_ and other standard exceptions derived from it to
indicate system-level error conditions. Using checked exceptions leads
to a strict enforcement of the contract for throwing and catching system
exceptions and dealing with error conditions.

[#50540554_pgfId-999472]##In addition, a method implementation may use
_java.lang.RuntimeException_ or any derived exception to indicate
runtime error conditions of varying severity levels. Using unchecked
exceptions to indicate important system-level error conditions is not
recommended for an implementation of system contracts.

[#50540554_pgfId-999473]##The method should use _java.lang.Error_ to
indicate a serious error condition that it does not require the caller
to catch. A method is not required to declare in its throws clause any
subclasses of _Error_ that may be thrown but not caught during the
execution of the method, since these errors are abnormal conditions that
should never occur.

======= [#50540554_pgfId-999474]##Exception Hierarchy

[#50540554_pgfId-999475]##The _ResourceException_ represents a generic
form of exception. A derived exception represents a specific class of
error conditions. This design enables the method invocation code to
catch a class of error conditions based on the exception type and to
handle error conditions appropriately.

[#50540554_pgfId-999476]##The following exceptions are derived from
_ResourceException_ to indicate more specific classes of system error
conditions:

[#50540554_pgfId-999477]## _javax.resource.spi.SecurityException_ . A
_SecurityException_ indicates error conditions related to the security
contract between an application server and resource adapter. The common
error conditions represented by this exception are:

[#50540554_pgfId-999478]##Invalid security information, represented by a
_Subject_ instance, passed across the security contract. For example,
credentials may have expired or be in an invalid format.

[#50540554_pgfId-999479]##Lack of support for a specific security
mechanism in an EIS or resource adapter.

[#50540554_pgfId-999480]##Failure to create a connection to an EIS
because of failed authentication or authorization.

[#50540554_pgfId-999481]##Failure to authenticate a resource principal
to an EIS or failure to establish a secure association with an
underlying EIS instance.

[#50540554_pgfId-999482]##Access control exception indicating that a
requested access to an EIS resource or a request to create a new
connection has been denied.

[#50540554_pgfId-999483]##
_javax.resource.spi.LocalTransactionException_ . A
_LocalTransaction-Exception_ represents various error conditions related
to the local transaction management contract. The JTA specification
specifies the _javax.transaction-.xa.XAException_ class for exceptions
related to an _XAResource_ -based transaction management contract. The
_LocalTransactionException_ is used for the local transaction management
contract to indicate the following types of error conditions:

[#50540554_pgfId-999484]##Invalid transaction context when a transaction
operation is executed. For example, calling the
_LocalTransaction.commit_ method without an active local transaction is
an error condition.

[#50540554_pgfId-999485]##Transaction is rolled back instead of being
committed in the _LocalTransaction.commit_ method.

[#50540554_pgfId-999486]##Attempt to start a local transaction from the
same thread on a _ManagedConnection_ instance that is already associated
with an active local transaction.

[#50540554_pgfId-999487]##All resource adapter or resource
manager-specific error conditions related to local transaction
management. Examples are violation of integrity constraints, deadlock
detection, communication failure during transaction completion, or any
retry requirement.

[#50540554_pgfId-999488]##
_javax.resource.spi.ResourceAdapterInternalException_ . This exception
indicates all system-level error conditions related to a resource
adapter. The common error conditions indicated by this exception type
are:

[#50540554_pgfId-999489]##Invalid configuration of the
_ManagedConnectionFactory_ for creating a new physical connection. An
example is an invalid server name for a target EIS instance.

[#50540554_pgfId-999490]##Failure to create a physical connection to a
EIS instance due to a communication protocol error or a resource adapter
implementation-specific error.

[#50540554_pgfId-999491]##Error conditions internal to a resource
adapter implementation.

[#50540554_pgfId-999492]## _javax.resource.spi.EISSystemException_ . An
_EISSystemException_ is used to indicate any EIS-specific system-level
error conditions. Examples of common error conditions are failure or
inactivity of an EIS instance, communication failure, and an
EIS-specific error during the creation of a physical connection.

[#50540554_pgfId-999493]##
_javax.resource.spi.ApplicationServerInternalException_ . This exception
is thrown by an application server to indicate error conditions specific
to an application server. Example error conditions are: errors related
to an application server configuration or implementation of mechanisms
internal to an application server, such as connection pooling and thread
management.

[#50540554_pgfId-999494]##
_javax.resource.spi.ResourceAllocationException_ . This exception is
thrown by an application server or resource adapter to indicate a
failure to allocate system resources, such as threads and physical
connections. An example is an error condition that results when an upper
bound is reached for the maximum number of physical connections that can
be managed by an application server-specific connection pool.

[#50540554_pgfId-999495]## _javax.resource.spi.IllegalStateException_ .
This exception is thrown from a method if the invoked code, either the
resource adapter or the application server for system contracts, is in
an illegal or inappropriate state for the method invocation.

[#50540554_pgfId-999496]## _javax.resource.NotSupportedException_ . This
exception is thrown to indicate that invoked code, either the resource
adapter or the application server for system contracts, cannot execute
an operation because the operation is not a supported feature. For
example, if the transaction support level for a resource adapter is
_NoTransaction_ , an invocation of the _ManagedConnection.getXAResource_
method throws a _NotSupportedException_ exception.

[#50540554_pgfId-999497]## _javax.resource.spi.CommException_ . This
exception indicates errors related to failed or interrupted
communication with an EIS instance. Examples of common error conditions
represented by this exception type include communication protocol errors
and invalidated connections due to server failure.

[#50540554_pgfId-999498]##javax.resource.spi.InvalidPropertyException.
This exception is thrown to indicate invalid configuration property
settings.

[#50540554_pgfId-999499]##javax.resource.spi.UnavailableException. This
exception is thrown to indicate that a service is unavailable.

======= [#50540554_pgfId-999500]##

image:conn-163.gif[image]

Work Exceptions

[#50540554_pgfId-999501]##These exceptions are thrown by an application
server to report error conditions related to the work management
contract.

[#50540554_pgfId-999502]## _javax.resource.spi.work.WorkException._ A
common base class for all Work processing related exceptions.

[#50540554_pgfId-999503]##
_javax.resource.spi.work.WorkRejectedException._ This exception is
thrown to indicate that a submitted _Work_ instance has been rejected.
The rejection may be due to internal factors or start timeout
expiration.

[#50540554_pgfId-999504]##
_javax.resource.spi.work.WorkCompletedException._ This exception is
thrown to indicate that a submitted _Work_ instance has completed with
an exception.

======= [#50540554_pgfId-999505]##

image:conn-163.gif[image]

Additional Exceptions

[#50540554_pgfId-999509]##The JTA specification (see
link:conn.htm#50540564_28808[See Java Transaction API (JTA)
Specification, version 1.2]) specifies the
javax.transaction.xa.XAException class for exceptions related to the
XAResource-based transaction management contract.

[#50540554_pgfId-998874]## 

====== [#50540625_pgfId-998290]## 

======= [#50540625_pgfId-999009]##

image:conn-164.gif[image]

Compatibility and Migration

image:conn-165.gif[image]

[#50540625_pgfId-999015]##This chapter summarizes compatibility and
migration issues for the Java EE Connectors specification. For a
detailed description on Compatibility and Migration and how they relate
to the Java EE Platform in general, refer the chapter on “Compatibility
and Migration” in the Java EE platform specification (see
link:conn.htm#50540564_22967[See Java Platform, Enterprise Edition (Java
EE) Specification, version 7]).

======= [#50540625_pgfId-999020]##

image:conn-166.gif[image]

Compatibility

[#50540625_pgfId-999030]##Java EE application servers are compatible
with the Java EE Connector Architecture specification if they implement
the APIs and behavior required by this specification. Resource adapter
modules are compatible with a release of the Java EE Connector
Architecture specification if they only depend on APIs and behavior
defined by that release of the specification. A new release of the Java
EE Connector architecture specification is compatible with previous
releases of the specification if all portable resource adapters written
to the previous release of the specification will also run unchanged and
with identical behavior on the new release of the specification.

======= [#50540625_pgfId-999032]##Changes Since Connector 1.5 Specification

[#50540625_pgfId-999033]##This section lists the compatibility issues of
the Java EE Connector Architecture 1.6 specification vis-a-vis the
earlier version of the specification (that is, J2EE Connector
Architecture 1.5).

======= [#50540625_pgfId-999036]##Standalone Resource Adapter Visibility to an Application

[#50540625_pgfId-999039]##The Java EE Connector Architecture 1.6
specification defines the classloading requirements for an application
server in link:conn.htm#50540561_19166[See Class Loading Requirements].

[#50540625_pgfId-999041]##In the earlier version of this specification,
the specification required all deployed standalone resource adapters to
be made available to all the applications. The new requirements allow an
application server to make a standalone resource adapter available to an
application, only when there is an explicit reference to the resource
adapter. See link:conn.htm#50540561_19166[See Class Loading
Requirements], for more information on when an application may portably
assume the visibility of a deployed standalone resource adapter

======= [#50540625_pgfId-999043]##Deprecation of required-config-property

[#50540625_pgfId-999044]##With the availability of validation
capabilities of the Bean Validation specification (see
link:conn.htm#50540564_77345[See Bean Validation Specification, version
1.1]) to a resource adapter JavaBean, as detailed in
link:conn.htm#50540558_66628[See JavaBean Validation], the existing
mechanism provided to an _ActivationSpec_ JavaBean to specify
_required-config-property_ has been deprecated.

{empty}[#50540625_pgfId-999046]##The use of _required-config-property_
element, described in link:conn.htm#50540559_57563[See ActivationSpec
JavaBean], is deprecated since the Java EE Connector Architecture 1.6
Specification. The resource adapter implementation is recommended to use
the _NotNull_ Bean Validation annotation or its XML validation
descriptor equivalent to indicate that a configuration property is
required to be specified by the deployer, as described in
link:conn.htm#50540559_57563[See ActivationSpec JavaBean]

======= [#50540625_pgfId-999035]##

image:conn-166.gif[image]

Migration

[#50540625_pgfId-999049]##Migration is the act of converting a resource
adapter to use new facilities introduced in this release of the
specification. Given the strong level of compatibility in this release
of the specification, migration is largely an optional exercise. Still,
an application may be improved (better performance, simpler to develop,
more flexible, etc.) by converting it to use newer facilities of the
specification.

======= [#50540625_pgfId-999056]##Changes Since the Connector 1.5 Specification

======= [#50540625_pgfId-999053]##Annotations

[#50540625_pgfId-999051]##Through the availability of the metadata
annotations (see link:conn.htm#50540619_87413[See Metadata
Annotations]), it is simpler to develop a resource adapter module. By
using annotations, many resource adapters can avoid the need for
deployment descriptors and sometimes avoid the need to implement
interfaces, greatly simplifying application development. Developers
should consider the use of annotations instead of deployment
descriptors.

====== [#50540563_pgfId-874]## 

======= [#50540563_pgfId-5529]##

image:conn-167.gif[image]

Projected Items

image:conn-168.gif[image]

[#50540563_pgfId-999493]##The following are some of the features planned
for future versions of this specification:

[#50540563_pgfId-999495]##Common Client Interface. The CCI may be
extended to include support for XML, type mapping, and metadata
facility.

[#50540563_pgfId-998874]## 

[#50540562_pgfId-874]## 

[#50540562_pgfId-1000005]##

image:conn-169.gif[image]

Previous Version Deployment Descriptors

image:conn-170.gif[image]

[#50540562_pgfId-1000060]##This appendix contains Document Type
Definitions (DTDs) and XML schemas (XSD) for Deployment Descriptors from
previous versions of the J2EE Connector Architecture specification. All
Java EE products are required to support these DTDs as well as the XML
Schema Definition specified in this version of the specification. This
ensures that resource adapters written to previous versions of this
specification can be deployed on products supporting the current version
of this specification.

[#50540562_pgfId-1003972]##

image:conn-171.gif[image]

J2EE Connector Architecture 1.0 Resource Adapter XML DTD

[#50540562_pgfId-1000062]##This section specifies the XML DTD for the
1.0 resource adapter deployment descriptor. The comments in the DTD
specify additional requirements for syntax and semantics that cannot be
specified by the DTD mechanism.

[#50540562_pgfId-1000063]##A resource adapter, or an application server
on behalf of a resource adapter, may specify additional deployment
information beyond the standard deployment descriptor. The additional
information should be stored in a separate file and should refer to the
standard deployment descriptor.

[#50540562_pgfId-1002503]##A resource adapter is not allowed to add any
non-standard information into a standard deployment descriptor.

======= [#50540562_pgfId-1002988]##Connector Architecture 1.0 Resource Adapter DTD

[#50540562_pgfId-1002990]##<!--

[#50540562_pgfId-1002992]##This is the XML DTD for the Connector 1.0
deployment descriptor.

[#50540562_pgfId-1002994]##All Connector 1.0 deployment descriptors must
include a DOCTYPE of the following form:

[#50540562_pgfId-1002996]## 

[#50540562_pgfId-1002998]##<!DOCTYPE connector PUBLIC"-//Sun
Microsystems, Inc.//DTD Connector 1.0//EN"
"http://java.sun.com/dtd/connector_1_0.dtd">

[#50540562_pgfId-1003000]## 

[#50540562_pgfId-1003002]##-->

[#50540562_pgfId-1003004]## 

[#50540562_pgfId-1003006]##<!--

[#50540562_pgfId-1003008]##The following conventions apply to all J2EE
deployment descriptor

[#50540562_pgfId-1003010]##elements unless indicated otherwise.

[#50540562_pgfId-1003012]## 

[#50540562_pgfId-1003014]##- In elements that contain PCDATA, leading
and trailing whitespace

[#50540562_pgfId-1003016]## in the data may be ignored.

[#50540562_pgfId-1003018]## 

[#50540562_pgfId-1003020]##- In elements whose value is an "enumerated
type", the value is case sensitive.

[#50540562_pgfId-1003022]## 

[#50540562_pgfId-1003024]##- In elements that specify a pathname to a
file within the same

[#50540562_pgfId-1003026]## JAR file, relative filenames (i.e., those
not starting with "/")

[#50540562_pgfId-1003028]## are considered relative to the root of the
JAR file’s namespace.

[#50540562_pgfId-1003030]## Absolute filenames (i.e., those starting
with "/") also specify

[#50540562_pgfId-1003032]## names in the root of the JAR file’s
namespace. In general, relative

[#50540562_pgfId-1003034]## names are preferred. The exception is .war
files where absolute

[#50540562_pgfId-1003036]## names are preferred for consistency with the
Servlet API.

[#50540562_pgfId-1003038]##-->

[#50540562_pgfId-1003040]## 

[#50540562_pgfId-1003042]## 

[#50540562_pgfId-1003044]##<!--

[#50540562_pgfId-1003046]##The connector element is the root element of
the deployment descriptor

[#50540562_pgfId-1003048]##for the resource adapter. This element
includes general information - vendor

[#50540562_pgfId-1003050]##name, version, specification version
supported, icon - about the

[#50540562_pgfId-1003052]##resource adapter module. It also includes
information specific to the

[#50540562_pgfId-1003054]##implementation of the resource adapter
library as specified through

[#50540562_pgfId-1003056]##the element resourceadapter.

[#50540562_pgfId-1003058]##-->

[#50540562_pgfId-1003060]##<!ELEMENT connector (display-name?,
description?, icon?, vendor-name,

[#50540562_pgfId-1003062]##spec-version, eis-type, version, license?,
resourceadapter>

[#50540562_pgfId-1003064]## 

[#50540562_pgfId-1003066]##<!--

[#50540562_pgfId-1003068]##The element authentication-mechanism
specifies an authentication mechanism

[#50540562_pgfId-1003070]##supported by the resource adapter. Note that
this support is for

[#50540562_pgfId-1003072]##the resource adapter and not for the
underlying EIS instance. The

[#50540562_pgfId-1003074]##optional description specifies any resource
adapter specific requirement

[#50540562_pgfId-1003076]##for the support of security contract and
authentication mechanism.

[#50540562_pgfId-1003078]## 

[#50540562_pgfId-1003080]##Note that BasicPassword mechanism type should
support the

[#50540562_pgfId-1003082]##javax.resource.spi.security.PasswordCredential
interface. The Kerbv5

[#50540562_pgfId-1003084]##mechanism type should support the
javax.resource.spi.security.Generic-

[#50540562_pgfId-1003086]##Credential interface.

[#50540562_pgfId-1003088]## 

[#50540562_pgfId-1003090]##Used in: resourceadapter

[#50540562_pgfId-1003092]##-->

[#50540562_pgfId-1003094]##<!ELEMENT authentication-mechanism (

[#50540562_pgfId-1003096]##description?, authentication-mechanism-type,
credential-interface)>

[#50540562_pgfId-1003098]## 

[#50540562_pgfId-1003100]##<!--

[#50540562_pgfId-1003102]##The element authentication-mechanism-type
specifies type of an authentication

[#50540562_pgfId-1003104]##mechanism.

[#50540562_pgfId-1003106]## 

[#50540562_pgfId-1003108]##The example values are:

[#50540562_pgfId-1003110]##<authentication-mechanism-type>BasicPassword

[#50540562_pgfId-1003112]## </authentication-mechanism-type>

[#50540562_pgfId-1003114]## <authentication-mechanism-type>Kerbv5

[#50540562_pgfId-1003116]## </authentication-mechanism-type>

[#50540562_pgfId-1003118]## 

[#50540562_pgfId-1003120]##Any additional security mechanisms are
outside the scope of the

[#50540562_pgfId-1003122]##Connector architecture specification.

[#50540562_pgfId-1003124]## 

[#50540562_pgfId-1003126]##Used in: authentication-mechanism

[#50540562_pgfId-1003128]##-->

[#50540562_pgfId-1003130]##<!ELEMENT authentication-mechanism-type
(#PCDATA)>

[#50540562_pgfId-1003132]## 

[#50540562_pgfId-1003134]##<!--

[#50540562_pgfId-1003136]##The element config-property contains a
declaration of a single

[#50540562_pgfId-1003138]##configuration property for a
ManagedConnectionFactory instance.

[#50540562_pgfId-1003140]## 

[#50540562_pgfId-1003142]##Each ManagedConnectionFactory instance
creates connections to a

[#50540562_pgfId-1003144]##specific EIS instance based on the properties
configured on the

[#50540562_pgfId-1003146]##ManagedConnectionFactory instance. The
configurable properties are

[#50540562_pgfId-1003148]##specified only once in the deployment
descriptor, even though a

[#50540562_pgfId-1003150]##resource adapter can be used to configure
multiple ManagedConnnection-

[#50540562_pgfId-1003152]##Factory instances (that create connections to
different instances of

[#50540562_pgfId-1003154]##the same EIS).

[#50540562_pgfId-1003156]## 

[#50540562_pgfId-1003158]##The declaration consists of an optional
description, name, type

[#50540562_pgfId-1003160]##and an optional value of the configuration
property. If the resource

[#50540562_pgfId-1003162]##adapter provider does not specify a value
than the deployer is

[#50540562_pgfId-1003164]##responsible for providing a valid value for a
configuration property.

[#50540562_pgfId-1003166]## 

[#50540562_pgfId-1003168]##Any bounds or well-defined values of
properties should be described

[#50540562_pgfId-1003170]##in the description element.

[#50540562_pgfId-1003172]## 

[#50540562_pgfId-1003174]##Used in: resourceadapter

[#50540562_pgfId-1003176]##-->

[#50540562_pgfId-1003178]##<!ELEMENT config-property (description?,
config-property-name,

[#50540562_pgfId-1003180]##config-property-type,
config-property-value?)>

[#50540562_pgfId-1003182]## 

[#50540562_pgfId-1003184]##<!--

[#50540562_pgfId-1003186]##The element config-property-name contains the
name of a configuration

[#50540562_pgfId-1003188]##property.

[#50540562_pgfId-1003190]## 

[#50540562_pgfId-1003192]##The connector architecture defines a set of
well-defined properties

[#50540562_pgfId-1003194]##all of type java.lang.String. These are as
follows:

[#50540562_pgfId-1003196]##
<config-property-name>ServerName</config-property-name>

[#50540562_pgfId-1003198]##
<config-property-name>PortNumber</config-property-name>

[#50540562_pgfId-1003200]##
<config-property-name>UserName</config-property-name>

[#50540562_pgfId-1003202]##
<config-property-name>Password</config-property-name>

[#50540562_pgfId-1003204]##
<config-property-name>ConnectionURL</config-property-name>

[#50540562_pgfId-1003206]## 

[#50540562_pgfId-1003208]##A resource adapter provider can extend this
property set to include

[#50540562_pgfId-1003210]##properties specific to the resource adapter
and its underlying EIS.

[#50540562_pgfId-1003212]## 

[#50540562_pgfId-1003214]##Used in: config-property

[#50540562_pgfId-1003216]## 

[#50540562_pgfId-1003218]##Example:
<config-property-name>ServerName</config-property-name>

[#50540562_pgfId-1003220]##-->

[#50540562_pgfId-1003222]##<!ELEMENT config-property-name (#PCDATA)>

[#50540562_pgfId-1003224]## 

[#50540562_pgfId-1003226]##<!--

[#50540562_pgfId-1003228]##The element config-property-type contains the
Java

[#50540562_pgfId-1003230]##type of a configuration property as required
by ManagedConnection-

[#50540562_pgfId-1003232]##Factory instance.

[#50540562_pgfId-1003234]## 

[#50540562_pgfId-1003236]##The following are the legal values of
config-property-type:

[#50540562_pgfId-1003238]## java.lang.Boolean, java.lang.String,
java.lang.Integer,

[#50540562_pgfId-1003240]## java.lang.Double, java.lang.Byte,
java.lang.Short,

[#50540562_pgfId-1003242]##java.lang.Long, java.lang.Float,
java.lang.Character

[#50540562_pgfId-1003244]## 

[#50540562_pgfId-1003246]##Used in: config-property

[#50540562_pgfId-1003248]## 

[#50540562_pgfId-1003250]##Example:
<config-property-type>java.lang.String</config-property-type>

[#50540562_pgfId-1003252]##-->

[#50540562_pgfId-1003254]##<!ELEMENT config-property-type (#PCDATA)>

[#50540562_pgfId-1003256]## 

[#50540562_pgfId-1003258]## 

[#50540562_pgfId-1003260]##<!--

[#50540562_pgfId-1003262]##The element config-property-value contains
the value of a configuration

[#50540562_pgfId-1003264]##entry.

[#50540562_pgfId-1003266]## 

[#50540562_pgfId-1003268]##Used in: config-property

[#50540562_pgfId-1003270]## 

[#50540562_pgfId-1003272]##Example:
<config-property-value>WombatServer</config-property-value>

[#50540562_pgfId-1003274]##-->

[#50540562_pgfId-1003276]##<!ELEMENT config-property-value (#PCDATA)>

[#50540562_pgfId-1003278]## 

[#50540562_pgfId-1003280]##<!--

[#50540562_pgfId-1003282]##The element connection-impl-class specifies
the fully-qualified

[#50540562_pgfId-1003284]##name of the Connection class that implements
resource adapter

[#50540562_pgfId-1003286]##specific Connection interface.

[#50540562_pgfId-1003288]## 

[#50540562_pgfId-1003290]##Used in: resourceadapter

[#50540562_pgfId-1003292]## 

[#50540562_pgfId-1003294]##Example:
<connection-impl-class>com.wombat.ConnectionImpl

[#50540562_pgfId-1003296]## </connection-impl-class>

[#50540562_pgfId-1003298]##-->

[#50540562_pgfId-1003300]##<!ELEMENT connection-impl-class (#PCDATA)>

[#50540562_pgfId-1003302]## 

[#50540562_pgfId-1003304]##<!--

[#50540562_pgfId-1003306]##The element connection-interface specifies
the fully-qualified

[#50540562_pgfId-1003308]##name of the Connection interface supported by
the resource

[#50540562_pgfId-1003310]##adapter.

[#50540562_pgfId-1003312]## 

[#50540562_pgfId-1003314]##Used in: resourceadapter

[#50540562_pgfId-1003316]## 

[#50540562_pgfId-1003318]##Example:
<connection-interface>javax.resource.cci.Connection

[#50540562_pgfId-1003320]## </connection-interface>

[#50540562_pgfId-1003322]##-->

[#50540562_pgfId-1003324]##<!ELEMENT connection-interface (#PCDATA)>

[#50540562_pgfId-1003326]## 

[#50540562_pgfId-1003328]##<!--

[#50540562_pgfId-1003330]##The element connectionfactory-impl-class
specifies the fully-qualified

[#50540562_pgfId-1003332]##name of the ConnectionFactory class that
implements resource adapter

[#50540562_pgfId-1003334]##specific ConnectionFactory interface.

[#50540562_pgfId-1003336]## 

[#50540562_pgfId-1003338]##Used in: resourceadapter

[#50540562_pgfId-1003340]## 

[#50540562_pgfId-1003342]##Example:
<connectionfactory-impl-class>com.wombat.ConnectionFactoryImpl

[#50540562_pgfId-1003344]## </connectionfactory-impl-class>

[#50540562_pgfId-1003346]##-->

[#50540562_pgfId-1003348]##<!ELEMENT connectionfactory-impl-class
(#PCDATA)>

[#50540562_pgfId-1003350]## 

[#50540562_pgfId-1003352]##<!--

[#50540562_pgfId-1003354]##The element connectionfactory-interface
specifies the fully-qualified

[#50540562_pgfId-1003356]##name of the ConnectionFactory interface
supported by the resource

[#50540562_pgfId-1003358]##adapter.

[#50540562_pgfId-1003360]## 

[#50540562_pgfId-1003362]##Used in: resourceadapter

[#50540562_pgfId-1003364]## 

[#50540562_pgfId-1003366]##Example:
<connectionfactory-interface>com.wombat.ConnectionFactory

[#50540562_pgfId-1003368]## </connectionfactory-interface>

[#50540562_pgfId-1003370]##OR

[#50540562_pgfId-1003372]##<connectionfactory-interface>javax.resource.cci.ConnectionFactory

[#50540562_pgfId-1003374]## </connectionfactory-interface>

[#50540562_pgfId-1003376]##-->

[#50540562_pgfId-1003378]##<!ELEMENT connectionfactory-interface
(#PCDATA)>

[#50540562_pgfId-1003380]## 

[#50540562_pgfId-1003382]##<!--

[#50540562_pgfId-1003384]##The element credential-interface specifies
the interface that the

[#50540562_pgfId-1003386]##resource adapter implementation supports for
the representation

[#50540562_pgfId-1003388]##of the credentials. This element should be
used by application server

[#50540562_pgfId-1003390]##to find out the Credential interface it
should use as part of the

[#50540562_pgfId-1003392]##security contract.

[#50540562_pgfId-1003394]## 

[#50540562_pgfId-1003396]##The possible values are:

[#50540562_pgfId-1003398]##
<credential-interface>javax.resource.spi.security.PasswordCredential

[#50540562_pgfId-1003400]## </credential-interface>

[#50540562_pgfId-1003402]##
<credential-interface>javax.resource.spi.security.GenericCredential

[#50540562_pgfId-1003404]## </credential-interface>

[#50540562_pgfId-1003406]## 

[#50540562_pgfId-1003408]##Used in: authentication-mechanism

[#50540562_pgfId-1003410]##-->

[#50540562_pgfId-1003412]##<!ELEMENT credential-interface (#PCDATA)>

[#50540562_pgfId-1003414]## 

[#50540562_pgfId-1003416]##<!--

[#50540562_pgfId-1003418]##The description element is used to provide
text describing the parent

[#50540562_pgfId-1003420]##element. The description element should
include any information that

[#50540562_pgfId-1003422]##the component file producer wants to provide
to the consumer of the

[#50540562_pgfId-1003424]##component file (i.e., to the Deployer).
Typically, the tools used by

[#50540562_pgfId-1003426]##the component file consumer will display the
description when

[#50540562_pgfId-1003428]##processing the parent element that contains
the description.

[#50540562_pgfId-1003430]## 

[#50540562_pgfId-1003432]##Used in: authentication-mechanism,
config-property, connector, license,

[#50540562_pgfId-1003434]##security-permission

[#50540562_pgfId-1003436]##-->

[#50540562_pgfId-1003438]##<!ELEMENT description (#PCDATA)>

[#50540562_pgfId-1003440]## 

[#50540562_pgfId-1003442]##<!--

[#50540562_pgfId-1003444]##The display-name element contains a short
name that is intended to be

[#50540562_pgfId-1003446]##displayed by tools. The display name need not
be unique.

[#50540562_pgfId-1003448]## 

[#50540562_pgfId-1003450]##Used in: connector

[#50540562_pgfId-1003452]## 

[#50540562_pgfId-1003454]##Example:

[#50540562_pgfId-1003456]## 

[#50540562_pgfId-1003458]##<display-name>Employee Self
Service</display-name>

[#50540562_pgfId-1003460]##-->

[#50540562_pgfId-1003462]##<!ELEMENT display-name (#PCDATA)>

[#50540562_pgfId-1003464]## 

[#50540562_pgfId-1003466]##<!--

[#50540562_pgfId-1003468]##The element eis-type contains information
about the type of the

[#50540562_pgfId-1003470]##EIS. For example, the type of an EIS can be
product name of EIS

[#50540562_pgfId-1003472]##independent of any version info.

[#50540562_pgfId-1003474]## 

[#50540562_pgfId-1003476]##This helps in identifying EIS instances that
can be used with

[#50540562_pgfId-1003478]##this resource adapter.

[#50540562_pgfId-1003480]## 

[#50540562_pgfId-1003482]##Used in: connector

[#50540562_pgfId-1003484]##-->

[#50540562_pgfId-1003486]##<!ELEMENT eis-type (#PCDATA)>

[#50540562_pgfId-1003488]## 

[#50540562_pgfId-1003490]##<!--

[#50540562_pgfId-1003492]##The icon element contains a small icon and
large icon element

[#50540562_pgfId-1003494]##which specify the URIs for a small and a
large GIF or JPEG icon

[#50540562_pgfId-1003496]##image to represent the application in GUI.

[#50540562_pgfId-1003498]## 

[#50540562_pgfId-1003500]##Used in: connector

[#50540562_pgfId-1003502]##-->

[#50540562_pgfId-1003504]##<!ELEMENT icon (small-icon?, large-icon?)>

[#50540562_pgfId-1003506]## 

[#50540562_pgfId-1003508]##<!--

[#50540562_pgfId-1003510]##The large-icon element contains the name of a
file containing a large

[#50540562_pgfId-1003512]##(32 x 32) icon image. The file name is a
relative path within the

[#50540562_pgfId-1003514]##component’s jar file.

[#50540562_pgfId-1003516]## 

[#50540562_pgfId-1003518]##The image may be either in the JPEG or GIF
format.

[#50540562_pgfId-1003520]##The icon can be used by tools.

[#50540562_pgfId-1003522]## 

[#50540562_pgfId-1003524]##Used in: icon

[#50540562_pgfId-1003526]## 

[#50540562_pgfId-1003528]##Example:

[#50540562_pgfId-1003530]## 

[#50540562_pgfId-1003532]##<large-icon>employee-service-icon32x32.jpg</large-icon>

[#50540562_pgfId-1003534]##-->

[#50540562_pgfId-1003536]##<!ELEMENT large-icon (#PCDATA)>

[#50540562_pgfId-1003538]## 

[#50540562_pgfId-1003540]##<!--

[#50540562_pgfId-1003542]##The element license specifies licensing
requirements for the resource

[#50540562_pgfId-1003544]##adapter module. This element specifies
whether a license is required

[#50540562_pgfId-1003546]##to deploy and use this resource adapter, and
an optional description

[#50540562_pgfId-1003548]##of the licensing terms (examples: duration of
license, number of

[#50540562_pgfId-1003550]##connection restrictions).

[#50540562_pgfId-1003552]## 

[#50540562_pgfId-1003554]##Used in: connector

[#50540562_pgfId-1003556]##-->

[#50540562_pgfId-1003558]##<!ELEMENT license (description?,
license-required)>

[#50540562_pgfId-1003560]## 

[#50540562_pgfId-1003562]##<!--

[#50540562_pgfId-1003564]##The element license-required specifies
whether a license is required

[#50540562_pgfId-1003566]##to deploy and use the resource adapter. This
element must be one of

[#50540562_pgfId-1003568]##the following:

[#50540562_pgfId-1003570]## 

[#50540562_pgfId-1003572]## <license-required>true</license-required>

[#50540562_pgfId-1003574]## <license-required>false</license-required>

[#50540562_pgfId-1003576]## 

[#50540562_pgfId-1003578]##Used in: license

[#50540562_pgfId-1003580]##-->

[#50540562_pgfId-1003582]##<!ELEMENT license-required (#PCDATA)>

[#50540562_pgfId-1003584]## 

[#50540562_pgfId-1003586]##<!--

[#50540562_pgfId-1003588]##The element managedconnectionfactory-class
specifies the

[#50540562_pgfId-1003590]##name of the Java class that implements the
javax.resource.spi.Managed-

[#50540562_pgfId-1003592]##ConnectionFactory interface. This Java class
is provided as part of

[#50540562_pgfId-1003594]##resource adapter’s implementation of
connector architecture specified

[#50540562_pgfId-1003596]##contracts.

[#50540562_pgfId-1003598]## 

[#50540562_pgfId-1003600]##Used in: resourceadapter

[#50540562_pgfId-1003602]## 

[#50540562_pgfId-1003604]##Example:

[#50540562_pgfId-1003606]##
<managedconnectionfactory-class>com.wombat.ManagedConnectionFactoryImpl

[#50540562_pgfId-1003608]## </managedconnectionfactory-class>

[#50540562_pgfId-1003610]##-->

[#50540562_pgfId-1003612]##<!ELEMENT managedconnectionfactory-class
(#PCDATA)>

[#50540562_pgfId-1003614]## 

[#50540562_pgfId-1003616]##<!--

[#50540562_pgfId-1003618]##The element reauthentication-support
specifies whether the resource

[#50540562_pgfId-1003620]##adapter implementation supports
re-authentication of existing Managed-

[#50540562_pgfId-1003622]##Connection instance. Note that this
information is for the resource

[#50540562_pgfId-1003624]##adapter implementation and not for the
underlying EIS instance.

[#50540562_pgfId-1003626]## 

[#50540562_pgfId-1003628]##This element must be one of the following:

[#50540562_pgfId-1003630]##
<reauthentication-support>true</reauthentication-support>

[#50540562_pgfId-1003632]##
<reauthentication-support>false</reauthentication-support>

[#50540562_pgfId-1003634]##Used in: resourceadapter

[#50540562_pgfId-1003636]##-->

[#50540562_pgfId-1003638]##<!ELEMENT reauthentication-support (#PCDATA)>

[#50540562_pgfId-1003640]## 

[#50540562_pgfId-1003642]##<!--

[#50540562_pgfId-1003644]##The element resourceadapter specifies
information about the resource

[#50540562_pgfId-1003646]##adapter. The information includes
fully-qualified names of

[#50540562_pgfId-1003648]##class/interfaces required as part of the
connector architecture

[#50540562_pgfId-1003650]##specified contracts, level of transaction
support provided,

[#50540562_pgfId-1003652]##configurable properties for
ManagedConnectionFactory instances,

[#50540562_pgfId-1003654]##one or more authentication mechanisms
supported and additional

[#50540562_pgfId-1003656]##required security permissions.

[#50540562_pgfId-1003658]## 

[#50540562_pgfId-1003660]##If there is no authentication-mechanism
specified as part of

[#50540562_pgfId-1003662]##resource adapter element then the resource
adapter does not

[#50540562_pgfId-1003664]##support any standard security authentication
mechanisms as part

[#50540562_pgfId-1003666]##of security contract. The application server
ignores the security

[#50540562_pgfId-1003668]##part of the system contracts in this case.

[#50540562_pgfId-1003670]## 

[#50540562_pgfId-1003672]##Used in: connector

[#50540562_pgfId-1003674]##-->

[#50540562_pgfId-1003676]## 

[#50540562_pgfId-1003678]##<!ELEMENT resourceadapter (

[#50540562_pgfId-1003680]##managedconnectionfactory-class,
connectionfactory-interface,

[#50540562_pgfId-1003682]##connectionfactory-impl-class,
connection-interface,

[#50540562_pgfId-1003684]##connection-impl-class, transaction-support,
config-property*,

[#50540562_pgfId-1003686]##authentication-mechanism*,
reauthentication-support, security-permission*

[#50540562_pgfId-1003688]##)>

[#50540562_pgfId-1003690]## 

[#50540562_pgfId-1003692]##<!--

[#50540562_pgfId-1003694]##The element security permission specifies a
security permission that

[#50540562_pgfId-1003696]##is required by the resource adapter code.

[#50540562_pgfId-1003698]## 

[#50540562_pgfId-1003700]##The security permission listed in the
deployment descriptor are ones

[#50540562_pgfId-1003702]##that are different from those required by the
default permission set

[#50540562_pgfId-1003704]##as specified in the connector specification.
The optional description

[#50540562_pgfId-1003706]##can mention specific reason that resource
adapter requires a given

[#50540562_pgfId-1003708]##security permission.

[#50540562_pgfId-1003710]## 

[#50540562_pgfId-1003712]##Used in: resourceadapter

[#50540562_pgfId-1003714]##-->

[#50540562_pgfId-1003716]##<!ELEMENT security-permission (description?,
security-permission-spec)>

[#50540562_pgfId-1003718]## 

[#50540562_pgfId-1003720]##<!--

[#50540562_pgfId-1003722]##The element permission-spec specifies a
security permission based

[#50540562_pgfId-1003724]##on the Security policy file syntax. Refer the
following URL for

[#50540562_pgfId-1003726]##Sun’s implementation of security permission
specification:

[#50540562_pgfId-1003728]## 

[#50540562_pgfId-1003730]##http://java.sun.com/products/jdk/1.3/docs/guide/security/PolicyFiles.html#FileSyntax

[#50540562_pgfId-1003732]## 

[#50540562_pgfId-1003734]##Used in: security-permission

[#50540562_pgfId-1003736]##-->

[#50540562_pgfId-1003738]##<!ELEMENT security-permission-spec (#PCDATA)>

[#50540562_pgfId-1003740]## 

[#50540562_pgfId-1003742]##<!--

[#50540562_pgfId-1003744]##The small-icon element contains the name of a
file containing a small

[#50540562_pgfId-1003746]##(16 x 16) icon image. The file name is a
relative path within the

[#50540562_pgfId-1003748]##component’s jar file.

[#50540562_pgfId-1003750]## 

[#50540562_pgfId-1003752]##The image may be either in the JPEG or GIF
format.

[#50540562_pgfId-1003754]##The icon can be used by tools.

[#50540562_pgfId-1003756]## 

[#50540562_pgfId-1003758]##Used in: icon

[#50540562_pgfId-1003760]## 

[#50540562_pgfId-1003762]##Example:

[#50540562_pgfId-1003764]## 

[#50540562_pgfId-1003766]##<small-icon>employee-service-icon16x16.jpg</small-icon>

[#50540562_pgfId-1003768]##-->

[#50540562_pgfId-1003770]##<!ELEMENT small-icon (#PCDATA)>

[#50540562_pgfId-1003772]## 

[#50540562_pgfId-1003774]##<!--

[#50540562_pgfId-1003776]##The element spec-version specifies the
version of the connector

[#50540562_pgfId-1003778]##architecture specification that is supported
by this resource

[#50540562_pgfId-1003780]##adapter. This information enables deployer to
configure the resource

[#50540562_pgfId-1003782]##adapter to support deployment and runtime
requirements of the

[#50540562_pgfId-1003784]##corresponding connector architecture
specification.

[#50540562_pgfId-1003786]## 

[#50540562_pgfId-1003788]##Used in: connector

[#50540562_pgfId-1003790]## 

[#50540562_pgfId-1003792]##Example:

[#50540562_pgfId-1003794]## <spec-version>1.0</spec-version>

[#50540562_pgfId-1003796]##-->

[#50540562_pgfId-1003798]##<!ELEMENT spec-version (#PCDATA)>

[#50540562_pgfId-1003800]## 

[#50540562_pgfId-1003802]##<!--

[#50540562_pgfId-1003804]##The transaction-support element specifies the
level of transaction

[#50540562_pgfId-1003806]##support provided by the resource adapter.

[#50540562_pgfId-1003808]##The value of transaction-support must be one
of the following:

[#50540562_pgfId-1003810]##<transaction-support>NoTransaction</transaction-support>

[#50540562_pgfId-1003812]##
<transaction-support>LocalTransaction</transaction-support>

[#50540562_pgfId-1003814]##
<transaction-support>XATransaction</transaction-support>

[#50540562_pgfId-1003816]## 

[#50540562_pgfId-1003818]##Used in: resourceadapter

[#50540562_pgfId-1003820]##-->

[#50540562_pgfId-1003822]##<!ELEMENT transaction-support (#PCDATA)>

[#50540562_pgfId-1003824]## 

[#50540562_pgfId-1003826]##<!--

[#50540562_pgfId-1003828]##The element vendor-name specifies the name of
resource adapter provider

[#50540562_pgfId-1003830]##vendor.

[#50540562_pgfId-1003832]## 

[#50540562_pgfId-1003834]##Used in: connector

[#50540562_pgfId-1003836]## 

[#50540562_pgfId-1003838]##Example:

[#50540562_pgfId-1003840]## <vendor-name>Wombat Systems</vendor-name>

[#50540562_pgfId-1003842]##-->

[#50540562_pgfId-1003844]##<!ELEMENT vendor-name (#PCDATA)>

[#50540562_pgfId-1003846]## 

[#50540562_pgfId-1003848]##<!--

[#50540562_pgfId-1003850]##The element version specifies a string-based
version of the

[#50540562_pgfId-1003852]##resource adapter from the resource adapter
provider.

[#50540562_pgfId-1003854]## 

[#50540562_pgfId-1003856]##Used in: connector

[#50540562_pgfId-1003858]## 

[#50540562_pgfId-1003860]##Example:

[#50540562_pgfId-1003862]## <version>1.0</version>

[#50540562_pgfId-1003864]##-->

[#50540562_pgfId-1003866]##<!ELEMENT version (#PCDATA)>

[#50540562_pgfId-1003868]## 

[#50540562_pgfId-1003870]##<!--

[#50540562_pgfId-1003872]##The ID mechanism is to allow tools that
produce additional deployment

[#50540562_pgfId-1003874]##information (i.e., information beyond the
standard deployment

[#50540562_pgfId-1003876]##descriptor information) to store the
non-standard information in a

[#50540562_pgfId-1003878]##separate file, and easily refer from these
tool-specific files to the

[#50540562_pgfId-1003880]##information in the standard deployment
descriptor.

[#50540562_pgfId-1003882]## 

[#50540562_pgfId-1003884]##Tools are not allowed to add the non-standard
information into the

[#50540562_pgfId-1003886]##standard deployment descriptor.

[#50540562_pgfId-1003888]##-->

[#50540562_pgfId-1003890]## 

[#50540562_pgfId-1003892]##<!ATTLIST authentication-mechanism id ID
#IMPLIED>

[#50540562_pgfId-1003894]##<!ATTLIST authentication-mechanism-type id ID
#IMPLIED>

[#50540562_pgfId-1003896]##<!ATTLIST config-property id ID #IMPLIED>

[#50540562_pgfId-1003898]##<!ATTLIST config-property-name id ID
#IMPLIED>

[#50540562_pgfId-1003900]##<!ATTLIST config-property-type id ID
#IMPLIED>

[#50540562_pgfId-1003902]##<!ATTLIST config-property-value id ID
#IMPLIED>

[#50540562_pgfId-1003904]##<!ATTLIST connection-impl-class id ID
#IMPLIED>

[#50540562_pgfId-1003906]##<!ATTLIST connection-interface id ID
#IMPLIED>

[#50540562_pgfId-1003908]##<!ATTLIST connectionfactory-impl-class id ID
#IMPLIED>

[#50540562_pgfId-1003910]##<!ATTLIST connectionfactory-interface id ID
#IMPLIED>

[#50540562_pgfId-1003912]##<!ATTLIST connector id ID #IMPLIED>

[#50540562_pgfId-1003914]##<!ATTLIST credential-interface id ID
#IMPLIED>

[#50540562_pgfId-1003916]##<!ATTLIST description id ID #IMPLIED>

[#50540562_pgfId-1003918]##<!ATTLIST display-name id ID #IMPLIED>

[#50540562_pgfId-1003920]##<!ATTLIST eis-type id ID #IMPLIED>

[#50540562_pgfId-1003922]##<!ATTLIST icon id ID #IMPLIED>

[#50540562_pgfId-1003924]##<!ATTLIST large-icon id ID #IMPLIED>

[#50540562_pgfId-1003926]##<!ATTLIST license id ID #IMPLIED>

[#50540562_pgfId-1003928]##<!ATTLIST license-required id ID #IMPLIED>

[#50540562_pgfId-1003930]##<!ATTLIST managedconnectionfactory-class id
ID #IMPLIED>

[#50540562_pgfId-1003932]##<!ATTLIST reauthentication-support id ID
#IMPLIED>

[#50540562_pgfId-1003934]##<!ATTLIST resourceadapter id ID #IMPLIED>

[#50540562_pgfId-1003936]##<!ATTLIST security-permission id ID #IMPLIED>

[#50540562_pgfId-1003938]##<!ATTLIST security-permission-spec id ID
#IMPLIED>

[#50540562_pgfId-1003940]##<!ATTLIST small-icon id ID #IMPLIED>

[#50540562_pgfId-1003942]##<!ATTLIST spec-version id ID #IMPLIED>

[#50540562_pgfId-1003944]##<!ATTLIST transaction-support id ID #IMPLIED>

[#50540562_pgfId-1003946]##<!ATTLIST vendor-name id ID #IMPLIED>

[#50540562_pgfId-1003948]##<!ATTLIST version id ID #IMPLIED>

[#50540562_pgfId-999505]## 

[#50540562_pgfId-1003977]##

image:conn-171.gif[image]

J2EE Connector Architecture 1.5 Resource Adapter XML XSD

[#50540562_pgfId-1003978]##This section specifies the XML Schema
definition (XSD) for the 1.5 resource adapter deployment descriptor. The
comments in the XSD specify additional requirements for syntax and
semantics that cannot be specified by the XSD mechanism.

[#50540562_pgfId-1003979]##A resource adapter, or an application server
on behalf of a resource adapter, may specify additional deployment
information beyond the standard deployment descriptor. The additional
information should be stored in a separate file and should refer to the
standard deployment descriptor.

[#50540562_pgfId-1039510]##A resource adapter is not allowed to add any
non-standard information into a standard deployment descriptor.

== [#50540562_pgfId-1039513]##Connector Architecture 1.5 Resource Adapter XSD

[#50540562_pgfId-1039515]##<?xml version="1.0" encoding="UTF-8"?>

[#50540562_pgfId-1039517]##<xsd:schema
xmlns="http://www.w3.org/2001/XMLSchema"

[#50540562_pgfId-1039519]##
targetNamespace="http://java.sun.com/xml/ns/j2ee"

[#50540562_pgfId-1039521]## xmlns:j2ee="http://java.sun.com/xml/ns/j2ee"

[#50540562_pgfId-1039523]## xmlns:xsd="http://www.w3.org/2001/XMLSchema"

[#50540562_pgfId-1039525]## elementFormDefault="qualified"

[#50540562_pgfId-1039527]## attributeFormDefault="unqualified"

[#50540562_pgfId-1039529]## version="1.5">

[#50540562_pgfId-1039531]## <xsd:annotation>

[#50540562_pgfId-1039533]## <xsd:documentation>

[#50540562_pgfId-1039535]## @(#)connector_1_5.xsds 1.27 06/17/03

[#50540562_pgfId-1039537]## </xsd:documentation>

[#50540562_pgfId-1039539]## </xsd:annotation>

[#50540562_pgfId-1039541]## <xsd:annotation>

[#50540562_pgfId-1039543]## <xsd:documentation>

[#50540562_pgfId-1039545]## Copyright 2003 Sun Microsystems, Inc., 901
San Antonio

[#50540562_pgfId-1039547]## Road, Palo Alto, California 94303, U.S.A.
All rights

[#50540562_pgfId-1039549]##reserved.

[#50540562_pgfId-1039551]## 

[#50540562_pgfId-1039553]## Sun Microsystems, Inc. has intellectual
property rights

[#50540562_pgfId-1039555]## relating to technology described in this
document. In

[#50540562_pgfId-1039557]## particular, and without limitation, these
intellectual

[#50540562_pgfId-1039559]## property rights may include one or more of
the U.S. patents

[#50540562_pgfId-1039561]## listed at http://www.sun.com/patents and one
or more

[#50540562_pgfId-1039563]## additional patents or pending patent
applications in the

[#50540562_pgfId-1039565]## U.S. and other countries.

[#50540562_pgfId-1039567]## 

[#50540562_pgfId-1039569]## This document and the technology which it
describes are

[#50540562_pgfId-1039571]## distributed under licenses restricting their
use, copying,

[#50540562_pgfId-1039573]## distribution, and decompilation. No part of
this document

[#50540562_pgfId-1039575]## may be reproduced in any form by any means
without prior

[#50540562_pgfId-1039577]## written authorization of Sun and its
licensors, if any.

[#50540562_pgfId-1039579]## 

[#50540562_pgfId-1039581]## Third-party software, including font
technology, is

[#50540562_pgfId-1039583]## copyrighted and licensed from Sun suppliers.

[#50540562_pgfId-1039585]## 

[#50540562_pgfId-1039587]## Sun, Sun Microsystems, the Sun logo,
Solaris, Java, J2EE,

[#50540562_pgfId-1039589]## JavaServer Pages, Enterprise JavaBeans and
the Java Coffee

[#50540562_pgfId-1039591]## Cup logo are trademarks or registered
trademarks of Sun

[#50540562_pgfId-1039593]## Microsystems, Inc. in the U.S. and other
countries.

[#50540562_pgfId-1039595]## 

[#50540562_pgfId-1039597]## Federal Acquisitions: Commercial Software -
Government Users

[#50540562_pgfId-1039599]## Subject to Standard License Terms and
Conditions.

[#50540562_pgfId-1039601]## </xsd:documentation>

[#50540562_pgfId-1039603]## </xsd:annotation>

[#50540562_pgfId-1039605]## <xsd:annotation>

[#50540562_pgfId-1039607]## <xsd:documentation>

[#50540562_pgfId-1039609]## <![CDATA[

[#50540562_pgfId-1039611]## This is the XML Schema for the Connector 1.5
deployment

[#50540562_pgfId-1039613]## descriptor. The deployment descriptor must
be named

[#50540562_pgfId-1039615]## "META-INF/ra.xml" in the connector’s rar
file. All Connector

[#50540562_pgfId-1039617]## deployment descriptors must indicate the
connector resource

[#50540562_pgfId-1039619]## adapter schema by using the J2EE namespace:

[#50540562_pgfId-1039621]## 

[#50540562_pgfId-1039623]## http://java.sun.com/xml/ns/j2ee

[#50540562_pgfId-1039625]## 

[#50540562_pgfId-1039627]## and by indicating the version of the schema
by

[#50540562_pgfId-1039629]## using the version element as shown below:

[#50540562_pgfId-1039631]## 

[#50540562_pgfId-1039633]## <connector
xmlns="http://java.sun.com/xml/ns/j2ee"

[#50540562_pgfId-1039635]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50540562_pgfId-1039637]##
xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee

[#50540562_pgfId-1039639]##
http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd"

[#50540562_pgfId-1039641]## version="1.5">

[#50540562_pgfId-1039643]##...

[#50540562_pgfId-1039645]## </connector>

[#50540562_pgfId-1039647]## 

[#50540562_pgfId-1039649]## The instance documents may indicate the
published version

[#50540562_pgfId-1039651]##of the schema using the xsi:schemaLocation
attribute for

[#50540562_pgfId-1039653]##J2EE namespace with the following location:

[#50540562_pgfId-1039655]##
http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd

[#50540562_pgfId-1039657]## ]]>

[#50540562_pgfId-1039659]## </xsd:documentation>

[#50540562_pgfId-1039661]## </xsd:annotation>

[#50540562_pgfId-1039663]## <xsd:annotation>

[#50540562_pgfId-1039665]## <xsd:documentation>

[#50540562_pgfId-1039667]## The following conventions apply to all J2EE

[#50540562_pgfId-1039669]## deployment descriptor elements unless
indicated otherwise.

[#50540562_pgfId-1039671]## 

[#50540562_pgfId-1039673]## - In elements that specify a pathname to a
file within the

[#50540562_pgfId-1039675]## same JAR file, relative filenames (i.e.,
those not

[#50540562_pgfId-1039677]## starting with "/") are considered relative
to the root of

[#50540562_pgfId-1039679]## the JAR file’s namespace. Absolute filenames
(i.e., those

[#50540562_pgfId-1039681]## starting with "/") also specify names in the
root of the

[#50540562_pgfId-1039683]## JAR file’s namespace. In general, relative
names are

[#50540562_pgfId-1039685]## preferred. The exception is .war files where
absolute

[#50540562_pgfId-1039687]## names are preferred for consistency with the
Servlet API.

[#50540562_pgfId-1039689]## 

[#50540562_pgfId-1039691]## </xsd:documentation>

[#50540562_pgfId-1039693]## </xsd:annotation>

[#50540562_pgfId-1039695]## 

[#50540562_pgfId-1039697]## <xsd:include schemaLocation="j2ee_1_4.xsd"/>

[#50540562_pgfId-1039699]## 

[#50540562_pgfId-1039701]##<!--
****************************************************-->

[#50540562_pgfId-1039703]## <xsd:element name="connector"
type="j2ee:connectorType">

[#50540562_pgfId-1039705]## <xsd:annotation>

[#50540562_pgfId-1039707]## <xsd:documentation>

[#50540562_pgfId-1039709]## The connector element is the root element of
the deployment

[#50540562_pgfId-1039711]## descriptor for the resource adapter. This
element includes

[#50540562_pgfId-1039713]## general information - vendor name, resource
adapter version,

[#50540562_pgfId-1039715]## icon - about the resource adapter module. It
also includes

[#50540562_pgfId-1039717]## information specific to the implementation
of the resource

[#50540562_pgfId-1039719]## adapter library as specified through the
element

[#50540562_pgfId-1039721]## resourceadapter.

[#50540562_pgfId-1039723]## 

[#50540562_pgfId-1039725]## </xsd:documentation>

[#50540562_pgfId-1039727]## </xsd:annotation>

[#50540562_pgfId-1039729]## </xsd:element>

[#50540562_pgfId-1039731]## 

[#50540562_pgfId-1039733]##<!--
************************************************** -->

[#50540562_pgfId-1039735]## 

[#50540562_pgfId-1039737]## <xsd:complexType name="activationspecType">

[#50540562_pgfId-1039739]## <xsd:annotation>

[#50540562_pgfId-1039741]## <xsd:documentation>

[#50540562_pgfId-1039743]## 

[#50540562_pgfId-1039745]## The activationspecType specifies an
activation

[#50540562_pgfId-1039747]## specification. The information includes

[#50540562_pgfId-1039749]## Java class name of an activation
specification and a set of

[#50540562_pgfId-1039751]## required configuration property names.

[#50540562_pgfId-1039753]## 

[#50540562_pgfId-1039755]## </xsd:documentation>

[#50540562_pgfId-1039757]## 

[#50540562_pgfId-1039759]## <xsd:sequence>

[#50540562_pgfId-1039761]## <xsd:element name="activationspec-class"

[#50540562_pgfId-1039763]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1039765]## <xsd:annotation>

[#50540562_pgfId-1039767]## <xsd:documentation>

[#50540562_pgfId-1039769]## <![CDATA[

[#50540562_pgfId-1039771]## The element activationspec-class specifies
the fully

[#50540562_pgfId-1039773]## qualified Java class name of the activation

[#50540562_pgfId-1039775]## specification class. This class must
implement the

[#50540562_pgfId-1039777]## javax.resource.spi.ActivationSpec interface.
The

[#50540562_pgfId-1039779]## implementation of this class is required to
be a

[#50540562_pgfId-1039781]##JavaBean.

[#50540562_pgfId-1039783]## Example:

[#50540562_pgfId-1039785]##
<activationspec-class>com.wombat.ActivationSpecImpl

[#50540562_pgfId-1039787]## </activationspec-class>

[#50540562_pgfId-1039789]## 

[#50540562_pgfId-1039791]## ]]>

[#50540562_pgfId-1039793]## </xsd:documentation>

[#50540562_pgfId-1039795]## </xsd:annotation>

[#50540562_pgfId-1039797]## </xsd:element>

[#50540562_pgfId-1039799]## <xsd:element name="required-config-property"

[#50540562_pgfId-1039801]## type="j2ee:required-config-propertyType"

[#50540562_pgfId-1039803]## minOccurs="0"

[#50540562_pgfId-1039805]## maxOccurs="unbounded"/>

[#50540562_pgfId-1039807]## </xsd:sequence>

[#50540562_pgfId-1039809]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1039811]## </xsd:complexType>

[#50540562_pgfId-1039813]## 

[#50540562_pgfId-1039815]##<!--
**************************************************** -->

[#50540562_pgfId-1039817]## 

[#50540562_pgfId-1039819]## <xsd:complexType name="adminobjectType">

[#50540562_pgfId-1039821]## <xsd:annotation>

[#50540562_pgfId-1039823]## <xsd:documentation>

[#50540562_pgfId-1039825]## 

[#50540562_pgfId-1039827]## The adminobjectType specifies information
about an

[#50540562_pgfId-1039829]## administered object. Administered objects
are specific to a

[#50540562_pgfId-1039831]## messaging style or message provider. This
contains

[#50540562_pgfId-1039833]## information on the Java type of the
interface implemented by

[#50540562_pgfId-1039835]## an administered object, its Java class name
and its

[#50540562_pgfId-1039837]## configuration properties.

[#50540562_pgfId-1039839]## 

[#50540562_pgfId-1039841]## </xsd:documentation>

[#50540562_pgfId-1039843]## </xsd:annotation>

[#50540562_pgfId-1039845]## 

[#50540562_pgfId-1039847]## <xsd:sequence>

[#50540562_pgfId-1039849]## <xsd:element name="adminobject-interface"

[#50540562_pgfId-1039851]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1039853]## <xsd:annotation>

[#50540562_pgfId-1039855]## <xsd:documentation>

[#50540562_pgfId-1039857]## <![CDATA[

[#50540562_pgfId-1039859]## 

[#50540562_pgfId-1039861]## The element adminobject-interface specifies
the

[#50540562_pgfId-1039863]## name of the Java type of the

[#50540562_pgfId-1039865]## interface implemented by an administered
object.

[#50540562_pgfId-1039867]## 

[#50540562_pgfId-1039869]## Example:

[#50540562_pgfId-1039871]## <adminobject-interface>javax.jms.Destination

[#50540562_pgfId-1039873]## </adminobject-interface>

[#50540562_pgfId-1039875]## 

[#50540562_pgfId-1039877]## ]]>

[#50540562_pgfId-1039879]## </xsd:documentation>

[#50540562_pgfId-1039881]## </xsd:annotation>

[#50540562_pgfId-1039883]## 

[#50540562_pgfId-1039885]## </xsd:element>

[#50540562_pgfId-1039887]## <xsd:element name="adminobject-class"

[#50540562_pgfId-1039889]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1039891]## <xsd:annotation>

[#50540562_pgfId-1039893]## <xsd:documentation>

[#50540562_pgfId-1039895]## <![CDATA[

[#50540562_pgfId-1039897]## 

[#50540562_pgfId-1039899]## The element adminobject-class specifies the
fully

[#50540562_pgfId-1039901]## qualified Java class name of an administered
object.

[#50540562_pgfId-1039903]## 

[#50540562_pgfId-1039905]## Example:

[#50540562_pgfId-1039907]##
<adminobject-class>com.wombat.DestinationImpl

[#50540562_pgfId-1039909]## </adminobject-class>

[#50540562_pgfId-1039911]## 

[#50540562_pgfId-1039913]## ]]>

[#50540562_pgfId-1039915]## </xsd:documentation>

[#50540562_pgfId-1039917]## </xsd:annotation>

[#50540562_pgfId-1039919]## </xsd:element>

[#50540562_pgfId-1039921]## 

[#50540562_pgfId-1039923]## <xsd:element name="config-property"

[#50540562_pgfId-1039925]## type="j2ee:config-propertyType"

[#50540562_pgfId-1039927]## minOccurs="0"

[#50540562_pgfId-1039929]## maxOccurs="unbounded"/>

[#50540562_pgfId-1039931]## </xsd:sequence>

[#50540562_pgfId-1039933]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1039935]## </xsd:complexType>

[#50540562_pgfId-1039937]## 

[#50540562_pgfId-1039939]##<!--
**************************************************** -->

[#50540562_pgfId-1039941]## 

[#50540562_pgfId-1039943]## <xsd:complexType
name="authentication-mechanismType">

[#50540562_pgfId-1039945]## <xsd:annotation>

[#50540562_pgfId-1039947]## <xsd:documentation>

[#50540562_pgfId-1039949]## 

[#50540562_pgfId-1039951]## The authentication-mechanismType specifies
an authentication

[#50540562_pgfId-1039953]## mechanism supported by the resource adapter.
Note that this

[#50540562_pgfId-1039955]## support is for the resource adapter and not
for the

[#50540562_pgfId-1039957]## underlying EIS instance. The optional
description specifies

[#50540562_pgfId-1039959]## any resource adapter specific requirement
for the support of

[#50540562_pgfId-1039961]## security contract and authentication
mechanism.

[#50540562_pgfId-1039963]## 

[#50540562_pgfId-1039965]## Note that BasicPassword mechanism type
should support the

[#50540562_pgfId-1039967]##
javax.resource.spi.security.PasswordCredential interface.

[#50540562_pgfId-1039969]## The Kerbv5 mechanism type should support the

[#50540562_pgfId-1039971]## org.ietf.jgss.GSSCredential interface or the
deprecated

[#50540562_pgfId-1039973]##
javax.resource.spi.security.GenericCredential interface.

[#50540562_pgfId-1039975]## 

[#50540562_pgfId-1039977]## </xsd:documentation>

[#50540562_pgfId-1039979]## </xsd:annotation>

[#50540562_pgfId-1039981]## 

[#50540562_pgfId-1039983]## <xsd:sequence>

[#50540562_pgfId-1039985]## <xsd:element name="description"

[#50540562_pgfId-1039987]## type="j2ee:descriptionType"

[#50540562_pgfId-1039989]## minOccurs="0"

[#50540562_pgfId-1039991]## maxOccurs="unbounded"/>

[#50540562_pgfId-1039993]## <xsd:element
name="authentication-mechanism-type"

[#50540562_pgfId-1039995]## type="j2ee:xsdStringType">

[#50540562_pgfId-1039997]## <xsd:annotation>

[#50540562_pgfId-1039999]## <xsd:documentation>

[#50540562_pgfId-1040001]## <![CDATA[

[#50540562_pgfId-1040003]## 

[#50540562_pgfId-1040005]## The element authentication-mechanism-type
specifies

[#50540562_pgfId-1040007]## type of an authentication mechanism.

[#50540562_pgfId-1040009]## 

[#50540562_pgfId-1040011]## The example values are:

[#50540562_pgfId-1040013]## 

[#50540562_pgfId-1040015]## <authentication-mechanism-type>BasicPassword

[#50540562_pgfId-1040017]## </authentication-mechanism-type>

[#50540562_pgfId-1040019]## 

[#50540562_pgfId-1040021]## <authentication-mechanism-type>Kerbv5

[#50540562_pgfId-1040023]## </authentication-mechanism-type>

[#50540562_pgfId-1040025]## 

[#50540562_pgfId-1040027]## Any additional security mechanisms are
outside the

[#50540562_pgfId-1040029]## scope of the Connector architecture
specification.

[#50540562_pgfId-1040031]## 

[#50540562_pgfId-1040033]## ]]>

[#50540562_pgfId-1040035]## </xsd:documentation>

[#50540562_pgfId-1040037]## </xsd:annotation>

[#50540562_pgfId-1040039]## 

[#50540562_pgfId-1040041]## </xsd:element>

[#50540562_pgfId-1040043]## <xsd:element name="credential-interface"

[#50540562_pgfId-1040045]## type="j2ee:credential-interfaceType"/>

[#50540562_pgfId-1040047]## </xsd:sequence>

[#50540562_pgfId-1040049]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1040051]## </xsd:complexType>

[#50540562_pgfId-1040053]## 

[#50540562_pgfId-1040055]##<!--
**************************************************** -->

[#50540562_pgfId-1040057]## 

[#50540562_pgfId-1040059]## <xsd:complexType
name="config-property-nameType">

[#50540562_pgfId-1040061]## <xsd:annotation>

[#50540562_pgfId-1040063]## <xsd:documentation>

[#50540562_pgfId-1040065]## <![CDATA[

[#50540562_pgfId-1040067]## 

[#50540562_pgfId-1040069]## The config-property-nameType contains the
name of a

[#50540562_pgfId-1040071]## configuration property.

[#50540562_pgfId-1040073]## 

[#50540562_pgfId-1040075]## The connector architecture defines a set of
well-defined

[#50540562_pgfId-1040077]## properties all of type java.lang.String.
These are as

[#50540562_pgfId-1040079]##follows.

[#50540562_pgfId-1040081]## 

[#50540562_pgfId-1040083]##ServerName

[#50540562_pgfId-1040085]##PortNumber

[#50540562_pgfId-1040087]##UserName

[#50540562_pgfId-1040089]##Password

[#50540562_pgfId-1040091]##ConnectionURL

[#50540562_pgfId-1040093]## 

[#50540562_pgfId-1040095]## A resource adapter provider can extend this
property set to

[#50540562_pgfId-1040097]## include properties specific to the resource
adapter and its

[#50540562_pgfId-1040099]## underlying EIS.

[#50540562_pgfId-1040101]## 

[#50540562_pgfId-1040103]## Possible values include

[#50540562_pgfId-1040105]##ServerName

[#50540562_pgfId-1040107]##PortNumber

[#50540562_pgfId-1040109]##UserName

[#50540562_pgfId-1040111]##Password

[#50540562_pgfId-1040113]##ConnectionURL

[#50540562_pgfId-1040115]## 

[#50540562_pgfId-1040117]## Example:
<config-property-name>ServerName</config-property-name>

[#50540562_pgfId-1040119]## 

[#50540562_pgfId-1040121]## ]]>

[#50540562_pgfId-1040123]## </xsd:documentation>

[#50540562_pgfId-1040125]## </xsd:annotation>

[#50540562_pgfId-1040127]## <xsd:simpleContent>

[#50540562_pgfId-1040129]## <xsd:restriction base="j2ee:xsdStringType"/>

[#50540562_pgfId-1040131]## </xsd:simpleContent>

[#50540562_pgfId-1040133]## </xsd:complexType>

[#50540562_pgfId-1040135]## 

[#50540562_pgfId-1040137]##<!--
**************************************************** -->

[#50540562_pgfId-1040139]## 

[#50540562_pgfId-1040141]## <xsd:complexType
name="config-property-typeType">

[#50540562_pgfId-1040143]## <xsd:annotation>

[#50540562_pgfId-1040145]## <xsd:documentation>

[#50540562_pgfId-1040147]## <![CDATA[

[#50540562_pgfId-1040149]## 

[#50540562_pgfId-1040151]## The config-property-typeType contains the
fully

[#50540562_pgfId-1040153]## qualified Java type of a configuration
property.

[#50540562_pgfId-1040155]## 

[#50540562_pgfId-1040157]## The following are the legal values:

[#50540562_pgfId-1040159]## java.lang.Boolean, java.lang.String,
java.lang.Integer,

[#50540562_pgfId-1040161]## java.lang.Double, java.lang.Byte,
java.lang.Short,

[#50540562_pgfId-1040163]## java.lang.Long, java.lang.Float,
java.lang.Character

[#50540562_pgfId-1040165]## 

[#50540562_pgfId-1040167]## Used in: config-property

[#50540562_pgfId-1040169]## 

[#50540562_pgfId-1040171]## Example:

[#50540562_pgfId-1040173]##
<config-property-type>java.lang.String</config-property-type>

[#50540562_pgfId-1040175]## 

[#50540562_pgfId-1040177]## ]]>

[#50540562_pgfId-1040179]## </xsd:documentation>

[#50540562_pgfId-1040181]## </xsd:annotation>

[#50540562_pgfId-1040183]## <xsd:simpleContent>

[#50540562_pgfId-1040185]## <xsd:restriction base="j2ee:string">

[#50540562_pgfId-1040187]## <xsd:enumeration value="java.lang.Boolean"/>

[#50540562_pgfId-1040189]## <xsd:enumeration value="java.lang.String"/>

[#50540562_pgfId-1040191]## <xsd:enumeration value="java.lang.Integer"/>

[#50540562_pgfId-1040193]## <xsd:enumeration value="java.lang.Double"/>

[#50540562_pgfId-1040195]## <xsd:enumeration value="java.lang.Byte"/>

[#50540562_pgfId-1040197]## <xsd:enumeration value="java.lang.Short"/>

[#50540562_pgfId-1040199]## <xsd:enumeration value="java.lang.Long"/>

[#50540562_pgfId-1040201]## <xsd:enumeration value="java.lang.Float"/>

[#50540562_pgfId-1040203]## <xsd:enumeration
value="java.lang.Character"/>

[#50540562_pgfId-1040205]## </xsd:restriction>

[#50540562_pgfId-1040207]## </xsd:simpleContent>

[#50540562_pgfId-1040209]## </xsd:complexType>

[#50540562_pgfId-1040211]## 

[#50540562_pgfId-1040213]##<!--
**************************************************** -->

[#50540562_pgfId-1040215]## 

[#50540562_pgfId-1040217]## <xsd:complexType name="config-propertyType">

[#50540562_pgfId-1040219]## <xsd:annotation>

[#50540562_pgfId-1040221]## <xsd:documentation>

[#50540562_pgfId-1040223]## 

[#50540562_pgfId-1040225]## The config-propertyType contains a
declaration of a single

[#50540562_pgfId-1040227]## configuration property that may be used for
providing

[#50540562_pgfId-1040229]## configuration information.

[#50540562_pgfId-1040231]## 

[#50540562_pgfId-1040233]## The declaration consists of an optional
description, name,

[#50540562_pgfId-1040235]## type and an optional value of the
configuration property. If

[#50540562_pgfId-1040237]## the resource adapter provider does not
specify a value than

[#50540562_pgfId-1040239]## the deployer is responsible for providing a
valid value for

[#50540562_pgfId-1040241]## a configuration property.

[#50540562_pgfId-1040243]## 

[#50540562_pgfId-1040245]## Any bounds or well-defined values of
properties should be

[#50540562_pgfId-1040247]## described in the description element.

[#50540562_pgfId-1040249]## 

[#50540562_pgfId-1040251]## </xsd:documentation>

[#50540562_pgfId-1040253]## </xsd:annotation>

[#50540562_pgfId-1040255]## <xsd:sequence>

[#50540562_pgfId-1040257]## <xsd:element name="description"

[#50540562_pgfId-1040259]## type="j2ee:descriptionType"

[#50540562_pgfId-1040261]## minOccurs="0"

[#50540562_pgfId-1040263]## maxOccurs="unbounded"/>

[#50540562_pgfId-1040265]## <xsd:element name="config-property-name"

[#50540562_pgfId-1040267]## type="j2ee:config-proper
<config-property-value>WombatServer</config-property-value>ty-nameType"/>

[#50540562_pgfId-1040269]## <xsd:element name="config-property-type"

[#50540562_pgfId-1040271]## type="j2ee:config-property-typeType"/>

[#50540562_pgfId-1040273]## <xsd:element name="config-property-value"

[#50540562_pgfId-1040275]## type="j2ee:xsdStringType"

[#50540562_pgfId-1040277]## minOccurs="0">

[#50540562_pgfId-1040279]## <xsd:annotation>

[#50540562_pgfId-1040281]## <xsd:documentation>

[#50540562_pgfId-1040283]## <![CDATA[

[#50540562_pgfId-1040285]## 

[#50540562_pgfId-1040287]## The element config-property-value contains
the value

[#50540562_pgfId-1040289]## of a configuration entry. Note, it is
possible for a

[#50540562_pgfId-1040291]## resource adapter deployer to override this

[#50540562_pgfId-1040293]## configuration information during deployment.

[#50540562_pgfId-1040295]## 

[#50540562_pgfId-1040297]## Example:

[#50540562_pgfId-1040299]##
<config-property-value>WombatServer</config-property-value>

[#50540562_pgfId-1040301]## 

[#50540562_pgfId-1040303]## ]]>

[#50540562_pgfId-1040305]## </xsd:documentation>

[#50540562_pgfId-1040307]## </xsd:annotation>

[#50540562_pgfId-1040309]## </xsd:element>

[#50540562_pgfId-1040311]## </xsd:sequence>

[#50540562_pgfId-1040313]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1040315]## </xsd:complexType>

[#50540562_pgfId-1040317]## 

[#50540562_pgfId-1040319]##<!--
**************************************************** -->

[#50540562_pgfId-1040321]## 

[#50540562_pgfId-1040323]## <xsd:complexType
name="connection-definitionType">

[#50540562_pgfId-1040325]## <xsd:annotation>

[#50540562_pgfId-1040327]## <xsd:documentation>

[#50540562_pgfId-1040329]## 

[#50540562_pgfId-1040331]## The connection-definitionType defines a set
of connection

[#50540562_pgfId-1040333]## interfaces and classes pertaining to a
particular connection

[#50540562_pgfId-1040335]## type. This also includes configurable
properties for

[#50540562_pgfId-1040337]## ManagedConnectionFactory instances that may
be produced out

[#50540562_pgfId-1040339]## of this set.

[#50540562_pgfId-1040341]## 

[#50540562_pgfId-1040343]## </xsd:documentation>

[#50540562_pgfId-1040345]## </xsd:annotation>

[#50540562_pgfId-1040347]## 

[#50540562_pgfId-1040349]## <xsd:sequence>

[#50540562_pgfId-1040351]## <xsd:element
name="managedconnectionfactory-class"

[#50540562_pgfId-1040353]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1040355]## <xsd:annotation>

[#50540562_pgfId-1040357]## <xsd:documentation>

[#50540562_pgfId-1040359]## <![CDATA[

[#50540562_pgfId-1040361]## 

[#50540562_pgfId-1040363]## The element managedconnectionfactory-class
specifies

[#50540562_pgfId-1040365]## the name of the Java class that

[#50540562_pgfId-1040367]## implements the

[#50540562_pgfId-1040369]## javax.resource.spi.ManagedConnectionFactory
interface.

[#50540562_pgfId-1040371]## This Java class is provided as part of
resource

[#50540562_pgfId-1040373]## adapter’s implementation of connector
architecture

[#50540562_pgfId-1040375]## specified contracts. The implementation of
this

[#50540562_pgfId-1040377]## class is required to be a JavaBean.

[#50540562_pgfId-1040379]## 

[#50540562_pgfId-1040381]##Example:

[#50540562_pgfId-1040383]## <managedconnectionfactory-class>

[#50540562_pgfId-1040385]## com.wombat.ManagedConnectionFactoryImpl

[#50540562_pgfId-1040387]## </managedconnectionfactory-class>

[#50540562_pgfId-1040389]## 

[#50540562_pgfId-1040391]## ]]>

[#50540562_pgfId-1040393]## </xsd:documentation>

[#50540562_pgfId-1040395]## </xsd:annotation>

[#50540562_pgfId-1040397]## </xsd:element>

[#50540562_pgfId-1040399]## <xsd:element name="config-property"

[#50540562_pgfId-1040401]## type="j2ee:config-propertyType"

[#50540562_pgfId-1040403]## minOccurs="0"

[#50540562_pgfId-1040405]## maxOccurs="unbounded"/>

[#50540562_pgfId-1040407]## <xsd:element
name="connectionfactory-interface"

[#50540562_pgfId-1040409]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1040411]## <xsd:annotation>

[#50540562_pgfId-1040413]## <xsd:documentation>

[#50540562_pgfId-1040415]## <![CDATA[

[#50540562_pgfId-1040417]## 

[#50540562_pgfId-1040419]## The element connectionfactory-interface
specifies

[#50540562_pgfId-1040421]## the name of the ConnectionFactory

[#50540562_pgfId-1040423]## interface supported by the resource adapter.

[#50540562_pgfId-1040425]## 

[#50540562_pgfId-1040427]## Example:

[#50540562_pgfId-1040429]##
<connectionfactory-interface>com.wombat.ConnectionFactory

[#50540562_pgfId-1040431]## </connectionfactory-interface>

[#50540562_pgfId-1040433]## 

[#50540562_pgfId-1040435]##OR

[#50540562_pgfId-1040437]## 

[#50540562_pgfId-1040439]##
<connectionfactory-interface>javax.resource.cci.ConnectionFactory

[#50540562_pgfId-1040441]## </connectionfactory-interface>

[#50540562_pgfId-1040443]## 

[#50540562_pgfId-1040445]## ]]>

[#50540562_pgfId-1040447]## </xsd:documentation>

[#50540562_pgfId-1040449]## </xsd:annotation>

[#50540562_pgfId-1040451]## </xsd:element>

[#50540562_pgfId-1040453]## 

[#50540562_pgfId-1040455]## <xsd:element
name="connectionfactory-impl-class"

[#50540562_pgfId-1040457]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1040459]## <xsd:annotation>

[#50540562_pgfId-1040461]## <xsd:documentation>

[#50540562_pgfId-1040463]## <![CDATA[

[#50540562_pgfId-1040465]## The element connectionfactory-impl-class
specifies

[#50540562_pgfId-1040467]## the name of the ConnectionFactory

[#50540562_pgfId-1040469]## class that implements resource adapter

[#50540562_pgfId-1040471]## specific ConnectionFactory interface.

[#50540562_pgfId-1040473]## 

[#50540562_pgfId-1040475]## Example:

[#50540562_pgfId-1040477]## 

[#50540562_pgfId-1040479]##
<connectionfactory-impl-class>com.wombat.ConnectionFactoryImpl

[#50540562_pgfId-1040481]## </connectionfactory-impl-class>

[#50540562_pgfId-1040483]## 

[#50540562_pgfId-1040485]## ]]>

[#50540562_pgfId-1040487]## </xsd:documentation>

[#50540562_pgfId-1040489]## </xsd:annotation>

[#50540562_pgfId-1040491]## 

[#50540562_pgfId-1040493]## </xsd:element>

[#50540562_pgfId-1040495]## 

[#50540562_pgfId-1040497]## <xsd:element name="connection-interface"

[#50540562_pgfId-1040499]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1040501]## <xsd:annotation>

[#50540562_pgfId-1040503]## <xsd:documentation>

[#50540562_pgfId-1040505]## <![CDATA[

[#50540562_pgfId-1040507]## 

[#50540562_pgfId-1040509]## The connection-interface element specifies
the fully

[#50540562_pgfId-1040511]## qualified name of the Connection interface
supported

[#50540562_pgfId-1040513]## by the resource adapter.

[#50540562_pgfId-1040515]## 

[#50540562_pgfId-1040517]## Example:

[#50540562_pgfId-1040519]## 

[#50540562_pgfId-1040521]##
<connection-interface>javax.resource.cci.Connection

[#50540562_pgfId-1040523]## </connection-interface>

[#50540562_pgfId-1040525]## 

[#50540562_pgfId-1040527]## ]]>

[#50540562_pgfId-1040529]## </xsd:documentation>

[#50540562_pgfId-1040531]## </xsd:annotation>

[#50540562_pgfId-1040533]## </xsd:element>

[#50540562_pgfId-1040535]## 

[#50540562_pgfId-1040537]## <xsd:element name="connection-impl-class"

[#50540562_pgfId-1040539]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1040541]## <xsd:annotation>

[#50540562_pgfId-1040543]## <xsd:documentation>

[#50540562_pgfId-1040545]## <![CDATA[

[#50540562_pgfId-1040547]## 

[#50540562_pgfId-1040549]## The connection-impl-classType specifies the
fully

[#50540562_pgfId-1040551]## qualified name of the Connection class that

[#50540562_pgfId-1040553]## implements resource adapter specific
Connection

[#50540562_pgfId-1040555]## interface. It is used by the
connection-impl-class

[#50540562_pgfId-1040557]## elements.

[#50540562_pgfId-1040559]## 

[#50540562_pgfId-1040561]## Example:

[#50540562_pgfId-1040563]## 

[#50540562_pgfId-1040565]##
<connection-impl-class>com.wombat.ConnectionImpl

[#50540562_pgfId-1040567]## </connection-impl-class>

[#50540562_pgfId-1040569]## 

[#50540562_pgfId-1040571]## ]]>

[#50540562_pgfId-1040573]## </xsd:documentation>

[#50540562_pgfId-1040575]## </xsd:annotation>

[#50540562_pgfId-1040577]## </xsd:element>

[#50540562_pgfId-1040579]## </xsd:sequence>

[#50540562_pgfId-1040581]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1040583]## </xsd:complexType>

[#50540562_pgfId-1040585]## 

[#50540562_pgfId-1040587]##<!--
**************************************************** -->

[#50540562_pgfId-1040589]## 

[#50540562_pgfId-1040591]## <xsd:complexType name="connectorType">

[#50540562_pgfId-1040593]## <xsd:annotation>

[#50540562_pgfId-1040595]## <xsd:documentation>

[#50540562_pgfId-1040597]## 

[#50540562_pgfId-1040599]## The connectorType defines a resource
adapter.

[#50540562_pgfId-1040601]## 

[#50540562_pgfId-1040603]## </xsd:documentation>

[#50540562_pgfId-1040605]## </xsd:annotation>

[#50540562_pgfId-1040607]## 

[#50540562_pgfId-1040609]## <xsd:sequence>

[#50540562_pgfId-1040611]## <xsd:group ref="j2ee:descriptionGroup"/>

[#50540562_pgfId-1040613]## <xsd:element name="vendor-name"

[#50540562_pgfId-1040615]## type="j2ee:xsdStringType">

[#50540562_pgfId-1040617]## <xsd:annotation>

[#50540562_pgfId-1040619]## <xsd:documentation>

[#50540562_pgfId-1040621]## 

[#50540562_pgfId-1040623]## The element vendor-name specifies the name
of

[#50540562_pgfId-1040625]## resource adapter provider vendor.

[#50540562_pgfId-1040627]## 

[#50540562_pgfId-1040629]## </xsd:documentation>

[#50540562_pgfId-1040631]## </xsd:annotation>

[#50540562_pgfId-1040633]## </xsd:element>

[#50540562_pgfId-1040635]## <xsd:element name="eis-type"

[#50540562_pgfId-1040637]## type="j2ee:xsdStringType">

[#50540562_pgfId-1040639]## <xsd:annotation>

[#50540562_pgfId-1040641]## <xsd:documentation>

[#50540562_pgfId-1040643]## 

[#50540562_pgfId-1040645]## The element eis-type contains information
about the

[#50540562_pgfId-1040647]## type of the EIS. For example, the type of an
EIS can

[#50540562_pgfId-1040649]## be product name of EIS independent of any
version

[#50540562_pgfId-1040651]## info.

[#50540562_pgfId-1040653]## 

[#50540562_pgfId-1040655]## This helps in identifying EIS instances that
can be

[#50540562_pgfId-1040657]## used with this resource adapter.

[#50540562_pgfId-1040659]## 

[#50540562_pgfId-1040661]## </xsd:documentation>

[#50540562_pgfId-1040663]## </xsd:annotation>

[#50540562_pgfId-1040665]## </xsd:element>

[#50540562_pgfId-1040667]## <xsd:element name="resourceadapter-version"

[#50540562_pgfId-1040669]## type="j2ee:xsdStringType">

[#50540562_pgfId-1040671]## <xsd:annotation>

[#50540562_pgfId-1040673]## <xsd:documentation>

[#50540562_pgfId-1040675]## 

[#50540562_pgfId-1040677]## The element resourceadapter-version
specifies a string-based version

[#50540562_pgfId-1040679]## of the resource adapter from the resource
adapter

[#50540562_pgfId-1040681]##provider.

[#50540562_pgfId-1040683]## 

[#50540562_pgfId-1040685]## </xsd:documentation>

[#50540562_pgfId-1040687]## </xsd:annotation>

[#50540562_pgfId-1040689]## </xsd:element>

[#50540562_pgfId-1040691]## <xsd:element name="license"

[#50540562_pgfId-1040693]## type="j2ee:licenseType" minOccurs="0"/>

[#50540562_pgfId-1040695]## <xsd:element name="resourceadapter"

[#50540562_pgfId-1040697]## type="j2ee:resourceadapterType"/>

[#50540562_pgfId-1040699]## </xsd:sequence>

[#50540562_pgfId-1040701]## <xsd:attribute name="version"

[#50540562_pgfId-1040703]## type="j2ee:dewey-versionType"

[#50540562_pgfId-1040705]## fixed="1.5"

[#50540562_pgfId-1040707]## use="required">

[#50540562_pgfId-1040709]## <xsd:annotation>

[#50540562_pgfId-1040711]## <xsd:documentation>

[#50540562_pgfId-1040713]## 

[#50540562_pgfId-1040715]## The version specifies the version of the

[#50540562_pgfId-1040717]## connector architecture specification that is

[#50540562_pgfId-1040719]## supported by this resource adapter. This
information

[#50540562_pgfId-1040721]## enables deployer to configure the resource
adapter to

[#50540562_pgfId-1040723]## support deployment and runtime requirements
of the

[#50540562_pgfId-1040725]## corresponding connector architecture
specification.

[#50540562_pgfId-1040727]## 

[#50540562_pgfId-1040729]## </xsd:documentation>

[#50540562_pgfId-1040731]## </xsd:annotation>

[#50540562_pgfId-1040733]## </xsd:attribute>

[#50540562_pgfId-1040735]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1040737]## </xsd:complexType>

[#50540562_pgfId-1040739]## 

[#50540562_pgfId-1040741]##<!--
**************************************************** -->

[#50540562_pgfId-1040743]## 

[#50540562_pgfId-1040745]## <xsd:complexType
name="credential-interfaceType">

[#50540562_pgfId-1040747]## <xsd:annotation>

[#50540562_pgfId-1040749]## <xsd:documentation>

[#50540562_pgfId-1040751]## 

[#50540562_pgfId-1040753]## The credential-interfaceType specifies the

[#50540562_pgfId-1040755]## interface that the resource adapter
implementation

[#50540562_pgfId-1040757]## supports for the representation of the

[#50540562_pgfId-1040759]## credentials. This element(s) that use this
type,

[#50540562_pgfId-1040761]## i.e. credential-interface, should be used by

[#50540562_pgfId-1040763]## application server to find out the
Credential

[#50540562_pgfId-1040765]## interface it should use as part of the
security

[#50540562_pgfId-1040767]## contract.

[#50540562_pgfId-1040769]## 

[#50540562_pgfId-1040771]## The possible values are:

[#50540562_pgfId-1040773]## 

[#50540562_pgfId-1040775]##
javax.resource.spi.security.PasswordCredential

[#50540562_pgfId-1040777]## org.ietf.jgss.GSSCredential

[#50540562_pgfId-1040779]##
javax.resource.spi.security.GenericCredential

[#50540562_pgfId-1040781]## 

[#50540562_pgfId-1040783]## </xsd:documentation>

[#50540562_pgfId-1040785]## </xsd:annotation>

[#50540562_pgfId-1040787]## <xsd:simpleContent>

[#50540562_pgfId-1040789]## <xsd:restriction
base="j2ee:fully-qualified-classType">

[#50540562_pgfId-1040791]## <xsd:enumeration
value="javax.resource.spi.security.PasswordCredential"/>

[#50540562_pgfId-1040793]## <xsd:enumeration
value="org.ietf.jgss.GSSCredential"/>

[#50540562_pgfId-1040795]## <xsd:enumeration
value="javax.resource.spi.security.GenericCredential"/>

[#50540562_pgfId-1040797]## </xsd:restriction>

[#50540562_pgfId-1040799]## </xsd:simpleContent>

[#50540562_pgfId-1040801]## </xsd:complexType>

[#50540562_pgfId-1040803]## 

[#50540562_pgfId-1040805]##<!--
**************************************************** -->

[#50540562_pgfId-1040807]## 

[#50540562_pgfId-1040809]## <xsd:complexType
name="inbound-resourceadapterType">

[#50540562_pgfId-1040810]## 

[#50540562_pgfId-1040812]## <xsd:annotation>

[#50540562_pgfId-1040814]## <xsd:documentation>

[#50540562_pgfId-1040816]## The inbound-resourceadapterType specifies
information

[#50540562_pgfId-1040818]## about an inbound resource adapter. This
contains information

[#50540562_pgfId-1040820]## specific to the implementation of the
resource adapter

[#50540562_pgfId-1040822]## library as specified through the
messageadapter element.

[#50540562_pgfId-1040824]## 

[#50540562_pgfId-1040826]## </xsd:documentation>

[#50540562_pgfId-1040828]## </xsd:annotation>

[#50540562_pgfId-1040830]## 

[#50540562_pgfId-1040832]## <xsd:sequence>

[#50540562_pgfId-1040834]## <xsd:element name="messageadapter"

[#50540562_pgfId-1040836]## type="j2ee:messageadapterType"

[#50540562_pgfId-1040838]## minOccurs="0">

[#50540562_pgfId-1040840]## <xsd:unique
name="messagelistener-type-uniqueness">

[#50540562_pgfId-1040842]## <xsd:annotation>

[#50540562_pgfId-1040844]## <xsd:documentation>

[#50540562_pgfId-1040846]## 

[#50540562_pgfId-1040848]## The messagelistener-type element content
must be

[#50540562_pgfId-1040850]## unique in the messageadapter. Several
messagelisteners

[#50540562_pgfId-1040852]## can not use the same messagelistener-type.

[#50540562_pgfId-1040854]## 

[#50540562_pgfId-1040856]## </xsd:documentation>

[#50540562_pgfId-1040858]## </xsd:annotation>

[#50540562_pgfId-1040860]## <xsd:selector xpath="j2ee:messagelistener"/>

[#50540562_pgfId-1040862]## <xsd:field
xpath="j2ee:messagelistener-type"/>

[#50540562_pgfId-1040864]## </xsd:unique>

[#50540562_pgfId-1040866]## </xsd:element>

[#50540562_pgfId-1040868]## </xsd:sequence>

[#50540562_pgfId-1040870]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1040872]## </xsd:complexType>

[#50540562_pgfId-1040874]## 

[#50540562_pgfId-1040876]##<!--
**************************************************** -->

[#50540562_pgfId-1040877]## 

[#50540562_pgfId-1040879]## 

[#50540562_pgfId-1040881]## <xsd:complexType name="licenseType">

[#50540562_pgfId-1040883]## <xsd:annotation>

[#50540562_pgfId-1040885]## <xsd:documentation>

[#50540562_pgfId-1040887]## 

[#50540562_pgfId-1040889]## The licenseType specifies licensing
requirements for the

[#50540562_pgfId-1040891]## resource adapter module. This type specifies
whether a

[#50540562_pgfId-1040893]## license is required to deploy and use this
resource adapter,

[#50540562_pgfId-1040895]## and an optional description of the licensing
terms

[#50540562_pgfId-1040897]## (examples: duration of license, number of
connection

[#50540562_pgfId-1040899]## restrictions). It is used by the license
element.

[#50540562_pgfId-1040901]## 

[#50540562_pgfId-1040903]## </xsd:documentation>

[#50540562_pgfId-1040905]## </xsd:annotation>

[#50540562_pgfId-1040907]## 

[#50540562_pgfId-1040909]## <xsd:sequence>

[#50540562_pgfId-1040911]## <xsd:element name="description"

[#50540562_pgfId-1040913]## type="j2ee:descriptionType"

[#50540562_pgfId-1040915]## minOccurs="0"

[#50540562_pgfId-1040917]## maxOccurs="unbounded"/>

[#50540562_pgfId-1040919]## <xsd:element name="license-required"

[#50540562_pgfId-1040921]## type="j2ee:true-falseType">

[#50540562_pgfId-1040923]## <xsd:annotation>

[#50540562_pgfId-1040925]## <xsd:documentation>

[#50540562_pgfId-1040927]## 

[#50540562_pgfId-1040929]## The element license-required specifies
whether a

[#50540562_pgfId-1040931]## license is required to deploy and use the

[#50540562_pgfId-1040933]## resource adapter. This element must be one
of

[#50540562_pgfId-1040935]## the following, "true" or "false".

[#50540562_pgfId-1040937]## 

[#50540562_pgfId-1040939]## </xsd:documentation>

[#50540562_pgfId-1040941]## </xsd:annotation>

[#50540562_pgfId-1040943]## </xsd:element>

[#50540562_pgfId-1040945]## </xsd:sequence>

[#50540562_pgfId-1040947]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1040949]## </xsd:complexType>

[#50540562_pgfId-1040951]## 

[#50540562_pgfId-1040953]##<!--
**************************************************** -->

[#50540562_pgfId-1040955]## 

[#50540562_pgfId-1040957]## <xsd:complexType name="messageadapterType">

[#50540562_pgfId-1040959]## <xsd:annotation>

[#50540562_pgfId-1040961]## <xsd:documentation>

[#50540562_pgfId-1040963]## 

[#50540562_pgfId-1040965]##The messageadapterType specifies information
about the

[#50540562_pgfId-1040967]## messaging capabilities of the resource
adapter. This

[#50540562_pgfId-1040969]## contains information specific to the
implementation of the

[#50540562_pgfId-1040971]## resource adapter library as specified
through the

[#50540562_pgfId-1040973]## messagelistener element.

[#50540562_pgfId-1040975]## 

[#50540562_pgfId-1040977]## </xsd:documentation>

[#50540562_pgfId-1040979]## </xsd:annotation>

[#50540562_pgfId-1040981]## 

[#50540562_pgfId-1040983]## <xsd:sequence>

[#50540562_pgfId-1040985]## <xsd:element name="messagelistener"

[#50540562_pgfId-1040987]## type="j2ee:messagelistenerType"

[#50540562_pgfId-1040989]## maxOccurs="unbounded"/>

[#50540562_pgfId-1040991]## </xsd:sequence>

[#50540562_pgfId-1040993]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1040995]## </xsd:complexType>

[#50540562_pgfId-1040997]## 

[#50540562_pgfId-1040999]##<!--
**************************************************** -->

[#50540562_pgfId-1041001]## 

[#50540562_pgfId-1041003]## <xsd:complexType name="messagelistenerType">

[#50540562_pgfId-1041005]## <xsd:annotation>

[#50540562_pgfId-1041007]## <xsd:documentation>

[#50540562_pgfId-1041009]## 

[#50540562_pgfId-1041011]## The messagelistenerType specifies
information about a

[#50540562_pgfId-1041013]## specific message listener supported by the
messaging

[#50540562_pgfId-1041015]## resource adapter. It contains information on
the Java type

[#50540562_pgfId-1041017]## of the message listener interface and an
activation

[#50540562_pgfId-1041019]##specification.

[#50540562_pgfId-1041021]## 

[#50540562_pgfId-1041023]## </xsd:documentation>

[#50540562_pgfId-1041025]## </xsd:annotation>

[#50540562_pgfId-1041027]## 

[#50540562_pgfId-1041029]## <xsd:sequence>

[#50540562_pgfId-1041031]## <xsd:element name="messagelistener-type"

[#50540562_pgfId-1041033]## type="j2ee:fully-qualified-classType">

[#50540562_pgfId-1041035]## <xsd:annotation>

[#50540562_pgfId-1041037]## <xsd:documentation>

[#50540562_pgfId-1041039]## <![CDATA[

[#50540562_pgfId-1041041]## 

[#50540562_pgfId-1041043]## The element messagelistener-type specifies
the fully

[#50540562_pgfId-1041045]## qualified name of the Java type of a message

[#50540562_pgfId-1041047]## listener interface.

[#50540562_pgfId-1041049]## 

[#50540562_pgfId-1041051]## Example:

[#50540562_pgfId-1041053]## 

[#50540562_pgfId-1041055]##
<messagelistener-type>javax.jms.MessageListener

[#50540562_pgfId-1041057]## </messagelistener-type>

[#50540562_pgfId-1041059]## 

[#50540562_pgfId-1041061]## ]]>

[#50540562_pgfId-1041063]## </xsd:documentation>

[#50540562_pgfId-1041065]## </xsd:annotation>

[#50540562_pgfId-1041067]## </xsd:element>

[#50540562_pgfId-1041069]## <xsd:element name="activationspec"

[#50540562_pgfId-1041071]## type="j2ee:activationspecType"/>

[#50540562_pgfId-1041073]## </xsd:sequence>

[#50540562_pgfId-1041075]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1041077]## </xsd:complexType>

[#50540562_pgfId-1041079]## 

[#50540562_pgfId-1041081]##<!--
**************************************************** -->

[#50540562_pgfId-1041082]## 

[#50540562_pgfId-1041084]## 

[#50540562_pgfId-1041086]## <xsd:complexType
name="outbound-resourceadapterType">

[#50540562_pgfId-1041088]## <xsd:annotation>

[#50540562_pgfId-1041090]## <xsd:documentation>

[#50540562_pgfId-1041092]## 

[#50540562_pgfId-1041094]## The outbound-resourceadapterType specifies
information about

[#50540562_pgfId-1041096]## an outbound resource adapter. The
information includes fully

[#50540562_pgfId-1041098]## qualified names of classes/interfaces
required as part of

[#50540562_pgfId-1041100]## the connector architecture specified
contracts for

[#50540562_pgfId-1041102]## connection management, level of transaction
support

[#50540562_pgfId-1041104]## provided, one or more authentication
mechanisms supported

[#50540562_pgfId-1041106]## and additional required security
permissions.

[#50540562_pgfId-1041108]## 

[#50540562_pgfId-1041110]## If there is no authentication-mechanism
specified as part of

[#50540562_pgfId-1041112]## resource adapter element then the resource
adapter does not

[#50540562_pgfId-1041114]## support any standard security authentication
mechanisms as

[#50540562_pgfId-1041116]## part of security contract. The application
server ignores

[#50540562_pgfId-1041118]## the security part of the system contracts in
this case.

[#50540562_pgfId-1041120]## 

[#50540562_pgfId-1041122]## </xsd:documentation>

[#50540562_pgfId-1041124]## </xsd:annotation>

[#50540562_pgfId-1041126]## 

[#50540562_pgfId-1041128]## <xsd:sequence>

[#50540562_pgfId-1041130]## <xsd:element name="connection-definition"

[#50540562_pgfId-1041132]## type="j2ee:connection-definitionType"

[#50540562_pgfId-1041134]## maxOccurs="unbounded"/>

[#50540562_pgfId-1041136]## <xsd:element name="transaction-support"

[#50540562_pgfId-1041138]## type="j2ee:transaction-supportType"/>

[#50540562_pgfId-1041140]## <xsd:element name="authentication-mechanism"

[#50540562_pgfId-1041142]## type="j2ee:authentication-mechanismType"

[#50540562_pgfId-1041144]## minOccurs="0"

[#50540562_pgfId-1041146]## maxOccurs="unbounded"/>

[#50540562_pgfId-1041148]## <xsd:element name="reauthentication-support"

[#50540562_pgfId-1041150]## type="j2ee:true-falseType">

[#50540562_pgfId-1041152]## <xsd:annotation>

[#50540562_pgfId-1041154]## <xsd:documentation>

[#50540562_pgfId-1041156]## 

[#50540562_pgfId-1041158]## The element reauthentication-support
specifies

[#50540562_pgfId-1041160]## whether the resource adapter implementation
supports

[#50540562_pgfId-1041162]## re-authentication of existing Managed-
Connection

[#50540562_pgfId-1041164]## instance. Note that this information is for
the

[#50540562_pgfId-1041166]## resource adapter implementation and not for
the

[#50540562_pgfId-1041168]## underlying EIS instance. This element must
have

[#50540562_pgfId-1041170]## either a "true" or "false" value.

[#50540562_pgfId-1041172]## 

[#50540562_pgfId-1041174]## </xsd:documentation>

[#50540562_pgfId-1041176]## </xsd:annotation>

[#50540562_pgfId-1041178]## 

[#50540562_pgfId-1041180]## </xsd:element>

[#50540562_pgfId-1041182]## </xsd:sequence>

[#50540562_pgfId-1041184]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1041186]## </xsd:complexType>

[#50540562_pgfId-1041188]## 

[#50540562_pgfId-1041190]##<!--
************************************************** -->

[#50540562_pgfId-1041192]## 

[#50540562_pgfId-1041194]## <xsd:complexType
name="required-config-propertyType">

[#50540562_pgfId-1041196]## <xsd:annotation>

[#50540562_pgfId-1041198]## <xsd:documentation>

[#50540562_pgfId-1041200]## <![CDATA[

[#50540562_pgfId-1041202]## 

[#50540562_pgfId-1041204]## The required-config-propertyType contains a

[#50540562_pgfId-1041206]## declaration of a single configuration
property used

[#50540562_pgfId-1041208]## for specifying a required configuration
property

[#50540562_pgfId-1041210]## name. It is used by required-config-property

[#50540562_pgfId-1041212]##elements.

[#50540562_pgfId-1041214]## Example:

[#50540562_pgfId-1041216]## 

[#50540562_pgfId-1041218]##
<required-config-property>Destination</required-config-property>

[#50540562_pgfId-1041220]## 

[#50540562_pgfId-1041222]## ]]>

[#50540562_pgfId-1041224]## </xsd:documentation>

[#50540562_pgfId-1041226]## </xsd:annotation>

[#50540562_pgfId-1041228]## 

[#50540562_pgfId-1041230]## <xsd:sequence>

[#50540562_pgfId-1041232]## <xsd:element name="description"

[#50540562_pgfId-1041234]## type="j2ee:descriptionType"

[#50540562_pgfId-1041236]## minOccurs="0"

[#50540562_pgfId-1041238]## maxOccurs="unbounded"/>

[#50540562_pgfId-1041240]## <xsd:element name="config-property-name"

[#50540562_pgfId-1041242]## type="j2ee:config-property-nameType"/>

[#50540562_pgfId-1041244]## </xsd:sequence>

[#50540562_pgfId-1041246]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1041248]## </xsd:complexType>

[#50540562_pgfId-1041250]## 

[#50540562_pgfId-1041252]##<!--
********************************************** -->

[#50540562_pgfId-1041254]## 

[#50540562_pgfId-1041256]## <xsd:complexType name="resourceadapterType">

[#50540562_pgfId-1041258]## <xsd:annotation>

[#50540562_pgfId-1041260]## <xsd:documentation>

[#50540562_pgfId-1041262]## 

[#50540562_pgfId-1041264]## The resourceadapterType specifies
information about the

[#50540562_pgfId-1041266]## resource adapter. The information includes

[#50540562_pgfId-1041268]## resource adapter Java class name,
configuration properties,

[#50540562_pgfId-1041270]## information specific to the implementation
of the resource

[#50540562_pgfId-1041272]## adapter library as specified through the

[#50540562_pgfId-1041274]## outbound-resourceadapter and
inbound-resourceadapter

[#50540562_pgfId-1041276]## elements, and an optional set of
administered objects.

[#50540562_pgfId-1041278]## 

[#50540562_pgfId-1041280]## </xsd:documentation>

[#50540562_pgfId-1041282]## </xsd:annotation>

[#50540562_pgfId-1041284]## 

[#50540562_pgfId-1041286]## <xsd:sequence>

[#50540562_pgfId-1041288]## <xsd:element name="resourceadapter-class"

[#50540562_pgfId-1041290]## type="j2ee:fully-qualified-classType"

[#50540562_pgfId-1041292]## minOccurs="0">

[#50540562_pgfId-1041294]## <xsd:annotation>

[#50540562_pgfId-1041296]## <xsd:documentation>

[#50540562_pgfId-1041298]## 

[#50540562_pgfId-1041300]## The element resourceadapter-class specifies
the

[#50540562_pgfId-1041302]## name of a Java class that implements

[#50540562_pgfId-1041304]## the javax.resource.spi.ResourceAdapter

[#50540562_pgfId-1041306]## interface. This Java class is provided as
part of

[#50540562_pgfId-1041308]## resource adapter’s implementation of
connector

[#50540562_pgfId-1041310]## architecture specified contracts. The
implementation

[#50540562_pgfId-1041312]## of this class is required to be a JavaBean.

[#50540562_pgfId-1041314]## 

[#50540562_pgfId-1041316]## </xsd:documentation>

[#50540562_pgfId-1041318]## </xsd:annotation>

[#50540562_pgfId-1041320]## </xsd:element>

[#50540562_pgfId-1041322]## <xsd:element name="config-property"

[#50540562_pgfId-1041324]## type="j2ee:config-propertyType"

[#50540562_pgfId-1041326]## minOccurs="0"

[#50540562_pgfId-1041328]## maxOccurs="unbounded"/>

[#50540562_pgfId-1041330]## <xsd:element name="outbound-resourceadapter"

[#50540562_pgfId-1041332]## type="j2ee:outbound-resourceadapterType"

[#50540562_pgfId-1041334]## minOccurs="0">

[#50540562_pgfId-1041336]## <xsd:unique
name="connectionfactory-interface-uniqueness">

[#50540562_pgfId-1041338]## <xsd:annotation>

[#50540562_pgfId-1041340]## <xsd:documentation>

[#50540562_pgfId-1041342]## 

[#50540562_pgfId-1041344]## The connectionfactory-interface element
content

[#50540562_pgfId-1041346]## must be unique in the
outbound-resourceadapter.

[#50540562_pgfId-1041348]## Multiple connection-definitions can not use
the

[#50540562_pgfId-1041350]## same connectionfactory-type.

[#50540562_pgfId-1041352]## 

[#50540562_pgfId-1041354]## </xsd:documentation>

[#50540562_pgfId-1041356]## </xsd:annotation>

[#50540562_pgfId-1041358]## <xsd:selector
xpath="j2ee:connection-definition"/>

[#50540562_pgfId-1041360]## <xsd:field
xpath="j2ee:connectionfactory-interface"/>

[#50540562_pgfId-1041362]## </xsd:unique>

[#50540562_pgfId-1041364]## </xsd:element>

[#50540562_pgfId-1041366]## <xsd:element name="inbound-resourceadapter"

[#50540562_pgfId-1041368]## type="j2ee:inbound-resourceadapterType"

[#50540562_pgfId-1041370]## minOccurs="0"/>

[#50540562_pgfId-1041372]## <xsd:element name="adminobject"

[#50540562_pgfId-1041374]## type="j2ee:adminobjectType"

[#50540562_pgfId-1041376]## minOccurs="0"

[#50540562_pgfId-1041378]## maxOccurs="unbounded"/>

[#50540562_pgfId-1041380]## <xsd:element name="security-permission"

[#50540562_pgfId-1041382]## type="j2ee:security-permissionType"

[#50540562_pgfId-1041384]## minOccurs="0"

[#50540562_pgfId-1041386]## maxOccurs="unbounded"/>

[#50540562_pgfId-1041388]## </xsd:sequence>

[#50540562_pgfId-1041390]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1041392]## </xsd:complexType>

[#50540562_pgfId-1041394]## 

[#50540562_pgfId-1041396]##<!--
****************************************** -->

[#50540562_pgfId-1041398]## 

[#50540562_pgfId-1041400]## <xsd:complexType
name="security-permissionType">

[#50540562_pgfId-1041402]## <xsd:annotation>

[#50540562_pgfId-1041404]## <xsd:documentation>

[#50540562_pgfId-1041406]## 

[#50540562_pgfId-1041408]## The security-permissionType specifies a
security

[#50540562_pgfId-1041410]## permission that is required by the resource
adapter code.

[#50540562_pgfId-1041412]## 

[#50540562_pgfId-1041414]## The security permission listed in the
deployment descriptor

[#50540562_pgfId-1041416]## are ones that are different from those
required by the

[#50540562_pgfId-1041418]## default permission set as specified in the
connector

[#50540562_pgfId-1041420]## specification. The optional description can
mention specific

[#50540562_pgfId-1041422]## reason that resource adapter requires a
given security

[#50540562_pgfId-1041424]## permission.

[#50540562_pgfId-1041426]## 

[#50540562_pgfId-1041428]## </xsd:documentation>

[#50540562_pgfId-1041430]## </xsd:annotation>

[#50540562_pgfId-1041432]## 

[#50540562_pgfId-1041434]## <xsd:sequence>

[#50540562_pgfId-1041436]## <xsd:element name="description"

[#50540562_pgfId-1041438]## type="j2ee:descriptionType"

[#50540562_pgfId-1041440]## minOccurs="0"

[#50540562_pgfId-1041442]## maxOccurs="unbounded"/>

[#50540562_pgfId-1041444]## <xsd:element name="security-permission-spec"

[#50540562_pgfId-1041446]## type="j2ee:xsdStringType">

[#50540562_pgfId-1041448]## <xsd:annotation>

[#50540562_pgfId-1041450]## <xsd:documentation>

[#50540562_pgfId-1041452]## The element security-permission-spec
specifies a security

[#50540562_pgfId-1041454]## permission based on the Security policy file

[#50540562_pgfId-1041456]## syntax. Refer to the following URL for Sun’s

[#50540562_pgfId-1041458]## implementation of the security permission

[#50540562_pgfId-1041460]## specification:

[#50540562_pgfId-1041462]## 

[#50540562_pgfId-1041464]##http://java.sun.com/products/jdk/1.4/docs/guide/security/PolicyFiles.html#FileSyntax

[#50540562_pgfId-1041466]## 

[#50540562_pgfId-1041468]## </xsd:documentation>

[#50540562_pgfId-1041470]## </xsd:annotation>

[#50540562_pgfId-1041472]## </xsd:element>

[#50540562_pgfId-1041474]## </xsd:sequence>

[#50540562_pgfId-1041476]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1041478]## </xsd:complexType>

[#50540562_pgfId-1041480]## 

[#50540562_pgfId-1041482]##<!-- ***************************************
-->

[#50540562_pgfId-1041484]## 

[#50540562_pgfId-1041486]## <xsd:complexType
name="transaction-supportType">

[#50540562_pgfId-1041488]## <xsd:annotation>

[#50540562_pgfId-1041499]## <xsd:documentation>

[#50540562_pgfId-1041510]## 

[#50540562_pgfId-1041512]## The transaction-supportType specifies the
level of

[#50540562_pgfId-1041525]## transaction support provided by the resource
adapter. It is

[#50540562_pgfId-1041538]## used by transaction-support elements.

[#50540562_pgfId-1041551]## 

[#50540562_pgfId-1041553]## The value must be one of the following:

[#50540562_pgfId-1041570]## 

[#50540562_pgfId-1041572]## NoTransaction

[#50540562_pgfId-1041589]## LocalTransaction

[#50540562_pgfId-1041606]## XATransaction

[#50540562_pgfId-1041623]## 

[#50540562_pgfId-1041625]## </xsd:documentation>

[#50540562_pgfId-1041636]## </xsd:annotation>

[#50540562_pgfId-1041645]## <xsd:simpleContent>

[#50540562_pgfId-1041654]## <xsd:restriction base="j2ee:string">

[#50540562_pgfId-1041665]## <xsd:enumeration value="NoTransaction"/>

[#50540562_pgfId-1041678]## <xsd:enumeration value="LocalTransaction"/>

[#50540562_pgfId-1041691]## <xsd:enumeration value="XATransaction"/>

[#50540562_pgfId-1041704]## </xsd:restriction>

[#50540562_pgfId-1041715]## </xsd:simpleContent>

[#50540562_pgfId-1041724]## </xsd:complexType>

[#50540562_pgfId-1041731]## 

[#50540562_pgfId-1041733]##</xsd:schema>

[#50540562_pgfId-1039505]##

image:conn-171.gif[image]

[#50540562_10645]##Java EE Connector Architecture 1.6 Resource Adapter
XML XSD

== [#50540562_pgfId-1041835]##Connector Architecture 1.6 Resource Adapter XSD

[#50540562_pgfId-1041837]##<?xml version="1.0" encoding="UTF-8"?>

[#50540562_pgfId-1041839]##<xsd:schema
xmlns="http://www.w3.org/2001/XMLSchema"

[#50540562_pgfId-1041841]##
targetNamespace="http://java.sun.com/xml/ns/javaee"

[#50540562_pgfId-1041843]##
xmlns:javaee="http://java.sun.com/xml/ns/javaee"

[#50540562_pgfId-1041845]## xmlns:xsd="http://www.w3.org/2001/XMLSchema"

[#50540562_pgfId-1041847]## elementFormDefault="qualified"

[#50540562_pgfId-1041849]## attributeFormDefault="unqualified"

[#50540562_pgfId-1041851]## version="1.6">

[#50540562_pgfId-1041853]## <xsd:annotation>

[#50540562_pgfId-1041855]## <xsd:documentation>

[#50540562_pgfId-1041857]## $Id$

[#50540562_pgfId-1041859]## </xsd:documentation>

[#50540562_pgfId-1041861]## </xsd:annotation>

[#50540562_pgfId-1041863]## 

[#50540562_pgfId-1041865]## <xsd:annotation>

[#50540562_pgfId-1041867]## <xsd:documentation>

[#50540562_pgfId-1041869]## <![CDATA[

[#50540562_pgfId-1041871]## 

[#50540562_pgfId-1041873]## This is the XML Schema for the Connector 1.6
deployment

[#50540562_pgfId-1041875]## descriptor. The deployment descriptor must
be named

[#50540562_pgfId-1041877]## "META-INF/ra.xml" in the connector’s rar
file. All Connector

[#50540562_pgfId-1041879]## deployment descriptors must indicate the
connector resource

[#50540562_pgfId-1041881]## adapter schema by using the Java EE
namespace:

[#50540562_pgfId-1041883]## 

[#50540562_pgfId-1041885]## http://java.sun.com/xml/ns/javaee

[#50540562_pgfId-1041887]## 

[#50540562_pgfId-1041889]## and by indicating the version of the schema
by

[#50540562_pgfId-1041891]## using the version element as shown below:

[#50540562_pgfId-1041893]## 

[#50540562_pgfId-1041895]## <connector
xmlns="http://java.sun.com/xml/ns/javaee"

[#50540562_pgfId-1041897]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50540562_pgfId-1041899]##
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee

[#50540562_pgfId-1041901]##
http://java.sun.com/xml/ns/javaee/connector_1_6.xsd”

[#50540562_pgfId-1041903]## version="1.6">

[#50540562_pgfId-1041905]## ...

[#50540562_pgfId-1041907]## </connector>

[#50540562_pgfId-1041909]## 

[#50540562_pgfId-1041911]## The instance documents may indicate the
published version of

[#50540562_pgfId-1041913]## the schema using the xsi:schemaLocation
attribute for Java EE

[#50540562_pgfId-1041915]## namespace with the following location:

[#50540562_pgfId-1041917]## 

[#50540562_pgfId-1041919]##
http://java.sun.com/xml/ns/javaee/connector_1_6.xsd

[#50540562_pgfId-1041921]## 

[#50540562_pgfId-1041923]## ]]>

[#50540562_pgfId-1041925]## </xsd:documentation>

[#50540562_pgfId-1041927]## </xsd:annotation>

[#50540562_pgfId-1041929]## 

[#50540562_pgfId-1041931]## <xsd:annotation>

[#50540562_pgfId-1041933]## <xsd:documentation>

[#50540562_pgfId-1041935]## 

[#50540562_pgfId-1041937]## The following conventions apply to all Java
EE

[#50540562_pgfId-1041939]## deployment descriptor elements unless
indicated otherwise.

[#50540562_pgfId-1041941]## 

[#50540562_pgfId-1041943]## - In elements that specify a pathname to a
file within the

[#50540562_pgfId-1041945]## same JAR file, relative filenames (i.e.,
those not

[#50540562_pgfId-1041947]## starting with "/") are considered relative
to the root of

[#50540562_pgfId-1041949]## the JAR file’s namespace. Absolute filenames
(i.e., those

[#50540562_pgfId-1041951]## starting with "/") also specify names in the
root of the

[#50540562_pgfId-1041953]## JAR file’s namespace. In general, relative
names are

[#50540562_pgfId-1041955]## preferred. The exception is .war files where
absolute

[#50540562_pgfId-1041957]## names are preferred for consistency with the
Servlet API.

[#50540562_pgfId-1041959]## 

[#50540562_pgfId-1041961]## </xsd:documentation>

[#50540562_pgfId-1041963]## </xsd:annotation>

[#50540562_pgfId-1041965]## 

[#50540562_pgfId-1041967]## <xsd:include schemaLocation="javaee_6.xsd"/>

[#50540562_pgfId-1041969]## 

[#50540562_pgfId-1041971]## 

[#50540562_pgfId-1041973]##<!--
**************************************************** -->

[#50540562_pgfId-1041975]## 

[#50540562_pgfId-1041977]## 

[#50540562_pgfId-1041979]## <xsd:element name="connector"
type="javaee:connectorType">

[#50540562_pgfId-1041981]## <xsd:annotation>

[#50540562_pgfId-1041983]## <xsd:documentation>

[#50540562_pgfId-1041985]## 

[#50540562_pgfId-1041987]## The connector element is the root element of
the deployment

[#50540562_pgfId-1041989]## descriptor for the resource adapter. This
element includes

[#50540562_pgfId-1041991]## general information - vendor name, resource
adapter version,

[#50540562_pgfId-1041993]## icon - about the resource adapter module. It
also includes

[#50540562_pgfId-1041995]## information specific to the implementation
of the resource

[#50540562_pgfId-1041997]## adapter library as specified through the
element

[#50540562_pgfId-1041999]## resourceadapter.

[#50540562_pgfId-1042001]## 

[#50540562_pgfId-1042003]## </xsd:documentation>

[#50540562_pgfId-1042005]## </xsd:annotation>

[#50540562_pgfId-1042007]## 

[#50540562_pgfId-1042009]## </xsd:element>

[#50540562_pgfId-1042011]## 

[#50540562_pgfId-1042013]##<!--
**************************************************** -->

[#50540562_pgfId-1042015]## 

[#50540562_pgfId-1042017]## <xsd:complexType name="activationspecType">

[#50540562_pgfId-1042019]## <xsd:annotation>

[#50540562_pgfId-1042021]## <xsd:documentation>

[#50540562_pgfId-1042023]## 

[#50540562_pgfId-1042025]## The activationspecType specifies an
activation

[#50540562_pgfId-1042027]## specification. The information includes

[#50540562_pgfId-1042029]## Java class name of an activation
specification and a set of

[#50540562_pgfId-1042031]## required configuration property names.

[#50540562_pgfId-1042033]## 

[#50540562_pgfId-1042035]## </xsd:documentation>

[#50540562_pgfId-1042037]## </xsd:annotation>

[#50540562_pgfId-1042039]## 

[#50540562_pgfId-1042041]## <xsd:sequence>

[#50540562_pgfId-1042043]## <xsd:element name="activationspec-class"

[#50540562_pgfId-1042045]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1042047]## <xsd:annotation>

[#50540562_pgfId-1042049]## <xsd:documentation>

[#50540562_pgfId-1042051]## <![CDATA[

[#50540562_pgfId-1042053]## 

[#50540562_pgfId-1042055]## The element activationspec-class specifies
the fully

[#50540562_pgfId-1042057]## qualified Java class name of the activation

[#50540562_pgfId-1042059]## specification class. This class must
implement the

[#50540562_pgfId-1042061]## javax.resource.spi.ActivationSpec interface.
The

[#50540562_pgfId-1042063]## implementation of this class is required to
be a

[#50540562_pgfId-1042065]## JavaBean.

[#50540562_pgfId-1042067]## 

[#50540562_pgfId-1042069]## Example:

[#50540562_pgfId-1042071]##
<activationspec-class>com.wombat.ActivationSpecImpl

[#50540562_pgfId-1042073]## </activationspec-class>

[#50540562_pgfId-1042075]## 

[#50540562_pgfId-1042077]## ]]>

[#50540562_pgfId-1042079]## </xsd:documentation>

[#50540562_pgfId-1042081]## </xsd:annotation>

[#50540562_pgfId-1042083]## </xsd:element>

[#50540562_pgfId-1042085]## <xsd:element name="required-config-property"

[#50540562_pgfId-1042087]## type="javaee:required-config-propertyType"

[#50540562_pgfId-1042089]## minOccurs="0"

[#50540562_pgfId-1042091]## maxOccurs="unbounded"/>

[#50540562_pgfId-1042093]## <xsd:element name="config-property"

[#50540562_pgfId-1042095]## type="javaee:config-propertyType"

[#50540562_pgfId-1042097]## minOccurs="0"

[#50540562_pgfId-1042099]## maxOccurs="unbounded">

[#50540562_pgfId-1042101]## <xsd:annotation>

[#50540562_pgfId-1042103]## <xsd:documentation>

[#50540562_pgfId-1042105]## The required-config-property element is
deprecated since

[#50540562_pgfId-1042107]## Connector 1.6 specification. The resource
adapter

[#50540562_pgfId-1042109]## implementation is recommended to use the
@NotNull

[#50540562_pgfId-1042111]## Bean Validation annotation or its XML
validation

[#50540562_pgfId-1042113]## descriptor equivalent to indicate that a
configuration

[#50540562_pgfId-1042115]## property is required to be specified by the
deployer.

[#50540562_pgfId-1042117]## See the Connectors specification for more
information.

[#50540562_pgfId-1042119]## </xsd:documentation>

[#50540562_pgfId-1042121]## </xsd:annotation>

[#50540562_pgfId-1042123]## 

[#50540562_pgfId-1042125]## </xsd:element>

[#50540562_pgfId-1042127]## 

[#50540562_pgfId-1042129]## </xsd:sequence>

[#50540562_pgfId-1042131]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1042133]## </xsd:complexType>

[#50540562_pgfId-1042135]## 

[#50540562_pgfId-1042137]##<!--
**************************************************** -->

[#50540562_pgfId-1042139]## 

[#50540562_pgfId-1042141]## <xsd:complexType name="adminobjectType">

[#50540562_pgfId-1042143]## <xsd:annotation>

[#50540562_pgfId-1042145]## <xsd:documentation>

[#50540562_pgfId-1042147]## 

[#50540562_pgfId-1042149]## The adminobjectType specifies information
about an

[#50540562_pgfId-1042151]## administered object. Administered objects
are specific to a

[#50540562_pgfId-1042153]## messaging style or message provider. This
contains

[#50540562_pgfId-1042155]## information on the Java type of the
interface implemented by

[#50540562_pgfId-1042157]## an administered object, its Java class name
and its

[#50540562_pgfId-1042159]## configuration properties.

[#50540562_pgfId-1042161]## 

[#50540562_pgfId-1042163]## </xsd:documentation>

[#50540562_pgfId-1042165]## </xsd:annotation>

[#50540562_pgfId-1042167]## 

[#50540562_pgfId-1042169]## <xsd:sequence>

[#50540562_pgfId-1042171]## <xsd:element name="adminobject-interface"

[#50540562_pgfId-1042173]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1042175]## <xsd:annotation>

[#50540562_pgfId-1042177]## <xsd:documentation>

[#50540562_pgfId-1042179]## <![CDATA[

[#50540562_pgfId-1042181]## 

[#50540562_pgfId-1042183]## The element adminobject-interface specifies
the

[#50540562_pgfId-1042185]## name of the Java type of the

[#50540562_pgfId-1042187]## interface implemented by an administered
object.

[#50540562_pgfId-1042189]## 

[#50540562_pgfId-1042191]## Example:

[#50540562_pgfId-1042193]## <adminobject-interface>javax.jms.Destination

[#50540562_pgfId-1042195]## </adminobject-interface>

[#50540562_pgfId-1042197]## 

[#50540562_pgfId-1042199]## ]]>

[#50540562_pgfId-1042201]## </xsd:documentation>

[#50540562_pgfId-1042203]## </xsd:annotation>

[#50540562_pgfId-1042205]## 

[#50540562_pgfId-1042207]## </xsd:element>

[#50540562_pgfId-1042209]## <xsd:element name="adminobject-class"

[#50540562_pgfId-1042211]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1042213]## <xsd:annotation>

[#50540562_pgfId-1042215]## <xsd:documentation>

[#50540562_pgfId-1042217]## <![CDATA[

[#50540562_pgfId-1042219]## 

[#50540562_pgfId-1042221]## The element adminobject-class specifies the
fully

[#50540562_pgfId-1042223]## qualified Java class name of an administered
object.

[#50540562_pgfId-1042225]## 

[#50540562_pgfId-1042227]## Example:

[#50540562_pgfId-1042229]##
<adminobject-class>com.wombat.DestinationImpl

[#50540562_pgfId-1042231]## </adminobject-class>

[#50540562_pgfId-1042233]## 

[#50540562_pgfId-1042235]## ]]>

[#50540562_pgfId-1042237]## </xsd:documentation>

[#50540562_pgfId-1042239]## </xsd:annotation>

[#50540562_pgfId-1042241]## </xsd:element>

[#50540562_pgfId-1042243]## 

[#50540562_pgfId-1042245]## <xsd:element name="config-property"

[#50540562_pgfId-1042247]## type="javaee:config-propertyType"

[#50540562_pgfId-1042249]## minOccurs="0"

[#50540562_pgfId-1042251]## maxOccurs="unbounded"/>

[#50540562_pgfId-1042253]## </xsd:sequence>

[#50540562_pgfId-1042255]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1042257]## </xsd:complexType>

[#50540562_pgfId-1042259]## 

[#50540562_pgfId-1042261]##<!--
**************************************************** -->

[#50540562_pgfId-1042263]## 

[#50540562_pgfId-1042265]## <xsd:complexType
name="authentication-mechanismType">

[#50540562_pgfId-1042267]## <xsd:annotation>

[#50540562_pgfId-1042269]## <xsd:documentation>

[#50540562_pgfId-1042271]## 

[#50540562_pgfId-1042273]## The authentication-mechanismType specifies
an authentication

[#50540562_pgfId-1042275]## mechanism supported by the resource adapter.
Note that this

[#50540562_pgfId-1042277]## support is for the resource adapter and not
for the

[#50540562_pgfId-1042279]## underlying EIS instance. The optional
description specifies

[#50540562_pgfId-1042281]## any resource adapter specific requirement
for the support of

[#50540562_pgfId-1042283]## security contract and authentication
mechanism.

[#50540562_pgfId-1042285]## 

[#50540562_pgfId-1042287]## Note that BasicPassword mechanism type
should support the

[#50540562_pgfId-1042289]##
javax.resource.spi.security.PasswordCredential interface.

[#50540562_pgfId-1042291]## The Kerbv5 mechanism type should support the

[#50540562_pgfId-1042293]## org.ietf.jgss.GSSCredential interface or the
deprecated

[#50540562_pgfId-1042295]##
javax.resource.spi.security.GenericCredential interface.

[#50540562_pgfId-1042297]## 

[#50540562_pgfId-1042299]## </xsd:documentation>

[#50540562_pgfId-1042301]## </xsd:annotation>

[#50540562_pgfId-1042303]## 

[#50540562_pgfId-1042305]## <xsd:sequence>

[#50540562_pgfId-1042307]## <xsd:element name="description"

[#50540562_pgfId-1042309]## type="javaee:descriptionType"

[#50540562_pgfId-1042311]## minOccurs="0"

[#50540562_pgfId-1042313]## maxOccurs="unbounded"/>

[#50540562_pgfId-1042315]## <xsd:element
name="authentication-mechanism-type"

[#50540562_pgfId-1042317]## type="javaee:xsdStringType">

[#50540562_pgfId-1042319]## <xsd:annotation>

[#50540562_pgfId-1042321]## <xsd:documentation>

[#50540562_pgfId-1042323]## <![CDATA[

[#50540562_pgfId-1042325]## 

[#50540562_pgfId-1042327]## The element authentication-mechanism-type
specifies

[#50540562_pgfId-1042329]## type of an authentication mechanism.

[#50540562_pgfId-1042331]## 

[#50540562_pgfId-1042333]## The example values are:

[#50540562_pgfId-1042335]## 

[#50540562_pgfId-1042337]## <authentication-mechanism-type>BasicPassword

[#50540562_pgfId-1042339]## </authentication-mechanism-type>

[#50540562_pgfId-1042341]## 

[#50540562_pgfId-1042343]## <authentication-mechanism-type>Kerbv5

[#50540562_pgfId-1042345]## </authentication-mechanism-type>

[#50540562_pgfId-1042347]## 

[#50540562_pgfId-1042349]## Any additional security mechanisms are
outside the

[#50540562_pgfId-1042351]## scope of the Connector architecture
specification.

[#50540562_pgfId-1042353]## 

[#50540562_pgfId-1042355]## ]]>

[#50540562_pgfId-1042357]## </xsd:documentation>

[#50540562_pgfId-1042359]## </xsd:annotation>

[#50540562_pgfId-1042361]## 

[#50540562_pgfId-1042363]## </xsd:element>

[#50540562_pgfId-1042365]## <xsd:element name="credential-interface"

[#50540562_pgfId-1042367]## type="javaee:credential-interfaceType"/>

[#50540562_pgfId-1042369]## </xsd:sequence>

[#50540562_pgfId-1042371]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1042373]## </xsd:complexType>

[#50540562_pgfId-1042375]## 

[#50540562_pgfId-1042377]##<!--
**************************************************** -->

[#50540562_pgfId-1042379]## 

[#50540562_pgfId-1042381]## <xsd:complexType
name="config-property-nameType">

[#50540562_pgfId-1042383]## <xsd:annotation>

[#50540562_pgfId-1042385]## <xsd:documentation>

[#50540562_pgfId-1042387]## <![CDATA[

[#50540562_pgfId-1042389]## 

[#50540562_pgfId-1042391]## The config-property-nameType contains the
name of a

[#50540562_pgfId-1042393]## configuration property.

[#50540562_pgfId-1042395]## 

[#50540562_pgfId-1042397]## The connector architecture defines a set of
well-defined

[#50540562_pgfId-1042399]## properties all of type java.lang.String.
These are as

[#50540562_pgfId-1042401]## follows.

[#50540562_pgfId-1042403]## 

[#50540562_pgfId-1042405]## ServerName

[#50540562_pgfId-1042407]## PortNumber

[#50540562_pgfId-1042409]## UserName

[#50540562_pgfId-1042411]## Password

[#50540562_pgfId-1042413]## ConnectionURL

[#50540562_pgfId-1042415]## 

[#50540562_pgfId-1042417]## A resource adapter provider can extend this
property set to

[#50540562_pgfId-1042419]## include properties specific to the resource
adapter and its

[#50540562_pgfId-1042421]## underlying EIS.

[#50540562_pgfId-1042423]## 

[#50540562_pgfId-1042425]## Possible values include

[#50540562_pgfId-1042427]## ServerName

[#50540562_pgfId-1042429]## PortNumber

[#50540562_pgfId-1042431]## UserName

[#50540562_pgfId-1042433]## Password

[#50540562_pgfId-1042435]## ConnectionURL

[#50540562_pgfId-1042437]## 

[#50540562_pgfId-1042439]## Example:
<config-property-name>ServerName</config-property-name>

[#50540562_pgfId-1042441]## 

[#50540562_pgfId-1042443]## ]]>

[#50540562_pgfId-1042445]## </xsd:documentation>

[#50540562_pgfId-1042447]## </xsd:annotation>

[#50540562_pgfId-1042449]## <xsd:simpleContent>

[#50540562_pgfId-1042451]## <xsd:restriction
base="javaee:xsdStringType"/>

[#50540562_pgfId-1042453]## </xsd:simpleContent>

[#50540562_pgfId-1042455]## </xsd:complexType>

[#50540562_pgfId-1042457]## 

[#50540562_pgfId-1042459]##<!--
**************************************************** -->

[#50540562_pgfId-1042461]## 

[#50540562_pgfId-1042463]## <xsd:complexType
name="config-property-typeType">

[#50540562_pgfId-1042465]## <xsd:annotation>

[#50540562_pgfId-1042467]## <xsd:documentation>

[#50540562_pgfId-1042469]## <![CDATA[

[#50540562_pgfId-1042471]## 

[#50540562_pgfId-1042473]## The config-property-typeType contains the
fully

[#50540562_pgfId-1042475]## qualified Java type of a configuration
property.

[#50540562_pgfId-1042477]## 

[#50540562_pgfId-1042479]## The following are the legal values:

[#50540562_pgfId-1042481]## java.lang.Boolean, java.lang.String,
java.lang.Integer,

[#50540562_pgfId-1042483]## java.lang.Double, java.lang.Byte,
java.lang.Short,

[#50540562_pgfId-1042485]## java.lang.Long, java.lang.Float,
java.lang.Character

[#50540562_pgfId-1042487]## 

[#50540562_pgfId-1042489]## Used in: config-property

[#50540562_pgfId-1042491]## 

[#50540562_pgfId-1042493]## Example:

[#50540562_pgfId-1042495]##
<config-property-type>java.lang.String</config-property-type>

[#50540562_pgfId-1042497]## 

[#50540562_pgfId-1042499]## ]]>

[#50540562_pgfId-1042501]## </xsd:documentation>

[#50540562_pgfId-1042503]## </xsd:annotation>

[#50540562_pgfId-1042505]## <xsd:simpleContent>

[#50540562_pgfId-1042507]## <xsd:restriction base="javaee:string">

[#50540562_pgfId-1042509]## <xsd:enumeration value="java.lang.Boolean"/>

[#50540562_pgfId-1042511]## <xsd:enumeration value="java.lang.String"/>

[#50540562_pgfId-1042513]## <xsd:enumeration value="java.lang.Integer"/>

[#50540562_pgfId-1042515]## <xsd:enumeration value="java.lang.Double"/>

[#50540562_pgfId-1042517]## <xsd:enumeration value="java.lang.Byte"/>

[#50540562_pgfId-1042519]## <xsd:enumeration value="java.lang.Short"/>

[#50540562_pgfId-1042521]## <xsd:enumeration value="java.lang.Long"/>

[#50540562_pgfId-1042523]## <xsd:enumeration value="java.lang.Float"/>

[#50540562_pgfId-1042525]## <xsd:enumeration
value="java.lang.Character"/>

[#50540562_pgfId-1042527]## </xsd:restriction>

[#50540562_pgfId-1042529]## </xsd:simpleContent>

[#50540562_pgfId-1042531]## </xsd:complexType>

[#50540562_pgfId-1042533]## 

[#50540562_pgfId-1042535]##<!--
**************************************************** -->

[#50540562_pgfId-1042537]## 

[#50540562_pgfId-1042539]## <xsd:complexType name="config-propertyType">

[#50540562_pgfId-1042541]## <xsd:annotation>

[#50540562_pgfId-1042543]## <xsd:documentation>

[#50540562_pgfId-1042545]## 

[#50540562_pgfId-1042547]## The config-propertyType contains a
declaration of a single

[#50540562_pgfId-1042549]## configuration property that may be used for
providing

[#50540562_pgfId-1042551]## configuration information.

[#50540562_pgfId-1042553]## 

[#50540562_pgfId-1042555]## The declaration consists of an optional
description, name,

[#50540562_pgfId-1042557]## type and an optional value of the
configuration property. If

[#50540562_pgfId-1042559]## the resource adapter provider does not
specify a value than

[#50540562_pgfId-1042561]## the deployer is responsible for providing a
valid value for

[#50540562_pgfId-1042563]## a configuration property.

[#50540562_pgfId-1042565]## 

[#50540562_pgfId-1042567]## Any bounds or well-defined values of
properties should be

[#50540562_pgfId-1042569]## described in the description element.

[#50540562_pgfId-1042571]## 

[#50540562_pgfId-1042573]## </xsd:documentation>

[#50540562_pgfId-1042575]## </xsd:annotation>

[#50540562_pgfId-1042577]## <xsd:sequence>

[#50540562_pgfId-1042579]## <xsd:element name="description"

[#50540562_pgfId-1042581]## type="javaee:descriptionType"

[#50540562_pgfId-1042583]## minOccurs="0"

[#50540562_pgfId-1042585]## maxOccurs="unbounded"/>

[#50540562_pgfId-1042587]## <xsd:element name="config-property-name"

[#50540562_pgfId-1042589]## type="javaee:config-property-nameType"/>

[#50540562_pgfId-1042591]## <xsd:element name="config-property-type"

[#50540562_pgfId-1042593]## type="javaee:config-property-typeType"/>

[#50540562_pgfId-1042595]## <xsd:element name="config-property-value"

[#50540562_pgfId-1042597]## type="javaee:xsdStringType"

[#50540562_pgfId-1042599]## minOccurs="0">

[#50540562_pgfId-1042601]## <xsd:annotation>

[#50540562_pgfId-1042603]## <xsd:documentation>

[#50540562_pgfId-1042605]## <![CDATA[

[#50540562_pgfId-1042607]## 

[#50540562_pgfId-1042609]## The element config-property-value contains
the value

[#50540562_pgfId-1042611]## of a configuration entry. Note, it is
possible for a

[#50540562_pgfId-1042613]## resource adapter deployer to override this

[#50540562_pgfId-1042615]## configuration information during deployment.

[#50540562_pgfId-1042617]## 

[#50540562_pgfId-1042619]## Example:

[#50540562_pgfId-1042621]##
<config-property-value>WombatServer</config-property-value>

[#50540562_pgfId-1042623]## 

[#50540562_pgfId-1042625]## ]]>

[#50540562_pgfId-1042627]## </xsd:documentation>

[#50540562_pgfId-1042629]## </xsd:annotation>

[#50540562_pgfId-1042631]## </xsd:element>

[#50540562_pgfId-1042633]## 

[#50540562_pgfId-1042635]## <xsd:element name="config-property-ignore"
type="javaee:true-falseType"

[#50540562_pgfId-1042637]## minOccurs="0" maxOccurs="1">

[#50540562_pgfId-1042639]## <xsd:annotation>

[#50540562_pgfId-1042641]## <xsd:documentation>

[#50540562_pgfId-1042643]## <![CDATA[

[#50540562_pgfId-1042645]## 

[#50540562_pgfId-1042647]## The element config-property-ignore is used
to specify

[#50540562_pgfId-1042649]## whether the configuration tools must ignore
considering the

[#50540562_pgfId-1042651]## configuration property during auto-discovery
of

[#50540562_pgfId-1042653]## Configuration properties. See the Connector
specification for

[#50540562_pgfId-1042655]## more details. If unspecified, the container
must not ignore

[#50540562_pgfId-1042657]## the configuration property during
auto-discovery.

[#50540562_pgfId-1042659]## This element must be one of the following,
"true" or "false".

[#50540562_pgfId-1042661]## 

[#50540562_pgfId-1042663]## ]]>

[#50540562_pgfId-1042665]## </xsd:documentation>

[#50540562_pgfId-1042667]## </xsd:annotation>

[#50540562_pgfId-1042669]## </xsd:element>

[#50540562_pgfId-1042671]## <xsd:element
name="config-property-supports-dynamic-updates" type
"javaee:true-falseType"

[#50540562_pgfId-1042673]## minOccurs="0" maxOccurs="1">

[#50540562_pgfId-1042675]## <xsd:annotation>

[#50540562_pgfId-1042677]## <xsd:documentation>

[#50540562_pgfId-1042679]## <![CDATA[

[#50540562_pgfId-1042681]## The element
config-property-supports-dynamic-updates is used to specify

[#50540562_pgfId-1042683]## whether the configuration property allows
its value to be updated, by

[#50540562_pgfId-1042685]## application server’s configuration tools,
during the lifetime of

[#50540562_pgfId-1042687]## the JavaBean instance. See the Connector
specification for

[#50540562_pgfId-1042689]## more details. If unspecified, the container
must not dynamically

[#50540562_pgfId-1042691]## reconfigure the property.

[#50540562_pgfId-1042693]## This element must be one of the following,
"true" or "false".

[#50540562_pgfId-1042695]## 

[#50540562_pgfId-1042697]## ]]>

[#50540562_pgfId-1042699]## </xsd:documentation>

[#50540562_pgfId-1042701]## </xsd:annotation>

[#50540562_pgfId-1042703]## </xsd:element>

[#50540562_pgfId-1042705]## 

[#50540562_pgfId-1042707]## <xsd:element
name="config-property-confidential" type="javaee:true-falseType"

[#50540562_pgfId-1042709]## minOccurs="0" maxOccurs="1">

[#50540562_pgfId-1042711]## <xsd:annotation>

[#50540562_pgfId-1042713]## <xsd:documentation>

[#50540562_pgfId-1042715]## <![CDATA[

[#50540562_pgfId-1042717]## The element config-property-confidential is
used to specify

[#50540562_pgfId-1042719]## whether the configuration property is
confidential and

[#50540562_pgfId-1042721]## recommends application server’s
configuration tools to use special

[#50540562_pgfId-1042723]## visual aids for editing them. See the
Connector specification for

[#50540562_pgfId-1042725]## more details. If unspecified, the container
must not treat the

[#50540562_pgfId-1042727]## property as confidential.

[#50540562_pgfId-1042729]## 

[#50540562_pgfId-1042731]## This element must be one of the following,
"true" or "false".

[#50540562_pgfId-1042733]## ]]>

[#50540562_pgfId-1042735]## </xsd:documentation>

[#50540562_pgfId-1042737]## </xsd:annotation>

[#50540562_pgfId-1042739]## </xsd:element>

[#50540562_pgfId-1042741]## 

[#50540562_pgfId-1042743]## 

[#50540562_pgfId-1042745]## </xsd:sequence>

[#50540562_pgfId-1042747]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1042749]## </xsd:complexType>

[#50540562_pgfId-1042751]## 

[#50540562_pgfId-1042753]##<!--
**************************************************** -->

[#50540562_pgfId-1042755]## 

[#50540562_pgfId-1042757]## <xsd:complexType
name="connection-definitionType">

[#50540562_pgfId-1042759]## <xsd:annotation>

[#50540562_pgfId-1042761]## <xsd:documentation>

[#50540562_pgfId-1042763]## 

[#50540562_pgfId-1042765]## The connection-definitionType defines a set
of connection

[#50540562_pgfId-1042767]## interfaces and classes pertaining to a
particular connection

[#50540562_pgfId-1042769]## type. This also includes configurable
properties for

[#50540562_pgfId-1042771]## ManagedConnectionFactory instances that may
be produced out

[#50540562_pgfId-1042773]## of this set.

[#50540562_pgfId-1042775]## 

[#50540562_pgfId-1042777]## </xsd:documentation>

[#50540562_pgfId-1042779]## </xsd:annotation>

[#50540562_pgfId-1042781]## 

[#50540562_pgfId-1042783]## <xsd:sequence>

[#50540562_pgfId-1042785]## <xsd:element
name="managedconnectionfactory-class"

[#50540562_pgfId-1042787]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1042789]## <xsd:annotation>

[#50540562_pgfId-1042791]## <xsd:documentation>

[#50540562_pgfId-1042793]## <![CDATA[

[#50540562_pgfId-1042795]## 

[#50540562_pgfId-1042797]## The element managedconnectionfactory-class
specifies

[#50540562_pgfId-1042799]## the name of the Java class that

[#50540562_pgfId-1042801]## implements the

[#50540562_pgfId-1042803]## javax.resource.spi.ManagedConnectionFactory
interface.

[#50540562_pgfId-1042805]## This Java class is provided as part of
resource

[#50540562_pgfId-1042807]## adapter’s implementation of connector
architecture

[#50540562_pgfId-1042809]## specified contracts. The implementation of
this

[#50540562_pgfId-1042811]## class is required to be a JavaBean.

[#50540562_pgfId-1042813]## 

[#50540562_pgfId-1042815]## Example:

[#50540562_pgfId-1042817]## <managedconnectionfactory-class>

[#50540562_pgfId-1042819]## com.wombat.ManagedConnectionFactoryImpl

[#50540562_pgfId-1042821]## </managedconnectionfactory-class>

[#50540562_pgfId-1042823]## 

[#50540562_pgfId-1042825]## ]]>

[#50540562_pgfId-1042827]## </xsd:documentation>

[#50540562_pgfId-1042829]## </xsd:annotation>

[#50540562_pgfId-1042831]## </xsd:element>

[#50540562_pgfId-1042833]## <xsd:element name="config-property"

[#50540562_pgfId-1042835]## type="javaee:config-propertyType"

[#50540562_pgfId-1042837]## minOccurs="0"

[#50540562_pgfId-1042839]## maxOccurs="unbounded"/>

[#50540562_pgfId-1042841]## <xsd:element
name="connectionfactory-interface"

[#50540562_pgfId-1042843]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1042845]## <xsd:annotation>

[#50540562_pgfId-1042847]## <xsd:documentation>

[#50540562_pgfId-1042849]## <![CDATA[

[#50540562_pgfId-1042851]## 

[#50540562_pgfId-1042853]## The element connectionfactory-interface
specifies

[#50540562_pgfId-1042855]## the name of the ConnectionFactory

[#50540562_pgfId-1042857]## interface supported by the resource adapter.

[#50540562_pgfId-1042859]## 

[#50540562_pgfId-1042861]## Example:

[#50540562_pgfId-1042863]##
<connectionfactory-interface>com.wombat.ConnectionFactory

[#50540562_pgfId-1042865]## </connectionfactory-interface>

[#50540562_pgfId-1042867]## 

[#50540562_pgfId-1042869]## OR

[#50540562_pgfId-1042871]## 

[#50540562_pgfId-1042873]##
<connectionfactory-interface>javax.resource.cci.ConnectionFactory

[#50540562_pgfId-1042875]## </connectionfactory-interface>

[#50540562_pgfId-1042877]## 

[#50540562_pgfId-1042879]## ]]>

[#50540562_pgfId-1042881]## </xsd:documentation>

[#50540562_pgfId-1042883]## </xsd:annotation>

[#50540562_pgfId-1042885]## </xsd:element>

[#50540562_pgfId-1042887]## 

[#50540562_pgfId-1042889]## <xsd:element
name="connectionfactory-impl-class"

[#50540562_pgfId-1042891]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1042893]## <xsd:annotation>

[#50540562_pgfId-1042895]## <xsd:documentation>

[#50540562_pgfId-1042897]## <![CDATA[

[#50540562_pgfId-1042899]## 

[#50540562_pgfId-1042901]## The element connectionfactory-impl-class
specifies

[#50540562_pgfId-1042903]## the name of the ConnectionFactory

[#50540562_pgfId-1042905]## class that implements resource adapter

[#50540562_pgfId-1042907]## specific ConnectionFactory interface.

[#50540562_pgfId-1042909]## 

[#50540562_pgfId-1042911]## Example:

[#50540562_pgfId-1042913]## 

[#50540562_pgfId-1042915]##
<connectionfactory-impl-class>com.wombat.ConnectionFactoryImpl

[#50540562_pgfId-1042917]## </connectionfactory-impl-class>

[#50540562_pgfId-1042919]## 

[#50540562_pgfId-1042921]## ]]>

[#50540562_pgfId-1042923]## </xsd:documentation>

[#50540562_pgfId-1042925]## </xsd:annotation>

[#50540562_pgfId-1042927]## </xsd:element>

[#50540562_pgfId-1042929]## <xsd:element name="connection-interface"

[#50540562_pgfId-1042931]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1042933]## <xsd:annotation>

[#50540562_pgfId-1042935]## <xsd:documentation>

[#50540562_pgfId-1042937]## <![CDATA[

[#50540562_pgfId-1042939]## 

[#50540562_pgfId-1042941]## The connection-interface element specifies
the fully

[#50540562_pgfId-1042943]## qualified name of the Connection interface
supported

[#50540562_pgfId-1042945]## by the resource adapter.

[#50540562_pgfId-1042947]## 

[#50540562_pgfId-1042949]## Example:

[#50540562_pgfId-1042951]## 

[#50540562_pgfId-1042953]##
<connection-interface>javax.resource.cci.Connection

[#50540562_pgfId-1042955]## </connection-interface>

[#50540562_pgfId-1042957]## 

[#50540562_pgfId-1042959]## ]]>

[#50540562_pgfId-1042961]## </xsd:documentation>

[#50540562_pgfId-1042963]## </xsd:annotation>

[#50540562_pgfId-1042965]## </xsd:element>

[#50540562_pgfId-1042967]## <xsd:element name="connection-impl-class"

[#50540562_pgfId-1042969]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1042971]## <xsd:annotation>

[#50540562_pgfId-1042973]## <xsd:documentation>

[#50540562_pgfId-1042975]## <![CDATA[

[#50540562_pgfId-1042977]## 

[#50540562_pgfId-1042979]## The connection-impl-classType specifies the
fully

[#50540562_pgfId-1042981]## qualified name of the Connection class that

[#50540562_pgfId-1042983]## implements resource adapter specific
Connection

[#50540562_pgfId-1042985]## interface. It is used by the
connection-impl-class

[#50540562_pgfId-1042987]## elements.

[#50540562_pgfId-1042989]## 

[#50540562_pgfId-1042991]## Example:

[#50540562_pgfId-1042993]## 

[#50540562_pgfId-1042995]##
<connection-impl-class>com.wombat.ConnectionImpl

[#50540562_pgfId-1042997]## </connection-impl-class>

[#50540562_pgfId-1042999]## 

[#50540562_pgfId-1043001]## ]]>

[#50540562_pgfId-1043003]## </xsd:documentation>

[#50540562_pgfId-1043005]## </xsd:annotation>

[#50540562_pgfId-1043007]## </xsd:element>

[#50540562_pgfId-1043009]## </xsd:sequence>

[#50540562_pgfId-1043011]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1043013]## </xsd:complexType>

[#50540562_pgfId-1043015]## 

[#50540562_pgfId-1043017]##<!--
**************************************************** -->

[#50540562_pgfId-1043019]## 

[#50540562_pgfId-1043021]## <xsd:complexType name="connectorType">

[#50540562_pgfId-1043023]## <xsd:annotation>

[#50540562_pgfId-1043025]## <xsd:documentation>

[#50540562_pgfId-1043027]## 

[#50540562_pgfId-1043029]## The connectorType defines a resource
adapter.

[#50540562_pgfId-1043031]## 

[#50540562_pgfId-1043033]## </xsd:documentation>

[#50540562_pgfId-1043035]## </xsd:annotation>

[#50540562_pgfId-1043037]## 

[#50540562_pgfId-1043039]## <xsd:sequence>

[#50540562_pgfId-1043041]## <xsd:element name="module-name"
type="javaee:string" minOccurs="0">

[#50540562_pgfId-1043043]## <xsd:annotation>

[#50540562_pgfId-1043045]## <xsd:documentation>

[#50540562_pgfId-1043047]## 

[#50540562_pgfId-1043049]## The element module-name specifies the name
of the

[#50540562_pgfId-1043051]## resource adapter.

[#50540562_pgfId-1043053]## 

[#50540562_pgfId-1043055]## If there is no module-name specified, the
module-name

[#50540562_pgfId-1043057]## is determined as defined in Section EE.8.1.1
and EE.8.1.2

[#50540562_pgfId-1043059]## of the Java Platform, Enterprise Edition
(Java EE)

[#50540562_pgfId-1043061]## Specification, version 6.

[#50540562_pgfId-1043063]## </xsd:documentation>

[#50540562_pgfId-1043065]## </xsd:annotation>

[#50540562_pgfId-1043067]## </xsd:element>

[#50540562_pgfId-1043069]## <xsd:group ref="javaee:descriptionGroup"/>

[#50540562_pgfId-1043071]## <xsd:element name="vendor-name"

[#50540562_pgfId-1043073]## type="javaee:xsdStringType" minOccurs=”0”>

[#50540562_pgfId-1043075]## <xsd:annotation>

[#50540562_pgfId-1043077]## <xsd:documentation>

[#50540562_pgfId-1043079]## 

[#50540562_pgfId-1043081]## The element vendor-name specifies the name
of

[#50540562_pgfId-1043083]## resource adapter provider vendor.

[#50540562_pgfId-1043085]## 

[#50540562_pgfId-1043087]##If there is no vendor-name specified, the
application server

[#50540562_pgfId-1043089]##server must consider the default ““ (empty
string) as

[#50540562_pgfId-1043091]##the name of the resource adapter provider
vendor.

[#50540562_pgfId-1043093]## 

[#50540562_pgfId-1043095]## </xsd:documentation>

[#50540562_pgfId-1043097]## </xsd:annotation>

[#50540562_pgfId-1043099]## </xsd:element>

[#50540562_pgfId-1043101]## <xsd:element name="eis-type"

[#50540562_pgfId-1043103]## type="javaee:xsdStringType" minOccurs=”0”>

[#50540562_pgfId-1043105]## <xsd:annotation>

[#50540562_pgfId-1043107]## <xsd:documentation>

[#50540562_pgfId-1043109]## 

[#50540562_pgfId-1043111]## The element eis-type contains information
about the

[#50540562_pgfId-1043113]## type of the EIS. For example, the type of an
EIS can

[#50540562_pgfId-1043115]## be product name of EIS independent of any
version

[#50540562_pgfId-1043117]## info.

[#50540562_pgfId-1043119]## 

[#50540562_pgfId-1043121]## This helps in identifying EIS instances that
can be

[#50540562_pgfId-1043123]## used with this resource adapter.

[#50540562_pgfId-1043125]## 

[#50540562_pgfId-1043127]## If there is no eis-type specified, the
application

[#50540562_pgfId-1043129]## server must consider the default "" (empty
string) as

[#50540562_pgfId-1043131]## the type of the EIS.

[#50540562_pgfId-1043133]## 

[#50540562_pgfId-1043135]## </xsd:documentation>

[#50540562_pgfId-1043137]## </xsd:annotation>

[#50540562_pgfId-1043139]## </xsd:element>

[#50540562_pgfId-1043141]## <xsd:element name="resourceadapter-version"

[#50540562_pgfId-1043143]## type="javaee:xsdStringType" minOccurs=”0”>

[#50540562_pgfId-1043145]## <xsd:annotation>

[#50540562_pgfId-1043147]## <xsd:documentation>

[#50540562_pgfId-1043149]## 

[#50540562_pgfId-1043151]## The element resourceadapter-version
specifies a string-based version

[#50540562_pgfId-1043153]## of the resource adapter from the resource
adapter

[#50540562_pgfId-1043155]## provider.

[#50540562_pgfId-1043157]## 

[#50540562_pgfId-1043159]## If there is no resourceadapter-version
specified, the application

[#50540562_pgfId-1043161]## server must consider the default "" (empty
string) as

[#50540562_pgfId-1043163]## the version of the resource adapter.

[#50540562_pgfId-1043165]## 

[#50540562_pgfId-1043167]## </xsd:documentation>

[#50540562_pgfId-1043169]## </xsd:annotation>

[#50540562_pgfId-1043171]## 

[#50540562_pgfId-1043173]## </xsd:element>

[#50540562_pgfId-1043175]## <xsd:element name="license"

[#50540562_pgfId-1043177]## type="javaee:licenseType"

[#50540562_pgfId-1043179]## minOccurs="0"/>

[#50540562_pgfId-1043181]## <xsd:element name="resourceadapter"

[#50540562_pgfId-1043183]## type="javaee:resourceadapterType"/>

[#50540562_pgfId-1043185]## 

[#50540562_pgfId-1043187]## <xsd:element name="required-work-context"

[#50540562_pgfId-1043189]## type="javaee:fully-qualified-classType”

[#50540562_pgfId-1043191]## minOccurs="0”

[#50540562_pgfId-1043193]## maxOccurs="unbounded”>

[#50540562_pgfId-1043195]## <xsd:annotation>

[#50540562_pgfId-1043197]## <xsd:documentation>

[#50540562_pgfId-1043199]## 

[#50540562_pgfId-1043201]## The element required-work-context specifies
the

[#50540562_pgfId-1043203]## class name that implements WorkContext
interface,

[#50540562_pgfId-1043205]## that a resource adapter requires the
application server to support.

[#50540562_pgfId-1043207]## 

[#50540562_pgfId-1043209]## </xsd:documentation>

[#50540562_pgfId-1043211]## </xsd:annotation>

[#50540562_pgfId-1043213]## </xsd:element>

[#50540562_pgfId-1043215]## 

[#50540562_pgfId-1043217]## </xsd:element>

[#50540562_pgfId-1043219]## 

[#50540562_pgfId-1043221]## </xsd:sequence>

[#50540562_pgfId-1043223]## <xsd:attribute name="version"

[#50540562_pgfId-1043225]## type="javaee:dewey-versionType"

[#50540562_pgfId-1043227]## fixed="1.6"

[#50540562_pgfId-1043229]## use="required">

[#50540562_pgfId-1043231]## <xsd:annotation>

[#50540562_pgfId-1043233]## <xsd:documentation>

[#50540562_pgfId-1043235]## 

[#50540562_pgfId-1043237]## The version indicates the version of the
schema to be used by the

[#50540562_pgfId-1043239]## deployment tool. This attribute does not
have a default, and the

[#50540562_pgfId-1043241]## resource adapter developer/deployer is
required to specify it.

[#50540562_pgfId-1043243]## This attribute allows the deployment tool to
choose which

[#50540562_pgfId-1043245]## schema to validate the descriptor against.

[#50540562_pgfId-1043247]## 

[#50540562_pgfId-1043249]## 

[#50540562_pgfId-1043251]## </xsd:documentation>

[#50540562_pgfId-1043253]## </xsd:annotation>

[#50540562_pgfId-1043255]## </xsd:attribute>

[#50540562_pgfId-1043257]## <xsd:attribute name="metadata-complete"
type="xsd:boolean">

[#50540562_pgfId-1043259]## <xsd:annotation>

[#50540562_pgfId-1043261]## <xsd:documentation>

[#50540562_pgfId-1043263]## The metadata-complete attribute defines
whether the deployment

[#50540562_pgfId-1043265]## descriptor for the resource adapter module
is complete, or whether

[#50540562_pgfId-1043267]## the class files available to the module and
packaged with the resource

[#50540562_pgfId-1043269]## adapter should be examined for annotations
that specify deployment

[#50540562_pgfId-1043271]## information.

[#50540562_pgfId-1043273]## 

[#50540562_pgfId-1043275]## If metadata-complete is set to "true", the
deployment tool of the

[#50540562_pgfId-1043277]## application server must ignore any
annotations that specify

[#50540562_pgfId-1043279]## deployment information, which might be
present in the class files of

[#50540562_pgfId-1043281]## the application.If metadata-complete is not
specified or is set to

[#50540562_pgfId-1043283]## “false”, the deployment tool must examine
the class files of the

[#50540562_pgfId-1043285]##application for annotations, as specified by
this specification. If

[#50540562_pgfId-1043287]##the deployment descriptor is not included or
is included but not

[#50540562_pgfId-1043289]## marked metadata-complete, the deployment
tool will process

[#50540562_pgfId-1043291]##annotations

[#50540562_pgfId-1043293]## 

[#50540562_pgfId-1043295]## Application servers must assume that
metadata-complete is true for

[#50540562_pgfId-1043297]## resource adapter modules with deployment
descriptor version

[#50540562_pgfId-1043299]## lower than 1.6.

[#50540562_pgfId-1043301]## </xsd:documentation>

[#50540562_pgfId-1043303]## </xsd:annotation>

[#50540562_pgfId-1043305]## </xsd:attribute>

[#50540562_pgfId-1043307]## 

[#50540562_pgfId-1043309]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1043311]## </xsd:complexType>

[#50540562_pgfId-1043313]## 

[#50540562_pgfId-1043315]##<!--
**************************************************** -->

[#50540562_pgfId-1043317]## 

[#50540562_pgfId-1043319]## <xsd:complexType
name="credential-interfaceType">

[#50540562_pgfId-1043321]## <xsd:annotation>

[#50540562_pgfId-1043323]## <xsd:documentation>

[#50540562_pgfId-1043325]## 

[#50540562_pgfId-1043327]## The credential-interfaceType specifies the

[#50540562_pgfId-1043329]## interface that the resource adapter
implementation

[#50540562_pgfId-1043331]## supports for the representation of the

[#50540562_pgfId-1043333]## credentials. This element(s) that use this
type,

[#50540562_pgfId-1043335]## i.e. credential-interface, should be used by

[#50540562_pgfId-1043337]## application server to find out the
Credential

[#50540562_pgfId-1043339]## interface it should use as part of the
security

[#50540562_pgfId-1043341]## contract.

[#50540562_pgfId-1043343]## 

[#50540562_pgfId-1043345]## The possible values are:

[#50540562_pgfId-1043347]## 

[#50540562_pgfId-1043349]##
javax.resource.spi.security.PasswordCredential

[#50540562_pgfId-1043351]## org.ietf.jgss.GSSCredential

[#50540562_pgfId-1043353]##
javax.resource.spi.security.GenericCredential

[#50540562_pgfId-1043355]## 

[#50540562_pgfId-1043357]## </xsd:documentation>

[#50540562_pgfId-1043359]## </xsd:annotation>

[#50540562_pgfId-1043361]## <xsd:simpleContent>

[#50540562_pgfId-1043363]## <xsd:restriction
base="javaee:fully-qualified-classType">

[#50540562_pgfId-1043365]## <xsd:enumeration

[#50540562_pgfId-1043367]##
value="javax.resource.spi.security.PasswordCredential"/>

[#50540562_pgfId-1043369]## <xsd:enumeration

[#50540562_pgfId-1043371]## value="org.ietf.jgss.GSSCredential"/>

[#50540562_pgfId-1043373]## <xsd:enumeration

[#50540562_pgfId-1043375]##
value="javax.resource.spi.security.GenericCredential"/>

[#50540562_pgfId-1043377]## </xsd:restriction>

[#50540562_pgfId-1043379]## </xsd:simpleContent>

[#50540562_pgfId-1043381]## </xsd:complexType>

[#50540562_pgfId-1043383]## 

[#50540562_pgfId-1043385]##<!--
**************************************************** -->

[#50540562_pgfId-1043387]## 

[#50540562_pgfId-1043389]## <xsd:complexType
name="inbound-resourceadapterType">

[#50540562_pgfId-1043391]## <xsd:annotation>

[#50540562_pgfId-1043393]## <xsd:documentation>

[#50540562_pgfId-1043395]## 

[#50540562_pgfId-1043397]## The inbound-resourceadapterType specifies
information

[#50540562_pgfId-1043399]## about an inbound resource adapter. This
contains information

[#50540562_pgfId-1043401]## specific to the implementation of the
resource adapter

[#50540562_pgfId-1043403]## library as specified through the
messageadapter element.

[#50540562_pgfId-1043405]## 

[#50540562_pgfId-1043407]## </xsd:documentation>

[#50540562_pgfId-1043409]## </xsd:annotation>

[#50540562_pgfId-1043411]## 

[#50540562_pgfId-1043413]## <xsd:sequence>

[#50540562_pgfId-1043415]## <xsd:element name="messageadapter"

[#50540562_pgfId-1043417]## type="javaee:messageadapterType"

[#50540562_pgfId-1043419]## minOccurs="0">

[#50540562_pgfId-1043421]## <xsd:unique
name="messagelistener-type-uniqueness">

[#50540562_pgfId-1043423]## <xsd:annotation>

[#50540562_pgfId-1043425]## <xsd:documentation>

[#50540562_pgfId-1043427]## 

[#50540562_pgfId-1043429]## The messagelistener-type element content
must be

[#50540562_pgfId-1043431]## unique in the messageadapter. Several
messagelisteners

[#50540562_pgfId-1043433]## can not use the same messagelistener-type.

[#50540562_pgfId-1043435]## 

[#50540562_pgfId-1043437]## </xsd:documentation>

[#50540562_pgfId-1043439]## </xsd:annotation>

[#50540562_pgfId-1043441]## <xsd:selector
xpath="javaee:messagelistener"/>

[#50540562_pgfId-1043443]## <xsd:field
xpath="javaee:messagelistener-type"/>

[#50540562_pgfId-1043445]## </xsd:unique>

[#50540562_pgfId-1043447]## </xsd:element>

[#50540562_pgfId-1043449]## </xsd:sequence>

[#50540562_pgfId-1043451]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1043453]## </xsd:complexType>

[#50540562_pgfId-1043455]## 

[#50540562_pgfId-1043457]##<!--
**************************************************** -->

[#50540562_pgfId-1043459]## 

[#50540562_pgfId-1043461]## <xsd:complexType name="licenseType">

[#50540562_pgfId-1043463]## <xsd:annotation>

[#50540562_pgfId-1043465]## <xsd:documentation>

[#50540562_pgfId-1043467]## 

[#50540562_pgfId-1043469]## The licenseType specifies licensing
requirements for the

[#50540562_pgfId-1043471]## resource adapter module. This type specifies
whether a

[#50540562_pgfId-1043473]## license is required to deploy and use this
resource adapter,

[#50540562_pgfId-1043475]## and an optional description of the licensing
terms

[#50540562_pgfId-1043477]## (examples: duration of license, number of
connection

[#50540562_pgfId-1043479]## restrictions). It is used by the license
element.

[#50540562_pgfId-1043481]## 

[#50540562_pgfId-1043483]## </xsd:documentation>

[#50540562_pgfId-1043485]## </xsd:annotation>

[#50540562_pgfId-1043487]## 

[#50540562_pgfId-1043489]## <xsd:sequence>

[#50540562_pgfId-1043491]## <xsd:element name="description"

[#50540562_pgfId-1043493]## type="javaee:descriptionType"

[#50540562_pgfId-1043495]## minOccurs="0"

[#50540562_pgfId-1043497]## maxOccurs="unbounded"/>

[#50540562_pgfId-1043499]## <xsd:element name="license-required"

[#50540562_pgfId-1043501]## type="javaee:true-falseType">

[#50540562_pgfId-1043503]## <xsd:annotation>

[#50540562_pgfId-1043505]## <xsd:documentation>

[#50540562_pgfId-1043507]## 

[#50540562_pgfId-1043509]## The element license-required specifies
whether a

[#50540562_pgfId-1043511]## license is required to deploy and use the

[#50540562_pgfId-1043513]## resource adapter. This element must be one
of

[#50540562_pgfId-1043515]## the following, "true" or "false".

[#50540562_pgfId-1043517]## 

[#50540562_pgfId-1043519]## </xsd:documentation>

[#50540562_pgfId-1043521]## </xsd:annotation>

[#50540562_pgfId-1043523]## </xsd:element>

[#50540562_pgfId-1043525]## </xsd:sequence>

[#50540562_pgfId-1043527]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1043529]## </xsd:complexType>

[#50540562_pgfId-1043531]## 

[#50540562_pgfId-1043533]##<!--
**************************************************** -->

[#50540562_pgfId-1043535]## 

[#50540562_pgfId-1043537]## <xsd:complexType name="messageadapterType">

[#50540562_pgfId-1043539]## <xsd:annotation>

[#50540562_pgfId-1043541]## <xsd:documentation>

[#50540562_pgfId-1043543]## 

[#50540562_pgfId-1043545]## The messageadapterType specifies information
about the

[#50540562_pgfId-1043547]## messaging capabilities of the resource
adapter. This

[#50540562_pgfId-1043549]## contains information specific to the
implementation of the

[#50540562_pgfId-1043551]## resource adapter library as specified
through the

[#50540562_pgfId-1043553]## messagelistener element.

[#50540562_pgfId-1043555]## 

[#50540562_pgfId-1043557]## </xsd:documentation>

[#50540562_pgfId-1043559]## </xsd:annotation>

[#50540562_pgfId-1043561]## 

[#50540562_pgfId-1043563]## <xsd:sequence>

[#50540562_pgfId-1043565]## <xsd:element name="messagelistener"

[#50540562_pgfId-1043567]## type="javaee:messagelistenerType"

[#50540562_pgfId-1043569]## maxOccurs="unbounded"/>

[#50540562_pgfId-1043571]## </xsd:sequence>

[#50540562_pgfId-1043573]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1043575]## </xsd:complexType>

[#50540562_pgfId-1043577]## 

[#50540562_pgfId-1043579]##<!--
**************************************************** -->

[#50540562_pgfId-1043581]## 

[#50540562_pgfId-1043583]## <xsd:complexType name="messagelistenerType">

[#50540562_pgfId-1043585]## <xsd:annotation>

[#50540562_pgfId-1043587]## <xsd:documentation>

[#50540562_pgfId-1043589]## 

[#50540562_pgfId-1043591]## The messagelistenerType specifies
information about a

[#50540562_pgfId-1043593]## specific message listener supported by the
messaging

[#50540562_pgfId-1043595]## resource adapter. It contains information on
the Java type

[#50540562_pgfId-1043597]## of the message listener interface and an
activation

[#50540562_pgfId-1043599]## specification.

[#50540562_pgfId-1043601]## 

[#50540562_pgfId-1043603]## </xsd:documentation>

[#50540562_pgfId-1043605]## </xsd:annotation>

[#50540562_pgfId-1043607]## 

[#50540562_pgfId-1043609]## <xsd:sequence>

[#50540562_pgfId-1043611]## <xsd:element name="messagelistener-type"

[#50540562_pgfId-1043613]## type="javaee:fully-qualified-classType">

[#50540562_pgfId-1043615]## <xsd:annotation>

[#50540562_pgfId-1043617]## <xsd:documentation>

[#50540562_pgfId-1043619]## <![CDATA[

[#50540562_pgfId-1043621]## 

[#50540562_pgfId-1043623]## The element messagelistener-type specifies
the fully

[#50540562_pgfId-1043625]## qualified name of the Java type of a message

[#50540562_pgfId-1043627]## listener interface.

[#50540562_pgfId-1043629]## 

[#50540562_pgfId-1043631]## Example:

[#50540562_pgfId-1043633]## 

[#50540562_pgfId-1043635]##
<messagelistener-type>javax.jms.MessageListener

[#50540562_pgfId-1043637]## </messagelistener-type>

[#50540562_pgfId-1043639]## 

[#50540562_pgfId-1043641]## ]]>

[#50540562_pgfId-1043643]## </xsd:documentation>

[#50540562_pgfId-1043645]## </xsd:annotation>

[#50540562_pgfId-1043647]## 

[#50540562_pgfId-1043649]## </xsd:element>

[#50540562_pgfId-1043651]## <xsd:element name="activationspec"

[#50540562_pgfId-1043653]## type="javaee:activationspecType"/>

[#50540562_pgfId-1043655]## </xsd:sequence>

[#50540562_pgfId-1043657]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1043659]## </xsd:complexType>

[#50540562_pgfId-1043661]## 

[#50540562_pgfId-1043663]##<!--
**************************************************** -->

[#50540562_pgfId-1043665]## 

[#50540562_pgfId-1043667]## <xsd:complexType
name="outbound-resourceadapterType">

[#50540562_pgfId-1043669]## <xsd:annotation>

[#50540562_pgfId-1043671]## <xsd:documentation>

[#50540562_pgfId-1043673]## 

[#50540562_pgfId-1043675]## The outbound-resourceadapterType specifies
information about

[#50540562_pgfId-1043677]## an outbound resource adapter. The
information includes fully

[#50540562_pgfId-1043679]## qualified names of classes/interfaces
required as part of

[#50540562_pgfId-1043681]## the connector architecture specified
contracts for

[#50540562_pgfId-1043683]## connection management, level of transaction
support

[#50540562_pgfId-1043685]## provided, one or more authentication
mechanisms supported

[#50540562_pgfId-1043687]## and additional required security
permissions.

[#50540562_pgfId-1043689]## 

[#50540562_pgfId-1043691]## If any of the outbound resource adapter
elements (transaction-support,

[#50540562_pgfId-1043693]## authentication-mechanism,
reauthentication-support) is specified through

[#50540562_pgfId-1043695]## this element or metadata annotations, and no
connection-definition is

[#50540562_pgfId-1043697]## specified as part of this element or through
annotations, the

[#50540562_pgfId-1043699]## application server must consider this an
error and fail deployment.

[#50540562_pgfId-1043701]## 

[#50540562_pgfId-1043703]## If there is no authentication-mechanism
specified as part of

[#50540562_pgfId-1043705]## this or metadata annotations, then the
resource adapter does not

[#50540562_pgfId-1043707]## support any standard security authentication
mechanisms as

[#50540562_pgfId-1043709]## part of security contract. The application
server ignores

[#50540562_pgfId-1043711]## the security part of the system contracts in
this case.

[#50540562_pgfId-1043713]## 

[#50540562_pgfId-1043715]## If there is no transaction-support specified
as part of

[#50540562_pgfId-1043717]## this element, then the application server
must

[#50540562_pgfId-1043719]## consider that the resource adapter does not
support either

[#50540562_pgfId-1043721]## the resource manager local or JTA
transactions and must consider

[#50540562_pgfId-1043723]## the transaction support as NoTransaction.
Note that resource adapters may

[#50540562_pgfId-1043725]##specify the level of transaction support to
be used at runtime for a

[#50540562_pgfId-1043727]##ManagedConnectionFactory through the
TransactionSupport interface.

[#50540562_pgfId-1043729]## 

[#50540562_pgfId-1043731]## If there is no reauthentication-support
specified as part of

[#50540562_pgfId-1043733]## this element or metadata annotation, then
the application server must

[#50540562_pgfId-1043735]## consider that the resource adapter does not
support re-authentication of

[#50540562_pgfId-1043737]## ManagedConnections.

[#50540562_pgfId-1043739]## 

[#50540562_pgfId-1043741]## </xsd:documentation>

[#50540562_pgfId-1043743]## </xsd:annotation>

[#50540562_pgfId-1043745]## 

[#50540562_pgfId-1043747]## <xsd:sequence>

[#50540562_pgfId-1043749]## <xsd:element name="connection-definition"

[#50540562_pgfId-1043751]## type="javaee:connection-definitionType"

[#50540562_pgfId-1043753]## maxOccurs="unbounded" minOccurs=”0”/>

[#50540562_pgfId-1043755]## <xsd:element name="transaction-support"

[#50540562_pgfId-1043757]## type="javaee:transaction-supportType"
minOccurs=”0”/>

[#50540562_pgfId-1043759]## <xsd:element name="authentication-mechanism"

[#50540562_pgfId-1043761]## type="javaee:authentication-mechanismType"

[#50540562_pgfId-1043763]## minOccurs="0"

[#50540562_pgfId-1043765]## maxOccurs="unbounded"/>

[#50540562_pgfId-1043767]## <xsd:element name="reauthentication-support"

[#50540562_pgfId-1043769]## type="javaee:true-falseType" minOccurs=”0”/>

[#50540562_pgfId-1043771]## <xsd:annotation>

[#50540562_pgfId-1043773]## <xsd:documentation>

[#50540562_pgfId-1043775]## 

[#50540562_pgfId-1043777]## The element reauthentication-support
specifies

[#50540562_pgfId-1043779]## whether the resource adapter implementation
supports

[#50540562_pgfId-1043781]## re-authentication of existing Managed-
Connection

[#50540562_pgfId-1043783]## instance. Note that this information is for
the

[#50540562_pgfId-1043785]## resource adapter implementation and not for
the

[#50540562_pgfId-1043787]## underlying EIS instance. This element must
have

[#50540562_pgfId-1043789]## either a "true" or "false" value.

[#50540562_pgfId-1043791]## 

[#50540562_pgfId-1043793]## </xsd:documentation>

[#50540562_pgfId-1043795]## </xsd:annotation>

[#50540562_pgfId-1043797]## 

[#50540562_pgfId-1043799]## </xsd:element>

[#50540562_pgfId-1043801]## </xsd:sequence>

[#50540562_pgfId-1043803]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1043805]## </xsd:complexType>

[#50540562_pgfId-1043807]## 

[#50540562_pgfId-1043809]##<!--
**************************************************** -->

[#50540562_pgfId-1043811]## 

[#50540562_pgfId-1043813]## <xsd:complexType
name="required-config-propertyType">

[#50540562_pgfId-1043815]## <xsd:annotation>

[#50540562_pgfId-1043817]## <xsd:documentation>

[#50540562_pgfId-1043819]## <![CDATA[

[#50540562_pgfId-1043821]## 

[#50540562_pgfId-1043823]## The required-config-propertyType contains a
declaration

[#50540562_pgfId-1043825]## of a single configuration property used for
specifying a

[#50540562_pgfId-1043827]## required configuration property name. It is
used

[#50540562_pgfId-1043829]## by required-config-property elements.

[#50540562_pgfId-1043831]## 

[#50540562_pgfId-1043833]## 

[#50540562_pgfId-1043835]## Usage of this type is deprecated from
Connector 1.6 specification.

[#50540562_pgfId-1043837]## Refer to required-config-property element
for more information.

[#50540562_pgfId-1043839]## 

[#50540562_pgfId-1043841]## Example:

[#50540562_pgfId-1043843]## 

[#50540562_pgfId-1043845]##
<required-config-property>Destination</required-config-property>

[#50540562_pgfId-1043847]## 

[#50540562_pgfId-1043849]## ]]>

[#50540562_pgfId-1043851]## </xsd:documentation>

[#50540562_pgfId-1043853]## </xsd:annotation>

[#50540562_pgfId-1043855]## 

[#50540562_pgfId-1043857]## <xsd:sequence>

[#50540562_pgfId-1043859]## <xsd:element name="description"

[#50540562_pgfId-1043861]## type="javaee:descriptionType"

[#50540562_pgfId-1043863]## minOccurs="0"

[#50540562_pgfId-1043865]## maxOccurs="unbounded"/>

[#50540562_pgfId-1043867]## <xsd:element name="config-property-name"

[#50540562_pgfId-1043869]## type="javaee:config-property-nameType"/>

[#50540562_pgfId-1043871]## </xsd:sequence>

[#50540562_pgfId-1043873]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1043875]## </xsd:complexType>

[#50540562_pgfId-1043877]## 

[#50540562_pgfId-1043879]##<!--
**************************************************** -->

[#50540562_pgfId-1043881]## 

[#50540562_pgfId-1043883]## <xsd:complexType name="resourceadapterType">

[#50540562_pgfId-1043885]## <xsd:annotation>

[#50540562_pgfId-1043887]## <xsd:documentation>

[#50540562_pgfId-1043889]## 

[#50540562_pgfId-1043891]## The resourceadapterType specifies
information about the

[#50540562_pgfId-1043893]## resource adapter. The information includes

[#50540562_pgfId-1043895]## resource adapter Java class name,
configuration properties,

[#50540562_pgfId-1043897]## information specific to the implementation
of the resource

[#50540562_pgfId-1043899]## adapter library as specified through the

[#50540562_pgfId-1043901]## outbound-resourceadapter and
inbound-resourceadapter

[#50540562_pgfId-1043903]## elements, and an optional set of
administered objects.

[#50540562_pgfId-1043905]## 

[#50540562_pgfId-1043907]## </xsd:documentation>

[#50540562_pgfId-1043909]## </xsd:annotation>

[#50540562_pgfId-1043911]## 

[#50540562_pgfId-1043913]## <xsd:sequence>

[#50540562_pgfId-1043915]## <xsd:element name="resourceadapter-class"

[#50540562_pgfId-1043917]## type="javaee:fully-qualified-classType"

[#50540562_pgfId-1043919]## minOccurs="0">

[#50540562_pgfId-1043921]## <xsd:annotation>

[#50540562_pgfId-1043923]## <xsd:documentation>

[#50540562_pgfId-1043925]## 

[#50540562_pgfId-1043927]## The element resourceadapter-class specifies
the

[#50540562_pgfId-1043929]## name of a Java class that implements

[#50540562_pgfId-1043931]## the javax.resource.spi.ResourceAdapter

[#50540562_pgfId-1043933]## interface. This Java class is provided as
part of

[#50540562_pgfId-1043935]## resource adapter’s implementation of
connector

[#50540562_pgfId-1043937]## architecture specified contracts. The
implementation

[#50540562_pgfId-1043939]## of this class is required to be a JavaBean.

[#50540562_pgfId-1043941]## 

[#50540562_pgfId-1043943]## </xsd:documentation>

[#50540562_pgfId-1043945]## </xsd:annotation>

[#50540562_pgfId-1043947]## 

[#50540562_pgfId-1043949]## </xsd:element>

[#50540562_pgfId-1043951]## <xsd:element name="config-property"

[#50540562_pgfId-1043953]## type="javaee:config-propertyType"

[#50540562_pgfId-1043955]## minOccurs="0"

[#50540562_pgfId-1043957]## maxOccurs="unbounded"/>

[#50540562_pgfId-1043959]## <xsd:element name="outbound-resourceadapter"

[#50540562_pgfId-1043961]## type="javaee:outbound-resourceadapterType"

[#50540562_pgfId-1043963]## minOccurs="0">

[#50540562_pgfId-1043965]## <xsd:unique
name="connectionfactory-interface-uniqueness">

[#50540562_pgfId-1043967]## <xsd:annotation>

[#50540562_pgfId-1043969]## <xsd:documentation>

[#50540562_pgfId-1043971]## 

[#50540562_pgfId-1043973]## The connectionfactory-interface element
content

[#50540562_pgfId-1043975]## must be unique in the
outbound-resourceadapter.

[#50540562_pgfId-1043977]## Multiple connection-definitions can not use
the

[#50540562_pgfId-1043979]## same connectionfactory-type.

[#50540562_pgfId-1043981]## 

[#50540562_pgfId-1043983]## </xsd:documentation>

[#50540562_pgfId-1043985]## </xsd:annotation>

[#50540562_pgfId-1043987]## <xsd:selector
xpath="javaee:connection-definition"/>

[#50540562_pgfId-1043989]## <xsd:field
xpath="javaee:connectionfactory-interface"/>

[#50540562_pgfId-1043991]## </xsd:unique>

[#50540562_pgfId-1043993]## </xsd:element>

[#50540562_pgfId-1043995]## <xsd:element name="inbound-resourceadapter"

[#50540562_pgfId-1043997]## type="javaee:inbound-resourceadapterType"

[#50540562_pgfId-1043999]## minOccurs="0"/>

[#50540562_pgfId-1044001]## <xsd:element name="adminobject"

[#50540562_pgfId-1044003]## type="javaee:adminobjectType"

[#50540562_pgfId-1044005]## minOccurs="0"

[#50540562_pgfId-1044007]## maxOccurs="unbounded"/>

[#50540562_pgfId-1044009]## 

[#50540562_pgfId-1044011]## <xsd:unique
name="adminobject-type-uniqueness">

[#50540562_pgfId-1044013]## <xsd:annotation>

[#50540562_pgfId-1044015]## <xsd:documentation>

[#50540562_pgfId-1044017]## 

[#50540562_pgfId-1044019]## The adminobject-interface and
adminobject-class element content must be

[#50540562_pgfId-1044021]## unique in the resourceadapterType. Several
admin objects

[#50540562_pgfId-1044023]## can not use the same adminobject-interface
and adminobject-class.

[#50540562_pgfId-1044025]## 

[#50540562_pgfId-1044027]## </xsd:documentation>

[#50540562_pgfId-1044029]## </xsd:annotation>

[#50540562_pgfId-1044031]## <xsd:selector xpath="javaee:adminobject"/>

[#50540562_pgfId-1044033]## <xsd:field
xpath="javaee:adminobject-interface"/>

[#50540562_pgfId-1044035]## <xsd:field
xpath="javaee:adminobject-class"/>

[#50540562_pgfId-1044037]## </xsd:unique>

[#50540562_pgfId-1044039]## 

[#50540562_pgfId-1044041]## <xsd:element name="security-permission"

[#50540562_pgfId-1044043]## type="javaee:security-permissionType"

[#50540562_pgfId-1044045]## minOccurs="0"

[#50540562_pgfId-1044047]## maxOccurs="unbounded"/>

[#50540562_pgfId-1044049]## </xsd:sequence>

[#50540562_pgfId-1044051]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1044053]## </xsd:complexType>

[#50540562_pgfId-1044055]## 

[#50540562_pgfId-1044057]##<!--
**************************************************** -->

[#50540562_pgfId-1044059]## 

[#50540562_pgfId-1044061]## <xsd:complexType
name="security-permissionType">

[#50540562_pgfId-1044063]## <xsd:annotation>

[#50540562_pgfId-1044065]## <xsd:documentation>

[#50540562_pgfId-1044067]## 

[#50540562_pgfId-1044069]## The security-permissionType specifies a
security

[#50540562_pgfId-1044071]## permission that is required by the resource
adapter code.

[#50540562_pgfId-1044073]## 

[#50540562_pgfId-1044075]## The security permission listed in the
deployment descriptor

[#50540562_pgfId-1044077]## are ones that are different from those
required by the

[#50540562_pgfId-1044079]## default permission set as specified in the
connector

[#50540562_pgfId-1044081]## specification. The optional description can
mention specific

[#50540562_pgfId-1044083]## reason that resource adapter requires a
given security

[#50540562_pgfId-1044085]## permission.

[#50540562_pgfId-1044087]## 

[#50540562_pgfId-1044089]## </xsd:documentation>

[#50540562_pgfId-1044091]## </xsd:annotation>

[#50540562_pgfId-1044093]## 

[#50540562_pgfId-1044095]## <xsd:sequence>

[#50540562_pgfId-1044097]## <xsd:element name="description"

[#50540562_pgfId-1044099]## type="javaee:descriptionType"

[#50540562_pgfId-1044101]## minOccurs="0"

[#50540562_pgfId-1044103]## maxOccurs="unbounded"/>

[#50540562_pgfId-1044105]## <xsd:element name="security-permission-spec"

[#50540562_pgfId-1044107]## type="javaee:xsdStringType">

[#50540562_pgfId-1044109]## <xsd:annotation>

[#50540562_pgfId-1044111]## <xsd:documentation>

[#50540562_pgfId-1044113]## 

[#50540562_pgfId-1044115]## The element security-permission-spec
specifies a security

[#50540562_pgfId-1044117]## permission based on the Security policy file

[#50540562_pgfId-1044119]## syntax. Refer to the following URL for Sun’s

[#50540562_pgfId-1044121]## implementation of the security permission

[#50540562_pgfId-1044123]## specification:

[#50540562_pgfId-1044125]## 

[#50540562_pgfId-1044127]##
http://java.sun.com/javase/6/docs/technotes/guides/security/PolicyFiles.html

[#50540562_pgfId-1044129]## </xsd:documentation>

[#50540562_pgfId-1044131]## </xsd:annotation>

[#50540562_pgfId-1044133]## </xsd:element>

[#50540562_pgfId-1044135]## </xsd:sequence>

[#50540562_pgfId-1044137]## <xsd:attribute name="id" type="xsd:ID"/>

[#50540562_pgfId-1044139]## </xsd:complexType>

[#50540562_pgfId-1044141]## 

[#50540562_pgfId-1044143]##<!--
**************************************************** -->

[#50540562_pgfId-1044145]## 

[#50540562_pgfId-1044147]## <xsd:complexType
name="transaction-supportType">

[#50540562_pgfId-1044149]## <xsd:annotation>

[#50540562_pgfId-1044151]## <xsd:documentation>

[#50540562_pgfId-1044153]## 

[#50540562_pgfId-1044155]## The transaction-supportType specifies the
level of

[#50540562_pgfId-1044157]## transaction support provided by the resource
adapter. It is

[#50540562_pgfId-1044159]## used by transaction-support elements.

[#50540562_pgfId-1044161]## 

[#50540562_pgfId-1044163]## The value must be one of the following:

[#50540562_pgfId-1044165]## 

[#50540562_pgfId-1044167]## NoTransaction

[#50540562_pgfId-1044169]## LocalTransaction

[#50540562_pgfId-1044171]## XATransaction

[#50540562_pgfId-1044173]## 

[#50540562_pgfId-1044175]## </xsd:documentation>

[#50540562_pgfId-1044177]## </xsd:annotation>

[#50540562_pgfId-1044179]## <xsd:simpleContent>

[#50540562_pgfId-1044181]## <xsd:restriction base="javaee:string">

[#50540562_pgfId-1044183]## <xsd:enumeration value="NoTransaction"/>

[#50540562_pgfId-1044185]## <xsd:enumeration value="LocalTransaction"/>

[#50540562_pgfId-1044187]## <xsd:enumeration value="XATransaction"/>

[#50540562_pgfId-1044189]## </xsd:restriction>

[#50540562_pgfId-1044191]## </xsd:simpleContent>

[#50540562_pgfId-1044193]## </xsd:complexType>

[#50540562_pgfId-1044195]## 

[#50540562_pgfId-1044197]##</xsd:schema>

[#50540548_pgfId-874]## 

[#50540548_pgfId-1000005]##

image:conn-172.gif[image]

Caching Manager

image:conn-173.gif[image]

[#50540548_pgfId-1000060]##This chapter describes how the connector
architecture supports caching.

[#50540548_pgfId-1000061]##This section serves as a brief introduction
to the caching support in the connector architecture. A future version
of the connector architecture will address this issue in detail.

[#50540548_pgfId-1000062]##

image:conn-174.gif[image]

Overview

[#50540548_pgfId-1000063]##The connector architecture provides a
standard way of extending an application manager for plugging in caching
managers. A caching manager may be provided by a third-party vendor or a
resource adapter provider.

[#50540548_pgfId-1000064]##A caching manager manages cached state for
application components while they access EISs across transactions.

[#50540548_pgfId-1000065]##A caching manager is provided above a
resource adapter. An application component may access a resource manager
either through a caching manager (thereby maintaining a cached state
across application requests) or directly through the resource adapter
with no caching involved.

[#50540548_pgfId-1000066]##The _XAResource_ based transaction management
contract enables an external transaction manager to control and
coordinate transactions across multiple resource managers. A caching
manager (provided above the resource adapter) requires to be
synchronized relative to the transaction coordination flow (defined by
the JTA _XAResource_ interface) on the underlying resource manager. This
leads to a requirement for a synchronization contract between the
application server and caching manager.

[#50540548_pgfId-1000067]##The connector architecture defines a standard
synchronization contract between the application server and caching
manager. The caching manager uses the synchronization notifications to
manage its cached state and to flush it to the resource adapter. The
resource adapter then takes the responsibility of managing its
recoverable units of work and participates in the transaction
coordination protocol from the transaction manager.

======= [#50540548_pgfId-1000093]##Synchronization Contract between Caching Manager and Application Server

image:conn-175.gif[image]

[#50540548_pgfId-1000094]##The above diagram shows a caching manager
layered above a resource adapter. The contract between caching manager
and resource adapter is specific to a resource adapter.

[#50540548_pgfId-1000095]##

image:conn-174.gif[image]

Synchronization Contract

[#50540548_pgfId-1000096]##

image:conn-176.gif[image]

To support a caching manager as a standard extension to the application
server, additional contracts between the application server and the
caching manager are required. This version of the specification
introduces only the synchronization contract.

image:conn-176.gif[image]

[#50540548_pgfId-1000097]##This section specifies the synchronization
contract between the application server and the caching manager.

======= [#50540548_pgfId-1000098]##Interface

[#50540548_pgfId-1000099]##Each caching manager implements the
_javax.transaction.Synchronization_ interface. A caching manager
registers its _Synchronization_ instance with the application server
when it is configured with the application server.

[#50540548_pgfId-1000100]##The caching manager receives synchronization
notifications only for transactions managed by an external transaction
manager. In the case of transactions managed internally by a resource
manager, the resource adapter and caching manager define their own
implementation-specific mechanisms for synchronizing caches.

[#50540548_pgfId-1000101]##The _Synchronization.beforeCompletion_ method
is called prior to the start of the two-phase commit transaction
completion process. This call executes in the same transaction context
of the caller who initiated the transaction completion. The caching
manager uses this notification to flush its cached state to the resource
adapter.

[#50540548_pgfId-1000102]##The _Synchronization.afterCompletion_ method
is called after the transaction has completed. The status of transaction
completion is passed in as a parameter. The caching manager uses this
notification to do any cache cleanups if a rollback has occurred.

======= [#50540548_pgfId-1000103]##Implementation

[#50540548_pgfId-1000104]##The caching manager must support the
_javax.transaction.Synchronization_ interface. If the caching manager
implements the _Synchronization_ interface and registers it with the
application server, then the application server must invoke the
_beforeCompletion_ and _afterCompletion_ notifications.

[#50540548_pgfId-1000105]##The application server is responsible for
ensuring that synchronization notifications are delivered first to the
application components (that have expressed interest in receiving
synchronization notification through their respective application
component and container-specific mechanisms) and then to the caching
managers that implement the _Synchronization_ interface.

[#50540548_pgfId-999505]## 

[#50540569_pgfId-874]##[#50540569_97623]## 

[#50540569_pgfId-1000005]##

image:conn-177.gif[image]

[#50540569_16269]##Security Scenarios

image:conn-178.gif[image]

[#50540569_pgfId-1000060]##This chapter describes various scenarios for
EIS integration. These scenarios focus on security aspects of the
connector architecture.

[#50540569_pgfId-1000061]##Note that these scenarios establish the
requirements to be addressed by the connector architecture.
link:conn.htm#50540567_86332[See Security Architecture] and
link:conn.htm#50540568_99842[See Security Contract] specify the
requirements that are supported in this version of the specification.

[#50540569_pgfId-1000068]##A Java EE application is a multi-tier,
web-enabled application that accesses EISs. It consists of one or more
application components—EJBs, JSPs, servlets—which are deployed on
containers. These containers can be one of the following:

[#50540569_pgfId-1000069]##Web containers that host JSP, servlets, and
static HTML pages

[#50540569_pgfId-1000070]##EJB containers that host EJB components

[#50540569_pgfId-1000071]##Application client containers that host
standalone application clients

[#50540569_pgfId-1000072]##In the following scenarios, the description
of the architecture and security environments are illustrative in scope.

[#50540569_pgfId-1000074]##

image:conn-179.gif[image]

[#50540569_99352]##eStore Application

[#50540569_pgfId-1000075]##Company A has an eStore application based on
the Java EE platform. The eStore application is composed of EJBs and
JSP/servlets; together they collaborate to provide the overall
functionality of the application. The application also utilizes an
eStore database to store data related to product catalog, shopping
carts, customer registration and profiles, transaction status and
records, and order status.

[#50540569_pgfId-1000076]##The architecture of this application is
illustrated in the following diagram.

======= [#50540569_pgfId-1000111]##Illustrative Architecture of an eStore Application

image:conn-180.gif[image]

======= [#50540569_pgfId-1000112]##Scenario

[#50540569_pgfId-1000113]##A customer, using a web browser, initiates an
e-commerce transaction with the eStore application. The e-commerce
transaction consists of a series of customer actions. The customer
performs the following actions to place an order.

[#50540569_pgfId-1000621]##Browses the catalog

[#50540569_pgfId-1000115]##Makes a selection of products

[#50540569_pgfId-1000116]##Puts the selected products into a shopping
cart

[#50540569_pgfId-1000117]##Enters her user name and password to initiate
a secure transaction

[#50540569_pgfId-1000118]##Fills in order-related information

[#50540569_pgfId-1000119]##Places an order

[#50540569_pgfId-1000120]##In this scenario, the eStore application
stores all persistent information about customers and their transactions
in a database.

======= [#50540569_pgfId-1000121]##Security Environment

[#50540569_pgfId-1000122]##To support the above interaction scenario,
the system administrator configures a unique security domain (with
specific security technology and security policies) for the eStore
application. A firewall protects this security domain from unauthorized
Internet access.

[#50540569_pgfId-1000123]##The security domain configuration for the
eStore application includes secure web access to the eStore application.
Secure web access is set up based on the requirements specified in the
Java EE specification. Note that the focus of this section is security
related to EIS integration, not on web access security. As a result,
this description ignores web access security.

[#50540569_pgfId-1000124]##The system administrator sets up a database
to manage persistent data for the eStore application. In terms of
security, the database system is configured with an independent security
domain. This domain has its own set of user accounts, plus its own
security policies and mechanisms for authentication and authorization.

[#50540569_pgfId-1000125]##The system administrator (or database
administrator DBA) creates a unique database account (called
_EStoreUser_ ) to handle database transactions; the database
transactions correspond to different customer-driven interactions with
the eStore application. He also sets up an additional database account
(called _EStoreAdministrator_ ) to manage the database on behalf of the
eStore administrator. This administrative account has a higher level of
access privileges.

[#50540569_pgfId-1000126]##To facilitate better scaling of the eStore
application, the system administrator may choose to set the load
balancing of database operations across multiple databases. He may also
partition persistent data and transactions across multiple database
accounts, based on various performance optimization criteria. These
areas are out of the scope for this document.

[#50540569_pgfId-1000127]##This scenario deals only with the simple case
of a single database and a single user account to handle all database
transactions.

======= [#50540569_pgfId-1000128]##Deployment

[#50540569_pgfId-1000129]##

image:conn-181.gif[image]

This document does not address how principal delegation happens between
the web and EJB containers. When an EJB instance acquires an EIS
connection, a caller principal is associated with the EJB instance. This
document does not address determining which caller principal is
associated with the EJB instance.

image:conn-181.gif[image]

[#50540569_pgfId-1000130]##During the deployment of the eStore
application, the deployer sets up access control for all authenticated
customer accounts—the customer accounts that are driving e-commerce
transactions over the web—based on a single role _eStoreUserRole_ .

[#50540569_pgfId-1000131]##The deployer configures the resource adapter
with the security information that is required for the creation of
database connections. This security information is the database account
_EStoreUser_ and its password.

[#50540569_pgfId-1000132]##The deployer sets up the resource principal
for accessing the database system as illustrated in the figure below.

======= [#50540569_pgfId-1000152]##[#50540569_70331]##Resource Principal for eStore Application Scenario

image:conn-182.gif[image]

[#50540569_pgfId-1000153]##The deployment configuration ensures that all
database access is always performed under the security context of the
database account _EStoreUser_ .

[#50540569_pgfId-1000154]##All authenticated customers (referred to as
_Initiating Principal_ ) map to a single _EStoreUser_ database account.
The eStore application uses an implementation-specific mechanism to tie
database transactions (performed under a single database account) to the
unique identity (social security number or eStore account ID) of the
initiating principal. To ensure that database access has been properly
authorized, the eStore application also performs access control based on
the role of the initiating principal. Because all initiating principals
map to a single role, this is in effect a simple case.

[#50540569_pgfId-1000155]##This scenario describes an n-to-1 mapping.
However, depending on the requirements of an application, the deployer
can set the principal mapping to be different from an n-to-1 mapping.
For example, the deployer can map each role to a single resource
principal, where a role corresponds to an initiating principal. This
results in a [m principals and n roles] to [p resource principals]
mapping. When doing such principal mapping, the deployer has to ensure
not to compromise the access rights of the mapped principals. An
illustrative example is:

[#50540569_pgfId-1000156]##User is in administrator role: Principal
_EISadmin_

[#50540569_pgfId-1000157]##User is in manager role: Principal
_EISmanager_

[#50540569_pgfId-1000158]##User is in employee role: Principal
_EISemployee_

[#50540569_pgfId-1000160]##

image:conn-179.gif[image]

[#50540569_44462]##Employee Self-Service Application

[#50540569_pgfId-1000161]##Company B has developed and deployed an
employee self-service (ESS) application based on the Java EE platform.
This application supports a web interface to the existing Human
Resources (HR) applications, which are supported by the ERP system from
Vendor X. The ESS application also provides additional business
processes customized to the requirements of Company B.

[#50540569_pgfId-1000162]##The application tier is composed of EJBs and
JSPs that provide the customization of the business processes and
support a company-standardized web interface. The ESS application
enables an employee (under the roles of Manager, HR manager, and
Employee) to perform various HR functions, including personal
information management, payroll management, compensation management,
benefits administration, travel management, and HR cost planning.

======= [#50540569_pgfId-1000163]##Architecture

[#50540569_pgfId-1000164]##The IS department of Company B has deployed
its HR ESS application and ERP system in a secure environment on a
single physical location. Any access to the HR application is permitted
Only legal employees of the organization are permitted access to the HR
application. Access is based on the employee’s roles and access
privileges. In addition, access to the application can only be from
within the organization-wide intranet. See
link:conn.htm#50540569_16275[See Illustrative Architecture of an
Employee Self-service Application].

======= [#50540569_pgfId-1000168]##Security Environment

[#50540569_pgfId-1000169]##To support the various interaction scenarios
related to the ESS application, the system administrator sets up an
end-to-end Kerberos-based security domain for this application
environment.

[#50540569_pgfId-1000170]##

image:conn-181.gif[image]

The Security policies and mechanisms that are required to achieve this
single security domain are technology dependent. Refer to the Kerberos
V5 specification for more details.

image:conn-181.gif[image]

[#50540569_pgfId-1000171]##The system administrator configures the
security environment to support single sign-on; the user logs on only
once and can then access all the services provided by the ESS
application and its underlying ERP system. Single sign-on is achieved
through the security mechanism and policies specific to the underlying
security technology, which in this case is Kerberos.

[#50540569_pgfId-1000172]##The ERP system administrator configures all
legal employees as valid user accounts in the ERP system. He also must
set up various roles (Manager, HRManager, and Employee), default
passwords, and access privileges. This security information is kept
synchronized with the enterprise-wide directory service, which is used
by Kerberos to perform the initial authentication of end-users.

======= [#50540569_pgfId-1000206]##[#50540569_16275]##Illustrative Architecture of an Employee Self-service Application

image:conn-183.gif[image]

======= [#50540569_pgfId-1000207]##Deployment

[#50540569_pgfId-1000208]##During deployment of the ESS application, the
deployer sets a default delegation policy of client impersonation for
EIS sign-on. In this case, the application server and ERP system detect
that it is the initiating principal accessing their respective services
and they perform access control based on this knowledge.

======= [#50540569_pgfId-1000224]##[#50540569_32127]##Principal Mapping

image:conn-184.gif[image]

[#50540569_pgfId-1000225]##In this scenario, both the initiating
principal and the resource principal refer to the same principal. This
common principal is authenticated using Kerberos and its Kerberos
credentials are valid in the security domains of both the application
and the ERP system.

[#50540569_pgfId-1000226]##The deployer sets up access control for all
authenticated employees (initiating principal) based on the configured
roles—Manager, HR Manager, and Employee.

[#50540569_pgfId-1000227]##If the ERP system does not support Kerberos,
then an alternate scenario is utilized. The deployer or application
server administrator sets up an automatic mapping of Kerberos
credentials (for the initiating principal) to valid credentials (for the
same principal) in the security domain of the ERP system. Note that when
the ERP system does support Kerberos, the application server performs no
credentials mapping.

======= [#50540569_pgfId-1000228]##Scenario

[#50540569_pgfId-1000229]##An employee initiates an initial login to his
client desktop. He enters his username and password. As part of this
initial login, the employee (called initiating principal C) gets
authenticated with Kerberos KDC. Refer to the details for Kerberos KDC
authentication in the Kerberos v5 specification.

[#50540569_pgfId-1000230]##After a successful login, the employee starts
using his desktop environment. He directs his web browser to the URL for
the ESS application deployed on the application server. At this point,
the initiating principal C authenticates itself to the application
server and establishes a session key with the application server.

[#50540569_pgfId-1000231]##The ESS application is set up to impersonate
initiating principal C when accessing the ERP system, which is running
on another server. Though the application server directly connects to
the ERP system, access to the ERP system is requested on behalf of the
initiating principal. For this to work, principal C is required to
delegate its identity and Kerberos credential to the application server
and allow the application server to make requests to the ERP system on
C’s behalf.

[#50540569_pgfId-1000233]##

image:conn-179.gif[image]

[#50540569_25602]##Integrated Purchasing Application

[#50540569_pgfId-1000234]##Company C has an integrated purchasing
application that enables an employee to use a web-based interface to
perform multiple purchasing transactions. An employee can manage the
entire procurement process, from creating a purchase requisition through
invoice approval. The purchasing application also integrates with the
enterprise’s existing financial applications so that the accounting and
financial aspects of the procurement business processes can be tracked.

======= [#50540569_pgfId-1000235]##Architecture

[#50540569_pgfId-1000239]##The following figure illustrates an
architecture for this purchasing application. The application has been
developed and deployed based on the Java EE platform and is composed of
EJBs and JSPs. The EJB components provide the integration across the
different applications—the logistics application from a separate vendor
(this application provides integrated purchasing and inventory
management functions) and the financial accounting applications (the
applications supported by the legacy system from vendor Y).

[#50540569_pgfId-1000240]##Company B is a huge decentralized enterprise;
its business units and departments are geographically distributed. In
this scenario, different IS departments manage ERP system X and legacy
system Y. In addition, ERP system X and legacy system Y have been
deployed at secured data centers in different geographic locations.
Lastly, the integrated purchasing application has been deployed at a
geographic location different from both ERP system X and legacy system
Y.

======= [#50540569_pgfId-1000286]##[#50540569_76289]##Illustrative Architecture of an Integrated Purchasing Application

image:conn-185.gif[image]

======= [#50540569_pgfId-1000287]##Security Environment

[#50540569_pgfId-1000288]##ERP system X and legacy system Y are also in
different security domains; they use different security technologies and
have their own specific security policies and mechanisms. The integrated
purchasing application is deployed in a security domain that is
different from both that of ERP system X and legacy system Y.

[#50540569_pgfId-1000289]##To support the various interaction scenarios
for this integrated purchasing application, the ERP system administrator
creates a unique account _LogisticsAppUser_ in the ERP system. He sets
up the password and specific access rights for this account. This user
account is allowed access only to the logistics business processes that
are used by the integrated purchasing application.

[#50540569_pgfId-1000290]##Likewise, the system administrator for the
legacy system creates a unique account _FinancialAppUser_ . He also sets
up the password and specific access rights for this account.

[#50540569_pgfId-1000291]##The application server administrator, as part
of the operational environment of the application server, configures the
access to an organization-wide directory. This directory contains
security information (name, password, role, and access rights) for all
the employees in the organization. It is used for authentication and
authorization of employees accessing the purchasing application.

[#50540569_pgfId-1000292]##Due to their physical separation in this
scenario, EISs X and Y are accessed over either a secure private network
or over the Internet. This requires that a secure association be
established between the application server and the EISs. A secure
association allows a component on the application server to communicate
securely with an EIS.

======= [#50540569_pgfId-1000293]##Deployment

[#50540569_pgfId-1000294]##During the deployment of this application,
the deployer configures the security information (that is, the user
account _LogisticsAppUser_ and its password) required to create
connections to the ERP system. This configuration is done using the
resource adapter for ERP system X. The deployer also configures the
security information (that is, user account _FinancialAppUser_ and its
password) required to create connections to the legacy system Y.

[#50540569_pgfId-1000295]##The deployer configures security information
in the application server to achieve the principal mapping shown in the
following figure.

======= [#50540569_pgfId-1000320]##[#50540569_66119]##Principal Mapping

image:conn-186.gif[image]

[#50540569_pgfId-1000321]##This principal mapping ensures that all
connections to the ERP system are established under the security context
of _LogisticsAppUser_ , the resource principal for the ERP system
security domain. Similarly, all connections to legacy system Y are
established under the security context of the _FinancialAppUser_ .

[#50540569_pgfId-1000322]##The application server does this principal
mapping for all authenticated initiating principals (that is, employees
accessing the integrated purchasing application) when the application
connects to either the ERP system or the legacy system.

[#50540569_pgfId-999505]## 

[#50540557_pgfId-874]## 

[#50540557_pgfId-1000005]##

image:conn-187.gif[image]

[#50540557_31016]##JAAS Based Security Architecture

image:conn-188.gif[image]

[#50540557_pgfId-1000066]##This chapter extends the security
architecture specified in link:conn.htm#50540567_86332[See Security
Architecture] and link:conn.htm#50540568_99842[See Security Contract] to
include support for JAAS-based pluggable authentication. The chapter
refers to the following documents:

[#50540557_pgfId-1000067]##White Paper on User Authentication and
Authorization in Java platform:
_http://java.sun.com/security/jaas/doc/jaas.html_

[#50540557_pgfId-1000068]##JAAS 1.0 documentation

[#50540557_pgfId-1000069]##

image:conn-189.gif[image]

Java Authentication and Authorization Service (JAAS)

[#50540557_pgfId-1000070]##JAAS provides a standard Java framework and
programming interface that enables applications to authenticate and
enforce access controls upon users. JAAS is divided into two parts based
on the security services that it provides:

[#50540557_pgfId-1000071]##Pluggable Authentication. This part of the
JAAS framework allows a system administrator to plug in the appropriate
authentication services to meet the security requirements of an
application environment. There is no need to modify or recompile an
existing application to support new or different authentication
services.

[#50540557_pgfId-1000072]##Authorization. Once authentication has
successfully completed, JAAS provides the ability to enforce access
controls based upon the principals associated with an authenticated
subject. The JAAS principal-based access controls (access controls based
on who runs code) supplement the existing Java 2 code source-based
access controls (access controls based on where code came from and who
signed it).

[#50540557_pgfId-1000073]##

image:conn-189.gif[image]

Requirements

[#50540557_pgfId-1000074]##The connector security architecture uses JAAS
in two ways:

[#50540557_pgfId-1000075]##Security Contract. The connector security
architecture uses the JAAS _Subject_ class as part of the security
contract between an application server and a resource adapter. Use of
JAAS interfaces enables the security contract to remain independent of
specific security technologies or mechanisms. The security contract has
been specified in link:conn.htm#50540568_14574[See Requirements].

[#50540557_pgfId-1000079]##JAAS Pluggable Authentication framework. This
framework lets an application server and its underlying authentication
services remain independent from each other. When additional EISs and
new authentication services are required (or are upgraded), they can be
plugged in an application server without requiring modifications to the
application server.

[#50540557_pgfId-1000080]##The connector architecture requires that the
application server and the resource adapter must support the JAAS
_Subject_ class as part of the security contract. However, it recommends
(but does not mandate) that an application server use the JAAS pluggable
authentication framework.

[#50540557_pgfId-1000081]##The connector architecture does not require
support for the authorization portion of the JAAS framework.

[#50540557_pgfId-1000082]##

image:conn-189.gif[image]

Security Architecture

[#50540557_pgfId-1000083]##The following section specifies the JAAS
based security architecture. The security architecture addresses how
JAAS may be used by an application server to support authentication
requirements of heterogeneous EISs.

======= [#50540557_pgfId-1000141]##Security Architecture.

image:conn-190.gif[image]

======= [#50540557_pgfId-1000142]##JAAS Modules

[#50540557_pgfId-1000143]##The connector architecture recommends (but
does not mandate) that an application server support platform-wide JAAS
modules (also called authentication modules) for authentication
mechanisms that are common across multiple EISs. The implementation of
these JAAS modules is typically specific to an application server.
However, these modules may be developed to be reusable across
application servers.

[#50540557_pgfId-1000144]##A resource adapter provider can provide a
resource adapter-specific custom implementation of a JAAS module. The
connector architecture recommends that a resource adapter provider
provide a custom JAAS module when the underlying EIS supports an
authentication mechanism that is EIS specific and is not supported by an
application server.

[#50540557_pgfId-1000145]##A custom _JAAS_ module can be packaged
together with a resource adapter and can be pluggable into an
application server using the JAAS architecture.

[#50540557_pgfId-1000149]##The JAAS specification
(link:conn.htm#50540564_39014[See Java Authentication and Authorization
Service Specification, version 1.0]) specifies requirements for
developing and configuring JAAS modules.

======= [#50540557_pgfId-1000150]##Illustrative Examples: JAAS Module

[#50540557_pgfId-1000151]##The connector architecture is not intended to
specify a standard architecture for JAAS modules. The following are
illustrative examples of JAAS modules used typically in the JAAS-based
security architecture:

======= [#50540557_pgfId-1000152]##Principal Mapping Module

[#50540557_pgfId-1000153]##The application server invokes the principal
mapping module passing in the _Subject_ instance corresponding to the
caller/initiating principal. The JAAS specification specifies the
interfaces/classes and mechanisms involved in the invocation of a JAAS
module.

[#50540557_pgfId-1000154]##The principal mapping module maps a
caller/initiating principal to a valid resource principal and returns
the mapped resource principal as part of a _Subject_ instance. The
authentication data (example, password) for the mapped resource
principal is added to the _Subject_ ’s credentials. The authentication
data is used later to authenticate the resource principal to the
underlying EIS.

[#50540557_pgfId-1000155]##A special case of the principal mapping
module takes a null _Subject_ as an input parameter and forms a
_Subject_ instance with a valid resource principal and authentication
data. This is the case of default principal mapping.

[#50540557_pgfId-1000156]##The principal mapping module achieves its
mapping functionality by using security information configured in the
application server or an enterprise directory.

[#50540557_pgfId-1000157]##The principal mapping module does not
authenticate a resource principal and is configured to perform only
principal mapping. The authentication of a mapped resource principal is
performed separately by an authentication mechanism-specific JAAS
module.

======= [#50540557_pgfId-1000158]##Credential Mapping Module

[#50540557_pgfId-1000159]##The credential mapping module automatically
maps credentials from one authentication domain to those in a different
target authentication domain. For example, an application server can
provide a module that maps the public key certificate-based credential
associated with a principal to a Kerberos credential.

[#50540557_pgfId-1000160]##The credentials mapping module can use the
JAAS callback mechanism to get authentication data from the application
server. Note that this operation involves no user-inteface based
interaction. The authentication data is used to authenticate the
principal to the target authentication domain during the credentials
mapping. This module can also use an enterprise directory to get
security information or pre-configured mapped credentials.

======= [#50540557_pgfId-1000161]##Kerberos Module

[#50540557_pgfId-1000162]##This type of JAAS module supports
Kerberos-based authentication for a principal. A sample Kerberos module
supports:

[#50540557_pgfId-1000163]##Getting a TGT (ticket granting ticket) to the
Kerberos server in the local domain. The TGT is created by the KDC. The
TGT is placed on the credentials structure for a principal.

[#50540557_pgfId-1000164]##Delegation of authentication based on either
a forwardable or proxy mechanism as specified in the Kerberos
specification.

======= [#50540557_pgfId-1000166]##[#50540557_72329]##Generic Security Service API: GSS-API

[#50540557_pgfId-1000167]##The GSS-API is a standard API that provides
security services to caller applications in a generic fashion. These
security services include authentication, authorization, principal
delegation, secure association establishment, per-message
confidentiality, and integrity. These services can be supported by a
wide range of security mechanisms and technologies. However, an
application using GSS-API accesses these services in a generic
mechanism-independent fashion and achieves source-level portability.

[#50540557_pgfId-1000168]##In the context of the connector architecture,
a resource adapter uses GSS-API to establish a secure association with
the underlying EIS. The use of the GSS mechanism by a resource adapter
is typical in the following scenarios:

[#50540557_pgfId-1000169]##The EIS supports Kerberos as a third-party
authentication service and uses GSS-API as a generic API for accessing
security services.

[#50540557_pgfId-1000170]##The resource adapter and EIS need data
integrity and confidentiality services during their communication over
insecure links.

[#50540557_pgfId-1000171]##The GSS-API has been implemented over a range
of security mechanisms, including Kerberos V5. See
link:conn.htm#50540564_14678[See Java Specification Request: Generic
Security Service API (GSS-API), Java bindings] for a Java binding of
GSS-API.

[#50540557_pgfId-1000175]##

image:conn-191.gif[image]

The connector architecture does not require a resource adapter to use
GSS-API.

image:conn-191.gif[image]

[#50540557_pgfId-1000176]##

image:conn-189.gif[image]

Security Configuration

[#50540557_pgfId-1000177]##During deployment of a resource adapter, the
deployer is responsible for configuring JAAS modules in the operational
environment. The configuration of JAAS modules is based on the security
requirements specified by a resource adapter in its deployment
descriptor or through metadata annotations discussed in
link:conn.htm#50540619_87413[See Metadata Annotations]. Refer to
link:conn.htm#50540561_80713[See Requirements].

[#50540557_pgfId-1000181]##The element _authentication-mechanism_ in the
deployment descriptor specifies an authentication mechanism supported by
a resource adapter. The standard types of authentication mechanisms are:
_BasicPassword_ and _Kerbv5_ . For example, if a resource adapter
specifies support for _Kerbv5_ authentication mechanism, the deployer
configures a Kerberos JAAS module in the operational environment.

======= [#50540557_pgfId-1000182]##JAAS Configuration

[#50540557_pgfId-1000183]##The deployer sets up the configuration of
JAAS modules based on the JAAS-specified mechanism. Refer to
_javax.security.auth.login.Configuration_ specification for more
details. The JAAS configuration includes the following information on a
per resource adapter basis:

[#50540557_pgfId-1000184]##One or more authentication modules used to
authenticate a resource principal.

[#50540557_pgfId-1000185]##The order in which authentication modules
need to invoked during a stacked authentication.

[#50540557_pgfId-1000186]##The flag value controlling authentication
semantics if stacked modules are invoked.

[#50540557_pgfId-1000187]##The format for the above configuration is
specific to an application server implementation.

[#50540557_pgfId-1000188]##

image:conn-189.gif[image]

Scenarios

[#50540557_pgfId-1000189]##The following section illustrates security
scenarios for JAAS based security architecture.

======= [#50540557_pgfId-1000190]##Scenario: Resource Adapter Managed Authentication

[#50540557_pgfId-1000191]##This scenario enables the connector
architecture to support EIS specific username and pasword-based
authentication. It involves the following steps:

[#50540557_pgfId-1000192]##The application component invokes connection
request method on the resource adapter without passing in any security
arguments. The resource adapter passes the connection request to the
application server.

[#50540557_pgfId-1000193]##During the deployment of the resource
adapter, the application server is configured to use a principal mapping
module. This principal mapping module takes a _Subject_ instance with
the caller principal and returns a _Subject_ instance with a valid
resource principal and _PasswordCredential_ instance. The
_PasswordCredential_ has the password for authentication of the resource
principal.

[#50540557_pgfId-1000194]##The application server calls
_LoginContext.login_ method. On a successful return from the principal
mapping module, the application server gets a _Subject_ instance that
has the mapped resource principal with a valid _PasswordCredential_ .

======= [#50540557_pgfId-1000232]##Resource Adapter-Managed Authentication

image:conn-192.gif[image]

[#50540557_pgfId-1000233]##The application server invokes the method
_ManagedConnectionFactory_ . _create-ManagedConnection_ passing in a
non-null _Subject_ instance. The _Subject_ instance carries the resource
principal and its corresponding _PasswordCredential,_ which holds the
user name and password.

[#50540557_pgfId-1000234]##The resource adapter extracts the user name
and password from the _Password-Credential_ instance. The resource
adapter uses the getter methods ( _getPrivateCredentials_ method)
defined on the _Subject_ interface to extract the _PasswordCredential_
instance.

[#50540557_pgfId-1000235]##The resource adapter uses username and
password information (extracted from the _PasswordCredential_ instance)
to authenticate the resource principal to the EIS. The authentication
happens during the creation of the connection through an authentication
mechanism specific to the underlying EIS.

======= [#50540557_pgfId-1000237]##[#50540557_39753]##Scenario: Kerberos and Principal Delegation

[#50540557_pgfId-1000241]##The scenario in the following figure involves
the following steps:

======= [#50540557_pgfId-1000278]##Kerberos Authentication with Principal Delegation[#50540557_14439]##

image:conn-193.gif[image]

[#50540557_pgfId-1000279]##The initiating principal has already
authenticated itself to the application server using Kerberos. The
initiating principal has a service ticket for the application server and
a TGT (ticket granting ticket issued by the _KDC_ ) as part of its
Kerberos based credentials.

[#50540557_pgfId-1000280]##In this scenario, the application server is
configured to impersonate the initiating principal when connecting to
the EIS instance. So even though application server is directly
connecting to the EIS, access to the EIS is being requested on behalf of
the initiating principal. The initiating principal is required to pass
its identity to the application server and allow the application server
to make requests to the EIS on behalf of the initiating principal. The
above is achieved through delegation of authentication.

[#50540557_pgfId-1000281]##The application server calls the method
_ManagedConnectionFactory_ . _createManagedConnection_ by passing in a
_Subject_ instance with the initiating principal and its Kerberos
credentials. The credentials contain a Kerberos TGT and are represented
through the _GSSCredential_ interface.

[#50540557_pgfId-1000282]##The resource adapter extracts the resource
principal and its Kerberos credentials from the _Subject_ instance.

[#50540557_pgfId-1000283]##The resource adapter creates a new physical
connection to the EIS.

[#50540557_pgfId-1000284]##If the resource adapter and EIS support
GSS-API for establishing a secure association, the resource adapter uses
the Kerberos credentials based on the GSS mechanism as follows. For
details, see GSS-API specification:

[#50540557_pgfId-1000285]##The resource adapter calls _GSS_Acquire_cred_
method to acquire _cred_handle_ in order to reference the credentials
for establishing the shared security context.

[#50540557_pgfId-1000286]##The resource adapter calls the
_GSS_Init_sec_context_ method. The method _GSS_Init_sec_context_ yields
a service ticket to the requested EIS service with the corresponding
session key.

[#50540557_pgfId-1000287]##

image:conn-191.gif[image]

The mechanism and representation through which Kerberos credentials are
shared across the underlying JAAS module and GSS provider is beyond the
scope of the connector architecture.

image:conn-191.gif[image]

[#50540557_pgfId-1000288]##After success, _GSS_Init_sec_context_ builds
a specific Kerberos-formatted message and returns it as an output token.
The resource adapter sends the output token to the EIS instance.

[#50540557_pgfId-1000289]##The EIS service passes the received token to
the _GSS_Accept_sec_context_ method.

[#50540557_pgfId-1000290]##The resource adapter and EIS now hold the
shared security context (so have established a secure association) in
the form of a session key associated with the service ticket. They can
now use the session key in the subsequent per-message methods:
_GSS-GetMIC_ , _GSS_VerifyMIC_ , _GSS_Wrap_ , _GSS_Unwrap_ .

[#50540557_pgfId-1000291]##If the resource adapter and EIS fail to
establish a secure association, the resource adapter cannot use the
physical connection as a valid connection to the EIS instance. The
resource adapter returns a security exception on the
_createManagedConnection_ method.

======= [#50540557_pgfId-1000292]##Scenario: GSS-API

[#50540557_pgfId-1000293]##If an EIS supports the GSS mechanism, a
resource adapter may (but is not required to) use GSS-API to set up a
secure association with the EIS instance. The section
link:conn.htm#50540557_72329[See Generic Security Service API: GSS-API]
gives a brief overview of GSS-API.

======= [#50540557_pgfId-1000328]##GSS-API use by Resource Adapter[#50540557_77135]##

image:conn-194.gif[image]

[#50540557_pgfId-1000329]##A formal specification of the use of GSS-API
by a resource adapter is beyond the scope of the connector architecture.
However, GSS-API has been mentioned as a possible implementation option
for a resource adapter that has the GSS mechanism supported by its
underlying EIS.

======= [#50540557_pgfId-1000330]##Scenario: Kerberos Authentication After Principal Mapping

[#50540557_pgfId-1000334]##The scenario depicted in the following figure
involves the following steps:

======= [#50540557_pgfId-1000382]##Kerberos Authentication After Principal Mapping[#50540557_91503]##

image:conn-195.gif[image]

[#50540557_pgfId-1000383]##The application server is configured to use
the principal mapping module and Kerberos module. The two authentication
modules are stacked together with the principal mapping module first.

[#50540557_pgfId-1000384]##The application server creates a
_LoginContext_ instance by passing in the _Subject_ instance for the
caller principal and a _CallbackHandler_ instance. Next, the application
server calls the _login_ method on the _LoginContext_ instance.

[#50540557_pgfId-1000385]##The principal mapping module takes a
_Subject_ instance with caller principal and returns a _Subject_
instance with a valid resource principal and Kerberos- based
authentication data. The principal mapping module does not authenticate
the resource principal; it does only principal mapping to find the
mapped resource principal and its authentication data.

[#50540557_pgfId-1000386]##The Kerberos module (called after the
principal mapping module) uses the resource principal and its
authentication data to authenticate the resource principal. The Kerberos
module leads to a valid TGT for the Kerberos domain supported by the
EIS. The TGT is contained in the Kerberos credentials represented
through the _GSSCredential_ interface.

[#50540557_pgfId-1000387]##The application server calls the method
_ManagedConnectionFactory_ . _create-ManagedConnection_ passing in a
_Subject_ instance with the resource principal and its Kerberos
credentials.

{empty}[#50540557_pgfId-1000390]##The remaining steps are the same as in
the previous scenario, link:conn.htm#50540557_39753[See Scenario:
Kerberos and Principal Delegation]

======= [#50540557_pgfId-1000392]##Scenario: EIS-Specific Authentication

======= [#50540557_pgfId-1000428]##[#50540557_39469]##Authentication Through EIS-Specific JAAS Module

image:conn-196.gif[image]

[#50540557_pgfId-1000432]##The scenario in the preceding figure involves
the following steps:

[#50540557_pgfId-1000433]##During the configuration of a resource
adapter, the application server is configured to use an EIS-specific
JAAS module for authentication to the underlying EIS.

[#50540557_pgfId-1000434]##The configured JAAS module supports an
authentication mechanism specific to the EIS. The application server is
responsibility for managing the authentication data and JAAS
configuration.

[#50540557_pgfId-1000435]##The application server gets a request from
the application component to create a new physical connection to the
EIS. Creating a new physical connection requires the resource principal
to authenticate itself to the underlying EIS instance.

[#50540557_pgfId-1000436]##The application server initiates the
authentication of the resource principal. It creates a _LoginContext_
instance by passing in the _Subject_ instance and a _CallbackHandler_
instance. Next, the application server calls the _login_ method on the
_LoginContext_ instance.

[#50540557_pgfId-1000437]##The JAAS module authenticates the resource
principal to the underlying EIS. It uses the callback handler provided
by the application server to get the authentication data.

[#50540557_pgfId-1000438]##The application server invokes the method
_ManagedConnectionFactory_ . _createManagedConnection_ passing in the
_Subject_ instance with the authenticated resource principal and its
credential.

[#50540557_pgfId-1000439]##The resource adapter extracts the credential
(associated with the _Subject_ instance) for the resource principal
using the getter methods defined on the _Subject_ interface. The
resource adapter uses this credential to create a connection to the
underlying EIS.

[#50540557_pgfId-1000440]##In this scenario, authenticating a resource
principal (initiated by the application server and performed by the JAAS
module) is separate from creating a connection to the EIS. The resource
adapter uses the credential of the resource principal to create a
connection to the EIS. This connection creation can involve further
authentication.

[#50540557_pgfId-1000441]##After successfully creating a connection to
the EIS, the resource adapter returns the newly created connection from
the method _ManagedConnectionFactory_ . _createManagedConnection_ .

[#50540557_pgfId-999505]## 

[#50540564_pgfId-874]## 

[#50540564_pgfId-1000217]##

image:conn-197.gif[image]

Related Documents

image:conn-198.gif[image]

[#50540564_pgfId-1000219]##[#50540564_26771]##Enterprise JavaBeans (EJB)
Specification, version 3.2

[#50540564_pgfId-1000220]##http://jcp.org/en/jsr/detail?id=345

[#50540564_pgfId-1000064]##[#50540564_28808]##Java Transaction API (JTA)
Specification, version 1.2

[#50540564_pgfId-1000065]##http://jcp.org/en/jsr/detail?id=907

[#50540564_pgfId-1000067]##[#50540564_32901]##JDBC API Specification,
version 4.1

[#50540564_pgfId-1000068]##http://jcp.org/en/jsr/detail?id=221

[#50540564_pgfId-1000070]##[#50540564_30375]##X/Open CAE Specification
-- Distributed Transaction Processing: the XA Specification, X/Open
document

[#50540564_pgfId-1000072]##[#50540564_16871]##RFC: Generic Security
Service API (GSS-API) Specification, version 2

[#50540564_pgfId-1000073]##http://www.ietf.org/rfc/rfc2078.txt

[#50540564_pgfId-1000075]##Java Specification Request:
[#50540564_14678]##Generic Security Service API (GSS-API), Java bindings

[#50540564_pgfId-1000076]##http://jcp.org/en/jsr/detail?id=72

[#50540564_pgfId-1000078]##[#50540564_39014]##Java Authentication and
Authorization Service Specification, version 1.0

[#50540564_pgfId-1000079]##http://www.oracle.com/technetwork/java/javase/jaas/

[#50540564_pgfId-1000081]##[#50540564_22967]##Java Platform, Enterprise
Edition (Java EE) Specification, version 7

[#50540564_pgfId-1000082]##http://jcp.org/en/jsr/detail?id=342

[#50540564_pgfId-1000083]##JavaServer Pages (JSP) Specification, version
2.3

[#50540564_pgfId-1000084]##http://jcp.org/en/jsr/detail?id=245

[#50540564_pgfId-1000086]##[#50540564_40935]##Java Servlet
Specification, version 3.1

[#50540564_pgfId-1000087]##http://jcp.org/en/jsr/detail?id=340

[#50540564_pgfId-1000089]##[#50540564_23037]##Java Message Service
Specification, version 2.0

[#50540564_pgfId-1000090]##http://jcp.org/en/jsr/detail?id=343

[#50540564_pgfId-1000608]##[#50540564_25780]##Java Platform, Standard
Edition 7API Specification

[#50540564_pgfId-1000609]##http://docs.oracle.com/javase/7/docs/api/

[#50540564_pgfId-1000611]##[#50540564_81680]##J2EE Deployment API
Specification

[#50540564_pgfId-1000096]##http://jcp.org/en/jsr/detail?id=088

[#50540564_pgfId-1000098]##[#50540564_89998]##JavaBeans Specification
1.01 Final Release

[#50540564_pgfId-1000099]##http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html

[#50540564_pgfId-1000223]##[#50540564_88238]##Java Authentication
Service Provider Interface for Containers Specification, version 1.4

[#50540564_pgfId-1000233]##http://jcp.org/en/jsr/detail?id=196

[#50540564_pgfId-1000267]##[#50540564_77345]##Bean Validation
Specification, version 1.1

[#50540564_pgfId-1000269]##http://jcp.org/en/jsr/detail?id=303

[#50540564_pgfId-1000271]##[#50540564_53023]##A Metadata Facility for
the Java Programming Language

[#50540564_pgfId-1000280]##http://jcp.org/en/jsr/detail?id=175

[#50540564_pgfId-1000282]##[#50540564_50227]##Common annotations for the
Java Platform Specification, version 1.2

[#50540564_pgfId-1000525]##http://jcp.org/en/jsr/detail?id=250

[#50540564_pgfId-1000570]##[#50540564_23149]##Contexts and Dependency
Injection for the Java EE Platform 1.1

[#50540564_pgfId-1000526]##http://jcp.org/en/jsr/detail?id=346

[#50540550_pgfId-1000243]## 

[#50540550_pgfId-1000244]##

image:conn-199.gif[image]

Change History for Version 1.0

image:conn-200.gif[image]

[#50540550_pgfId-1000060]##

image:conn-201.gif[image]

Version 0.9

[#50540550_pgfId-1000061]##Editorial run through the document

[#50540550_pgfId-1000062]##Added section 1.4 on relationship between
JDBC and Connector architecture

[#50540550_pgfId-1000063]##Added scenario on B2B in the chapter 4

[#50540550_pgfId-1000064]##Added java.io.Serializable to the code
specification of interfaces that are required to support Serializable
interface

[#50540550_pgfId-1000065]##Added clarifications in the chapter 5 based
on the expert comments. The changes are marked by change bars

[#50540550_pgfId-1000066]##Added equals and hashCode methods to
interface ConnectionRequestInfo

[#50540550_pgfId-1000067]##Added section 6.8 on Connection Association

[#50540550_pgfId-1000068]##Added clarifications to the chapter 7. Did
minor restructuring of the chapter based on review comments. The changes
are marked by change bars

[#50540550_pgfId-1000069]##Added clarifications to the chapter 8 based
on expert comments

[#50540550_pgfId-1000070]##Changed few details and added clarifications
in the chapter 9 based on the review comments. The changes are marked by
change bars

[#50540550_pgfId-1000071]##Added more description for packaging and
deployment in the chapter 10

[#50540550_pgfId-1000072]##Clarified version dependencies in the chapter
11

[#50540550_pgfId-1000073]##Introduced interface
javax.resource.Referenceable for the standard setReference method

[#50540550_pgfId-1000074]##Removed scenarios on Credentials Mapping and
Single sign-on from Appendix C. Updated scenario C.6.2 to refer GSS-API.

[#50540550_pgfId-1000075]##

image:conn-201.gif[image]

Version 1.0 - Public Draft 1

[#50540550_pgfId-1000076]##Removed definition of "Connector" from 2.1.
The term Connector is now used broadly refer to the Connector
architecture, while resource adapter refers to the system library.

[#50540550_pgfId-1000077]##Added requirement for ConnectionEventListener
to 6.9.2: Application Server

[#50540550_pgfId-1000078]##Added connection handle property to the
ConnectionEvent, section 5.5.7

[#50540550_pgfId-1000079]##Introduced getResultSetInfo method in the
Connection interface

[#50540550_pgfId-1000080]##Added "Administered Object" in the section
9.6.2

[#50540550_pgfId-1000081]##Added more details to section "Auto Commit"
in 9.5.2

[#50540550_pgfId-1000082]##Introduced separate interface for
ResultSetInfo in the section 9.10.3

[#50540550_pgfId-1000083]##Changed specification of element
config-property-type in section 10.6

[#50540550_pgfId-1000084]##Added an example to illustrate security
permission specification in the section 11.3

[#50540550_pgfId-1000085]##Added CCI related information to Projected
Items, chapter 12

[#50540550_pgfId-1000086]##

image:conn-201.gif[image]

Version 1.0 - Public Draft 2

[#50540550_pgfId-1000087]##Section 5.5.1: Change based on introduction
of ConnectionSpec interface

[#50540550_pgfId-1000088]##Section 5.5.1: Added clarification to
ConnectionRequestInfo section

[#50540550_pgfId-1000089]##Section 5.5.4: Added clarification to section
on "Cleanup of ManagedConnection"

[#50540550_pgfId-1000090]##Section 5.5.6: Added clarification to
paragraph after the interface for ConnectionEventListener

[#50540550_pgfId-1000091]##Section 5.9.1: Added clarification to
description of the scenario

[#50540550_pgfId-1000092]##Section 6.8: Moved earlier section "Details
on Local transaction" ahead of connection sharing section and renamed it
"Scenarios: Local Transaction Management". No change in any content.

[#50540550_pgfId-1000093]##Section 6.9: Added more details on connection
sharing based on the changes in EJB 2.0 and J2EE 1.3 platform
specification

[#50540550_pgfId-1000094]##Section 6.10: Added this section to clarify
local transaction optimization. This is based on changes in EJB 2.0 and
J2EE 1.3 platform specification

[#50540550_pgfId-1000095]##Section 6.11: Made a new section on
"Scenarios: Connection sharing". No change in content

[#50540550_pgfId-1000096]##Section 6.12: Added clarifications and
requirements in the section on "Connection Association"

[#50540550_pgfId-1000097]##Section 6.13.2: Moved requirements on
connection sharing to section 6.9

[#50540550_pgfId-1000098]##Section 7.4.2: Code sample changed to reflect
ConnectionSpec usage

[#50540550_pgfId-1000099]##Section 9.5.1: Changed getConnection(Map) to
getConnection(ConnectionSpec) and added clarifications

[#50540550_pgfId-1000100]##Section 9.5.2: Introduced a section on
ConnectionSpec

[#50540550_pgfId-1000101]##Section 9.7.2: Added methods to
ResourceAdapterMetaData interface. Added description of these methods

[#50540550_pgfId-1000102]##Section 9.9.1: Record, MappedRecord and
IndexedRecord now extend Serializable interface

[#50540550_pgfId-1000103]##Section 9.10: Added note on JDBC semantics in
relation to CCI ResultSet

[#50540550_pgfId-1000104]##Section 9.10.3: Added note on ResultSetInfo
implementation requirements

[#50540550_pgfId-1000105]##Section 10.6: Change to auth-mechanism
specification in DTD. Removed + from credential-interface

[#50540550_pgfId-1000106]##Figure 29: Added clarifications for the
diagram

[#50540550_pgfId-1000107]##Section 8.3: Clarified security contract
requirements for the application server

[#50540550_pgfId-1000108]##Section 9.5.1: Moved method getRecordFactory
from Interaction to ConnectionFactory. Note that it is not necessary to
have an active connection to create generic record instances

[#50540550_pgfId-1000109]##

image:conn-201.gif[image]

Version 1.0 - Proposed Final Draft 2

[#50540550_pgfId-1000110]##Reviewed requirements in terms of compliance
testing. marked with change bars in the document

[#50540550_pgfId-1000111]##Fixed documentation errors

[#50540550_pgfId-1000112]##System Contracts:

[#50540550_pgfId-1000113]##Section 5.5.4: Clarified requirements for the
method _matchManagedConnections_ on _ManagedConnectionFactory_ interface

[#50540550_pgfId-1000114]##Section 6.9: Made requirements for connection
sharing consistent with J2EE 1.3 platform specification

[#50540550_pgfId-1000115]##Section 6.10: Added specification of
requirements for different transaction scenarios. Added illustrative
scenarios

[#50540550_pgfId-1000116]##Section 6.11: Removed a transaction scenario
that illustrated connection sharing

[#50540550_pgfId-1000117]##Section 6.11: Clarified requirements for
connection association

[#50540550_pgfId-1000118]##Common Client Interface:

[#50540550_pgfId-1000119]##Removed _setLogWriter_ , _getLogWriter_ ,
_setTimeout_ , _getTimeout_ methods from _ConnectionFactory_ interface

[#50540550_pgfId-1000120]##Added description for exceptions in the API
documentation for the CCI interfaces. Note that no new exception has
been introduced

[#50540550_pgfId-1000121]## _ConnectionFactory_ implementation class
required to provide a default constructor

[#50540550_pgfId-1000122]##Added clarifications; marked by change bars

[#50540550_pgfId-1000123]##Deployment and Packaging:

[#50540550_pgfId-1000124]##Section 10.2: Clarified requirements for
packaging and deployment of a resource adapter

[#50540550_pgfId-1000125]##DTD changes based on a review of DTDs for
various J2EE specifications:

[#50540550_pgfId-1000126]##Ordered elements alphabetically except the
root element

[#50540550_pgfId-1000127]## _<display-name_ > changed to optional in <
_connector_ > element

[#50540550_pgfId-1000128]##Used common elements from other DTDs: <
_description_ >, < _small-icon_ >, < _large-icon_ >

[#50540550_pgfId-1000129]##Used common header comments across all J2EE
DTDs

[#50540550_pgfId-1000130]##< _auth-mechanism_ > changed to <
_authentication-mechanism_ >

[#50540550_pgfId-1000131]##< _auth-mech-type_ > changed to <
_authentication-mechanism-typ_ e>

[#50540550_pgfId-1000132]##Added _java.lang.Character_ to <
_config-property-type_ >:

[#50540550_pgfId-1000133]##Changed defined values in <
_authentication-mechanism-type_ >: _basic-password_ to _BasicPassword_ ,
_kerbv5_ to _Kerbv5_

[#50540550_pgfId-1000134]##Changed defined values in <
_transaction-support_ > element: _no_transaction_ to _NoTransaction_ ,
_local_transaction_ to _LocalTransaction_ , _xa_transaction_ to
_XATransaction_

[#50540550_pgfId-1000135]##

image:conn-201.gif[image]

Version 1.0 - Final Release

[#50540550_pgfId-1000136]##Clarification on reauthentication in the
section 8.2.7

[#50540550_pgfId-1000137]##Change in auto-commit in section 9.5.3.
Removed set/getAutoCommit methods from the Connection interface

[#50540550_pgfId-999505]## 

[#50540551_pgfId-874]## 

[#50540551_pgfId-1000005]##

image:conn-202.gif[image]

Change History for Version 1.5

image:conn-203.gif[image]

[#50540551_pgfId-1000060]##

image:conn-204.gif[image]

Public Review Draft

[#50540551_pgfId-1000061]##Some minor clarifications to sections 5.3.1,
5.3.4, 5.3.5

[#50540551_pgfId-1000062]##Some minor clarifications to section 10.3

[#50540551_pgfId-1000063]##Added chapter 11: Inbound communication

[#50540551_pgfId-1000064]##Added chapter 13: EJB invocation

[#50540551_pgfId-1000065]##Section 12.3

[#50540551_pgfId-1000066]##Added method release on Endpoint interface

[#50540551_pgfId-1000067]##Added method getXAResources on
ResourceAdapter interface

[#50540551_pgfId-1000068]##Updated section 12.5.1 to illustrate
XAResource implementation

[#50540551_pgfId-1000069]##Added section 12.5.2: Message redelivery upon
crash recovery

[#50540551_pgfId-1000070]##Section 12.5.6: Added an application server
requirement to set thread context class loader

[#50540551_pgfId-1000071]##Section 12.7: Updated the JMS use case to
comply with the Connector 1.5 XSD

[#50540551_pgfId-1000072]##Updated Section 16.2: Application server
requirements

[#50540551_pgfId-1000073]##Some minor clarifications to sections 17.4.1,
17.4.2

[#50540551_pgfId-1000074]##Section 17.6: Converted Connector 1.5 DTD to
Connector 1.5 XSD

[#50540551_pgfId-1000075]##Added Appendix B: Activation Configuration
for Message Inflow to JMS endpoints

[#50540551_pgfId-1000076]##

image:conn-204.gif[image]

Proposed Final Draft

[#50540551_pgfId-1000077]##Section 7.9: Connection sharing requirements
have been updated

[#50540551_pgfId-1000078]##Section 9.2.3: GenericCredential interface
has been deprecated

[#50540551_pgfId-1000079]##Section 9.3: Added a resource adapter
requirement to throw a SecurityException if the authentication
information provided is erroneous

[#50540551_pgfId-1000080]##Section 10.3.1: Clarified use of synchronized
blocks within a Work implementation

[#50540551_pgfId-1000081]##Section 12.3: Anew method parameter
java.lang.reflect.Method has been added to beforeDelivery and
isDeliveryTransacted methods

[#50540551_pgfId-1000082]##Section 12.4.2: Added separate sections to
describe ActivationSpec JavaBean and Administered objects

[#50540551_pgfId-1000083]##Section 12.4.9: Clarified multiple endpoint
activations

[#50540551_pgfId-1000084]##Section 12.4.7: This new section describes
the structure of a message listener interface

[#50540551_pgfId-1000085]##Section 12.5.2: Clarified crash recovery
processing

[#50540551_pgfId-1000086]##Section 12.7.2: Updated the sample code to
use JMS 1.1 style generic APIs

[#50540551_pgfId-1000087]##Section 16.2: Removed application client
container requirements for supporting connector contracts

[#50540551_pgfId-1000088]##Section 17.2: Added description of RAR file
contents

[#50540551_pgfId-1000089]##Section 17.6: Updated Connector 1.5 XSD -
resourceadapter-class element has been made optional, and
config-property element has been added to adminobject element

[#50540551_pgfId-1000090]##Section 18.4: Added an example to illustrate
usage of doPrivileged blocks in resource adapter code

[#50540551_pgfId-1000091]##Section 19.2: Added InvalidPropertyException
and UnavailableException to the exception list

[#50540551_pgfId-1000092]##Appendix B: Added descriptions to the various
ActivationSpec JavaBean properties

[#50540551_pgfId-1000093]##Appendix F: Updated links to related
documents

[#50540551_pgfId-1000094]##

image:conn-204.gif[image]

Proposed Final Draft 2

[#50540551_pgfId-1000095]##Section 6.5.2: Clarifications on
ConnectionManager requirements.

[#50540551_pgfId-1000096]##Section 7.9.1: This new section describes how
a resource adapter may detect and report sharing violations.

[#50540551_pgfId-1000097]##Section 7.13.1: Added description to clarify
the auto-commit behavior of transactional resource adapters.

[#50540551_pgfId-1000098]##Section 7.14: This new section describes two
optional connection optimizations.

[#50540551_pgfId-1000099]##Section 12.5.6: Clarified that the message
delivery must not rely on the class loader that is associated with the
java.lang.reflect.Method object parameter.

[#50540551_pgfId-1000100]##Section 12.5.8: Clarified the usage of source
managed transactions.

[#50540551_pgfId-1000101]##Section 14.4.4: Clarified the requirements on
transaction inflow contracts.

[#50540551_pgfId-1000102]##Section 17.6: XSD modification: The contents
of the connectionfactory-interface element must be unique in the
outbound-resourceadapter.

[#50540551_pgfId-1000103]##

image:conn-204.gif[image]

Final Release

[#50540551_pgfId-1000104]##Section 5.3.1: Clarification on the behavior
of start method call

[#50540551_pgfId-1000193]##Section 5.3.2: ResourceAdapterAssociation
interface

[#50540551_pgfId-1000205]##Section 5.3.4.1, 5.3.4.2: Clarifications on
resource adapter shutdown

[#50540551_pgfId-1000194]##Section 6.4.1: Fifth bullet item,
clarification on access to application JNDI context

[#50540551_pgfId-1000106]##Section 6.5.3:
ValidatingManagedConnectionFactory interface

[#50540551_pgfId-1000107]##Section 6.5.4: Clarifications on connection
sharing and multiple connection handles

[#50540551_pgfId-1000108]##Section 6.5.6: Clarifications on event
listener mechanism

[#50540551_pgfId-1000109]##Section 7.7.2: Clarifications on local
transaction events and implicit transaction begin

[#50540551_pgfId-1000110]##Section 7.9: SharingViolationException, and
clarification on non-transactional resource adapters

[#50540551_pgfId-1000111]##Section 7.9.1: Clarifications on sharing
violation detection

[#50540551_pgfId-1000198]##Section 9.1.8.2: Clarifications on security
options A, B and C

[#50540551_pgfId-1000112]##Section 10.3: Numeric string values for
WorkException error code values

[#50540551_pgfId-1000113]##Section 10.3.1: Clarification on access to
JNDI context from Work objects

[#50540551_pgfId-1000114]##Section 10.3.7: CreateTimer method throws
UnavailableException

[#50540551_pgfId-1000181]##Section 12.4.2.2: Clarifications on required
configuration properties on ActivationSpec JavaBean, and JMS
ActivationSpec JavaBean

[#50540551_pgfId-1000180]##Section 12.4.2.4: Clarifications on
configuring administered objects

[#50540551_pgfId-1000115]##Section 12.3: Changes to endpointActivation,
beforeDelivery, afterDelivery and isDeliveryTransacted method signatures

[#50540551_pgfId-1000179]##Section 12.4.4: Clarifications on message
delivery during endpoint activation

[#50540551_pgfId-1000116]##Section 12.4.4: Clarifications on
endpointDeactivation method

[#50540551_pgfId-1000117]##Section 12.4.6: Clarifications on contract
between deployment tool and application server

[#50540551_pgfId-1000118]##Section 12.5.6: Description of
IllegalStateException thrown by beforeDelivery and afterDelivery method
calls

[#50540551_pgfId-1000197]##Section 12.5.8: Clarifications on use of
transaction inflow

[#50540551_pgfId-1000119]##Section 15.8: Service endpoint
javax.resource.cci.MessageListener interface

[#50540551_pgfId-1000120]##Section 16.2: Table 16-1, updates to column
corresponding to lifecycle management

[#50540551_pgfId-1000121]##Section 16.3: JavaBean requirements

[#50540551_pgfId-1000178]##Section 16.4: Equality constrains

[#50540551_pgfId-1000122]##Section 17.5.3: Clarifications on
getReference method

[#50540551_pgfId-1000123]##All exception classes have been provided
constructors that have a cause param

[#50540551_pgfId-1000124]##Section 17.6: XSD modifications: vendor-name
has been assigned a string type, security-permission has been moved one
level up such that the permissions apply to the whole resource adapter
code, deployment-extension element has been removed, indentations have
been reformatted to follow standard XML conventions

[#50540617_pgfId-998290]## 

[#50540617_pgfId-998684]## 

[#50540617_pgfId-998438]##

image:conn-205.gif[image]

Change History for Version 1.6

image:conn-206.gif[image]

[#50540617_pgfId-998445]##

image:conn-207.gif[image]

Final Draft

[#50540617_pgfId-998695]##Various sections (no semantic changes) to
address editorial feedback

[#50540617_pgfId-998697]##Corrected the phrase non-"Classic Profile" to
non-"Full Profile" in Section 3.5 to reflect the nomenclature followed
in the platform spec.

[#50540617_pgfId-998723]##Removed JTA as an optional requirement in
Section 3.5 as the Platform specification (v6 PFD, Section EE.9.5 --
Requirements for All Java EE Profiles) requires JTA support in all Java
EE Profiles.

[#50540617_pgfId-998726]##Added a requirement in Section 3.5 regarding
the deployment of bi-directional resource adapters in standalone
connector containers that do not support Message Inflow.

[#50540617_pgfId-998738]##Added BeanValidation as an optional
requirement for standalone connector containers in Section 3.5

[#50540617_pgfId-998835]##Added JASPIC baseline compatibility and
Security Inflow support requirements in Section 3.5

[#50540617_pgfId-998840]##Clarified in Section 3.5 that the
specification does not define new or mandate support for existing
application components in the standalone connector environment.

[#50540617_pgfId-998709]##Removed the note to reviewer and removed
_InteractionSpec_ from list of JavaBeans that must be validated in
Section 5.3.7.5

[#50540617_pgfId-998733]##Added a requirement for mandatory support of
BeanValidation

[#50540617_pgfId-998754]##Added a requirement in Section 5.3.7.5 for the
connector container to perform validation on the
_javax.validation.groups.Default_ in the JavaBean.

[#50540617_pgfId-998763]##Added validation failure related requirement
in Section 5.3.7.5

[#50540617_pgfId-998769]##Added a requirement in Section 5.3.7.5 for the
application server to treat all JavaBean properties as reachable and
cascadable

[#50540617_pgfId-998782]##Clarified in Section 11.4 that if
_WorkContextProvider.getWorkContexts_ returns null/empty _List_ the
_WorkManager_ must treat it as if no additional execution context
information needs to be established for that _Work_ instance and
continue _Work_ processing.

[#50540617_pgfId-998786]##Clarified in Section 11.4 that the resource
adapter is not allowed to modify the state of a _WorkContext_ after the
_Work_ instance that is associated with it has been submitted to the
_WorkManager_

[#50540617_pgfId-998789]##Clarified that the resource adapter must be
configured to have the necessary security permissions to add a Principal
in Section 16.4.5.1

[#50540617_pgfId-998843]##Changed the definition of
_AuthenticationMechanism_ and _SecurityPermission_ ’s _Target_ as (
_@Target(\{})_ ) in Section 18.4.3 and 18.4.4

[#50540617_pgfId-998799]##Removed the "default \{}" clause for the
_messageListeners_ annotation element in Section 18.7

[#50540617_pgfId-998801]##Updated example in Section 18.7 to add a
_messageListeners_ annotation element to the _Activation_ annotation

[#50540617_pgfId-998805]##Clarified in Section 18.5 that the application
server must process _ConfigProperty_ annotations on JavaBeans
irrespective of whether they are specified by way of annotations or DD.

[#50540617_pgfId-998816]##Added a Section 18.3.3 "Annotation Processing
Requirements of Superclasses" to discuss how annotations on
super-classes must be processed by the application server

[#50540617_pgfId-998828]##Added Connectors 1.5 XSD to Section A.2 and
clarified that application servers must support RARs with Connectors 1.5
DD.

[#50540617_pgfId-998830]##Clarified in 20.2.0.1 that Java EE Platform’s
library support can be used by resource adapters to express library
dependencies.

[#50540617_pgfId-998842]##Clarified in Section 20.4.1 that the
_resourceadapter-class_ needs to be provided only if available

[#50540617_pgfId-998694]##

image:conn-207.gif[image]

Proposed Final Draft

[#50540617_pgfId-998555]##Renamed _InflowContext_ to _WorkContext_ in
multiple sections, as the contextual information being passed for a
_Work_ instance is not limited to Message Inflow scenarios alone as the
name originally appeared to suggest

[#50540617_pgfId-998558]##Added a paragraph in Section 7.1 clarifying
that connection handles may not be portably be passed across application
component boundaries

[#50540617_pgfId-998588]##Clarified Section 10.3.3 that the constant
_IMMEDIATE_ requires the WorkManager to timeout the action as soon as
possible

[#50540617_pgfId-998631]##Clarified in Section 11.6 that the
_WorkManager_ ignore unknown hint names and added a new Section 11.6.1
for standard Hint names. Added LongRunning hint in 11.6.1.2

[#50540617_pgfId-998632]##Added a requirement in Section 13.5.6 on the
application server to support cases where a resource adapter may not
perform a message delivery between _beforeDelivery_ and _afterDelivery_
method pair

[#50540617_pgfId-998607]##Added a paragraphin Section 16.3 allowing a
_WorkManager_ to enable access policy enforcement prior to _Work_
execution

[#50540617_pgfId-998612]##Corrected grammatical errors and typos in
Chapter 18

[#50540617_pgfId-998615]##Corrected in section 18.3.2 a mis-arrangement
of rules for merging DD and annotations

[#50540617_pgfId-998618]##Removed in section 18.4 the _specVersion_
annotation element and corrected defaults for array elements

[#50540617_pgfId-998642]##Clarified in Section 18.5 that the values of
_type_ is limited to the XML schema constraints and ensured that the
type of a field/method and the corresponding _ConfigProperty.type_ are
equal and updated Section 20.7 schema to reflect _specVersion_ related
changes

[#50540617_pgfId-998648]##Added a new Section 5.3.7.6 describing
Configuration Property attributes such as dynamically reconfigurable and
confidential parameters. Updated Section 18.5 and 20.7 to update
annotation and deployment descriptor equivalents for these attributes

[#50540617_pgfId-998649]##Added a new method that accepts a timeout
parameter to _MessageEndpointFactory.createMessageEndpoint_ in Section
13.3

[#50540617_pgfId-998650]##Defined retryable equivalents of
_UnavailableException_ and _WorkRejectedException_ and clarified their
usage in Section 10.3.3 and Section 13.3

[#50540617_pgfId-998652]##Clarified that the _@Connector_ annotated
JavaBean must implement the _ResourceAdapter_ interface in Section
18.4.1 and 18.4.2

[#50540617_pgfId-998653]##Defined the standard hint names as constants
in _HintsContext_ and explained their usage in Section 11.6.1

[#50540617_pgfId-998654]##Made the following clarifications in the
Connection and Transaction Management chapters ( Chapter 6 and 7 ) of
the spec

[#50540617_pgfId-998658]##Clarified, in Section 6.5.4.2 (in the section
detailing the “at most one active connection handle” scenario), when an
application server may modify active connection handles and clarified
behaviour of this scheme in the absence of Lazy Connection Association
support.

[#50540617_pgfId-998656]##Clarified that connections may not be portably
cached under Local Transaction Scenarios, in the absence of Lazy
Connection Association optimization, detailed in Section 7.10.3

[#50540617_pgfId-998662]##Clarified that the
_ManagedConnection.associateConnection_ method may be called to set the
same _ManagedConnection_ in Section 7.11.2

[#50540617_pgfId-998665]##Clarified that the
_DissociatableManagedConnection.dissociateConnections_ may be called
even when a transaction is in progress in Section 7.16.1

[#50540617_pgfId-998668]##Added a new Section 6.4.3 to provide
guidelines on how a connection handle should be obtained and used in
managed environments

[#50540617_pgfId-998683]##Added a new Section 1.5 that provides
guidelines on the relationship of the Connector Architecture with other
integration technologies such as JBI and SCA

[#50540617_pgfId-998552]##

image:conn-207.gif[image]

Public Review

[#50540617_pgfId-998513]##Added a requirement in Ch.20 Runtime
Environment to support Java SE 6.0. This is aligned with Section
EE.2.3.1 of the Java EE 6 ED

[#50540617_pgfId-998515]##Modified expert group member list in Section
1.7 to include Eugene and Jesper

[#50540617_pgfId-998516]##Modified Section 11.3 and 11.4 InflowContext
and InflowContext provider to extend _Serializable_

[#50540617_pgfId-998517]##Added sections 10.3.10 and 10.3.11 to address
distributed work processing

[#50540617_pgfId-998518]##Added section 5.3.7.5 capturing JSR 303
requirements

[#50540617_pgfId-998519]##Added JSR 303: Bean Validation to Appendix F:
Related documents

[#50540617_pgfId-998539]##Modified Section 13.4.2.2 to clarify that
JavaBean validation mechanisms are recommended to be used against the
_ActivationSpec.validate_ method and deprecate
_required-config-property_

[#50540617_pgfId-998521]##Added Chapter 18: Metadata annotations

[#50540617_pgfId-998522]##Added JSR175 and JSR 250 references in
Appendix F: Related Documents

[#50540617_pgfId-998523]##Added a new Section 7.14
TransactionSynchronizationRegistry to describe how a resource adapter
may get access to the _TransactionSynchronizationRegistry_

[#50540617_pgfId-998524]##Updated 4.1.6 to indicate application
assemblers may not result in a deployment descriptor when annotations
are used

[#50540617_pgfId-998525]##Added requirement for the container to merge
annotation and deployment descriptor information during configuration of
JavaBeans in Sections 5.3.7.1, 5.3.7.3 and 5.3.7.4

[#50540617_pgfId-998526]##Updated 6.3.1, 7.13, 7.15.2, 8.5.1, 8.6.1,
8.6.2, 8.6.5, 9.1.4.2, 9.1.5.1, 9.2.1, 11.4.1, 13.4.1, 13.4.2, 13.4.2.4,
13.4.3, 13.4.6, 13.4.7, 20.6.2, 20.6.3.1 to indicate use of annotations
and deployment descriptor elements for configuration.

[#50540617_pgfId-998527]##Clarified that there are new annotation based
equivalents for various deployment-descriptor elements in older sections
- Section 7.9, 13.7.2 for Resource annotation, Section 8.4 and 8.4.1 for
res-auth specification, Section 13.4.1, 13.7.1.1, B.1, B.2.1.1, B.2.1.2,
B.3, B.4, E.4 for endpoint annotations like MessageDriven

[#50540617_pgfId-998528]##Clarified about use of new metadata
annotations for resource adapter entities: Section 20.5.1 - @Connector
for ResourceAdapter, Section 20.5.2.1 @ConnectionDefinition for
ManagedConnectionFactory, Section20.5.3 for Configuration Properties,
Section 20.5.4 for Bean Validation, Section 21.3 and 21.3.1 for
SecurityPermission

[#50540617_pgfId-998529]##Clarified that the deployment descriptor is
optional. removed requirement in Section 20.2.0.1 that required the
bundling of a resource adapter deployment descriptor

[#50540617_pgfId-998530]##Clarified in Section 20.4, 20.4.1, 20.4.2,
20.4.2.3 that the deployment information may also be specified through
metadata annotations. clarified that the RA provider may provide
deployment information through the deployment descriptor

[#50540617_pgfId-998531]## 

[#50540617_pgfId-998512]##

image:conn-207.gif[image]

Early Draft

[#50540617_pgfId-998446]##Added new chapters. 11. Generic Inflow Context
and 16. Security Inflow

[#50540617_pgfId-998460]##Added the new system contracts, Generic Inflow
context and Security Inflow to Section 1.2 Scope and Section 3.1 System
Contracts

[#50540617_pgfId-998447]##Added a new Section 3.5 Standalone Connector
Environment

[#50540617_pgfId-998448]##Clarified ValidatingManagedConnectionFactory
usage in Section 6.5.3.4

[#50540617_pgfId-998449]##Clarified ConnectionEventListener concurrency
behaviour in Section 6.5.4.1

[#50540617_pgfId-998450]##Clarified local transaction related
requirements in section 7.10.1

[#50540617_pgfId-998451]##Added new section 7.13 Runtime Transaction
Support Level specification

[#50540617_pgfId-998453]##Clarified application server requirements in
light of section 7.13

[#50540617_pgfId-998452]##Added inactiveConnectionClosed method to
LazyAssociatableConnectionManager interface in section 7.15.1

[#50540617_pgfId-998454]##Clarified JNDI context availability in the
application server thread that invokes run and release methods on a
_Work_ instance in Section 10.3.2

[#50540617_pgfId-998455]##Clarified JMS and Generic Message Inflow
contracts relationship in sections 13.4.1 and 13.7

[#50540617_pgfId-998457]##Added ResourceAdapterAssociation related
requirements to administered objects in Section 13.4.2.3

[#50540617_pgfId-998458]##Corrected errors in the activation spec and
resource adapter classnames in the example in Section 13.8.3.1

[#50540617_pgfId-998459]##Added a new Section 19.3 Class Loading
Requirements

[#50540617_pgfId-998461]##Clarified resource adapter classloading in
application server requirements in Section 19.2.0.4 in light of Section
19.3

[#50540617_pgfId-998466]##Clarified ManagedConnectionFactory
creation/reuse in Section 19.6.3.3

[#50540617_pgfId-998468]##Added description of ActivationSpec’s
config-property element in section 13.4.2.2 and config-property
deployment descriptor element description for ActivationSpec in Section
19.4.1. added a config-property element in activationSpecType in Section
19.7

[#50540617_pgfId-998494]##Added admin object uniqueness requirements
under Administered object in Section 19.4.1 and added adminobject-type
uniqueness constraint in the XML schema in Section 19.7

[#50540617_pgfId-998491]##Added description of required-inflow-contexts
element in section 19.4.1 and addeda required-inflow-contexts element in
connectorType in Section 19.7

[#50540617_pgfId-998469]##Corrected minor typo in
LocalTransactionException section in Section 21.2.1

[#50540617_pgfId-998487]##Removed Security Inflow and making CCI
mandatory in a future release related items in Chapter 22

[#50540617_pgfId-998488]##Updated J2EE Platform specification references
to Java EE 6 Platform specification references in Appendix E

[#50540617_pgfId-998504]##Updated all appropriate J2SE references to
Java SE and J2EE references to Java EE

[#50540622_pgfId-998290]## 

[#50540622_pgfId-998684]## 

[#50540622_pgfId-998438]##

image:conn-208.gif[image]

Change History for Version 1.7

image:conn-209.gif[image]

[#50540622_pgfId-998445]##

image:conn-210.gif[image]

Maintenance Release 1

[#50540622_pgfId-998695]##General: Fixed sun.com and legacy URLs and
references to point to the latest specification and technology pages,
Updated Appendix E to reflect the latest technology versions in the Java
EE 7 Platform

{empty}[#50540622_pgfId-999174]##Added application component environment
namespace availability requirements during _endpointActivation_ and
_endpointDeactivation_ in link:conn.htm#50540559_71477[See Application
Server]

[#50540622_pgfId-999181]##Added requirements in
link:conn.htm#50540559_14276[See Message Inflow Model] for the
_MessageEndpointFactory_ to provide a name for the message endpoint
deployment it represents, and to provide the message endpoint class to a
resource adapter.

[#50540622_pgfId-998900]##Added a new section,
link:conn.htm#50540619_10882[See Resource Definition Annotations], to
discuss requirements around connection factory and administered object
resource definition annotations

[#50540622_pgfId-999166]##Errata: Removed the paragraph that made it
optional for an @Activation annotated JavaBean to implement the
_ActivationSpec_ interface (See link:conn.htm#50540619_28779[See
@Activation])

[#50540622_pgfId-998955]##Removed Appendix B “Activation Configuration
for Message Inflow to JMS Endpoints”. Chapter 12 of the
link:conn.htm#50540564_23037[See Java Message Service Specification,
version 2.0] defines the standard configuration elements for JMS
resource adapters

{empty}[#50540622_pgfId-999197]##Clarified the dependency injection
behavior when JavaBeans that are managed by the application server are
used as CDI Managed Beans in link:conn.htm#50540566_17637[See Dependency
Injection]

[#50540622_pgfId-999231]##Updated link:conn.htm#50540561_30009[See
Resource Adapter XML Schema Definition] to reflect the new 1.7 resource
adapter deployment descriptor and added a new
link:conn.htm#50540562_10645[See Java EE Connector Architecture 1.6
Resource Adapter XML XSD] to house the 1.6 resource adapter deployment
descriptor.

'''''

[.footnoteNumber]# 1.# [#50540556_pgfId-999522]##Application server is a
generic term used in this document to refer to a middle-tier component
server that is compliant with the Java 2 Platform, Enterprise Edition.

[.footnoteNumber]# 2.# [#50540558_pgfId-1001075]##The terms "JavaTM
Virtual Machine" and "JVM" mean a Virtual Machine for the JavaTM
platform.

[.footnoteNumber]# 3.# [#50540552_pgfId-1002725]##In this document, the
term ‘ _physical connection’_ refers to a _ManagedConnection_ instance,
while the term _‘connection handle’_ refers to an application-level
connection handle. When the distinction between ‘ _physical connection’_
and _‘connection handle’_ is not important, the term ‘connection’ is
used to refer to an EIS connection.

[.footnoteNumber]# 4.# [#50540572_pgfId-1000226]## An application server
may not share connections that are marked shareable, but still ensure
the portability of the transaction application across application
servers. For instance, the application server may choose to end XA
association of connections when control flows from one application
component to another, in order to avoid concurrent access problems on XA
Resource Managers, and thus provide single shared connection behavior.
